{"title":"","date":"2022-01-04T16:54:32.664Z","updated":"2022-01-04T16:46:48.517Z","comments":true,"path":"api/pages/source/code/yao2048.js","covers":null,"excerpt":"","content":"/**\n* height: 24 + 40 * 4 + 24 = 208\n* width: 40 * 4 = 160\n*/\n(function (window, document) {\n  var _2048 = function (parent) {\n    var outer = this.Component._dom('div');\n\n    var topView = this.Component._dom('div');\n    var gridView = this.Component._dom('div');\n    var bottomView = this.Component._dom('div');\n    var closeButton = this.Component._dom('div');\n    var grids = [];\n\n    for (var i = 0; i < 16; i++) {\n      var grid = this.Component.Grid();\n      grids.push(grid);\n      gridView.appendChild(grid);\n    }\n\n    outer.appendChild(topView);\n    outer.appendChild(gridView);\n    outer.appendChild(bottomView);\n    outer.appendChild(closeButton);\n    parent.appendChild(outer);\n\n    // ...\n\n    topView.style.cssText = \"\\\n      height: 24px;\\\n      width: 160px;\\\n      font-size: 16px;\\\n      padding: 0 4px;\\\n      user-select: none;\\\n      color: goldenrod;\\\n    \";\n    gridView.style.cssText = \"\\\n      height: 160px;\\\n      width: 160px;\\\n      display: grid;\\\n      grid-template-columns: 40px 40px 40px 40px;\\\n      user-select: none;\\\n    \";\n    bottomView.style.cssText = \"\\\n      height: 16px;\\\n      width: 160px;\\\n      color: lightgrey;\\\n      text-align: center;\\\n      font-size: 16px;\\\n      user-select: none;\\\n      padding: 4px 0;\\\n    \";\n    closeButton.style.cssText = \"\\\n      height: 16px;\\\n      width: 16px;\\\n      font-size: 16px;\\\n      line-height: 100%;\\\n      position: absolute;\\\n      top: 0;\\\n      right: 0;\\\n      user-select: none;\\\n      padding: 6px;\\\n      cursor: pointer;\\\n    \";\n    outer.style.cssText = \"\\\n      height: 208px;\\\n      width: 160px;\\\n      position: fixed;\\\n      top: calc(50% - 104px);\\\n      left: calc(50% - 80px);\\\n      background-color: aliceblue;\\\n      padding: 4px;\\\n      border-radius: 8px;\\\n      box-shadow: 0 0 12px 4px;\\\n      display: none;\\\n    \";\n\n    bottomView.innerHTML = \"Controls: &uarr; &darr; &larr; &rarr;\";\n    closeButton.innerHTML = \"&#9932;\";\n\n    // Initialize\n    var _self = this;\n    var isGameOver = false;\n    var points = 0;\n    var map = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0]\n    ];\n    var updatePointsLabel = function (points) {\n      topView.innerText = 'Points: ' + points;\n    };\n    var updatePanel = function () {\n      var index = 0;\n      for (var i = 0; i < 4; i++) {\n        for (var j = 0; j < 4; j++) {\n          grids[index++].setGrid(map[i][j]);\n        }\n      }\n    };\n    var resetGame = function () {\n      map = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ];\n      points = 0;\n      points += _self.Function.generateNewGrid(map);\n      isGameOver = false;\n      topView.style.color = 'goldenrod';\n      updatePointsLabel(points);\n      updatePanel();\n    };\n\n    points += this.Function.generateNewGrid(map); // never gameover/return 0 during initializing\n    updatePointsLabel(points);\n    updatePanel();\n\n    document.body.onkeydown = function (e) {\n      if (outer.style.display != 'none' && isGameOver == false) {\n        e.preventDefault();\n        var oldMap = _self.Function.copyMap(map);\n        if (e.keyCode == 39) { // arrow right\n          _self.Function.adjustRight(map);\n          points += _self.Function.doRight(map);\n          _self.Function.adjustRight(map);\n        } else if (e.keyCode == 37) { // arrow left\n          _self.Function.adjustLeft(map);\n          points += _self.Function.doLeft(map);\n          _self.Function.adjustLeft(map);\n        } else if (e.keyCode == 38) { // arrow up\n          _self.Function.adjustUp(map);\n          points += _self.Function.doUp(map);\n          _self.Function.adjustUp(map);\n        } else if (e.keyCode == 40) { // arrow down\n          _self.Function.adjustDown(map);\n          points += _self.Function.doDown(map);\n          _self.Function.adjustDown(map);\n        }\n        var movePoint = _self.Function.generateNewGrid(map);\n        if (_self.Function.isDifferent(oldMap, map)) { // if it's a valid move\n          if (movePoint != 0 && movePoint != -1 && movePoint != -2) { // if not gameover/2048get AND has new grid generated\n            points += movePoint;\n            updatePointsLabel(points);\n            updatePanel();\n          }\n        } else {\n          if (movePoint == -2) {\n            isGameOver = true;\n            topView.innerText = 'Win: ' + points;\n            topView.style.color = 'green';\n          } else if (movePoint == 0) {\n            isGameOver = true;\n            topView.innerText = 'Lost: ' + points;\n            topView.style.color = 'red';\n          }\n        }\n      }\n    };\n\n    closeButton.onclick = function () {\n      outer.style.display = 'none';\n      resetGame();\n    };\n\n    outer.show = function () {\n      this.style.display = 'block';\n    };\n\n    return outer;\n  };\n\n  _2048.prototype = {\n    constructor: _2048,\n    Function: {\n      isDifferent: function (oldMap, newMap) {\n        for (var i = 0; i < 4; i++) {\n          for (var j = 0; j < 4; j++) {\n            if (oldMap[i][j] != newMap[i][j]) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      copyMap: function (map) {\n        var newMap = [[], [], [], []];\n        for (var i = 0; i < 4; i++) {\n          for (var j = 0; j < 4; j++) {\n            newMap[i][j] = map[i][j];\n          }\n        }\n        return newMap;\n      },\n      nextNumber: function () {\n        return Math.random() > 0.7 ? 4 : 2;\n      },\n      countEmptyPosition: function (map) {\n        var counter = 0;\n        for (var i = 0; i < 4; i++) {\n          for (var j = 0; j < 4; j++) {\n            if (map[i][j] == 0) {\n              counter += 1;\n            }\n          }\n        }\n        return counter;\n      },\n      has2048: function (map) {\n        for (var i = 0; i < 4; i++) {\n          for (var j = 0; j < 4; j++) {\n            if (map[i][j] == 2048) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      checkGameOver: function (map) {\n        if (this.has2048(map)) {\n          return -2;\n        }\n        var numOfEmptyPosition = this.countEmptyPosition(map);\n        if (numOfEmptyPosition > 0) {\n          return this.nextPosition(numOfEmptyPosition);\n        } else {\n          for (var i = 0; i < 3; i++) {\n            for (var j = 0; j < 3; j++) {\n              if (map[i][j] == map[i][j + 1]) {\n                return -1;\n              }\n              if (map[i][j] == map[i + 1][j]) {\n                return -1;\n              }\n            }\n          }\n          if (map[3][3] == map[3][2] || map[3][3] == map[2][3]) {\n            return -1;\n          }\n        }\n        return 0;\n      },\n      nextPosition: function (numOfEmptyPosition) {\n        return Math.floor(Math.random() * numOfEmptyPosition + 1);\n      },\n      generateNewGrid: function (map) {\n        var point = 0;\n        var temp = this.checkGameOver(map);\n        if (temp == 0) {\n          console.log('gameover');\n          point = temp;\n        } else if (temp == -1) {\n          console.log('no next number');\n          point = temp;\n        } else if (temp == -2) {\n          console.log('2048 get');\n          point = temp;\n        } else {\n          var counter = 0;\n          for (var i = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n              if (map[i][j] == 0) {\n                counter += 1;\n                if (counter == temp) {\n                  point = this.nextNumber();\n                  map[i][j] = point;\n                }\n              }\n            }\n          }\n        }\n        return point; // 0 = gameover, -1 = no need to generate new grid, 2 or 4 = nextNumber(), -2 = 2048 get\n      },\n      adjustRight: function (map) {\n        for (var i = 0; i < 4; i++) {\n          for (var j = 3; j > 0; j--) {\n            var k = 1;\n            while (k < 4 && j - k >= 0 && map[i][j] == 0) {\n              map[i][j] = map[i][j - k];\n              map[i][j - k] = 0;\n              k += 1;\n            }\n          }\n        }\n      },\n      doRight: function (map) {\n        var point = 0;\n        for (var i = 0; i < 4; i++) {\n          for (var j = 3; j > 0; j--) {\n            if (map[i][j] == map[i][j - 1]) {\n              map[i][j] = map[i][j] + map[i][j - 1];\n              point += map[i][j - 1];\n              map[i][j - 1] = 0;\n            }\n          }\n        }\n        return point;\n      },\n      adjustLeft: function (map) {\n        for (var i = 0; i < 4; i++) {\n          for (var j = 0; j < 3; j++) {\n            var k = 1;\n            while (k < 4 && j + k <= 3 4 && map[i][j]=\"=\" 0) { + k]; map[i][j k]=\"0;\" k } }, doleft: function (map) var point=\"0;\" for (var i=\"0;\" < 4; i++) j=\"0;\" 3; j++) if (map[i][j]=\"=\" 1]) 1]; 1]=\"0;\" return point; adjustup: while (k map[j][i]=\"=\" k][i]; map[j k][i]=\"0;\" doup: (map[j][i]=\"=\" 1][i]) 1][i]; 1][i]=\"0;\" adjustdown:> 0; j--) {\n            var k = 1;\n            while (k < 4 && j - k >= 0 && map[j][i] == 0) {\n              map[j][i] = map[j - k][i];\n              map[j - k][i] = 0;\n              k += 1;\n            }\n          }\n        }\n      },\n      doDown: function (map) {\n        var point = 0;\n        for (var i = 0; i < 4; i++) {\n          for (var j = 3; j > 0; j--) {\n            if (map[j][i] == map[j - 1][i]) {\n              map[j][i] = map[j][i] + map[j - 1][i];\n              point += map[j - 1][i];\n              map[j - 1][i] = 0;\n            }\n          }\n        }\n        return point;\n      }\n    },\n    Component: {\n      _dom: function (string) {\n        return document.createElement(string);\n      },\n      Grid: function () {\n        var div = this._dom('div');\n        div.style.cssText = \"\\\n          width: 36px;\\\n          height: 36px;\\\n          margin: 2px;\\\n          font-size: 16px;\\\n          text-align: center;\\\n          line-height: 32px;\\\n          border-radius: 2px;\\\n          color: white;\\\n          position: relative;\\\n          background-color: wheat;\\\n        \";\n\n        div.setGrid = function (num) {\n          if (num == 0) {\n            this.style.backgroundColor = 'wheat';\n          } else if (num == 2) {\n            this.style.backgroundColor = 'powderblue';\n          } else if (num == 4) {\n            this.style.backgroundColor = 'yellowgreen';\n          } else if (num == 8) {\n            this.style.backgroundColor = 'turquoise';\n          } else if (num == 16) {\n            this.style.backgroundColor = 'thistle';\n          } else if (num == 32) {\n            this.style.backgroundColor = 'tan';\n          } else if (num == 64) {\n            this.style.backgroundColor = 'steelblue';\n          } else if (num == 128) {\n            this.style.backgroundColor = 'slategrey';\n          } else if (num == 256) {\n            this.style.backgroundColor = 'sandybrown';\n          } else if (num == 512) {\n            this.style.backgroundColor = 'coral';\n          } else if (num == 1024) {\n            this.style.backgroundColor = 'tomato';\n          } else {\n            this.style.backgroundColor = 'gold';\n          }\n          if (num != 0) {\n            this.innerText = num;\n          } else {\n            this.innerText = \"\";\n          }\n        };\n\n        return div;\n      }\n    }\n  };\n\n  window.Yao2048 = _2048;\n})(window, document);</=>"}