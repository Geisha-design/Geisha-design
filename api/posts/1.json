{"total":31,"pageSize":20,"pageCount":2,"data":[{"title":"不从游戏设计谈谈DEEMO","slug":"port从游戏设计谈DEEMO","date":"2022-01-04T10:00:04.000Z","updated":"2022-01-04T13:49:04.688Z","comments":true,"pin":null,"path":"api/articles/port从游戏设计谈DEEMO.json","excerpt":"<p>尽管《Deemo》只是一款手机音乐游戏，但我想只要提起它，很少有人会忘记。</p>\n<p>2013年11月，由雷亚制作的《Deemo》正式发布。作为一款音乐手游，《Deemo》的剧情并非无足轻重。相反的，由于主角“小黑人”与从天而降的“无名少女”充满神秘感，以及游戏里存在无解的“神秘代码”，令《Deemo》自发布之初就引发了无数玩家的好奇心。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-233f18fd8708ee9001706577b984412f_1440w.jpg\" alt=\"img\"></p>","keywords":null,"cover":"https://pic4.zhimg.com/80/v2-233f18fd8708ee9001706577b984412f_1440w.jpg","content":null,"text":"尽管《Deemo》只是一款手机音乐游戏，但我想只要提起它，很少有人会忘记。2013年11月，由雷亚制作的《Deemo》正式发布。作为一款音乐手游，《Deemo》的剧情并非无足轻重。相反的，由于主角“小黑人”与从天而降的“无名少女”充满神秘感，以及游戏里存在无解的“神秘代码”，令《","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"DEEMO LAYARK","slug":"DEEMO-LAYARK","count":1,"path":"api/tags/DEEMO-LAYARK.json"}]},{"title":"二阶常系数微分方程的解的问题","slug":"“微分方程”","date":"2021-11-30T10:43:45.000Z","updated":"2022-01-04T08:13:29.219Z","comments":true,"pin":null,"path":"api/articles/“微分方程”.json","excerpt":"<p>二阶常系数非齐次线性微分方程的表达式为y’’+py’+qy=f(x)，其特解y*设法分为：1.如果f(x)=P（x），Pn（x）为n阶多项式；2.如果f(x)=P（x）e^αx，Pn（x）为n阶多项式。</p>\n<p>二阶非齐次线性微分方程的特解</p>\n<p>1二阶常系数齐次线性微分方程</p>","keywords":null,"cover":null,"content":null,"text":"二阶常系数非齐次线性微分方程的表达式为y’’+py’+qy=f(x)，其特解y*设法分为：1.如果f(x)=P（x），Pn（x）为n阶多项式；2.如果f(x)=P（x）e^αx，Pn（x）为n阶多项式。二阶非齐次线性微分方程的特解1二阶常系数齐次线性微分方程<br>标准形式y″+","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"高数","slug":"高数","count":1,"path":"api/tags/高数.json"}]},{"title":"重新理解链表的节点与指针","slug":"（重新理解）”","date":"2021-11-17T11:29:24.000Z","updated":"2022-01-04T09:37:08.989Z","comments":true,"pin":null,"path":"api/articles/（重新理解）”.json","excerpt":"<p>下图为头指针与头结点以及首元结点的关系-0</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/01/3ab90c8563e3503e.jpg\"></p>\n<p>链表定义：c语言 </p>\n<p>typedef struct LinkList<br>{</p>\n<pre><code>     int Element;\n \n     LinkList * next;\n</code></pre>\n<p>}LinkList;</p>","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/01/3ab90c8563e3503e.jpg","content":null,"text":"下图为头指针与头结点以及首元结点的关系-0 [Figure] ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"c++","slug":"c","count":1,"path":"api/tags/c.json"}]},{"title":"冲突域和广播域","slug":"“冲突域和广播域”","date":"2021-11-07T07:07:36.000Z","updated":"2022-01-04T08:15:33.132Z","comments":true,"pin":null,"path":"api/articles/“冲突域和广播域”.json","excerpt":"<p>形象比喻：局域网好比一栋大楼，每个人（好比主机）有自己的房间（房间就好比网卡，房号就是物理地址，即MAC地址），里面的人（主机）人手一个对讲机，由于工作在同一频道，所以一个人说话，其他人都能听到，这就是广播（向所有主机发送信息包），只有目标才会回应，其他人虽然听见但是不理（丢弃包），而这些能听到广播的所有对讲机设备就够成了一个广播域。而这些对讲机就是集线器（HUB），每个对讲机都像是集线器上的端口，大家都知道对讲机在说话时是不能收听的，必须松开对讲键才能收听，这种同一时刻只能收或者发的工作模式就是半双工。而且对讲机同一时刻只能有一个人说话才能听清楚，如果两个或者更多的人一起说就会产生冲突，都没法听清楚，所以这就构成了一个冲突域。</p>","keywords":null,"cover":null,"content":null,"text":"形象比喻：局域网好比一栋大楼，每个人（好比主机）有自己的房间（房间就好比网卡，房号就是物理地址，即MAC地址），里面的人（主机）人手一个对讲机，由于工作在同一频道，所以一个人说话，其他人都能听到，这就是广播（向所有主机发送信息包），只有目标才会回应，其他人虽然听见但是不理（丢弃包","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"}]},{"title":"手冲豆种--洪都拉斯雪莉","slug":"“洪都拉斯雪莉”","date":"2021-09-30T15:13:03.000Z","updated":"2022-01-04T13:49:04.694Z","comments":true,"pin":null,"path":"api/articles/“洪都拉斯雪莉”.json","excerpt":"<p>【洪都拉斯· 雪莉】</p>\n<p>国家：洪都拉斯</p>\n<p>产区：马萨瓜拉</p>\n<p>庄园：莫卡庄园</p>\n<p>海拔：1500-1700m</p>\n<p>品种：卡杜拉、卡杜艾、帕卡斯</p>\n<p>处理法：精致水洗威士忌雪莉酒桶发酵</p>","keywords":null,"cover":"https://inews.gtimg.com/newsapp_bt/0/10013988871/1000","content":null,"text":"【洪都拉斯· 雪莉】国家：洪都拉斯产区：马萨瓜拉庄园：莫卡庄园海拔：1500-1700m品种：卡杜拉、卡杜艾、帕卡斯处理法：精致水洗威士忌雪莉酒桶发酵 [Figure] 风味:闻起来有香草、奶油的香气，入口有威士忌、莓果、杏仁、黑巧克力风味，余韵有枫糖的回甘。","link":"","raw":null,"photos":[],"categories":[{"name":"coffee","slug":"coffee","count":2,"path":"api/categories/coffee.json"}],"tags":[{"name":"coffee","slug":"coffee","count":2,"path":"api/tags/coffee.json"}]},{"title":"咖啡入门浅析","slug":"“咖啡入门浅析”","date":"2021-09-22T05:21:23.000Z","updated":"2022-01-04T08:18:44.333Z","comments":true,"pin":null,"path":"api/articles/“咖啡入门浅析”.json","excerpt":"<p>当前时代也可以说是咖啡的时代，虽然我们的日常生活中充斥着各种各样的咖啡，但其实我们也许对一杯咖啡风味的基本构成都不甚了解，此文章为鄙人对咖啡风味构成的一些浅薄的认识。</p>","keywords":null,"cover":"https://v2.coffeecdn.com/uploads/allimg/151106/1R1593H7-0.jpg","content":null,"text":"当前时代也可以说是咖啡的时代，虽然我们的日常生活中充斥着各种各样的咖啡，但其实我们也许对一杯咖啡风味的基本构成都不甚了解，此文章为鄙人对咖啡风味构成的一些浅薄的认识。一杯成品咖啡的构成可以分为以下几点1.豆种2.处理法3烘培方式4冲泡方式5辅料配比1.先从豆种说起。咖啡属于茜草科","link":"","raw":null,"photos":[],"categories":[{"name":"coffee","slug":"coffee","count":2,"path":"api/categories/coffee.json"}],"tags":[{"name":"coffee","slug":"coffee","count":2,"path":"api/tags/coffee.json"}]},{"title":"深入理解全微分","slug":"port“深入理解全微分”","date":"2021-08-22T07:12:51.000Z","updated":"2022-01-04T13:49:04.691Z","comments":true,"pin":null,"path":"api/articles/port“深入理解全微分”.json","excerpt":"<p>一元函数微分很容易理解，直观，但是推广到多维后，尽管教科书给出了严格定义，但总觉得中间有道坎，想不明白。本文用图形帮助大家直观理解全微分。</p>\n<ol>\n<li>一元可微函数：</li>\n</ol>\n<p>如果一元函数可微，则<strong>利用直线代替曲线估计函数值的变化</strong>，得到，</p>","keywords":null,"cover":"https://pic3.zhimg.com/80/v2-b16754655d1f1ad0d73414ec070ca442_1440w.jpg","content":null,"text":"一元函数微分很容易理解，直观，但是推广到多维后，尽管教科书给出了严格定义，但总觉得中间有道坎，想不明白。本文用图形帮助大家直观理解全微分。一元可微函数：如果一元函数可微，则利用直线代替曲线估计函数值的变化，得到， [Figure] 3.结论全微分是用切平面代替曲面全微分要求所有方","link":"","raw":null,"photos":[],"categories":[{"name":"高等数学","slug":"高等数学","count":3,"path":"api/categories/高等数学.json"}],"tags":[]},{"title":"格林公式","slug":"port格林公式","date":"2021-08-22T07:08:03.000Z","updated":"2022-01-04T13:49:04.691Z","comments":true,"pin":null,"path":"api/articles/port格林公式.json","excerpt":"<p>众所周知，格林公式作为KO与路径无关的第二类曲线积分的杀招，是秀的。但至于<strong>为什么适用于路径无关的情况、路径无关的判据为什么是 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D=%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D++\" alt=\"[公式]\"> ，为什么线积分能够等效成一个二重积分</strong>。很多人一脸黑人问号。</p>","keywords":null,"cover":"https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D=%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D++","content":null,"text":"众所周知，格林公式作为KO与路径无关的第二类曲线积分的杀招，是秀的。但至于为什么适用于路径无关的情况、路径无关的判据为什么是  [Figure] 最后，再来几个反思煜神问：1，格林公式处理第二类曲线积分，路径无关怎么理解？再回顾一下本文内容。2，使用格林公式时曲线为什么要封闭？不","link":"","raw":null,"photos":[],"categories":[{"name":"高等数学","slug":"高等数学","count":3,"path":"api/categories/高等数学.json"}],"tags":[]},{"title":"主题字体的修改","slug":"port“字体”","date":"2021-08-21T13:30:30.000Z","updated":"2022-01-04T13:49:04.690Z","comments":true,"pin":null,"path":"api/articles/port“字体”.json","excerpt":"<p>起因：思源宋体真的很好看<br>需求：将 blog 的标题与正文修改为思源宋体<br>tips：每一步的目的都是猜的，用词对不对我也不知道，大概理会中心思想就好</p>","keywords":null,"cover":null,"content":null,"text":"起因：思源宋体真的很好看<br>需求：将 blog 的标题与正文修改为思源宋体<br>tips：每一步的目的都是猜的，用词对不对我也不知道，大概理会中心思想就好步骤：在 Adobe Typekit 网站上注册账号，并且打包字体网址为：Adobe Typekit<br>这一步可以让","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"DNS系统详细解析","slug":"“dns系统详细解析”","date":"2021-06-18T12:47:07.000Z","updated":"2022-01-04T13:49:04.693Z","comments":true,"pin":null,"path":"api/articles/“dns系统详细解析”.json","excerpt":"<p>DNS系统概述：域名系统DNS（domain name system）是因特网使用的命名系统，用来把便于人们记忆的含有特定含义的主机名转换为便于机器处理的IP地址，值得注意的是，DNS系统采用C/S架构，其协议运行在UDP之上，使用53号端口。DNS分为三个部分，层次域名空间，域名服务器和解析器。层次域名空间：因特网采用层次树状结构的命名方法。任何一个连接在因特网上的主机或者路由器，都有一个唯一的层次结构的名字，即域名（Domain。</p>","keywords":null,"cover":"https://img-blog.csdnimg.cn/20181227145035233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FhMTkyODk5Mjc3Mg==,size_16,color_FFFFFF,t_70","content":null,"text":"DNS系统概述：域名系统DNS（domain name system）是因特网使用的命名系统，用来把便于人们记忆的含有特定含义的主机名转换为便于机器处理的IP地址，值得注意的是，DNS系统采用C/S架构，其协议运行在UDP之上，使用53号端口。DNS分为三个部分，层次域名空间，域","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"}]},{"title":"计算机文件系统","slug":"“计算机文件系统”","date":"2021-04-24T08:45:00.000Z","updated":"2022-01-04T13:49:04.696Z","comments":true,"pin":null,"path":"api/articles/“计算机文件系统”.json","excerpt":"<p>文件系统的基本组成：</p>\n<p>文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。</p>\n<p>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。</p>","keywords":null,"cover":"https://pic2.zhimg.com/v2-9d77e25913894df26b0374ceae25c605_r.jpg","content":null,"text":"文件系统的基本组成：文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不","link":"","raw":null,"photos":[],"categories":[{"name":"计算机常识","slug":"计算机常识","count":1,"path":"api/categories/计算机常识.json"}],"tags":[]},{"title":"幂级数的本质","slug":"“幂级数的本质”","date":"2021-04-22T12:24:44.000Z","updated":"2022-01-04T13:49:04.695Z","comments":true,"pin":null,"path":"api/articles/“幂级数的本质”.json","excerpt":"<h1 id=\"级数（幂级数）\"><a href=\"#级数（幂级数）\" class=\"headerlink\" title=\"级数（幂级数）\"></a>级数（幂级数）</h1><h2 id=\"回到梦开始的地方\"><a href=\"#回到梦开始的地方\" class=\"headerlink\" title=\"回到梦开始的地方\"></a>回到梦开始的地方</h2><p>在一元函数微积分的世界中，我们沿着极限、导数、微分、积分的路已经走出了一段路。</p>","keywords":null,"cover":"https://www.zhihu.com/equation?tex=T=%5Cfrac%7B90%7D%7B10%7D+%5Cfrac%7B9%7D%7B10%7D+%5Cfrac%7B0.9%7D%7B10%7D+...","content":null,"text":"级数（幂级数）回到梦开始的地方在一元函数微积分的世界中，我们沿着极限、导数、微分、积分的路已经走出了一段路。 这时候回头看我们在第一篇《从极限开始》中介绍的芝诺悖论，你是否还记得计算阿喀琉斯追赶上乌龟所需要的时间的表达式： [Figure] 从下一篇文章开始，在将微积分从一元函数","link":"","raw":null,"photos":[],"categories":[{"name":"高等数学","slug":"高等数学","count":3,"path":"api/categories/高等数学.json"}],"tags":[]},{"title":"坂本龙一先生对我的影响","slug":"“坂本龙一先生对我的影响”","date":"2021-04-16T15:40:31.000Z","updated":"2022-01-04T13:49:04.695Z","comments":true,"pin":null,"path":"api/articles/“坂本龙一先生对我的影响”.json","excerpt":"<p>硬要说影响几乎没有，自然流露的就是最好的，他的通透就是我繁琐俗常生活的一面自我之象吧。</p>\n<p>不忘记看每天的月亮，直至生命燃尽：坂本龙一68岁了</p>","keywords":null,"cover":"https://pic1.zhimg.com/50/v2-2998f7738c6c2ad054171d8d233a67a8_hd.jpg?source=1940ef5c","content":null,"text":"硬要说影响几乎没有，自然流露的就是最好的，他的通透就是我繁琐俗常生活的一面自我之象吧。不忘记看每天的月亮，直至生命燃尽：坂本龙一68岁了 《坂本龙一：终曲》正在中国上映，导演史蒂芬从2012年到2017年，5年跟拍制作，完成这部关于坂本龙一的纪录片。豆瓣上3万5千人看过，打出8.","link":"","raw":null,"photos":[],"categories":[{"name":"生活","slug":"生活","count":1,"path":"api/categories/生活.json"}],"tags":[{"name":"艺术家","slug":"艺术家","count":1,"path":"api/tags/艺术家.json"}]},{"title":"四种JavaEE架构简介","slug":"四种JavaEE架构简介","date":"2020-11-29T12:05:25.000Z","updated":"2022-01-04T13:49:04.694Z","comments":true,"pin":null,"path":"api/articles/四种JavaEE架构简介.json","excerpt":"<p>传统三层架构</p>\n<p>配图是一个基于MVC的三层架构, 大致可以分成表现层, 业务层和持久层。表现层负责接收请求和转发请求。业务层主要负责处理请求, 值得注意的是事务管理, 日志记录等操作通常也是封装在这层中。持久层主要负责数据库与实体之间的操作，我们可以使用框架来简化各层的开发, 例如表现层使用SpringMVC或Strut2, 持久层使用Mybatis或Hibernate, 使用Spring管理三层之间的关系</p>","keywords":null,"cover":"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105155049-481908758.png","content":null,"text":"传统三层架构配图是一个基于MVC的三层架构, 大致可以分成表现层, 业务层和持久层。表现层负责接收请求和转发请求。业务层主要负责处理请求, 值得注意的是事务管理, 日志记录等操作通常也是封装在这层中。持久层主要负责数据库与实体之间的操作，我们可以使用框架来简化各层的开发, 例如表","link":"","raw":null,"photos":[],"categories":[{"name":"java","slug":"java","count":2,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}]},{"title":"kmp算法解析","slug":"kmp算法解析","date":"2020-11-19T12:33:03.000Z","updated":"2022-01-04T13:49:04.692Z","comments":true,"pin":null,"path":"api/articles/kmp算法解析.json","excerpt":"<p>有些算法，适合从它产生的动机，如何设计与解决问题这样正向地去介绍。但KMP算法真的不适合这样去学。最好的办法是先搞清楚它所用的数据结构是什么，再搞清楚怎么用，最后为什么的问题就会有恍然大悟的感觉。我试着从这个思路再介绍一下。大家只需要记住一点，PMT是什么东西。然后自己临时推这个算法也是能推出来的，完全不需要死记硬背。</p>","keywords":null,"cover":"https://pic1.zhimg.com/50/v2-e905ece7e7d8be90afc62fe9595a9b0f_hd.jpg?source=1940ef5c","content":null,"text":"有些算法，适合从它产生的动机，如何设计与解决问题这样正向地去介绍。但KMP算法真的不适合这样去学。最好的办法是先搞清楚它所用的数据结构是什么，再搞清楚怎么用，最后为什么的问题就会有恍然大悟的感觉。我试着从这个思路再介绍一下。大家只需要记住一点，PMT是什么东西。然后自己临时推这个","link":"","raw":null,"photos":[],"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}]},{"title":"数据结构之栈Stack和队列Queue","slug":"数据结构之栈Stack和队列Queue","date":"2020-04-23T14:06:03.000Z","updated":"2020-05-08T14:06:03.000Z","comments":true,"pin":null,"path":"api/articles/数据结构之栈Stack和队列Queue.json","excerpt":"<p>栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。</p>","keywords":null,"cover":"/.com//data-structure-stack.png","content":null,"text":"栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。栈Stack栈Stack是一种线性结构，是线性表的一种具体形式。栈这种后进先出（Last In First Out，LIFO）的应用非常广泛，例如网页的前进后退功能，编辑器的后一步前一步功能，方法调","link":"","raw":null,"photos":[],"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"Stack","slug":"Stack","count":1,"path":"api/tags/Stack.json"},{"name":"Queue","slug":"Queue","count":1,"path":"api/tags/Queue.json"}]},{"title":"数据结构之线性表List","slug":"数据结构之线性表List","date":"2020-04-20T08:20:49.000Z","updated":"2020-04-23T08:20:49.000Z","comments":true,"pin":null,"path":"api/articles/数据结构之线性表List.json","excerpt":"<p>线性表（List），了解线性表的基础知识，认识一下线性表的种类。</p>","keywords":null,"cover":"/.com//data-structure-linked-list-normal.png","content":null,"text":"线性表（List），了解线性表的基础知识，认识一下线性表的种类。线性表List线性表（List）：由另个或多个元素组成的有限序列。元素是有序的，可以被排列的。在有序结构中，某个元素ai前面的元素ai-1称为前驱元素，后面的元素ai+1称为后继元素。在Java语言中，数组（Arra","link":"","raw":null,"photos":[],"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"线性表","slug":"线性表","count":1,"path":"api/tags/线性表.json"},{"name":"List","slug":"List","count":1,"path":"api/tags/List.json"}]},{"title":"算法之基础","slug":"算法之基础","date":"2020-04-18T08:21:21.000Z","updated":"2020-04-19T08:21:21.000Z","comments":true,"pin":null,"path":"api/articles/算法之基础.json","excerpt":"<p>算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。</p>","keywords":null,"cover":null,"content":null,"text":"算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。算法特性输入：可以有零个或多个参数输出：必须有一个或多个结果有穷性：算法必须会结束，没有无限循环确定性：有唯一结果可行性：算法每一步都能通过执行有限次数完成算法设计要求正确性：算法至少具有输入、输出和过程明确的加工处理，","link":"","raw":null,"photos":[],"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"},{"name":"Big O","slug":"Big-O","count":1,"path":"api/tags/Big-O.json"}]},{"title":"数据结构之基础","slug":"数据结构之基础","date":"2020-04-18T08:20:49.000Z","updated":"2020-04-20T08:20:49.000Z","comments":true,"pin":null,"path":"api/articles/数据结构之基础.json","excerpt":"<p>数据结构基础，了解数据结构的分类，认识一下抽象数据类。</p>","keywords":null,"cover":"/.com//data-structure-random-linked-ram.png","content":null,"text":"数据结构基础，了解数据结构的分类，认识一下抽象数据类。顺序结构内存中元素紧挨在一起的数据结构为顺序结构。在C语言中，声明一个整数结构类型长度为5的数组时，内存中会留出5个整数长度的连续空间用于存储数组。实际上，数组的指针可以说是指向在数组中的第一个元素。当要修改第4个元素时，计算","link":"","raw":null,"photos":[],"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"},{"name":"抽象数据类","slug":"抽象数据类","count":1,"path":"api/tags/抽象数据类.json"}]},{"title":"Hexo主题Mustom使用指南（对应主题1.0版）","slug":"Hexo主题Mustom使用指南","date":"2020-04-15T05:56:45.000Z","updated":"2020-04-15T05:56:45.000Z","comments":true,"pin":null,"path":"api/articles/Hexo主题Mustom使用指南.json","excerpt":"<ul>\n<li>本主题<a href=\"//github.com/jinyaoMa/hexo-theme-mustom\">Mustom</a>是我参考了卡片式和窗口展示的样式设计的Hexo主题。</li>\n<li>本主题通过大量的replaceWith函数和PJAX来加载，而且用了Live2D的插件，初始加载时回流特别厉害。</li>\n<li>本主题可以衍生一个CSS的框架，但是作者本人目前还是在给每个组件都弄一个单独的样式表。</li>\n<li>本主题把各类资源文件都分门别类了，在以后添加内容方面应该还是较方便的。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"本主题Mustom是我参考了卡片式和窗口展示的样式设计的Hexo主题。本主题通过大量的replaceWith函数和PJAX来加载，而且用了Live2D的插件，初始加载时回流特别厉害。本主题可以衍生一个CSS的框架，但是作者本人目前还是在给每个组件都弄一个单独的样式表。本主题把各类","link":"","raw":null,"photos":[],"categories":[{"name":"Hexo","slug":"Hexo","count":3,"path":"api/categories/Hexo.json"}],"tags":[{"name":"Mustom","slug":"Mustom","count":1,"path":"api/tags/Mustom.json"}]}]}