{"title":"数据结构之基础","slug":"数据结构之基础","date":"2020-04-18T08:20:49.000Z","updated":"2020-04-20T08:20:49.000Z","comments":true,"path":"api/articles/数据结构之基础.json","photos":[],"link":"","excerpt":"数据结构基础，了解数据结构的分类，认识一下抽象数据类。","covers":["/.com//data-structure-random-linked-ram.png"],"content":"<p>数据结构基础，了解数据结构的分类，认识一下抽象数据类。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h1><p><strong>内存中元素紧挨在一起的数据结构为顺序结构</strong>。在C语言中，声明一个整数结构类型长度为<code>5</code>的数组时，内存中会留出5个整数长度的连续空间用于存储数组。实际上，数组的指针可以说是指向在数组中的第一个元素。当要修改第4个元素时，计算机是找到了数组指针地址，跳跃3个整数长度的距离，从而找到第4个元素的位置。</p>\n<h1 id=\"链式结构\"><a href=\"#链式结构\" class=\"headerlink\" title=\"链式结构\"></a>链式结构</h1><p><strong>内存中元素可连续也可不连续，通过指针寻找和连接元素的数据结构为链式结构</strong>。在Java语言中，链表（Linked List）和树（Tree）都属于链式结构。他们属于抽象的结构类型，类型所包含的元素被称为节点（Node）。链表节点中的值可以为整数类、浮点类、字符串等，包括抽象数据类；但链表节点中还会包含有节点的一个后继元素指针。树节点对比链表节点的不同在于树节点中可以包含有多个后继元素指针。总结起来就是<strong>链式结构节点在内存中连续摆放不是必须的</strong>，当计算机查找某个节点时，会走遍目标节点前的所有节点，从而顺着第一个节点的指针找到目标指针。</p>\n<h1 id=\"比较顺序结构和链式结构\"><a href=\"#比较顺序结构和链式结构\" class=\"headerlink\" title=\"比较顺序结构和链式结构\"></a>比较顺序结构和链式结构</h1><p><img src=\"/.com//data-structure-random-linked-ram.png\" alt=\"顺序结构和链式结构在内存中的不同\"></p>\n<ul>\n<li>顺序结构在内存中有固定最大长度，而链式结构在内存中没有，所以在流动数据多的情况下，链式结构对空间利用更灵活。</li>\n<li>顺序结构在内存中是元素之间是连续的，而链式结构在内存中很可能是不连续的，所以在查找元素时，通过地址计算公式查找，顺序结构的效率更高。</li>\n<li>在首部添加元素或删除中间某个元素的情况下，链式结构的效率会更高，因为对比顺序结构，链式结构不需要重新排列。</li>\n<li>顺序结构最大长度难以确定的情况下，会产生太多的储存空间“碎片”，而链式结构原本就是“碎片化”的。</li>\n</ul>\n<h1 id=\"C语言数据类型\"><a href=\"#C语言数据类型\" class=\"headerlink\" title=\"C语言数据类型\"></a>C语言数据类型</h1><p>原子/基本类型：short, int, long, float, double, char<br>结构/构造类型：数组, struct, union, enum<br>其他：指针，空（void）</p>\n<h1 id=\"抽象数据类型（Abstract-Data-Type）\"><a href=\"#抽象数据类型（Abstract-Data-Type）\" class=\"headerlink\" title=\"抽象数据类型（Abstract Data Type）\"></a>抽象数据类型（Abstract Data Type）</h1><p>区别于基本数据类型，基本数据类型有设定数据占用空间的极限、数据表示的方式和内存中结构的特性；抽象数据类型基于基本数据类型形成更复杂的数据类型，例如链表（Linked List）和树（Tree）都属于抽象数据类。颜色（Color）、坐标（Point）等结构类也都属于抽象数据类。</p>\n<blockquote>\n<p>所谓抽象数据类型就是把数据类型和相关操作捆绑在一起。</p>\n</blockquote>\n<p>Color抽象数据类:<br>由Red、Green和Blue，3个范围为0-255的整数值表示颜色范围，加上一个范围为0-1的浮点型Alpha数值表示透明度。</p>\n<p>Point抽象数据类:<br>由x、y和z，3个整数值表示三维空间中的坐标。</p>\n<h1 id=\"抽象数据类型伪代码\"><a href=\"#抽象数据类型伪代码\" class=\"headerlink\" title=\"抽象数据类型伪代码\"></a>抽象数据类型伪代码</h1><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADT 抽象数据类型名</span><br><span class=\"line\">Data</span><br><span class=\"line\">  数据元素之间逻辑关系的定义</span><br><span class=\"line\">Operation</span><br><span class=\"line\">  操作</span><br><span class=\"line\">endADT</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>本文参考：<br><a href=\"https://www.bilibili.com/video/BV1jW411K7yg\">【C语言描述】《数据结构和算法》（小甲鱼）</a></p>\n</blockquote>\n","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"},{"name":"抽象数据类","slug":"抽象数据类","count":1,"path":"api/tags/抽象数据类.json"}]}