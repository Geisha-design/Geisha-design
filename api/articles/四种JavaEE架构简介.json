{"title":"四种JavaEE架构简介","slug":"四种JavaEE架构简介","date":"2020-11-29T12:05:25.000Z","updated":"2022-01-04T13:49:04.694Z","comments":true,"path":"api/articles/四种JavaEE架构简介.json","photos":[],"link":"","excerpt":"传统三层架构配图是一个基于MVC的三层架构, 大致可以分成表现层, 业务层和持久层。表现层负责接收请求和转发请求。业务层主要负责处理请求, 值得注意的是事务管理, 日志记录等操作通常也是封装在这层中。持久层主要负责数据库与实体之间的操作，我们可以使用框架来简化各层的开发, 例如表现层使用SpringMVC或Strut2, 持久层使用Mybatis或Hibernate, 使用Spring管理三层之间的关系","covers":["https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105155049-481908758.png","https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829103451096-37051288.png","https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104315263-150430733.png","https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104515114-760628485.png","https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105440188-18517504.png","https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105514263-1906080560.png","https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105035906-521553459.png"],"content":"<p>传统三层架构</p>\n<p>配图是一个基于MVC的三层架构, 大致可以分成表现层, 业务层和持久层。表现层负责接收请求和转发请求。业务层主要负责处理请求, 值得注意的是事务管理, 日志记录等操作通常也是封装在这层中。持久层主要负责数据库与实体之间的操作，我们可以使用框架来简化各层的开发, 例如表现层使用SpringMVC或Strut2, 持久层使用Mybatis或Hibernate, 使用Spring管理三层之间的关系 <span id=\"more\"></span></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105155049-481908758.png\" alt=\"img\"></p>\n<p>集群架构</p>\n<p>集群属于水平拓展.</p>\n<p>传统三层架构中存在许多问题, 比如业务层中不同模块占用系统资源的比例相差太大, 导致占用系统资源, 可以使用集群解决这类问题.</p>\n<p>在集群架构, 一般由这么一个重要的角色, 那就是反向代理服务器, 它的主要任务是实现负载均衡, 接收用户请求, 转发到目标服务器.</p>\n<p>反向代理服务器可以使用nginx实现.</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829103451096-37051288.png\" alt=\"img\"></p>\n<h1 id=\"分布式架构\"><a href=\"#分布式架构\" class=\"headerlink\" title=\"分布式架构\"></a>分布式架构</h1><p>多个模块完成一个功能.</p>\n<p>每个模块都可以搭建集群 -&gt; 高可用</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104315263-150430733.png\" alt=\"img\"></p>\n<p> 微服务架构</p>\n<p>根据产品的业务功能模块来划分服务的种类, 这属于垂直划分.</p>\n<p>客户端可以通过基于HTTP或RPC的方式来调用微服务, 这样做的目的是为了降低调用所产生的性能开销.</p>\n<p>每个模块也可搭建集群 -&gt; 高可用</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104515114-760628485.png\" alt=\"img\"></p>\n<p>三种轻量级API调用服务 - 使用service gateway和service register实现客户端与微服务之间的调用(实现通信)</p>\n<p>SOA实现两个系统之间通信的三种方式</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105440188-18517504.png\" alt=\"img\"></p>\n<p>dubbo体系结构:</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105514263-1906080560.png\" alt=\"img\"></p>\n<p>一个典型的基于SOA的电商项目架构:</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105035906-521553459.png\" alt=\"img\"></p>\n","categories":[{"name":"java","slug":"java","count":2,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}]}