<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gallery Post Not Supported</title>
    <url>/2020/02/22/Gallery-Post-Not-Supported/</url>
    <content><![CDATA[<p>Theme <a href="//github.com/jinyaoMa/hexo-theme-mustom">Mustom</a> does NOT SUPPORT variable <code>photos</code> in front-matter.</p>
<span id="more"></span>

<p>GALLERY POST NOT SUPPORTTED!!!</p>
<p><img src="//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-2572384.jpg" alt="Widescreen wallpaper"><br><img src="//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-2311325.jpg" alt="Portrait photo"><br><img src="//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-878514.jpg" alt="Dual widescreen wallpaper"><br><img src="//placehold.it/350x150.jpg" alt="Small photo"></p>
<p>This post contains 4 photos:</p>
<ul>
<li>Widescreen wallpaper</li>
<li>Portrait photo</li>
<li>Dual widescreen wallpaper</li>
<li>Small photo</li>
</ul>
<p>All photos should be displayed properly.</p>
<p><em>From <a href="//wallbase.cc">Wallbase.cc</a></em></p>
<blockquote>
<p>Original Post from <a href="//github.com/hexojs/hexo-theme-unit-test">Hexo Theme Unit Test</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP是什么？</title>
    <url>/2020/04/10/HTTP%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>HTTP是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍。</p>
<span id="more"></span>

<p><strong>先来个更好的文章做参考：<a href="//www.cnblogs.com/an-wen/p/11180076.html">HTTP协议超级详解</a></strong></p>
<h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h1><p>HTTP属于TCP/IP中的“顶层”应用层，这说明HTTP的包装是数据出发前的第一步。在这里不谈TCP相关连接过程，但是HTTP请求/响应都是要在连接之后的事；想看的话，可以看<a href="//www.cnblogs.com/kaleidoscope/p/9701117.html">TCP三次握手详解及释放连接过程</a>。基本上HTTP就是请求和响应的模式，在服务方想理你客户方的情况下，你想要什么，她都会回应你。</p>
<p>HTTP请求方法：</p>
<ul>
<li>GET，一般请求的数据都是不需要处理的数据</li>
<li>HEAD，获取metadata，打个比方就是电脑上文件右键属性</li>
<li>POST，一般请求的数据都是需要处理的数据</li>
<li>PUT，像数据库的INSERT</li>
<li>DELETE，像数据库的DELETE</li>
<li>PATCH，像数据库的UPDATE</li>
<li>还有TRACE、OPTIONS、CONNECT</li>
</ul>
<p>HTTP状态码：</p>
<ul>
<li>100及以上，普通的信息代码</li>
<li>200及以上，请求成功被处理</li>
<li>300及以上，请求被重定向了</li>
<li>400及以上，这是客户方的错</li>
<li>500及以上，这是服务方的错</li>
</ul>
<h2 id="HTTP请求-响应报文结构"><a href="#HTTP请求-响应报文结构" class="headerlink" title="HTTP请求/响应报文结构"></a>HTTP请求/响应报文结构</h2><p><img src="/gallery/http-request-format.png" alt="HTTP请求报文结构"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html">HTTP协议超级详解</a></em></p>
<p><img src="/gallery/http-request-example.jpg" alt="HTTP请求报文例子"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html">HTTP协议超级详解</a></em></p>
<p><img src="/gallery/http-response-format.png" alt="HTTP响应报文结构"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html">HTTP协议超级详解</a></em></p>
<p><img src="/gallery/http-response-example.jpg" alt="HTTP响应报文例子"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html">HTTP协议超级详解</a></em></p>
<h2 id="比较HTTP-1-1和HTTP-2"><a href="#比较HTTP-1-1和HTTP-2" class="headerlink" title="比较HTTP/1.1和HTTP/2"></a>比较HTTP/1.1和HTTP/2</h2><ul>
<li>HTTP/2在一次TCP连接中可以同时发送多个请求，多行程减少了连接次数和响应的等待时间</li>
<li>HTTP/2压缩头部信息，包裹更小，运输更方便</li>
<li>HTTP/2使用二进制协议，不仅节省了不少分隔符和封箱胶带，还可以分成小份包装以数据流形式发送</li>
<li>HTTP/2允许服务端推送，一次请求把相关依赖的脚本也给客户端一起发来，很人性化</li>
</ul>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>在HTTP包装外再来个SSL/TLS加密包装，HTTPS有以下特点：</p>
<ol>
<li>内容加密，传输过程中使用的密文</li>
<li>验证身份，找到对的服务端</li>
<li>保护数据完整性，防止传输过程中被动手脚</li>
</ol>
<p>基本上传输中的数据不易被动手脚。</p>
<p><strong><em>更多可以百度HTTP、HTTPS、TCP连接等。</em></strong></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Helpful Links</title>
    <url>/2018/12/05/Helpful-Links/</url>
    <content><![CDATA[<p>Helpful Links</p>
<span id="more"></span>

<h3 id="Frameworkds"><a href="#Frameworkds" class="headerlink" title="Frameworkds"></a>Frameworkds</h3><p><a href="//docs.phonegap.com/">PhoneGap Documentation</a><br><a href="//api.jquery.com/">jQuery API Documentation</a><br><a href="//getbootstrap.com/docs/4.3/getting-started/introduction/">Bootstrap Documentation</a><br><a href="//codeigniter.com/user_guide/">CodeIgniter User Guide</a><br><a href="//laravel.com/docs/5.8">Laravel Documentation</a></p>
<h3 id="Game-Maker"><a href="#Game-Maker" class="headerlink" title="Game Maker"></a>Game Maker</h3><p><a href="//docs2.yoyogames.com/">Language Documentation</a></p>
<h3 id="HTML-CSS-JavaScript"><a href="#HTML-CSS-JavaScript" class="headerlink" title="HTML, CSS, JavaScript"></a>HTML, CSS, JavaScript</h3><p><a href="//www.w3schools.com/">W3schools Portal</a><br><a href="//www.csszengarden.com/">CSS Zen Garden</a><br><a href="//www.cssdrive.com/imagepalette/index.php">Color Pallete Generator</a><br><a href="//validator.w3.org/">HTML Validator</a><br><a href="//jigsaw.w3.org/css-validator/">CSS Validator</a><br><a href="//developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">JavaScript Guide</a></p>
<h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><p><a href="//docs.microsoft.com/en-us/dotnet/visual-basic/">VB Documentation - Microsoft</a><br><a href="//docs.microsoft.com/en-us/dotnet/csharp/">C# Documentation - Microsoft</a><br><a href="//docs.microsoft.com/en-us/aspnet/">ASP.NET Documentation - Microsoft</a></p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><a href="//www.php.net/docs.php">Language Documentation</a></p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="//docs.oracle.com/javase/8/docs/api/">Language Documentation</a><br><a href="//docs.oracle.com/javase/specs/jls/se8/html/jls-17.html">Threads and Locks - Oracle</a><br><a href="//docs.oracle.com/javase/tutorial/essential/concurrency/index.html">Concurrency - Oracle</a></p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="//docs.scipy.org/doc/scipy/reference/">SciPy Reference</a><br><a href="//docs.scipy.org/doc/numpy/reference/index.html">NumPy Reference</a><br><a href="//docs.python.org/3/">Python3 Documentation</a><br><a href="//www.w3schools.com/python/">Python Tutorial - W3schools</a></p>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p><a href="//docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html">Language Documentation</a><br><a href="//developer.apple.com/documentation/">Apple Developer Documentation</a></p>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p><a href="//sqlzoo.net/">SQLZOO Portal</a><br><a href="//www.w3schools.com/sql/default.asp">SQL Tutorial - W3schools</a></p>
<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><a href="//www.ibm.com/developerworks/cn/rational/r-uml/index.html">UML - IBM Developers</a><br><a href="//docs.microsoft.com/zh-cn/visualstudio/modeling/create-models-for-your-app?view=vs-2015">Modeling Documentation - Microsoft</a><br><a href="//www.uml-diagrams.org/">uml-diagrams.org</a></p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="//nodejs.org/api/">Node.js API</a><br><a href="//expressjs.com/en/4x/api.html">Express.js</a><br><a href="//www.sqlitetutorial.net/sqlite-nodejs/">SQLite3.js</a><br><a href="//www.npmjs.com/package/slackbots">Slackbots.js</a><br><a href="//socket.io/docs/">Socket.io</a><br><a href="//redis.js.org/">Redis.js</a><br><a href="//vuejs.org/v2/api/">Vue.js</a><br><a href="//vuex.vuejs.org/guide/">Vuex</a></p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p><a href="//developer.android.com/reference">Android Developers Reference</a><br><a href="//www.seleniumhq.org/selenium-ide/docs/en/api/commands/">Selenium Command Documentation</a><br><a href="//en.wikipedia.org/wiki/Representational_state_transfer#Relationship_between_URL_and_HTTP_methods">REST API standard</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Links</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo!</title>
    <url>/2018/12/01/Hello-Hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="//hexo.io/">Hexo</a>! This is your very first post. Check <a href="//hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="//hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="//github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>

<p>More info: <a href="//hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="//hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="//hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="//hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="Generate-and-deploy"><a href="#Generate-and-deploy" class="headerlink" title="Generate and deploy"></a>Generate and deploy</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean --debug</span><br><span class="line">$ hexo g --debug</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>Editing of original generated post “Hello World”</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Basic Syntax</title>
    <url>/2019/12/02/Markdown-Basic-Syntax/</url>
    <content><![CDATA[<p>This post is originated from <a href="//gist.github.com/apackeer/4159268">here</a> and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly.</p>
<span id="more"></span>

<hr>
<h1 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br><span class="line"></span><br><span class="line">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class="line"></span><br><span class="line"><span class="section">Alt-H1</span></span><br><span class="line"><span class="section">======</span></span><br><span class="line"></span><br><span class="line"><span class="section">Alt-H2</span></span><br><span class="line"><span class="section">------</span></span><br></pre></td></tr></table></figure>

<h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p>Alternatively, for H1 and H2, an underline-ish style:</p>
<h1 id="Alt-H1"><a href="#Alt-H1" class="headerlink" title="Alt-H1"></a>Alt-H1</h1><h2 id="Alt-H2"><a href="#Alt-H2" class="headerlink" title="Alt-H2"></a>Alt-H2</h2><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Emphasis, aka italics, with <span class="emphasis">*asterisks*</span> or <span class="emphasis">_underscores_</span>.</span><br><span class="line"></span><br><span class="line">Strong emphasis, aka bold, with <span class="strong">**asterisks**</span> or <span class="strong">__underscores__</span>.</span><br><span class="line"></span><br><span class="line">Combined emphasis with <span class="strong">**asterisks and <span class="emphasis">_underscores_</span>**</span>.</span><br><span class="line"></span><br><span class="line">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure>

<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>
<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>
<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>
<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> First ordered list item</span><br><span class="line"><span class="bullet">2.</span> Another item</span><br><span class="line"><span class="bullet">  *</span> Unordered sub-list.</span><br><span class="line"><span class="bullet">1.</span> Actual numbers don&#x27;t matter, just that it&#x27;s a number</span><br><span class="line"><span class="bullet">  1.</span> Ordered sub-list</span><br><span class="line"><span class="bullet">4.</span> And another item.</span><br><span class="line"></span><br><span class="line">   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#x27;ll use three here to also align the raw Markdown).</span><br><span class="line"></span><br><span class="line">   To have a line break without a paragraph, you will need to use two trailing spaces.  </span><br><span class="line">   Note that this line is separate, but within the same paragraph.  </span><br><span class="line">   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Unordered list can use asterisks</span><br><span class="line"><span class="bullet">-</span> Or minuses</span><br><span class="line"><span class="bullet">+</span> Or pluses</span><br><span class="line"><span class="bullet">-</span> Paragraph In unordered list</span><br><span class="line"></span><br><span class="line">  For example like this.</span><br><span class="line"></span><br><span class="line">Common Paragraph with some text.</span><br><span class="line">And more text.</span><br></pre></td></tr></table></figure>

<ol>
<li>First ordered list item</li>
<li>Another item</li>
</ol>
<ul>
<li>Unordered sub-list.</li>
</ul>
<ol>
<li><p>Actual numbers don’t matter, just that it’s a number</p>
</li>
<li><p>Ordered sub-list</p>
</li>
<li><p>And another item.</p>
<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>
<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>Note that this line is separate, but within the same paragraph.<br>(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>
</li>
</ol>
<ul>
<li>Unordered list can use asterisks</li>
</ul>
<ul>
<li>Or minuses</li>
</ul>
<ul>
<li>Or pluses</li>
</ul>
<ul>
<li><p>Paragraph In unordered list</p>
<p>For example like this.</p>
</li>
</ul>
<p>Common Paragraph with some text.<br>And more text.</p>
<h2 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p>


<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Definition list&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span></span><br><span class="line"><span class="code">&lt;/dl&gt;</span></span><br></pre></td></tr></table></figure>


<dl>
    <dt>Definition list</dt>
    <dd>Is something people use sometimes.</dd>

<pre><code>&lt;dt&gt;Markdown in HTML&lt;/dt&gt;
&lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;
</code></pre>
</dl>


<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">I&#x27;m an inline-style link</span>](<span class="link">//www.google.com</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">I&#x27;m an inline-style link with title</span>](<span class="link">//www.google.com &quot;Google&#x27;s Homepage&quot;</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">I&#x27;m a reference-style link</span>][<span class="symbol">Arbitrary case-insensitive reference text</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">I&#x27;m a relative reference to a repository file</span>](<span class="link">../blob/master/LICENSE</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">You can use numbers for reference-style link definitions</span>][<span class="symbol">1</span>]</span><br><span class="line"></span><br><span class="line">Or leave it empty and use the [link text itself]</span><br><span class="line"></span><br><span class="line">Some text to show that the reference links can follow later.</span><br><span class="line"></span><br><span class="line">[<span class="symbol">arbitrary case-insensitive reference text</span>]: <span class="link">//hexo.io</span></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">//hexo.io/docs/</span></span><br><span class="line">[<span class="symbol">link text itself</span>]: <span class="link">//hexo.io/api/</span></span><br></pre></td></tr></table></figure>

<p><a href="//www.google.com">I’m an inline-style link</a></p>
<p><a href="//www.google.com" title="Google&#39;s Homepage">I’m an inline-style link with title</a></p>
<p><a href="//hexo.io">I’m a reference-style link</a></p>
<p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p>
<p><a href="//hexo.io/docs/">You can use numbers for reference-style link definitions</a></p>
<p>Or leave it empty and use the <a href="//hexo.io/api/">link text itself</a></p>
<p>Some text to show that the reference links can follow later.</p>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">hover to see the title text:</span><br><span class="line"></span><br><span class="line">Inline-style:</span><br><span class="line"></span><br><span class="line">![<span class="string">alt text</span>](<span class="link">//hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">Reference-style:</span><br><span class="line">![<span class="string">alt text</span>][<span class="symbol">logo</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">logo</span>]: <span class="link">//hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 2&quot;</span></span><br></pre></td></tr></table></figure>

<p>hover to see the title text:</p>
<p>Inline-style:</p>
<p><img src="//hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 1"></p>
<p>Reference-style:<br><img src="//hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 2"></p>
<h2 id="Code-and-Syntax-Highlighting"><a href="#Code-and-Syntax-Highlighting" class="headerlink" title="Code and Syntax Highlighting"></a>Code and Syntax Highlighting</h2><p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;JavaScript syntax highlighting&quot;</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Python syntax highlighting&quot;</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No language indicated, so no syntax highlighting.</span><br><span class="line">But let&#x27;s throw in a &lt;b&gt;tag&lt;/b&gt;.</span><br></pre></td></tr></table></figure>

<h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|                  | ASCII                           | HTML                          |</span><br><span class="line">| ---------------- | ------------------------------- | ----------------------------- |</span><br><span class="line">| Single backticks | <span class="code">`&#x27;Isn&#x27;t this fun?&#x27;`</span>             | &#x27;Isn&#x27;t this fun?&#x27;             |</span><br><span class="line">| Quotes           | <span class="code">`&quot;Isn&#x27;t this fun?&quot;`</span>             | &quot;Isn&#x27;t this fun?&quot;             |</span><br><span class="line">| Dashes           | <span class="code">`-- is en-dash, --- is em-dash`</span> | -- is en-dash, --- is em-dash |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>ASCII</th>
<th>HTML</th>
</tr>
</thead>
<tbody><tr>
<td>Single backticks</td>
<td><code>&#39;Isn&#39;t this fun?&#39;</code></td>
<td>‘Isn’t this fun?’</td>
</tr>
<tr>
<td>Quotes</td>
<td><code>&quot;Isn&#39;t this fun?&quot;</code></td>
<td>“Isn’t this fun?”</td>
</tr>
<tr>
<td>Dashes</td>
<td><code>-- is en-dash, --- is em-dash</code></td>
<td>– is en-dash, — is em-dash</td>
</tr>
</tbody></table>
<p>Colons can be used to align columns.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| Tables        |      Are      | Cool |</span><br><span class="line">| ------------- | :-----------: | ---: |</span><br><span class="line">| col 3 is      | right-aligned |      |</span><br><span class="line">| col 2 is      |   centered    |      |</span><br><span class="line">| zebra stripes |   are neat    |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right"></td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right"></td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right"></td>
</tr>
</tbody></table>
<p>The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| | Markdown | Less           | Pretty     |     |</span><br><span class="line">| | ------------- | --------------- | ---------- |------- |</span><br><span class="line">| | <span class="emphasis">*Still*</span>   | <span class="code">`renders`</span> | <span class="strong">**nicely**</span> | |</span><br><span class="line">| | 1               | 2                 | 3          |          |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Markdown</th>
<th>Less</th>
<th>Pretty</th>
</tr>
</thead>
<tbody><tr>
<td><em>Still</em></td>
<td><code>renders</code></td>
<td><strong>nicely</strong></td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody></table>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\sum_&#123;i=0&#125;^n i^2 = \frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125;$$</span><br><span class="line">$$</span><br><span class="line">f(n) =</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">\frac&#123;n&#125;&#123;2&#125;,  &amp; \text&#123;if $n$ is even&#125; \\\\[2ex]</span><br><span class="line">3n+1, &amp; \text&#123;if $n$ is odd&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$$<br>$$<br>f(n) =<br>\begin{cases}<br>\frac{n}{2},  &amp; \text{if $n$ is even} \\[2ex]<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p>
<blockquote>
<p>You can find more information about <strong>LaTeX</strong> mathematical expressions <a href="//math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p>
</blockquote>
<h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote>
<p>Blockquotes are very handy in email to emulate reply text.<br>This line is part of the same quote.</p>
</blockquote>
<p>Quote break.</p>
<blockquote>
<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>
<h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><p>Three or more…</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">Hyphens</span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Asterisks</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="strong">__<span class="emphasis">_</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">Underscores</span></span></span></span></span><br></pre></td></tr></table></figure>

<hr>
<p>Hyphens</p>
<hr>
<p>Asterisks</p>
<hr>
<p>Underscores</p>
<h2 id="Line-Breaks"><a href="#Line-Breaks" class="headerlink" title="Line Breaks"></a>Line Breaks</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Here&#x27;s a line for us to start with.</span><br><span class="line"></span><br><span class="line">This line is separated from the one above by two newlines, so it will be a <span class="emphasis">*separate paragraph*</span>.</span><br><span class="line"></span><br><span class="line">This line is also a separate paragraph, but...</span><br><span class="line">This line is only separated by a single newline, so it&#x27;s a separate line in the <span class="emphasis">*same paragraph*</span>.</span><br></pre></td></tr></table></figure>


<p>Here’s a line for us to start with.</p>
<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>
<p>This line is also a separate paragraph, but…<br>This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>
<hr>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">        &lt;td&gt;Foo&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="code">&lt;/table&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure>

<p>This is a regular paragraph.</p>
<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>

<p>This is another regular paragraph.</p>
<h2 id="Youtube-videos"><a href="#Youtube-videos" class="headerlink" title="Youtube videos"></a>Youtube videos</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//www.youtube.com/watch?feature=player_embedded&amp;v=ARted4RniaU</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;//img.youtube.com/vi/ARted4RniaU/0.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="attr">alt</span>=<span class="string">&quot;IMAGE ALT TEXT HERE&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Pure markdown version:</span><br><span class="line"></span><br><span class="line">[<span class="string">![IMAGE ALT TEXT HERE</span>](<span class="link">//img.youtube.com/vi/ARted4RniaU/0.jpg</span>)](<span class="link">//www.youtube.com/watch?v=ARted4RniaU</span>)</span><br></pre></td></tr></table></figure>

<p><a href="//www.youtube.com/watch?feature=player_embedded&v=ARted4RniaU
" target="_blank"><img src="//img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10"></a></p>
<p>Pure markdown version:</p>
<p><a href="//www.youtube.com/watch?v=ARted4RniaU"><img src="//img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle SQL Basic Usage</title>
    <url>/2019/06/19/Oracle-SQL-Basic-Usage/</url>
    <content><![CDATA[<p>Oracle SQL 复习笔记（<del>进行中</del>放弃了…）</p>
<span id="more"></span>

<h1 id="笔记-Cheat-Sheet"><a href="#笔记-Cheat-Sheet" class="headerlink" title="笔记 / Cheat Sheet"></a>笔记 / Cheat Sheet</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">concat(field<span class="operator">/</span>string, field<span class="operator">/</span>string, field<span class="operator">/</span>string...)</span><br><span class="line">length(field<span class="operator">/</span>string)</span><br><span class="line">round(number, [<span class="type">integer</span>])</span><br><span class="line"><span class="keyword">in</span>(string, string...)</span><br><span class="line"><span class="keyword">left</span>(field<span class="operator">/</span>string, unsignedInteger) <span class="operator">=</span><span class="operator">&gt;</span> js <span class="operator">=</span><span class="operator">&gt;</span> field<span class="operator">/</span>string.<span class="built_in">substring</span>(<span class="number">0</span>, unsignedInteger)</span><br><span class="line">replace(field<span class="operator">/</span>string, searchString, replacementString)</span><br><span class="line"><span class="keyword">where</span>, <span class="keyword">or</span>, xor, <span class="keyword">and</span>, <span class="operator">!=</span> (<span class="operator">&lt;&gt;</span>), <span class="keyword">like</span>, <span class="string">&#x27;_%&#x27;</span>, <span class="keyword">between</span> ?number <span class="keyword">and</span> ?number (<span class="keyword">both</span> number inclusive), <span class="keyword">not</span> ?operator</span><br><span class="line"><span class="built_in">sum</span>(field)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> field <span class="operator">=</span><span class="operator">&gt;</span> non<span class="operator">-</span>repeated<span class="operator">/</span><span class="keyword">unique</span> <span class="keyword">value</span></span><br><span class="line"><span class="comment">-- inline comment, a space after --</span></span><br><span class="line"><span class="comment">/* mutiple-line comment, a space at the very beginning and ending */</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">all</span>(<span class="keyword">table</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">where</span> field <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> num <span class="keyword">from</span> nums) <span class="comment">-- find something with a field&#x27;s number larger than all the num from nums</span></span><br><span class="line"><span class="built_in">count</span>(field)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> field</span><br><span class="line"><span class="keyword">having</span> <span class="comment">-- must only be used after &#x27;group by&#x27; that can use sum(), count(), etc.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>kmp算法解析</title>
    <url>/2020/11/19/kmp%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>有些算法，适合从它产生的动机，如何设计与解决问题这样正向地去介绍。但KMP算法真的不适合这样去学。最好的办法是先搞清楚它所用的数据结构是什么，再搞清楚怎么用，最后为什么的问题就会有恍然大悟的感觉。我试着从这个思路再介绍一下。大家只需要记住一点，PMT是什么东西。然后自己临时推这个算法也是能推出来的，完全不需要死记硬背。 <span id="more"></span></p>
<p>KMP算法的核心，是一个被称为部分匹配表(Partial Match Table)的数组。我觉得理解KMP的最大障碍就是很多人在看了很多关于KMP的文章之后，仍然搞不懂PMT中的值代表了什么意思。这里我们抛开所有的枝枝蔓蔓，先来解释一下这个数据到底是什么。</p>
<p>对于字符串“abababca”，它的PMT如下表所示：</p>
<p><img src="https://pic1.zhimg.com/50/v2-e905ece7e7d8be90afc62fe9595a9b0f_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-e905ece7e7d8be90afc62fe9595a9b0f_1440w.jpg?source=1940ef5c"></p>
<p>就像例子中所示的，如果待匹配的模式字符串有8个字符，那么PMT就会有8个值。</p>
<p>我先解释一下字符串的前缀和后缀。如果字符串A和B，存在A=BS，其中S是任意的非空字符串，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A=SB， 其中S是任意的非空字符串，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的后缀。</p>
<p>有了这个定义，就可以说明PMT中的值的意义了。<strong>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度</strong>。例如，对于”aba”，它的前缀集合为{”a”, ”ab”}，后缀 集合为{”ba”, ”a”}。两个集合的交集为{”a”}，那么长度最长的元素就是字符串”a”了，长 度为1，所以对于”aba”而言，它在PMT表中对应的值就是1。再比如，对于字符串”ababa”，它的前缀集合为{”a”, ”ab”, ”aba”, ”abab”}，它的后缀集合为{”baba”, ”aba”, ”ba”, ”a”}， 两个集合的交集为{”a”, ”aba”}，其中最长的元素为”aba”，长度为3。</p>
<p>好了，解释清楚这个表是什么之后，我们再来看如何使用这个表来加速字符串的查找，以及这样用的道理是什么。如图 1.12 所示，要在主字符串”ababababca”中查找模式字符串”abababca”。如果在 j 处字符不匹配，那么由于前边所说的模式字符串 PMT 的性质，主字符串中 i 指针之前的 PMT[j −1] 位就一定与模式字符串的第 0 位至第 PMT[j−1] 位是相同的。这是因为主字符串在 i 位失配，也就意味着主字符串从 i−j 到 i 这一段是与模式字符串的 0 到 j 这一段是完全相同的。而我们上面也解释了，模式字符串从 0 到 j−1 ，在这个例子中就是”ababab”，其前缀集合与后缀集合的交集的最长元素为”abab”， 长度为4。所以就可以断言，主字符串中i指针之前的 4 位一定与模式字符串的第0位至第 4 位是相同的，即长度为 4 的后缀与前缀相同。这样一来，我们就可以将这些字符段的比较省略掉。具体的做法是，保持i指针不动，然后将j指针指向模式字符串的PMT[j −1]位即可。</p>
<p>简言之，以图中的例子来说，在 i 处失配，那么主字符串和模式字符串的前边6位就是相同的。又因为模式字符串的前6位，它的前4位前缀和后4位后缀是相同的，所以我们推知主字符串i之前的4位和模式字符串开头的4位是相同的。就是图中的灰色部分。那这部分就不用再比较了。</p>
<p><img src="https://pic1.zhimg.com/50/v2-03a0d005badd0b8e7116d8d07947681c_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-03a0d005badd0b8e7116d8d07947681c_1440w.jpg?source=1940ef5c"></p>
<p>有了上面的思路，我们就可以使用PMT加速字符串的查找了。我们看到如果是在 j 位 失配，那么影响 j 指针回溯的位置的其实是第 j −1 位的 PMT 值，所以为了编程的方便， 我们不直接使用PMT数组，而是将PMT数组向后偏移一位。我们把新得到的这个数组称为next数组。下面给出根据next数组进行字符串匹配加速的字符串匹配程序。其中要注意的一个技巧是，在把PMT进行向右偏移时，第0位的值，我们将其设成了-1，这只是为了编程的方便，并没有其他的意义。在本节的例子中，next数组如下表所示。</p>
<p><img src="https://pic2.zhimg.com/50/v2-40b4885aace7b31499da9b90b7c46ed3_hd.jpg?source=1940ef5c"><img src="https://pic2.zhimg.com/80/v2-40b4885aace7b31499da9b90b7c46ed3_1440w.jpg?source=1940ef5c"></p>
<p>具体的程序如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> * t, <span class="keyword">char</span> * p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(t) &amp;&amp; j &lt; <span class="built_in">strlen</span>(p))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j == <span class="number">-1</span> || t[i] == p[j]) </span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">           		j++;</span><br><span class="line">		&#125;</span><br><span class="line">	 	<span class="keyword">else</span> </span><br><span class="line">           		j = next[j];</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="built_in">strlen</span>(p))</span><br><span class="line">       <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>好了，讲到这里，其实KMP算法的主体就已经讲解完了。你会发现，其实KMP算法的动机是很简单的，解决的方案也很简单。远没有很多教材和算法书里所讲的那么乱七八糟，只要搞明白了PMT的意义，其实整个算法都迎刃而解。</p>
<p>现在，我们再看一下如何编程快速求得next数组。其实，求next数组的过程完全可以看成字符串匹配的过程，即以模式字符串为主字符串，以模式字符串的前缀为目标字符串，一旦字符串匹配成功，那么当前的next值就是匹配成功的字符串的长度。</p>
<p>具体来说，就是从模式字符串的第一位(注意，不包括第0位)开始对自身进行匹配运算。 在任一位置，能匹配的最长长度就是当前位置的next值。如下图所示。</p>
<p><img src="https://pic1.zhimg.com/50/v2-645f3ec49836d3c680869403e74f7934_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-645f3ec49836d3c680869403e74f7934_1440w.jpg?source=1940ef5c"></p>
<p><img src="https://pic4.zhimg.com/50/v2-06477b79eadce2d7d22b4410b0d49aba_hd.jpg?source=1940ef5c"><img src="https://pic4.zhimg.com/80/v2-06477b79eadce2d7d22b4410b0d49aba_1440w.jpg?source=1940ef5c"></p>
<p><img src="https://pic4.zhimg.com/50/v2-8a1a205df5cad7ab2f07498484a54a89_hd.jpg?source=1940ef5c"><img src="https://pic4.zhimg.com/80/v2-8a1a205df5cad7ab2f07498484a54a89_1440w.jpg?source=1940ef5c"></p>
<p><img src="https://pic1.zhimg.com/50/v2-f2b50c15e7744a7b358154610204cc62_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-f2b50c15e7744a7b358154610204cc62_1440w.jpg?source=1940ef5c"></p>
<p><img src="https://pic4.zhimg.com/50/v2-bd42e34a9266717b63706087a81092ac_hd.jpg?source=1940ef5c"><img src="https://pic4.zhimg.com/80/v2-bd42e34a9266717b63706087a81092ac_1440w.jpg?source=1940ef5c"></p>
<p>求next数组值的程序如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> * p, <span class="keyword">int</span> * next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(p))</span><br><span class="line">	&#123; </span><br><span class="line">		<span class="keyword">if</span> (j == <span class="number">-1</span> || p[i] == p[j])</span><br><span class="line">		&#123;</span><br><span class="line">			++i;</span><br><span class="line">			++j;</span><br><span class="line">			next[i] = j;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			j = next[j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此，KMP算法就全部介绍完了。<strong>粗体</strong></p>
<p><em><strong>对于要考研的小伙伴来说，这章节在串string那一块算重点，可以结合王道考研笔记结合起来学习。</strong></em></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>主题字体的修改</title>
    <url>/2021/08/21/port%E2%80%9C%E5%AD%97%E4%BD%93%E2%80%9D/</url>
    <content><![CDATA[<p>起因：思源宋体真的很好看<br>需求：将 blog 的标题与正文修改为思源宋体<br>tips：每一步的目的都是猜的，用词对不对我也不知道，大概理会中心思想就好<span id="more"></span></p>
<p>步骤：</p>
<h3 id="在-Adobe-Typekit-网站上注册账号，并且打包字体"><a href="#在-Adobe-Typekit-网站上注册账号，并且打包字体" class="headerlink" title="在 Adobe Typekit 网站上注册账号，并且打包字体"></a>在 Adobe Typekit 网站上注册账号，并且打包字体</h3><p>网址为：<a href="https://fonts.adobe.com/">Adobe Typekit</a><br>这一步可以让没有安装思源宋体的电脑也能够使用这个字体<del>（就是 loading 速度有点慢）</del></p>
<ol>
<li><p>右上角注册 Adobe 账号，地区选择 <code>United states</code></p>
</li>
<li><p>登陆后，搜索栏搜索 <code>Source Han Serif Simplified Chinese</code> </p>
</li>
<li><p>点击 &lt;/&gt; 按钮，在 <code>Enter a new project name</code> 处随便输入一个名字，点击 <code>Show 5 more</code> ，选择你需要的字重（建议是 light，Medium 和 bold 这三个。）</p>
</li>
<li><p>点击 <code>create</code> 按钮，右上角复制按钮把显示的代码复制下来，备用</p>
<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (function(d) &#123;</span><br><span class="line">    var config = &#123;</span><br><span class="line">      kitId: &#x27;paj7pia&#x27;,</span><br><span class="line">      scriptTimeout: 3000,</span><br><span class="line">      async: true</span><br><span class="line">    &#125;,</span><br><span class="line">    h=d.documentElement,t=setTimeout(function()&#123;h.className=h.className.replace(/\bwf-loading\b/g,&quot;&quot;)+&quot; wf-inactive&quot;;&#125;,config.scriptTimeout),tk=d.createElement(&quot;script&quot;),f=false,s=d.getElementsByTagName(&quot;script&quot;)[0],a;h.className+=&quot; wf-loading&quot;;tk.src=&#x27;https://use.typekit.net/&#x27;+config.kitId+&#x27;.js&#x27;;tk.async=true;tk.onload=tk.onreadystatechange=function()&#123;a=this.readyState;if(f||a&amp;&amp;a!=&quot;complete&quot;&amp;&amp;a!=&quot;loaded&quot;)return;f=true;clearTimeout(t);try&#123;Typekit.load(config)&#125;catch(e)&#123;&#125;&#125;;s.parentNode.insertBefore(tk,s)</span><br><span class="line">  &#125;)(document);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>到这一步就打包好了，接下来改动 hexo 本地文件夹中的配置文件，使这个代码在 blog 配置文件中生效，也就是让 blog 能够顺利调用<a href="https://fonts.adobe.com/">Adobe Typekit</a> 网站上你选好的字体。</p>
<h3 id="修改-after-footer-pug-文件"><a href="#修改-after-footer-pug-文件" class="headerlink" title="修改 after_footer.pug 文件"></a>修改 after_footer.pug 文件</h3><p>这个文件具体干嘛的我也不是很清楚，反正走完这一步 blog 就能用思源宋体了</p>
<ol>
<li>文件位置在你的 hexo 文件夹 <code>\themes\maupassant\layout\_partial</code> 的位置</li>
<li>打开它，拉到最下面，粘贴你刚刚复制的代码</li>
<li>修改最上面的 <code>&lt;script&gt;</code> 为 <code>script.</code> ，删除最下面的 <code>&lt;script&gt;</code> ，注意缩进关系<br> 这一步改完以后效果应当是这样的：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/codeblock-resizer.js&#x27; + &#x27;?v=&#x27; + theme.version)</span><br><span class="line">script(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/smartresize.js&#x27; + &#x27;?v=&#x27; + theme.version)</span><br><span class="line">script.</span><br><span class="line">  (function(d) &#123;</span><br><span class="line">    var config = &#123;</span><br><span class="line">      kitId: &#x27;wsr0swh&#x27;,</span><br><span class="line">      scriptTimeout: 3000,</span><br><span class="line">      async: true</span><br><span class="line">    &#125;,</span><br><span class="line">    h=d.documentElement,t=setTimeout(function()&#123;h.className=h.className.replace(/\bwf-loading\b/g,&quot;&quot;)+&quot; wf-inactive&quot;;&#125;,config.scriptTimeout),tk=d.createElement(&quot;script&quot;),f=false,s=d.getElementsByTagName(&quot;script&quot;)[0],a;h.className+=&quot; wf-loading&quot;;tk.src=&#x27;https://use.typekit.net/&#x27;+config.kitId+&#x27;.js&#x27;;tk.async=true;tk.onload=tk.onreadystatechange=function()&#123;a=this.readyState;if(f||a&amp;&amp;a!=&quot;complete&quot;&amp;&amp;a!=&quot;loaded&quot;)return;f=true;clearTimeout(t);try&#123;Typekit.load(config)&#125;catch(e)&#123;&#125;&#125;;s.parentNode.insertBefore(tk,s)</span><br><span class="line">  &#125;)(document);</span><br></pre></td></tr></table></figure>

<h3 id="修改-CSS-配置"><a href="#修改-CSS-配置" class="headerlink" title="修改 CSS 配置"></a>修改 CSS 配置</h3><p>这一步的目的是让引用的字体文件能应用到 blog 样式里，修改的 <code>font-family:</code> 行按顺序读取字体名称进行显示，所以把字体名称加进去的时候要加在最前面</p>
<ol>
<li>搜索 <code>pure-g</code>，找到 <code>font-family:</code> 行，在最前面加入 <code>&quot;source-han-serif-sc&quot;, serif,</code> </li>
<li>搜索 <code>body</code> ，找到 <code>font-family:</code> 行，在最前面加入 <code>&quot;source-han-serif-sc&quot;, serif,</code><br>这一步做完了理论上就完成了，对 blog 进行部署即可</li>
</ol>
<h3 id="我另外做了几件事"><a href="#我另外做了几件事" class="headerlink" title="我另外做了几件事"></a>我另外做了几件事</h3><ol>
<li><p>搜索了其他的 <code>font-family:</code> 段，在其他 <code>font-family:</code> 段里加入了字体名称，试图修改掉 page 名的字体，结论失败，这个好像不能在 CSS 文件中进行修改（旋岚：好像这个东西和图标是一套的 ，我们自己能改的是 style.css，它来源于 font-awsome.min.css ）</p>
</li>
<li><p>修改 blog 的字体大小，字体控制分别是以下这几段代码</p>
<p>全局：搜索 <code>body</code> ，修改 <code>font-size: 15px</code>，px 就是字体大小<br>标题：搜索 <code>post</code>，修改 <code>font: 700 25px/1.1</code>，<br>正文：搜索 <code>post-content</code>，修改 <code>font-size: 15px</code>，</p>
</li>
</ol>
<h3 id="最终思路回顾"><a href="#最终思路回顾" class="headerlink" title="最终思路回顾"></a>最终思路回顾</h3><p>在 Adobe Typekit 网站中调用需要的字体→将字体引用代码扔进 blog 本地文件供 blog 使用→修改 CSS 样式文件让 blog 优先显示你选择的字体</p>
<h3 id="顺便"><a href="#顺便" class="headerlink" title="顺便"></a>顺便</h3><p>改完了以后我用来替代”阅读全文“的小云朵可爱了十八倍！从端庄的淑女云变成了香香软软的面包云！</p>
<h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p>大力感谢旋岚的手把手教程，太麻烦你啦谢谢你教我！！！</p>
]]></content>
  </entry>
  <entry>
    <title>深入理解全微分</title>
    <url>/2021/08/22/port%E2%80%9C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%85%A8%E5%BE%AE%E5%88%86%E2%80%9D/</url>
    <content><![CDATA[<p>一元函数微分很容易理解，直观，但是推广到多维后，尽管教科书给出了严格定义，但总觉得中间有道坎，想不明白。本文用图形帮助大家直观理解全微分。</p>
<ol>
<li>一元可微函数：</li>
</ol>
<p>如果一元函数可微，则<strong>利用直线代替曲线估计函数值的变化</strong>，得到，<span id="more"></span></p>
<p><img src="https://pic3.zhimg.com/80/v2-b16754655d1f1ad0d73414ec070ca442_1440w.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/80/v2-4301814015999969fe717876658c45cb_1440w.jpg" alt="img"></p>
<p>2.那么推广到n元函数是否能得到形式一致的公式呢？</p>
<p><img src="https://pic2.zhimg.com/80/v2-1c27a37aa859d8f28d9de6bb03c52509_1440w.jpg" alt="img"></p>
<p><strong>全微分形式：</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-17c96dd519cbb2a6d16608af67b1f63d_1440w.jpg" alt="img"></p>
<p>几何解释：</p>
<p><strong>一元函数用直线代替曲线，则n元函数用平面代替曲面，这个平面称为切平面。</strong></p>
<p>为了方便，举例二元函数z=f(x,y)，</p>
<p>曲面上一点A，经过此点分别做平行于xoz和yoz的平面，与空间平面相交得到两条空间曲线，</p>
<p><img src="https://pic1.zhimg.com/80/v2-c1a559d9e7487ce75859a00ae824a3a4_1440w.jpg" alt="img"></p>
<p>两条空间曲线分别做切线，u的斜率（y不变）即偏导，v的斜率（x不变）即偏导。</p>
<p><img src="https://pic1.zhimg.com/80/v2-5912a6abb32a1d933cd0197287187418_1440w.jpg" alt="img"></p>
<p>斜率的具体所示，请看下面的示意图：</p>
<p><img src="https://pic2.zhimg.com/80/v2-507a3898c3f74b37e4dcdc2630354731_1440w.jpg" alt="img"></p>
<p><strong>经过两条切线的平面即为切平面，</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-37dd1ac41aa5ac6c2f55ed9e65b2a0b6_1440w.jpg" alt="img"></p>
<p><strong>全微分的精髓就是利用切平面去代替A点附近的曲面</strong>，如此一来，</p>
<p><img src="https://pic3.zhimg.com/80/v2-d6bb6ce309fe8b044c05821a669aa8fe_1440w.jpg" alt="img"></p>
<p>示意图：</p>
<p><img src="https://pic1.zhimg.com/80/v2-25b401ba7c285b87698ca8c58a595e34_1440w.jpg" alt="img"></p>
<p>目前还有一个问题，<strong>切平面是通过两条特殊的切线得到的，那么是否经过此点的任意切线都在切平面内呢？答案是肯定的！</strong></p>
<p>比如任意增加一个平行于z轴的平面，做相交曲线的切线，仍在切平面内：</p>
<p><img src="https://pic3.zhimg.com/80/v2-b5d4f87b0a4bc78dae160d8e24dcb42e_1440w.jpg" alt="img"></p>
<p>从图中看到xoy平面内的三个方向得到的三个切线（方向导数）在同一个平面内。</p>
<p>证明：</p>
<p><img src="https://pic4.zhimg.com/80/v2-f8f558caf651fe95324f40670a0f752f_1440w.jpg" alt="img"></p>
<p> <strong>可以这样理解，xoy平面内过(x0,y0)的任意直线经过线性变换肯定仍在一个平面内（线性变换的性质）</strong>。下面图帮助理解：</p>
<p><img src="https://pic2.zhimg.com/80/v2-be7626bc511889f153f9462cace1cfd1_1440w.jpg" alt="img"></p>
<p>3.结论</p>
<ul>
<li><strong>全微分是用切平面代替曲面</strong></li>
<li><strong>全微分要求所有方向的切线均在一个平面内，因此有函数偏导存在，但是不存在全微分的情况。</strong></li>
</ul>
<p> 下次继续区分偏导、方向导数和梯度，敬请期待。</p>
]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
  </entry>
  <entry>
    <title>格林公式</title>
    <url>/2021/08/22/port%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>众所周知，格林公式作为KO与路径无关的第二类曲线积分的杀招，是秀的。但至于<strong>为什么适用于路径无关的情况、路径无关的判据为什么是 <img src="https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D=%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D++" alt="[公式]"> ，为什么线积分能够等效成一个二重积分</strong>。很多人一脸黑人问号。<span id="more"></span></p>
<p><strong>煜神学长（考研数学148分天赋选手）和Kaysen学长</strong>收到了此类SOS信息，<strong>故作本文精讲格林公式的适用条件，从物理本质上吃透该知识点，达到小周天境界。</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-9f93f53a70b68691567ff3aee9f3eb98_1440w.jpg" alt="img"></p>
<p><strong>在讲格林公式的路径无关前，先引入一个重力场</strong>，假设在屋顶（a点）玩竹蜻蜓的大雄被妈妈喊回去写作业（b点），情况1，竹蜻蜓不好使了，大雄一屁股径直掉到地上，情况2，隔壁的静香在洗澡，害大雄拐了个弯，情况3，风来了，大雄被18级大风吹走了，绕地球转了一圈，<strong>不管大雄是哪种路径，只要a,b固定，重力这家伙对大雄做的功都是一毛一样。</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-077e73d374f5f2bcac1f35003a79267a_1440w.jpg" alt="img"></p>
<p>同理，<strong>在地球某一个截面的引力场中</strong>，引力均从物体指向地心，以地心为原点，做一x/y坐标系，大雄被18级大风从A点吹到B点的过程，<strong>问：引力对大雄做功多少？</strong></p>
<p><strong>分析：</strong>该模型中，<strong>求变力在曲线上做功，即为第二类曲线积分。</strong></p>
<p>任意k点，变化的引力 <img src="https://www.zhihu.com/equation?tex=+F=%5Ccfrac%7BGMm%7D%7Br%5E2%7D+" alt="[公式]"> ，其中 <img src="https://www.zhihu.com/equation?tex=r%5E2=x%5E2+y%5E2+" alt="[公式]"> ，立即推， <img src="https://www.zhihu.com/equation?tex=F=%5Ccfrac%7BGMm%7D%7Bx%5E2+y%5E2%7D" alt="[公式]">。</p>
<p>引力与y轴夹角设为θ，大雄所受引力在x轴和y轴的分量，可表示为 <img src="https://www.zhihu.com/equation?tex=+Fsin%5Ctheta=F_%7BX%7D+" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=Fcos%5Ctheta=F_%7BY%7D" alt="[公式]"> 。</p>
<p>引力在AB曲线段对大雄做的功，即为 <img src="https://www.zhihu.com/equation?tex=W_%7BL%7D=%5Cint_%7BL%7DFsin%5Ctheta+dx+Fcos%5Ctheta+dy" alt="[公式]">，也即是 <img src="https://www.zhihu.com/equation?tex=W_%7BL%7D=%5Cint_%7BL%7DPdx+Qdy" alt="[公式]"> 。</p>
<p>其中， <img src="https://www.zhihu.com/equation?tex=P=Fsin%5Ctheta=%5Ccfrac%7BGMmx%7D%7B%7B%5Cleft(+x%5E2+y%5E2+%5Cright)%7D%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D%7D" alt="[公式]"> ； <img src="https://www.zhihu.com/equation?tex=Q=Fcos%5Ctheta=%5Ccfrac%7BGMmy%7D%7B%7B%5Cleft(+x%5E2+y%5E2+%5Cright)%7D%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D%7D" alt="[公式]"> 。（在黄色三角形中，根据勾股定理，可得出， <img src="https://www.zhihu.com/equation?tex=sin%5Ctheta=%5Cfrac%7Bx%7D%7B%5Csqrt%7Bx%5E2+y%5E2%7D%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=cos%5Ctheta=%5Cfrac%7By%7D%7B%5Csqrt%7Bx%5E2+y%5E2%7D%7D" alt="[公式]"> ）</p>
<h2 id="DuangDuangDuang！铁棍敲黑板！"><a href="#DuangDuangDuang！铁棍敲黑板！" class="headerlink" title="DuangDuangDuang！铁棍敲黑板！"></a>DuangDuangDuang！铁棍敲黑板！</h2><h2 id="计算一下，-，是不是等于-，而这是什么？路径无关的判据！是不是很神奇！！！"><a href="#计算一下，-，是不是等于-，而这是什么？路径无关的判据！是不是很神奇！！！" class="headerlink" title="计算一下，  ，是不是等于  ，而这是什么？路径无关的判据！是不是很神奇！！！"></a>计算一下， <img src="https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D++" alt="[公式]"> ，是不是等于 <img src="https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D" alt="[公式]"> ，而这是什么？路径无关的判据！是不是很神奇！！！</h2><p><strong>后面更牛逼，一元的第二类曲线积分，又是怎么能等于一个平面积分（二重积分）的呢？这在弄啥嘞！接着看线积分大变面积分物理魔术！</strong></p>
<p>先来个常识，问你，<strong>图中的静香，色彩是连续且密不可分的么？</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-d33207ca31f956093be6a87a4a5ab300_1440w.jpg" alt="img">积分学下的静香</p>
<p>如果回答是，那就大意了、没有闪！<strong>在PS中放大，密不可分的静香是这样式的：</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-bdf0fc027e36156f6c69215dd8639d90_1440w.jpg" alt="img">微分学下的静香</p>
<p>可以看出静香圆润的头型，大大的眼睛，<strong>这些曲线，都是由小方块们连在一起，以直代曲，微观为直，宏观为曲，构造而成</strong>。而整体上国色天香的静香，也是由许许多多1像素的色块堆积而成。</p>
<p><strong>而以直代曲，用微观的小方块去堆积表达宏观图像，也正是微分学的应用体现。</strong>带着这些常识，继续看：</p>
<p><strong>在引力场计算变力做功时，若同一路径来回走一遭，则一来一回的功可相互抵消。</strong></p>
<p>例如一个口字型，可以分解成一个日字型，公共边上的功，相互可消。分成田字形亦然。</p>
<p><img src="https://pic4.zhimg.com/80/v2-18dc2d9fbb7b4c3673ff15961a28981f_1440w.jpg" alt="img"></p>
<p><strong>既然引力在曲线上做的功，神tm难算？那么好，我们借助静香图像的讲述，把曲线与曲线围成的图形同时像素化，化作无数像素块堆积而成的平面，那么引力在曲线上沿顺时针方向（或逆时针）做的功，是否可分解成引力沿所有小方块的边顺（逆）所做的功的和？</strong></p>
<p><strong>由于公共边的功正负相消，所以沿小方块们做的功的和，也就演变为小方块堆积图形的轮廓线所做的功，也就是以直代曲下曲线的引力功。</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-9de83db33fce010c7aa4b0d1554600f3_1440w.png" alt="img">一段看似光滑的小曲线L</p>
<p><img src="https://pic3.zhimg.com/80/v2-b1ca3718675bd3757a053f6029edf152_1440w.jpg" alt="img">微分视角下的曲线-本质是以直代曲</p>
<p><img src="https://pic1.zhimg.com/80/v2-f6abecdc4f4e20502687c41fc194c5d4_1440w.jpg" alt="img">内部接壤方块消边后，留下外轮廓的折线表示曲线L</p>
<p><strong>那，这些步骤是怎么在数学上实现的呢？</strong></p>
<p><strong>我们把大雄对静香的爱心，其中一个像素块抽出来，四个点分别赋予坐标值：</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-5cd78bb4c8bcd4b109537287251367e8_1440w.jpg" alt="img">爱心区域为D，单个方块区域为D1</p>
<p><strong>对于单个正方形，引力沿四条边做的功如下：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=W_%7BL_1%7D=%5Cint_%7Ba_1%7D%5E%7Ba_2%7DP(x,b_1)dx" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=W_%7BL_2%7D=%5Cint_%7Bb_1%7D%5E%7Bb_2%7DQ(a_2,y)dy" alt="[公式]"> </p>
<p><img src="https://www.zhihu.com/equation?tex=W_%7BL_3%7D=%5Cint_%7Ba_2%7D%5E%7Ba_1%7DP(x,b_2)dx" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=W_%7BL_4%7D=%5Cint_%7Bb_2%7D%5E%7Bb_1%7DQ(a_1,y)dy" alt="[公式]"> </p>
<p><strong>求和后，引力沿单个正方形做的总功为（式1）：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=W=%5Cint_%7Ba_1%7D%5E%7Ba_2%7D%5BP(x,b_1)-P(x,b_2)%5Ddx+%5Cint_%7Bb_1%7D%5E%7Bb_2%7D%5BQ(a_2,y)-Q(a_1,y)%5Ddy" alt="[公式]"> </p>
<p><strong>插入一个偏导数的极限表达式：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx%5Cto%7Bx_0%7D%7D+%5Cfrac%7Bf(x,y_0)-f(x_0,y_0)%7D+%7Bx-x_%7B0%7D%7D=f%27(x_%7B0%7D,y_%7B0%7D)" alt="[公式]"> </p>
<p><strong>当 <img src="https://www.zhihu.com/equation?tex=b1-b2%5Crightarrow+%7B0%7D" alt="[公式]"> 时，在一阶偏导连续的情况下（格林公式的条件），得到式2式3：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=P(x,b_1)-P(x,b_2)=%5Cint_%7Bb_2%7D%5E%7Bb_1%7DP%27_y(x,y)dy=%5Cint_%7Bb_2%7D%5E%7Bb_1%7D%7B%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D%7Ddy" alt="[公式]"> </p>
<p><img src="https://www.zhihu.com/equation?tex=Q(a_2,y)-Q(a_1,y)=%5Cint_%7Ba_1%7D%5E%7Ba_2%7DQ%27_x(x,y)dy=%5Cint_%7Ba_1%7D%5E%7Ba_2%7D%7B%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D%7Ddx" alt="[公式]"> </p>
<p><strong>将式2式3回带到式1，有式4：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=W=%5Cint_%7Ba_1%7D%5E%7Ba_2%7D%5Cint_%7Bb_2%7D%5E%7Bb_1%7D%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7Ddxdy+%5Cint_%7Ba_1%7D%5E%7Ba_2%7D%5Cint_%7Bb_1%7D%5E%7Bb_2%7D%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7Ddxdy" alt="[公式]"> </p>
<p><strong>将式4前部y的上下限互换，整体加负号，有：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=W=%5Cint_%7Ba_1%7D%5E%7Ba_2%7D%5Cint_%7Bb_1%7D%5E%7Bb_2%7D%5B%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D-%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D%5Ddxdy=%5Ciint_%7BD_1%7D%5B%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D-%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D%5Dd%5Csigma" alt="[公式]"> </p>
<p><strong>此时，引力对单个小正方形做的功已求出，我们想要求爱心曲线上的总功，就把无数个小正方形的功累加即可。在积分上表示为：</strong></p>
<p><img src="https://www.zhihu.com/equation?tex=%5Coint_%7BL%7DPdx+Qdy=%5Ciint_D%5B%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D-%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D%5Dd%5Csigma" alt="[公式]"> </p>
<p><strong>于是，格林公式得证！一元的线积分神奇地变成了二重积分！！！</strong></p>
<p>此时，再来首尾呼应下，<strong>路径无关为何判据是</strong> <img src="https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D=%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D+" alt="[公式]"> </p>
<p><strong>变化的引力做功，只与起点和终点相关，那么任意画曲线，曲流拐弯随便拐，只要是从A到B再回到A，引力做功均为0！</strong>也就是<strong>任意一个面积分，都为0，那么，只有一种可能，被积函数值恒为0。这也就是为什么路径无关，要满足</strong> <img src="https://www.zhihu.com/equation?tex=%5Cfrac+%7B%5Cpartial+Q%7D%7B%5Cpartial+X%7D=%5Cfrac+%7B%5Cpartial+P%7D%7B%5Cpartial+Y%7D+" alt="[公式]"> </p>
<p><img src="https://pic3.zhimg.com/80/v2-411574e554c30da628a107c271e75fd6_1440w.jpg" alt="img"></p>
<h2 id="最后，再来几个反思"><a href="#最后，再来几个反思" class="headerlink" title="最后，再来几个反思"></a><strong>最后，再来几个反思</strong></h2><h2 id="煜神问："><a href="#煜神问：" class="headerlink" title="煜神问："></a><strong>煜神问：</strong></h2><p>1，格林公式处理第二类曲线积分，<strong>路径无关怎么理解</strong>？再回顾一下本文内容。</p>
<p>2，使用格林公式时<strong>曲线为什么要封闭？不封闭为什么要补线？补线为什么要补与坐标轴平行的线？</strong></p>
<h2 id="Kaysen问："><a href="#Kaysen问：" class="headerlink" title="Kaysen问："></a><strong>Kaysen问：</strong></h2><p>3，在闭区域内<strong>存在无定义点时，为什么要挖洞？为什么挖完洞，无定义点就消失了？</strong></p>
<p>4，对问题3进行延伸，既然格林公式能把线积分转化成二重积分，<strong>闭曲线内的区域用无数个小方块分割，小方块是可以cover无定义点的，那么只需要计算小方块四条边上的功，不就完美把无定义点的干扰排除了么？那为什么还需要挖洞呢？</strong></p>
<p><strong>希望本文能够启发大家的数学反思，针对数学考点的反思步骤为：</strong></p>
<p><strong>运用公式的本质是？有哪些条件？为什么需要这些条件？条件为什么成立？使用这些条件时有哪些技巧？一步步深挖，将数学彻底建立在反思之上，才能够达到深度理解，解题才能才能得心应手！加油！</strong></p>
]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
  </entry>
  <entry>
    <title>不从游戏设计谈谈DEEMO</title>
    <url>/2022/01/04/port%E4%BB%8E%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E8%B0%88DEEMO/</url>
    <content><![CDATA[<p>尽管《Deemo》只是一款手机音乐游戏，但我想只要提起它，很少有人会忘记。</p>
<p>2013年11月，由雷亚制作的《Deemo》正式发布。作为一款音乐手游，《Deemo》的剧情并非无足轻重。相反的，由于主角“小黑人”与从天而降的“无名少女”充满神秘感，以及游戏里存在无解的“神秘代码”，令《Deemo》自发布之初就引发了无数玩家的好奇心。</p>
<p><img src="https://pic4.zhimg.com/80/v2-233f18fd8708ee9001706577b984412f_1440w.jpg" alt="img"></p>
<span id="more"></span>
<p>《Deemo》本身是一款质量过硬的音乐游戏，它的开发商雷亚也因为《Deemo》和《Cytus》两款风格迥异但各有所长的音乐手游而广为人知。《Deemo》发布已经接近4年，我相信这款游戏的玩法已经无须赘述。而在上个月的30日，雷亚发布了《Deemo》的最后一个大型更新——这一次雷亚官方宣布，这是最后一次有关剧情的内容更新，这意味着《Deemo》的剧情故事在官方承认下，终于走到了终点。</p>
<p>在这次的最后一个大型更新中，除了增加4首免费曲目和新的剧情外，还增加了新DLC《被遗忘的沙漏》，已经进入结局的玩家，使用沙漏后将会以全新视角体验《Deemo》的故事，为了让再次体验剧情的老玩家和新玩家能够更快的速观看剧情，本次更新还加入了“光点”系统，加速游戏时间。</p>
<p>实际上，不管是去年公布的“看起来是大结局”的2.0，还是几天前官方发布的3.0，都没有解开我心目中最大的谜团：《Deemo》的故事究竟有没有现实原型？这也是我想在本文中告诉你的秘密。</p>
<p>需要说明的是，本文内容不涉及剧透，甚至与3.0无关。</p>
<p><strong>神秘代码</strong></p>
<p>《Deemo》主要讲述了一个少女从天窗坠落，与一个黑色的“怪人”Deemo相遇的故事。在小女孩的请求下，Deemo需要不断弹奏钢琴，促使场景中心的“树”不断生长，借此把小女孩通过天窗重新送回原来的世界。在这款游戏的第一个版本中，大树最高可以长到二十米，小女孩离自己的世界还过于遥远。</p>
<p>玩家们在游戏中发现，《Deemo》存在大量隐喻，最明显也最令人不解的一个是：只要不断点击某位带着面具的女孩，她就会说出两串数字“121.518549，25.040854”。</p>
<p><img src="https://pic2.zhimg.com/80/v2-08e273bee55a1111555680ed78971255_1440w.jpg" alt="img"></p>
<p>这两串意义不明的数字成为了所有谜团的起因。玩家用过许多方法分析含义，最广为流传，实际上也最明显的是：这两串数字合起来就是一个坐标。通过地图软件查找，发现这个坐标指向台湾大学医学院附设医院，负一层则为诚品书店。</p>
<p><img src="https://pic3.zhimg.com/80/v2-35b22bfa27ccd3a83811a018c6fb67ea_1440w.jpg" alt="img"></p>
<p>游戏里隐藏的线索为“坐标说”提供了依据。小女孩本身有一句台词：“最近有不舒服的感觉……头晕晕的。”“墙壁四周有消毒水的味道……”玩家认为这暗示了小女孩的身体状况，以及她正在住院的事实。再加上游戏里有破碎的玻璃、天窗等元素，我们得到了一个较为清晰的推测：</p>
<p>游戏中的小女孩遇到车祸（或跳楼），导致脑部受到伤害，被送往台大医院治疗。关于小女孩的来历则众说纷纭，有说她就是制作团队一员中的女儿，也有说她是制作团队一员的朋友的女儿……这些说法并无根据，但作为《Deemo》被制作的原因倒也勉强说得通。有无法考据来源的消息指出：“去过诚品的人应该对里面播放的钢琴音乐很有印象。”与之相对应的，《Deemo》是一款钢琴游戏，而且场景和插画里充满了书。这些说法在当时并没有得到任何证实，但非常流行。</p>
<p>有玩家通过解包获得了两个单词，翻译过来的意思是“颅骨骨折”和“脑溢血”，并将之推测为女孩入院的原因。又通过分析“点击大树时有心跳声”，以及大树在最早的版本只能长到20米，得出结论女孩的年龄为20岁。最后，经过多方玩家的不懈努力，以及综合游戏本身给出的大量线索，玩家们还原出了这样一个故事：</p>
<p>“一个14岁的女孩，在高楼意外失足坠落，颅骨骨折，脑溢血，陷入了昏迷之中。他的父亲是一名钢琴家，十分悲痛，但是并不放弃，每天都到台大医院下面的书店弹钢琴给她听。而这一次坚持，就是6年时间。</p>
<p>6年以后，小女孩在自己20岁的时候最终还是离开了人世。她的父亲承受了巨大的打击，但是还是以监护人的身份将小女孩的器官全部捐赠。Deemo的世界观，就是对整个故事的浪漫化，将这六年时间以浪漫的色彩展开。其实第一首曲子已经告诉了我们，这一切，都是一个 Dream 。（本人注：Dream 有一阵吵闹声，之后又恢复平静只有钢琴声，可能就是模仿小女孩事故后意识逐渐模糊、进入 Deemo 世界的过程 ）</p>
<p>谢谢雷亚给我们带来的好游戏，谢谢Deemo。也谢谢你能看到这里……”</p>
<p>以上这段文字摘取自某个<a href="https://www.zhihu.com/question/24742168/answer/29017123">知乎回答</a>，如果你点进这个链接，还能看到非常丰富的推理跟细节。如果你在百度搜索“Deemo故事原型”，还能得到5430个结果。但到目前为止，所有内容均属玩家推测，并且没有得到证实。</p>
<p>关于Deemo和小女孩的关系也是玩家好奇的焦点之一，不过这方面却几乎没有什么分歧。</p>
<p>最早被排除的关系是“情侣”，因为游戏中有这样一张图：</p>
<p><img src="https://pic4.zhimg.com/80/v2-57a40c2a335a48daf5aa32b44d9c032f_1440w.jpg" alt="img"></p>
<p>很显然……在“最萌身高差”之类的说法还没有大行其道之前，玩家们普遍认为他们是父女或者兄妹。</p>
<p>根据种种迹象推测：《Deemo》的剧情改编自现实事件，一个不幸的小姑娘因为某些原因昏迷不醒，在她的父亲（或哥哥）陪伴她时，常常到一个有钢琴和有书的地方去。根据这个灵感，制作团队将这个故事制作成一款游戏，至于游戏里的另一个重要元素“树”，倒是没有出现过较为有力的考证。</p>
<p>至此为止，游戏中出现了三个人物：小女孩、Deemo、面具小姐，实际上我们对他们一无所知。</p>
<p><img src="https://pic3.zhimg.com/80/v2-b1401f15b37d776f151f9390fc4d03ea_1440w.jpg" alt="img"></p>
<p><strong>结局……了吗？</strong></p>
<p>经过6个月的等待，雷亚在15年5月份公布了2.0版本。游戏剧情得到了重大更新。</p>
<p>2.0版本开启之后，玩家弹奏音乐不会继续促使树木生长，而是在通往天窗的地方浮出一层层台阶。当台阶数量达到100%后，将出现一个叫做“Going Home”的动画。小女孩在动画内与Deemo依依不舍，她最终哭着离开了这个世界。最后，动画里出现字幕：“Goodbye，My Beloved Sister，Alice”。</p>
<p><img src="https://pic1.zhimg.com/80/v2-0c4b38ecd74562e9ac8f721f0ef691f0_1440w.png" alt="img"></p>
<p>在接下来的动画中，Deemo的世界因为女孩的离去而崩塌，接着出现了一名男子和红衣女孩，实际上红衣女孩抱着的正是游戏里出现过的玩偶，已经足够暗示她与游戏女主角就是同一人，也即Alice。</p>
<p><img src="https://pic3.zhimg.com/80/v2-70fdf2c9dbe1aac1b98388a90206169a_1440w.png" alt="img"></p>
<p>然后两人遇到迎面而来的卡车，接下来画面变得血红……</p>
<p><img src="https://pic1.zhimg.com/80/v2-ab4ba8c6dcb5e6e553d79c54566a6fc4_1440w.png" alt="img"></p>
<p>画面又换到了面具小姐，她摘下了面具。</p>
<p><img src="https://pic4.zhimg.com/80/v2-7cf63587672d04e33f0a7a4d17279d8f_1440w.png" alt="img"></p>
<p>原来她与Alice是同一个人。</p>
<p><img src="https://pic3.zhimg.com/80/v2-6c7814c818c65a726ccce3b37ff8471e_1440w.png" alt="img"></p>
<p>她哭的非常伤心，似乎想起了什么……</p>
<p><img src="https://pic1.zhimg.com/80/v2-0362eaab78a5a27082f9726ccb58ddc0_1440w.png" alt="img"></p>
<p>然后，在最后的动画里，Alice从病床上醒过来了，她从面具里面解脱，也从车祸中活了下来。让我们理一理，官方这时候已经告诉玩家，游戏女主角和面具小姐就是同一个人，也就是此刻在病床上醒过来的Alice。那么在卡车来临时和Alice在一起的小哥哥是谁，他和Deemo又有什么关系呢？</p>
<p><img src="https://pic3.zhimg.com/80/v2-5947948f4ad22167c68c851734fd5a26_1440w.png" alt="img"></p>
<p>我们静静地等待片尾曲的结束，来到最后一幕：</p>
<p><img src="https://pic3.zhimg.com/80/v2-2ba1003df86a6f36108772ca21da8b56_1440w.png" alt="img"></p>
<p>Alice弹奏起了哥哥的钢琴，我想这个故事的内容不言而喻：</p>
<p>Deemo和Alice是一对兄妹，他在车祸中救了Alice，但失去了自己的生命。Alice在昏睡中见到了Deemo，她迷失了。Deemo通过演奏音乐帮助她醒了过来。</p>
<p>游戏中的面具小姐是她的另一个自己，她从不说话。Alice有过一句台词：“这位面具小姐又是谁，感觉有些冷漠。又感觉，她和deemo是很好的朋友。”面具小姐曾试图将Alice留下来，但Deemo劝她（她们俩）离开。原来面具小姐是不愿意相信哥哥死去而沉溺于昏睡中的另一个自己。</p>
<p>揭开面具的那一刻，她把一切都记起来了，她也失去了哥哥。</p>
<p><img src="https://pic3.zhimg.com/80/v2-49d921430c8c2b81b8d3b21f83cabd16_1440w.png" alt="img"></p>
<p>最后我们知道了哥哥的名字：Hans。</p>
<p>《Deemo》的故事在这里划下了句号，但也给人一种戛然而止的遗憾。</p>
<p>故事到这里恐怕就彻底结束了。</p>
<p>《Deemo》是一款令人印象深刻的游戏。它本身已是一款足够出色的音游，却还拥有令玩家们念念不忘的剧情。我在写完后忍不住想，如果有人把Alice的故事直接告诉我，我会怎么样？我觉得自己可能不会留下太深刻的印象，但《Deemo》做到了。它不但令我印象深刻，而且忍不住想写下点什么。这也许就是游戏的魅力吧。</p>
<p><strong>并没有结束</strong></p>
<p>等等，我的故事还没有说完。还记得之前提到过的坐标吗？雷亚在更新《Deemo》2.0版本的时候去掉了这个坐标。这令许多玩家大惑不解，更让许多在2.0版本之后加入的玩家完全不知道这回事的存在。</p>
<p>之前我还提到过有玩家根据“树只能长到20米推测出Alice的年龄是20岁”，然而在某次更新后，树可以长到50米了……Alice显然不是一个50岁的姑娘。官方钦定兄妹也推翻了父女说，最令人头疼的是，之前的推测中Alice是一个已经死去的女孩，她的父亲甚至捐赠了她的所有器官，但在更新后的剧情里，Alice仍然活着。</p>
<p>2014年，雷亚游戏的创始人游名扬曾在台大进行过一次演讲，在这场<a href="https://link.zhihu.com/?target=http://v.youku.com/v_show/id_XNjY2NDQ3MjIw.html">2小时的独立游戏开发经验分享</a>中，他花了10分钟时间讲述了《Deemo》的诞生。我找到了这段视频，听完了和《Deemo》有关的内容，现在我终于知道《Deemo》的故事来历了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-23cec2c3d66829a1f1911c78045bc496_1440w.jpg" alt="img"></p>
<p>实际上，在《Deemo》发布之后，雷亚还在twitter上公布了日文轻小说推出的消息。这篇小说业已成真，国内也有了汉化版本。我想我给的暗示应该足够明显……《Deemo》从未有过原型，一切都是游名扬们为了给钢琴游戏配上一个故事而虚构的。这一点在视频中，由游名扬亲口说了出来。</p>
<p>《Deemo》这个难以捉摸且意味不明的名字也在演讲里有了答案，他们当时正在申请补贴，由于游戏仍处于开发阶段，所以嘴里经常念叨着“demo，demo……”</p>
<p>这个结局其实令我有些遗憾，但转念想想也不错，至少没有开发组的成员或是哪位朋友遭遇不幸，也并不存在这样一对令人惋惜的兄妹。《Deemo》的动人之处在于，虽然Alice与Hans的故事是虚构的，可我仍然意识到，在现实世界里，类似的事情并非不会发生。《Deemo》用一个残酷但感人的故事，让我联想到生命虽然无偿，但仍然美好。</p>
<p>《Deemo》带给玩家的感动与思考，已经完全脱离了一款游戏在商业世界里是否成功的范畴，它在手机这一方天地上，唤起了我们对游戏的热爱，也让许多很少接触电子游戏的人们意识到：电子游戏可以不仅仅是一个玩具，也可以成为一把钥匙，打开一个名为“人性”的宝库，把爱与恨、苦与乐、哭与笑、通过荧幕送入你的心。</p>
]]></content>
      <tags>
        <tag>DEEMO LAYARK</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails学习笔记-11.2</title>
    <url>/2020/02/12/%E2%80%9CRail%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%9D/</url>
    <content><![CDATA[<p>11.2 迭代F2:建立一个基于Ajax的购物车，开始是按照书里面写的，创建create.js.rjs，网上查了，需要使用protype-rails gem，于是安装了，但是页面点击后ajax没有效果，需要手动刷新后才能出现。于是在网上查了,由于默认使用jquery，所以就改成了jquery的，创建create.js.erb，内容为$(‘#cart’).html(“&lt;%= escape_javascript(render(@cart)) %&gt;”); <span id="more"></span></p>
<p>按照网上仁兄的做法来的：</p>
<p>1.\app\views\layouts\application.html.erb<br>&lt;%= javascript_include_tag :defaults %&gt; to &lt;%= javascript_include_tag “application” %&gt;<br>2.app/views/line_items/create.js.rjs 成create.js.erb，并修改内容：<br>$(‘#cart’).html(“&lt;%= escape_javascript(render(@cart)) %&gt;”);</p>
<p>3.修改line_items_controller中的create方法， 加入format.js</p>
<p>传送门:<a href="http://ruby-china.org/topics/6154" target="_blank">RubyChina</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>rails</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS系统详细解析</title>
    <url>/2021/06/18/%E2%80%9Cdns%E7%B3%BB%E7%BB%9F%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E2%80%9D/</url>
    <content><![CDATA[<p>DNS系统概述：域名系统DNS（domain name system）是因特网使用的命名系统，用来把便于人们记忆的含有特定含义的主机名转换为便于机器处理的IP地址，值得注意的是，DNS系统采用C/S架构，其协议运行在UDP之上，使用53号端口。DNS分为三个部分，层次域名空间，域名服务器和解析器。层次域名空间：因特网采用层次树状结构的命名方法。任何一个连接在因特网上的主机或者路由器，都有一个唯一的层次结构的名字，即域名（Domain。<span id="more"></span> name）域是名字空间中一个可以被管理的划分。域还可以被分为子域，而子域还可以继续划分为子域的子域，这样就形成了顶级域，二级域，三级域等。每一个域名都是由标号序列组成，各标号之间用点“.“”隔开。<br>举个例子：<a href="http://www.baidu.com/">www.baidu.com</a> 其中com是顶级域名，cskaoyan是二级域名，www是三级域名。<br>关于域名中的标号有以下几点值得注意：<br>1.英文不区分大小写。<br>2.标号中除了连字符-之外不能使用其他的标点符号。<br>3.每一个标号不超过63个字符，多标号组成的完整域名最长不超过255字符。<br>4.级别最低的域名写在最左边，级别最高的顶级域名写在最右边。</p>
<p>顶级域名（Top name domain TLD）：有以下大三类<br>1.国家级顶级域名nTLD，国家和某些地区的域名，如“.cn”表示中国，“.us”表示美国，“.uk”表示英国，“.hk”表示中国香港特区。<br>2.通用顶级域名gTLD.常见的有“.com”（公司企业）“.net”（网络服务机构）“.org”（非营利性的组织）“.gov”（美国的政府部门）等。<br>3.基础结构域名。这种顶级域名只有一个，即arga，用于反向域名解析，因此又称为反向域名。<br>国家顶级域名注册的二级域名均由国家自行确定。下图是域名空间的结构<img src="https://img-blog.csdnimg.cn/20181227145035233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FhMTkyODk5Mjc3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在域名系统中，每个域分别由不同的组织进</p>
<p>在域名系统中，每个域分别由不同的组织进行管理，每个组织都可以将它的域再分成一定数目的子域，并将这些子域委托给其他组织去管理。例如，管理CN域的中国将EDU.CN子域授权给中国教育和科研计算机网CERNET来管理。<br>域名服务器</p>
<p>因特网的域名系统被设计成一个联机分布式的数据库系统，并采用客户/服务器模式。域名到IP地址的解析是在域名服务器上进行的，一个服务器所负责（或者说是有权限的）的管辖范围称为区（不是以“域”为单位），各单位根据具体情况来划分自己管辖范围的区，但在一个区中的所有节点必须是能够连通的，每一个区设置相应的权限域名服务器，用来保护该区中的所有主机的域名IP地址的映射。每一个域名服务器不但能够进行一些域名到IP地址的解析，而且还必须具有连向其他域名服务器的信息，当自己不能进行域名到IP地址的转换时，能够知道什么地方去找别的域名服务器。</p>
<p>1.根域名服务器</p>
<p>根域名服务器是最高层次的域名服务器，所有的根域名服务器都知道所有的顶级域名服务器的IP地址。根域名服务器也是最重要的域名服务器，不管是哪一个本地域名服务器，若要对因特网上任何一个域名进行解析，只要自己无法解析，就首先要求助于根域名服务器。因特网上有着13个根域名服务器，尽管我们将这13个根域名服务器中的每个都是为单个的服务器，但每台“服务器”实际上是冗余服务器的集群，以提供安全性和可靠性。需要注意的是，根域名服务器用来管辖顶级域（.com）通常它并不直接把待查询的域名直接转换成IP地址，而是告诉本地域名服务器下一步应当照拿一个顶级域名服务器进行查询。</p>
<p>2.顶级域名服务器<br>这些域名服务器负责管理在该顶级域名服务器注册的二级域名。当收到DNS查询请求时，就给出相应的回答（可能是最后的结果，也可能是下一步应当查找的域名服务器的IP地址）。</p>
<p>3.授权域名服务器（权限域名服务器）<br>每一个主机都必须在授权域名服务器处登记，为了更加可靠地工作，一个主机最好至少有两个授权域名服务器，实际上，许多域名服务器都同时充当本地域名服务器和授权域名服务器。授权域名服务器总是能够将其管辖的主机名的IP地址。</p>
<p>4.本地域名服务器<br>本地域名服务器对域名系统非常重要，每一个因特网服务提供者ISP，或一个大学，甚至一个大学里的系，都可以拥有一个本地域名服务器，当一个主机发出DNS查询请求时，这个查询请求报文就发送给该主机的本地域名服务器。事实上，我们在Windows系统中配置“本地连接”时，就需要填写DNS服务器地址，这个地址就是本地DNS域名服务器的地址。<br>DNS域名服务器的层次结构如图：</p>
<p> <img src="https://img-blog.csdnimg.cn/20181227150929581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FhMTkyODk5Mjc3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id><a href="#" class="headerlink" title></a></h2><p>域名解析过程</p>
<p>域名解析也就是把域名映射成IP地址或者把IP地址映射成为域名的过程。前者称为正向解析，后者称为反向解析。当客户端需要域名解析时，通过本机的DNS客户端构造一个DNS请求报文，以UDP数据报方式发往本地域名服务器。</p>
<p>域名解析有两种方式：递归查询和迭代相结合的查询。<br>递归查询的过程如图所示，该方式由于给根域名服务器的负载过大，几乎不使用。</p>
<p> <img src="https://img-blog.csdnimg.cn/20181227151325924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FhMTkyODk5Mjc3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20181227151342382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FhMTkyODk5Mjc3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>（1）主机向本地域名服务器的查询采用的是递归查询。<br>如果本地主机所询问的本地域名服务器不知道被查询的域名IP地址，那么本地域名服务器就以DNS客户的身份，向根域名服务器继续发出查询请求报文（替该主机继续查询）<br>而不是让该主机自己进行下一步查询。在这种情况下，本地域名服务器只需要向根域名服务器查询一次，后面的几次查询都是递归地在其他几个域名服务器之间的进行的，在步骤7中，本地域名服务器从根域名服务器得到了所需要得IP地址，最后一步，本地域名服务器把查询结果告诉了主机。</p>
<p>（2）本地域名服务器向根域名服务器的查询采用迭代查询。<br>当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地域名服务器“下一步应当向哪一个顶级域名服务器进行查询”然后让本地域名服务器向这个顶级域名服务器进行后续的查询。同样，顶级域名服务器收到查询报文后，要么给出所要查询的IP地址，要么告诉本地域名服务器下一步应当向哪一个权限域名服务器查询。最后返还结果。</p>
<p>举个例子：<br>某主机希望获得y.abc.com的主机的IP地址，域名解析过程如下（共使用八个UDP报文）<br>1.客户机向本地域名服务器发出DNS请求报文。<br>2.本地域名服务器收到请求后，查询本地缓存，假设没有该记录，则以DNS客户的身份向根域名服务器发出解析请求。<br>3.根域名服务器收到请求后，判断该域名属于.com域，将对应的顶级域名服务器dns.com的IP地址返回给本地域名服务器。<br>4.本地域名服务器向顶级域名服务器dns.com发出解析请求报文<br>5.顶级域名服务器dns.com收到请求后，判断该域名属于abc.com域，故将对应的授权域名服务器dns.abc.com的IP地址返回给本地域名服务器。<br>6.本地域名服务器想授权域名服务器发起解析请求报文。<br>7.授权域名服务器dns.abc.com收到请求后，将查询结果返回给本地域名服务器。<br>8.本地域名服务器将查询结果保存到本地缓存，同时返回给客户机。<br>为了提供DNS的查询效率，减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存，当一个DNS服务器接收到DNS查询结果是，它能将该DNS信息缓存在高速缓存中。这样，当另一个相同的域名查询到大概DNS服务器是，该服务器就能够直接提供所要求的IP地址，而不需要再去向其他DNS服务器询问了，因为主机名和IP地址之间的映射不是永久的，所以DNS服务器将在一段时间后丢弃高速缓存中的信息。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>冲突域和广播域</title>
    <url>/2021/11/07/%E2%80%9C%E5%86%B2%E7%AA%81%E5%9F%9F%E5%92%8C%E5%B9%BF%E6%92%AD%E5%9F%9F%E2%80%9D/</url>
    <content><![CDATA[<p>形象比喻：局域网好比一栋大楼，每个人（好比主机）有自己的房间（房间就好比网卡，房号就是物理地址，即MAC地址），里面的人（主机）人手一个对讲机，由于工作在同一频道，所以一个人说话，其他人都能听到，这就是广播（向所有主机发送信息包），只有目标才会回应，其他人虽然听见但是不理（丢弃包），而这些能听到广播的所有对讲机设备就够成了一个广播域。而这些对讲机就是集线器（HUB），每个对讲机都像是集线器上的端口，大家都知道对讲机在说话时是不能收听的，必须松开对讲键才能收听，这种同一时刻只能收或者发的工作模式就是半双工。而且对讲机同一时刻只能有一个人说话才能听清楚，如果两个或者更多的人一起说就会产生冲突，都没法听清楚，所以这就构成了一个冲突域。</p>
 <span id="more"></span>

<p>冲突域<br>      冲突域就是连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合，或以太网上竞争同一带宽的节点集合.</p>
<pre><code>  冲突域指的是会产生冲突的最小范围，在计算机和计算机通过设备互联时，会建立一条通道，如果这条通道只允许瞬间一个数据报文通过，那么在同时如果有两个或更多的数据报文想从这里通过时就会出现冲突了。冲突域的大小可以衡量设备的性能，多口hub的冲突域也只有一个，即所有的端口上的数据报文都要排队等待通过。而交换机就明显的缩小了冲突域的大小，使到每一个端口都是一个冲突域，即一个或多个端口的高速传输不会影响其它端口的传输，因为所有的数据报文不同都按次序排队通过，而只是到同一端口的数据才要排队。
</code></pre>
<p>广播域<br>      广播是一种信息的传播方式，指网络中的某一设备同时向网络中所有的其它设备发送数据，这个数据所能广播到的范围即为广播域(Broadcast Domain)。即，网络中能接收任一设备发出的广播帧的所有设备的集合</p>
<p>广播域与冲突域的区别<br>      广播域可以跨网段，而冲突域只是发生的同一个网段的。</p>
<pre><code>  冲突域：在同一个冲突域中的每一个节点都能收到所有被发送的帧;

  广播域：网络中能接收任一设备发出的广播帧的所有设备的集合;

  冲突域：基于第一层（物理层）;

  广播域：基于第二层（数据链路层）;

  一个局域网就是一个广播域（往往是指一个IP段内），广播域中的机器可以收到域中其他任何一台机器的广播，而不能收到域外机器的广播，域外机器也不能收到域内机器发的广播；

  冲突域：一个站点向另一个站点发出信号。能收到信号的站点就构成一个冲突域。

  集线器（HUB） 所有端口都在同一个广播域，冲突域内。

  第二层交换机（Swith）所有端口都在同一个广播域内，而每一个端口就是一个冲突域。
</code></pre>
<p>3种网络设备的特点<br>      集线器(Hub)设备不能识别MAC地址和IP地址，对接收到的数据以广播的形式发送，它的所有端口为一个冲突域同时也为一个广播域,交换机设备具有MAC地址学习功能，</p>
<pre><code>  第二层交换机通过查找MAC地址表将接收到的数据传送到目的端口，相比于集线器，交换机(Switch)可以分割冲突域，它的每一个端口相应的称为一个冲突域。

  交换机虽然能够分割冲突域，但是交换机下连接的设备依然在一个广播域中，当交换机收到广播数据包时，会在所有的设备中进行传播，在一些情况下会导致网络拥塞以及安全隐患，为了避免因不可控制的广播导致的网络故障风险，通信网络中使用路由器(Router)设备来分割广播域。相比于交换机，路由器并不通过MAC地址来确定转发数据的目的地址。路由器工作在网络层，利用不同网络的ID号(IP地址，又称为网络地址、协议地址)来确定数据转发的目的地址。MAC地址通常由设备硬件出厂自带不能更改，IP地址一般由网络管理员手工配置或系统自动分配。路由器通过IP地址将连接到其端口的设备划分为不同的网络(子网)，每个端口下连接的网络即为一个广播域，广播数据不会扩散到该端口以外，因此我们说路由器隔离了广播域
</code></pre>
<p>第一层设备（中继器、集线器）不能划分冲突域和广播域。</p>
<p>第二层设备（网桥、第二层交换机）能划分冲突域，不能划分广播域。</p>
<p>第三层设备（路由器）既能划分冲突域，又能划分广播域。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP是什么？</title>
    <url>/2020/04/08/TCP-IP%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p><strong>本文大半内容都不对，弃了弃了~</strong></p>
<p>自计算机和互联网出现，大多数计算机都被用于上网、发邮件或者只是通过网路使用一下网络共享打印机。计算机网络<a href="%E9%80%9A%E8%BF%87%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81%E5%85%81%E8%AE%B8%E5%A4%9A%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E9%97%B4%E4%BA%A4%E6%B5%81%E5%92%8C%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90">^1</a>可以连接各种功能不一样的电子设备，例如笔记本电脑、平板电脑、智能手机、服务器、打印机、扫描仪、路由器等设备。如果说以上设备连上网络后都算是“传统”节点，那在现在的物联网时代，各种计算机新品种就可以算作“非传统”节点了吧，毕竟现在能连网的设备真的是五花八门。再说征服王“互联网”现在真的可以说已经征服世界的情况下，计算机网络类型都可以分成5种：</p>
<ul>
<li>PAN - 个人网络，一台电脑配打印机等设备</li>
<li>LAN - 局域网，一个路由器下的网络</li>
<li>WLAN - 无线局域网，一个无线路由器信号覆盖下的网络</li>
<li>MAN - 都市网，一个城市的网络</li>
<li>WAN - 广域网，一个省、国家或整个世界下的网络，比如互联网</li>
</ul>
<p>在这么广阔的网络下，如果节点之间通讯只靠一个“节点ID”作为坐标来互动，那互动时所传输的数据恐怕是要迷路很久甚至有可能累死在路上。<strong>TCP/IP</strong><a href="%E7%9B%AE%E5%89%8D%E4%B8%BB%E6%B5%81%E7%9A%84%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE%E9%9B%86%E5%90%88%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E5%92%8C%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82">^2</a>就包含了网络相关的标准规范。这个协议集合里的IP部分就很好的为迷路的数据指明了方向。</p>
<span id="more"></span>

<p><strong>先来个更好的文章做参考：<a href="//developer.51cto.com/art/201906/597961.htm">太厉害了，终于有人能把TCP/IP协议讲的明明白白了！</a>，<a href="//tool.oschina.net/commons?type=7">TCP/UDP常见端口参考</a></strong></p>
<p>网络上两个节点之间通讯需要3样东西来指路：</p>
<ul>
<li>节点在网络上的地址（IP地址）</li>
<li>节点的名称（MAC地址）</li>
<li>节点里应用或服务接收数据的端口（Port端口）</li>
</ul>
<h1 id="TCP-IP协议全家桶"><a href="#TCP-IP协议全家桶" class="headerlink" title="TCP/IP协议全家桶"></a>TCP/IP协议全家桶</h1><p>全家桶包含ARP, BGP, DHCP, DNS, FTP, HTTP, ICMP, IGMP, IP, TCP, Telnet, TFTP, UDP, WWW等。<br>节点上的TCP/IP栈，需跟随所运行的网络应用的要求，从全家桶中选择合适的协议；不同的节点有可能会使用不一样的TCP/IP栈。</p>
<h2 id="网络体系结构OSI七层模型"><a href="#网络体系结构OSI七层模型" class="headerlink" title="网络体系结构OSI七层模型"></a>网络体系结构OSI七层模型</h2><table>
<thead>
<tr>
<th align="right"></th>
<th align="center">名称</th>
<th align="center">功能</th>
<th align="center">TCP/IP协议族</th>
</tr>
</thead>
<tbody><tr>
<td align="right">7</td>
<td align="center">应用层(Applicaiton)</td>
<td align="center">终端用户的接口支持：文件传输，电子邮件，文件服务，虚拟终端</td>
<td align="center">TFTP, HTTP, SNMP, FTP, SMTP, DNS, Telnet</td>
</tr>
<tr>
<td align="right">6</td>
<td align="center">表示层(Presentation)</td>
<td align="center">数据格式化，代码转换，数据加密</td>
<td align="center">N/A</td>
</tr>
<tr>
<td align="right">5</td>
<td align="center">会话层(Session)</td>
<td align="center">连接管理：解除或建立与别的节点的联系</td>
<td align="center">N/A</td>
</tr>
<tr>
<td align="right">4</td>
<td align="center">传输层(Transport)</td>
<td align="center">端对端传输管理，提供端对端的接口</td>
<td align="center">TCP, UDP</td>
</tr>
<tr>
<td align="right">3</td>
<td align="center">网络层(Network)</td>
<td align="center">端对端路由，为数据包选择路由</td>
<td align="center">IP, ICMP, RIP, OSPF, BGP, IGMP</td>
</tr>
<tr>
<td align="right">2</td>
<td align="center">数据链路层(Data Link)</td>
<td align="center">网络接入和架构管理，传输有地址的帧以及错误检测功能</td>
<td align="center">SLIP, CSLIP, PPP, ARP, RARP, MTU</td>
</tr>
<tr>
<td align="right">1</td>
<td align="center">物理层(Physical)</td>
<td align="center">比特流生成和接收，以二进制数据形式在物理媒体上传输数据</td>
<td align="center">ISO2110, IEEE802, IEEE802.2</td>
</tr>
</tbody></table>
<h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><p>IP协议理论上让每个网络不管大小都有一个唯一的IP地址（或称作“节点地址”），但事实上不是每个网络（小到一台电脑配一个打印机）都能独享世界唯一IP地址。讨论“不能独享世界唯一IP地址的情况下，数据到底怎么就不会迷路了？”的问题之前，我们要先认识IP地址的格式。</p>
<h2 id="IPv4格式"><a href="#IPv4格式" class="headerlink" title="IPv4格式"></a>IPv4格式</h2><p>IPv4使用32-bit节点地址，分成4个8-bit部分，例如：</p>
<p><code>01110000.11011110.11100110.00001111</code></p>
<p>使用十进制的眼光来看这个节点地址就会变成这样：</p>
<p><code>112.222.230.15</code></p>
<p>每一个8-bit部分的最大值是255。<br>一个IP地址包含有两组信息：网络ID和节点ID。</p>
<p>网络ID分为3类：</p>
<ul>
<li>A类<ul>
<li>IP地址范围：1.0.0.0 ~ 126.255.255.255</li>
<li>A类网络ID为第1个8-bit部分</li>
<li>例子：<code>112.222.230.15</code>属于A类，网络ID为<code>112</code>，节点ID为<code>222.230.15</code></li>
</ul>
</li>
<li>B类<ul>
<li>IP地址范围：128.0.0.0 ~ 191.255.255.255</li>
<li>B类网络ID为第1-2个8-bit部分</li>
<li>例子：<code>142.112.1.70</code>属于B类，网络ID为<code>142.112</code>，节点ID为<code>1.70</code></li>
</ul>
</li>
<li>C类<ul>
<li>IP地址范围：192.0.0.0 ~ 223.255.255.255</li>
<li>C类网络ID为第1-3个8-bit部分</li>
<li>例子：<code>192.168.1.1</code>属于C类，网络ID为<code>192.168.1</code>，节点ID为<code>1</code><br>其中以127开头的IP地址为“回环地址”，数据信息的发送者发出的数据流会原样送回发送者。<br>网络ID越大，处于该网络下的主机或节点越少。一般家庭用的路由器网络ID为<code>192.168.1</code>的情况下最多只能连接254个设备。</li>
</ul>
</li>
</ul>
<h2 id="IPv6格式"><a href="#IPv6格式" class="headerlink" title="IPv6格式"></a>IPv6格式</h2><p>IPv6使用128-bit节点地址，分成8个4位数的八进制16-bit部分，例如：</p>
<p><code>2001:0000:5723:0000:0000:D14E:DBCA:0764</code></p>
<p>也可以缩写成这样：</p>
<p><code>2001:0:5723::D14E:DBCA:764</code></p>
<p>其他例子：</p>
<p><code>2001:0DA8:0000:0000:0001:0000:0000:0001</code> =&gt; <code>2001:DA8::1:0:0:1</code> OR <code>2001:DA8:0:0:1::1</code><br><code>0:0:0:0:0:0:0:1</code> =&gt; <code>::1</code><br><code>0:0:0:0:0:0:0:0</code> =&gt; <code>::</code></p>
<p>开头64-bit包含了网络和子网络的地址，后面64-bit是接口ID。因为IPv6地址是直接赋予接口的，所以一个主机可以有多个IPv6地址对应不同的网络连接。下图拆开开头64-bit网络地址：<br><img src="/.com//tcp-ip-ipv6-prefix.jpg" alt="IPv6 Prefix"></p>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器是能连接多个网络的设备。它们决定了数据的去向，但它们一般都不是数据的最终接收者。数据在传输过程中有可能经过多个跳板<a href="%E6%95%B0%E6%8D%AE%E5%9C%A8%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%BB%8F%E8%BF%87%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8">^3</a>，一般这些数据跳的次数过多且还没到目的地的话就会累死在路上，造成的结果就是发送者得不到回应、响应超时或者收到路由甲回应的死亡信息。</p>
<p>一个ID为<code>142.222</code>的网络例子：<br><img src="/.com//tcp-ip-router-network.jpg" alt="Network 142.222.x.x"><br>在这个网络中，所有的主机或节点都是必须要向路由器<code>142.222.9.255</code>发送他们的数据，这样数据才可以在这个网络中畅行或者从这个网络发出到更外面的网络；所以在这里路由器<code>142.222.9.255</code>被称为是默认网关。</p>
<p>假如在以上网络中主机<code>142.222.12.27</code>要发送数据到服务器<code>112.111.72.56</code>，数据会先到路由器<code>142.222.9.255</code>，路由器会通过路由表查找数据的下个传送目标（随便一提，需要解析域名的情况下，找到一个IP记录丰富的DNS也能让你的数据少跳跳板，数据极低概率会累死在路上）。</p>
<p>假如在以上B类网络基础上存在<strong>子网络</strong>：<br><img src="/.com//tcp-ip-router-subnet.jpg" alt="Network 142.222.x.x with subnet"><br>在子网络中主机<code>142.222.10.2</code>要发送数据到服务器<code>142.123.32.14</code>，数据会先到路由器<code>142.222.10.255</code>，再到外面网络的路由器<code>142.222.255.255</code>，再到更外面网络的路由器<code>142.255.255.255</code>；找到<code>142.255.255.255</code>的下级<code>142.123.255.255</code>，再到服务器<code>142.123.32.14</code>。当然，如果网络<code>142.123</code>底下也有子网络的话，就要通过网关<code>142.123.32.255</code>，之后才是服务器<code>142.123.32.14</code>。</p>
<h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>MAC地址一般说的就是网卡生产出来自带的12个十六进制数的ID，当然也可以通过软件生成一个随机的MAC地址，只要主机所在的网络路由器上的ARP表上没有就行。它能够在一个网络下确认主机发送者或接收者的身份。因为MAC地址都是厂家定的，对比IP地址，MAC地址就可以有唯一标识了，甚至一人手上说不定还能独享多个“唯一”。MAC地址例子如下：</p>
<p><code>00-0B-DB-45-A4-CC</code></p>
<p>前6个数代表制造商：<code>00-0B-DB</code><br>后6个数为唯一编号：<code>45-A4-CC</code></p>
<h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>ARP协议让路由器记录下哪个IP地址对应哪个MAC地址。因为IP地址多数为动态，一个设备说不定某天就移民了，所以路由器一般都有一个ARP表记录和分配IP地址给底下的子民；要是有的子民刚移民过来没有记录在案，在有数据传送过来路由找不到人的情况下会发广播，以这样的操作令底下子民回应，之后强制记录在案。</p>
<p><strong><em>更多可以百度TCP/IP全家桶各种协议，比较重要的还有数据包结构、DHCP<a href="%E4%B8%BA%E7%BD%91%E5%85%B3%E8%8A%82%E7%82%B9%E7%AE%A1%E7%90%86%E4%B8%8B%E7%9A%84%E4%B8%BB%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81IP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E9%85%8D%EF%BC%9B%E6%9C%89%E6%95%88%E9%98%B2%E6%AD%A2%E4%BA%BA%E5%B7%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A4%B1%E8%AF%AF%EF%BC%9B%E6%9C%89%E4%B8%BB%E6%9C%BA%E8%A2%AB%E8%BF%81%E7%A7%BB%E6%88%96%E6%9B%B4%E6%9B%BF%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E8%83%BD%E5%A4%9F%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E9%85%8D%E7%BD%AE">^4</a>和DNS<a href="%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%83%BD%E5%A4%9F%E5%B8%AE%E5%8A%A9%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%E5%88%B0%E5%AF%B9%E5%BA%94IP%E5%9C%B0%E5%9D%80">^5</a>。</em></strong></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
        <tag>MAC</tag>
        <tag>IPv6</tag>
        <tag>IPv4</tag>
      </tags>
  </entry>
  <entry>
    <title>二阶常系数微分方程的解的问题</title>
    <url>/2021/11/30/%E2%80%9C%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E2%80%9D/</url>
    <content><![CDATA[<p>二阶常系数非齐次线性微分方程的表达式为y’’+py’+qy=f(x)，其特解y*设法分为：1.如果f(x)=P（x），Pn（x）为n阶多项式；2.如果f(x)=P（x）e^αx，Pn（x）为n阶多项式。</p>
<p>二阶非齐次线性微分方程的特解</p>
<p>1二阶常系数齐次线性微分方程<span id="more"></span><br>标准形式</p>
<p>y″+py′+qy=0</p>
<p>特征方程</p>
<p>r^2+pr+q=0</p>
<p>通解</p>
<p>1.两个不相等的实根：y=C1e^(r1x)+C2e^(r2x)</p>
<p>2.两根相等的实根：y=(C1+C2x)e^(r1x)</p>
<p>3.一对共轭复根：r1=α+iβ,r2=α-iβ：y=e^(αx)*(C1cosβx+C2sinβx)</p>
<p>2特解y*设法<br>1、如果f(x)=P（x），Pn（x）为n阶多项式。</p>
<p>若0不是特征值，在令特解y*=x^k*Qm(x)*e^λx中，k=0，λ=0；因为Qm(x)与Pn（x）为同次的多项式，所以Qm(x)设法要根据Pn（x）的情况而定。</p>
<p>比如如果Pn（x）=a（a为常数），则设Qm(x)=A（A为另一个未知常数）；如果Pn（x）=x，则设Qm(x)=ax+b；如果Pn（x）=x^2，则设Qm(x)=ax^2+bx+c。</p>
<p>若0是特征方程的单根，在令特解y*=x^k<em>Qm(x)<em>e^λx中，k=1，λ=0，即y</em>=x</em>Qm(x)。</p>
<p>若0是特征方程的重根，在令特解y*=x^k<em>Qm(x)<em>e^λx中，k=2，λ=0，即y</em>=x^2</em>Qm(x)。</p>
<p>2、如果f(x)=P（x）e^αx，Pn（x）为n阶多项式。</p>
<p>若α不是特征值，在令特解y*=x^k*Qm(x)<em>e^αx中，k=0，即y</em>=Qm(x)*e^αx，Qm(x)设法要根据Pn（x）的情况而定。</p>
<p>若α是特征方程的单根，在令特解y*=x^k<em>Qm(x)<em>e^αx中，k=1，即y</em>=x</em>Qm(x)*e^αx。</p>
<p>若α是特征方程的重根，在令特解y*=x^k<em>Qm(x)<em>e^λx中，k=2，即y</em>=x^2</em>Qm(x)*e^αx。</p>
<p>3、如果f(x)=[Pl（x）cos(βx)+Pn（x）sin(βx)]e^αx，Pl（x）为l阶多项式，Pn（x）为n阶多项式。</p>
<p>若α±iβ不是特征值，在令特解y*=x^k*[Rm1(x)cos(βx)+Rm2(x)sin(βx)]e^αx中，k=0，m=max{l,n}，Rm1(x)与Rm2(x)设法要根据Pl（x）或Pn（x）的情况而定（同Qm(x)设法要根据Pn（x）的情况而定的原理一样）。</p>
<p>即y*=[Rm1(x)cos(βx)+Rm2(x)sin(βx)]e^αx</p>
<p>若α±iβ不是特征值，在令特解y*=x^k*[Rm1(x)cos(βx)+Rm2(x)sin(βx)]e^αx中，k=1，即y*=x*[Rm1(x)cos(βx)+Rm2(x)sin(βx)]e^αx。</p>
]]></content>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>手冲豆种--洪都拉斯雪莉</title>
    <url>/2021/09/30/%E2%80%9C%E6%B4%AA%E9%83%BD%E6%8B%89%E6%96%AF%E9%9B%AA%E8%8E%89%E2%80%9D/</url>
    <content><![CDATA[<p>【洪都拉斯· 雪莉】</p>
<p>国家：洪都拉斯</p>
<p>产区：马萨瓜拉</p>
<p>庄园：莫卡庄园</p>
<p>海拔：1500-1700m</p>
<p>品种：卡杜拉、卡杜艾、帕卡斯</p>
<p>处理法：精致水洗威士忌雪莉酒桶发酵</p>
<span id="more"></span>


<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988871/1000" alt="img"></p>
<p>/ 豆子信息</p>
<p>洪都拉斯位于中美洲北部，北临加勒比海，南濒太平洋的丰塞卡湾，东、南同尼加拉瓜和萨尔瓦多交界，西与危地马拉接壤，多为山地和高原。</p>
<p>洪都拉斯境内有二十八万公顷的咖啡园，以小型咖啡园为主，其咖啡园大都小于3.5公顷，这些咖啡种植园就占了整个洪都拉斯咖啡生产的百分之六十。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988872/1000" alt="img"></p>
<p>在咖啡园里，因为种植地属于山区，所以人们用手采摘咖啡豆，之后小心地处理加工，以求出产更加优质的咖啡豆。洪都拉斯每年采收三百万袋的咖啡，提供给大家的咖啡量多质精，现已成为世界十大咖啡出口国之一。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988873/1000" alt="img"></p>
<p>洪都拉斯主要有6个咖啡产区，分别是Copán, El Paraiso, Comayagua, Opalaca, Montecillos，Agalta。平均种植海拔在1000-1600m，主要的种植品种有Bourbon、Caturra、Typica、Catuai、Pacas。</p>
<p>/ 马萨瓜拉（Masaguara）</p>
<p>马萨瓜拉（Masaguara）是一个位于洪都拉斯Intibucá省的自治市，位于JesúsdeOtoro山谷的南部，周围环绕着群山和丘陵，主要致力于咖啡种植者，是当地经济的主要发动机，与山谷相对应的地区致力于种植基本谷物和牲畜,他的名字的由来：根据AlbertoMembre o先生的“土着地名”，Masaguara的意思是“有鹿的地方”</p>
<p>/ 品种（卡杜拉、卡杜艾、帕卡斯）</p>
<p><strong>卡杜拉</strong>(Caturra)是波旁(bourbon)的一个自然变种，于1937年在巴西被人们发现，它的树体没有波本高大，更加矮小。由于继承了波本的血统，所以抗比力比较弱，但是产量却高于波本。虽然发现与巴西，但是卡杜拉却不适合在巴西生长，所以在巴西并没有大规模栽种，而是在中南美地区广为盛行，例如哥伦比亚、哥斯达黎加、尼加拉瓜。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988875/1000" alt="img"></p>
<p><strong>卡杜艾</strong>是一种卡杜拉和Mondu Novo人工杂交的咖啡品种。卡杜艾有比较好的抗自然灾害的能力，特别是抗风抗雨。卡杜艾树种比较低矮，相对其他咖啡树，卡杜艾的果实长的更结实，不易采摘，果实既有红色也有黄色。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988876/1000" alt="img"></p>
<p><strong>帕卡斯</strong>是波旁的自然变种。和其他被广泛种植低波旁系品种一样，帕卡斯是单一的单基因突变。它低主要有点是咖啡树个头小，有较高低产量潜力，可以和其他水果等植物混合种植，从而增加咖啡樱桃的产量。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988877/1000" alt="img"></p>
<p>该品种于1949年在萨尔瓦多圣安娜地区的帕卡斯家族的一个农场里被发现。1960年，萨尔瓦多咖啡研究所（ISIC）开始了对帕卡斯的系谱选择（通过连续几代选择单个植物也称单株选择）项目。在中美洲比较流行并在在萨尔瓦多被广泛种植，约占其25%的产量。1974年，洪都拉斯咖啡研究所引进此品种，并在洪都拉斯种植。</p>
<p>/ 处理法</p>
<p><strong>精致水洗威士忌雪莉酒桶发酵处理法</strong>是先将新鲜采摘后的咖啡果实进行精致水洗，然后放入熟成过雪莉酒的威士忌橡木酒桶中低温发酵30-40天（温度大约在15-20℃），然后再进行荫干晾晒。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988878/1000" alt="img"></p>
<p>“雪莉桶”是威士忌行业中的雪莉酒厂用来做陈年的桶，雪利酒是一种着名的加强酒，产自西班牙南部阳光明媚的赫雷斯产区，雪利酒的酿造的过程中一定要经过索雷拉系统（Solera System）熟化这道工序。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988879/1000" alt="img"></p>
<p>索雷拉系统本质上是指雪利酒加强之后，将不同年份的雪利酒混合陈酿的过程；在索雷拉系统中，所有的酒桶会根据年份层层叠放，最底层是年份最老的雪利酒，最上面则是最为年轻的雪利酒，每年会从最底部的酒桶中抽取部分酒液用于装瓶和销售，再从上一层的酒桶中抽取相应比例的酒液进行补充，这就是形成了“雪莉酒的独特之处。</p>
<p>/ 烘焙分析</p>
<p>烘焙机杨家800N（烘焙量300克）</p>
<p>炉温190℃入锅，火力140，风门开设3；回温点1’42”，炉温140℃时将风门开至4，火力不变；炉温151.8℃时豆表变为黄色，青草味完全消失，进入脱水阶段，当炉温到达150℃时，将火力调至120，风门不变；</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988880/1000" alt="img"></p>
<p>8’38”时，豆表出现丑陋胡皱褶和黑斑纹，烤面包味明显转为咖啡香，可以定义为一爆的前奏，这时候要听清楚一爆爆点的声音，到9’07”开始一爆，风门开至4，一爆后发展2’10，195℃下锅。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988881/1000" alt="img"></p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988882/1000" alt="img"></p>
<p><strong>Agtron豆色值为68.6（上图），Agtron粉色值为80.9（下图），Roast Delta值为12。</strong></p>
<p><strong>/ 杯测图</strong></p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10013988883/1000" alt="img"></p>
<p>杯测风味：香草、发酵酒香、蜂蜜、黑巧力、莓果</p>
<p><strong>1.风味描述因人而异，同时会受水温和冲煮方式的影响，本杯测报告提供的是相同冲煮器具和参数的情况下，按照风味轮所限定的描述，目的在于提供参考；</strong></p>
<p><strong>2.内容会因应新的信息内容及时修正，以最新的更新为准.</strong></p>
<p>/ 冲煮分享</p>
<p>建议冲煮方式：手冲</p>
<p>滤杯：V60</p>
<p>水温：88-90℃</p>
<p>粉水比：1：15</p>
<p>研磨度：BG 5R（中国标准20号筛网通过率58%），即中细研磨</p>
<p>冲煮手法：分段式萃取。用30克水进行闷蒸30秒，小水流绕圈注水至125克时进行分段，水位下降即将露出粉床时继续注水至228克停止注水，等水位下降即将露出粉床时移走滤杯，（闷蒸开始计时）萃取时间为1’46”。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/9973317646/1000" alt="img"></p>
<p><strong>风味</strong>:闻起来有香草、奶油的香气，入口有威士忌、莓果、杏仁、黑巧克力风味，余韵有枫糖的回甘。</p>
]]></content>
      <categories>
        <category>coffee</category>
      </categories>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>四种JavaEE架构简介</title>
    <url>/2020/11/29/%E5%9B%9B%E7%A7%8DJavaEE%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>传统三层架构</p>
<p>配图是一个基于MVC的三层架构, 大致可以分成表现层, 业务层和持久层。表现层负责接收请求和转发请求。业务层主要负责处理请求, 值得注意的是事务管理, 日志记录等操作通常也是封装在这层中。持久层主要负责数据库与实体之间的操作，我们可以使用框架来简化各层的开发, 例如表现层使用SpringMVC或Strut2, 持久层使用Mybatis或Hibernate, 使用Spring管理三层之间的关系 <span id="more"></span></p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105155049-481908758.png" alt="img"></p>
<p>集群架构</p>
<p>集群属于水平拓展.</p>
<p>传统三层架构中存在许多问题, 比如业务层中不同模块占用系统资源的比例相差太大, 导致占用系统资源, 可以使用集群解决这类问题.</p>
<p>在集群架构, 一般由这么一个重要的角色, 那就是反向代理服务器, 它的主要任务是实现负载均衡, 接收用户请求, 转发到目标服务器.</p>
<p>反向代理服务器可以使用nginx实现.</p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829103451096-37051288.png" alt="img"></p>
<h1 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h1><p>多个模块完成一个功能.</p>
<p>每个模块都可以搭建集群 -&gt; 高可用</p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104315263-150430733.png" alt="img"></p>
<p> 微服务架构</p>
<p>根据产品的业务功能模块来划分服务的种类, 这属于垂直划分.</p>
<p>客户端可以通过基于HTTP或RPC的方式来调用微服务, 这样做的目的是为了降低调用所产生的性能开销.</p>
<p>每个模块也可搭建集群 -&gt; 高可用</p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104515114-760628485.png" alt="img"></p>
<p>三种轻量级API调用服务 - 使用service gateway和service register实现客户端与微服务之间的调用(实现通信)</p>
<p>SOA实现两个系统之间通信的三种方式</p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105440188-18517504.png" alt="img"></p>
<p>dubbo体系结构:</p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105514263-1906080560.png" alt="img"></p>
<p>一个典型的基于SOA的电商项目架构:</p>
<p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105035906-521553459.png" alt="img"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之基础</title>
    <url>/2020/04/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>数据结构基础，了解数据结构的分类，认识一下抽象数据类。</p>
<span id="more"></span>

<h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><p><strong>内存中元素紧挨在一起的数据结构为顺序结构</strong>。在C语言中，声明一个整数结构类型长度为<code>5</code>的数组时，内存中会留出5个整数长度的连续空间用于存储数组。实际上，数组的指针可以说是指向在数组中的第一个元素。当要修改第4个元素时，计算机是找到了数组指针地址，跳跃3个整数长度的距离，从而找到第4个元素的位置。</p>
<h1 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h1><p><strong>内存中元素可连续也可不连续，通过指针寻找和连接元素的数据结构为链式结构</strong>。在Java语言中，链表（Linked List）和树（Tree）都属于链式结构。他们属于抽象的结构类型，类型所包含的元素被称为节点（Node）。链表节点中的值可以为整数类、浮点类、字符串等，包括抽象数据类；但链表节点中还会包含有节点的一个后继元素指针。树节点对比链表节点的不同在于树节点中可以包含有多个后继元素指针。总结起来就是<strong>链式结构节点在内存中连续摆放不是必须的</strong>，当计算机查找某个节点时，会走遍目标节点前的所有节点，从而顺着第一个节点的指针找到目标指针。</p>
<h1 id="比较顺序结构和链式结构"><a href="#比较顺序结构和链式结构" class="headerlink" title="比较顺序结构和链式结构"></a>比较顺序结构和链式结构</h1><p><img src="/.com//data-structure-random-linked-ram.png" alt="顺序结构和链式结构在内存中的不同"></p>
<ul>
<li>顺序结构在内存中有固定最大长度，而链式结构在内存中没有，所以在流动数据多的情况下，链式结构对空间利用更灵活。</li>
<li>顺序结构在内存中是元素之间是连续的，而链式结构在内存中很可能是不连续的，所以在查找元素时，通过地址计算公式查找，顺序结构的效率更高。</li>
<li>在首部添加元素或删除中间某个元素的情况下，链式结构的效率会更高，因为对比顺序结构，链式结构不需要重新排列。</li>
<li>顺序结构最大长度难以确定的情况下，会产生太多的储存空间“碎片”，而链式结构原本就是“碎片化”的。</li>
</ul>
<h1 id="C语言数据类型"><a href="#C语言数据类型" class="headerlink" title="C语言数据类型"></a>C语言数据类型</h1><p>原子/基本类型：short, int, long, float, double, char<br>结构/构造类型：数组, struct, union, enum<br>其他：指针，空（void）</p>
<h1 id="抽象数据类型（Abstract-Data-Type）"><a href="#抽象数据类型（Abstract-Data-Type）" class="headerlink" title="抽象数据类型（Abstract Data Type）"></a>抽象数据类型（Abstract Data Type）</h1><p>区别于基本数据类型，基本数据类型有设定数据占用空间的极限、数据表示的方式和内存中结构的特性；抽象数据类型基于基本数据类型形成更复杂的数据类型，例如链表（Linked List）和树（Tree）都属于抽象数据类。颜色（Color）、坐标（Point）等结构类也都属于抽象数据类。</p>
<blockquote>
<p>所谓抽象数据类型就是把数据类型和相关操作捆绑在一起。</p>
</blockquote>
<p>Color抽象数据类:<br>由Red、Green和Blue，3个范围为0-255的整数值表示颜色范围，加上一个范围为0-1的浮点型Alpha数值表示透明度。</p>
<p>Point抽象数据类:<br>由x、y和z，3个整数值表示三维空间中的坐标。</p>
<h1 id="抽象数据类型伪代码"><a href="#抽象数据类型伪代码" class="headerlink" title="抽象数据类型伪代码"></a>抽象数据类型伪代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADT 抽象数据类型名</span><br><span class="line">Data</span><br><span class="line">  数据元素之间逻辑关系的定义</span><br><span class="line">Operation</span><br><span class="line">  操作</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>抽象数据类</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之线性表List</title>
    <url>/2020/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A1%A8List/</url>
    <content><![CDATA[<p>线性表（List），了解线性表的基础知识，认识一下线性表的种类。</p>
<span id="more"></span>

<h1 id="线性表List"><a href="#线性表List" class="headerlink" title="线性表List"></a>线性表List</h1><p>线性表（List）：由另个或多个元素组成的有限序列。<strong>元素是有序的，可以被排列的</strong>。在有序结构中，某个元素<code>ai</code>前面的元素<code>ai-1</code>称为<strong>前驱元素</strong>，后面的元素<code>ai+1</code>称为<strong>后继元素</strong>。在Java语言中，数组（ArrayList）和链表（Linked List）都属于线性表。其中数组使用了顺序结构，而链表使用了链式结构。</p>
<p>线性表的数据对象集合为<code>&#123;a1,a2,...,an-1,an&#125;</code>，每个元素的类型均为<code>DataType</code>。<strong>数据元素之间的关系是一对一的关系。</strong>其中，除第一个元素<code>a1</code>外，每个元素有且只有一个直接前驱元素，除最后一个元素<code>an</code>外，每个元素有且只有一个直接后继元素。</p>
<h1 id="线性表伪代码"><a href="#线性表伪代码" class="headerlink" title="线性表伪代码"></a>线性表伪代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADT 线性表（List）</span><br><span class="line">Data</span><br><span class="line">  数据对象集合 &#123;a1,a2,...,an-1,an&#125;</span><br><span class="line">Operation</span><br><span class="line">  init(*L)：初始化空线性表L</span><br><span class="line">  isEmpty(L)：判断线性表是否为空</span><br><span class="line">  clear(*L)：清空线性表</span><br><span class="line">  getElement(L,i,*e)：将线性表L中第i个元素返回给e</span><br><span class="line">  elementAt(L,e)：线性表L中查找与e相等的元素，返回元素的位置</span><br><span class="line">  insert(*L,i,e)：线性表L中第i个位置插入新元素e</span><br><span class="line">  delete(*L,i,*e)：删除线性表L中第i个位置元素，并返回该元素给e</span><br><span class="line">  length(L)：返回线性表L的元数个数</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure>

<h1 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h1><p>线性表的顺序存储结构封装需要3个属性：</p>
<ul>
<li>存储空间初始位置，数组指针</li>
<li>线性表的最大长度，指存储空间总长度，初始化后不变</li>
<li>线性表的当前长度，指表中元素数量，大于等于0，小于表的最大长度</li>
</ul>
<h2 id="顺序存储结构的地址计算方法"><a href="#顺序存储结构的地址计算方法" class="headerlink" title="顺序存储结构的地址计算方法"></a>顺序存储结构的地址计算方法</h2><p><strong>注：<code>i</code>从“1”开始</strong></p>
<p>假设每个元素类型的<code>DataType</code>都需要占用<code>c</code>个储存单位（字节），那么线性表中第<code>i+1</code>个元素和第<code>i</code>个元素的存储位置的关系是（LOC为获得存储位置的函数）：</p>
<p><code>LOC(ai+1) = LOC(ai) + c</code></p>
<p>所以找第<code>i</code>个元素<code>ai</code>的储存位置可以又线性表初始指针指向的<code>a1</code>推算出：</p>
<p><strong><code>LOC(ai) = LOC(a1) + (i-1) * c</code></strong></p>
<p>通过这个公式，计算出线性表中任意位置的地址，所用的时间都是相同的，那么他的存储时间性能就是<code>O(1)</code>，<strong>这种结构通常被称为随机存储结构。</strong></p>
<h1 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h1><p>顺序存储结构最大的缺点，插入和删除需要移动大量元素，从而保持表中元素邻居的关系；链式存储结构通过携带后继元素的存储地址就解决了这个缺点。</p>
<p>链式存储结构的线性表中元素称为“存储映像”，也称为“节点（Node）”。每个节点都是由两部分组成：</p>
<ul>
<li>数据域：储存数据元素信息的域</li>
<li>指针域：存储直接后继元素地址的域</li>
</ul>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><code>n</code>个节点链接成一个链表，即为线性表<code>(a1,a2,...,an-1,an)</code>的链式存储结构。因为此链表的每个节点中只包含一个指针域，所以叫做单链表。</p>
<p><img src="/.com//data-structure-linked-list-normal.png" alt="单链表图示"></p>
<p>单链表必须有一个头部加上0到多个节点。头指针是链表指向第一个节点的指针，如果链表有头结点，则头指针指向头结点。头结点携带第一个元素的节点指针，放在第一个节点之前，其数据域一般无意义，但也可以存放链表的长度。头结点不是必须的，但是头结点可以放一些对列表有用的变量。</p>
<p>尾指针是指向单链表的最后一个节点的指针，这个指针不是必须的，但是尾指针有好处，比如需要在尾部插入新节点。</p>
<p><strong>若线性表需要频繁查找，很少进行插入和删除操作是，宜采用顺序存储结构。</strong></p>
<p><strong>若需要频繁插入和删除时，宜采用单链表结构。</strong></p>
<h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>在内存中建立一个数组，在数组最大长度内的空间中再建立一个链表，这种链表就是静态链表。静态链表通过“游标（Cursor）”指向后继元素所处数组中的“下标（Index）”。下图为静态链表转普通链表，最大长度为<code>100</code>，第一个元素游标指向备用链表的头节点（既当前链表尾节点的游标，也是尾指针），最后一个元素游标指向当前链表头节点。</p>
<p><img src="/.com//data-structure-linked-list-static-to-normal.png" alt="静态链表转普通链表"></p>
<ul>
<li>数组中第一个和最后一个元素不存放数据</li>
<li>未使用的数组元素被称为备用链表</li>
<li>数组第一个元素，即<code>Index = 0</code>的元素的游标（Cursor）存放备用链表的第一个节点的下标</li>
<li>数组最后一个元素，即<code>Index = MAX_SIZE-1</code>的元素的游标（Cursor）存放当前链表的第一个节点的下标</li>
<li>静态链表初始化时，<code>Index = 0</code>的元素的游标应从<code>1</code>开始，而<code>Index = MAX_SIZE-1</code>的元素的游标则是<code>0</code>，表示空链表</li>
</ul>
<h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>在单链表中，如果不从头结点出发，就无法访问到全部节点。循环链表就解决了这个问题。只要有链表中某一节点的指针，就能跑完全部节点。当表为空时，头部后继指针指向头部本身。</p>
<p><strong>循环链表所用的方法就是把尾节点的空指针指向头节点，使单链表形成一个环，这种头尾相接的单链表被称为单循环链表，简称循环链表。</strong></p>
<p>原单链表判断尾节点用<code>node.next === null ?</code>，现在则是用<code>node.next === head ?</code>。</p>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>对比单链表，双向链表的节点有两个指针：前驱指针和后继指针。双向列表允许从尾部往回跑。当表为空时，头部前驱指针和后继指针都指向头部本身。</p>
<h1 id="找单链表中间的节点的方法"><a href="#找单链表中间的节点的方法" class="headerlink" title="找单链表中间的节点的方法"></a>找单链表中间的节点的方法</h1><p>利用快慢指针原理：设置两个指针<code>*search</code>和<code>*middle</code>都指向单链表的头结点。其中<code>*search</code>的移动速度是<code>*middle</code>的2倍。当<code>*search</code>指向尾节点时，<code>*middle</code>正好就在中间。</p>
<p>在一个长度为100的单链表中，当<code>*search</code>指向第100个节点时，<code>*middle</code>指向第50个节点。</p>
<p>在一个长度为101的单链表中，当<code>*search</code>指向102（即超出长度）时，<code>*middle</code>指向第51个节点，正好在中间。</p>
<h1 id="判断一个链表是否有环"><a href="#判断一个链表是否有环" class="headerlink" title="判断一个链表是否有环"></a>判断一个链表是否有环</h1><p>方法一：设置两个指针<code>*q</code>和<code>*b</code>。<code>*q</code>一直在走的情况下，每遇到一个节点，<code>*b</code>就从新从头结点开始走。如果<code>*q</code>所在当前步数等于<code>*b</code>从头开始数的步数，则<code>*q</code>继续往前走一步，而<code>*b</code>从新走。如果<code>*q</code>所在当前步数不等于<code>*b</code>的从头开始数的步数，则存在环。这种方法可以找到环所在节点。</p>
<p>方法二：设置两个指针<code>*q</code>和<code>*b</code>都指向单链表的头结点。其中<code>*q</code>的移动速度是<code>*b</code>的2倍，若在某个时候<code>*q == *b</code>，则存在环。一般偶数量节点的单循环链表跑两次后<code>*q == *b</code>。</p>
<blockquote>
<p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之栈Stack和队列Queue</title>
    <url>/2020/04/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88Stack%E5%92%8C%E9%98%9F%E5%88%97Queue/</url>
    <content><![CDATA[<p>栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。</p>
<span id="more"></span>

<h1 id="栈Stack"><a href="#栈Stack" class="headerlink" title="栈Stack"></a>栈Stack</h1><p>栈Stack是一种线性结构，是线性表的一种具体形式。栈这种后进先出（Last In First Out，LIFO）的应用非常广泛，例如网页的前进后退功能，编辑器的后一步前一步功能，方法调用时的函数栈等等。</p>
<p>栈Stack的特性：</p>
<ul>
<li>栈的元素必须“后进先出”</li>
<li>栈的操作只能于线性表表尾进行</li>
<li>栈的表尾被称为栈顶（Top），栈的表头被称为栈底（bottom）</li>
</ul>
<p>栈Stack的操作：</p>
<ul>
<li>插入操作（Push），进栈</li>
<li>删除操作（Pop），出栈</li>
</ul>
<p><img src="/.com//data-structure-stack.png" alt="Stack Pop And Push"></p>
<h2 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h2><p>应用顺序存储结构的栈，元素必须从开始表尾进行操作，从而节省下元素前移补充位置的操作，而不像链式结构可以从表头操作。当栈初始化时，不含有任何数据的栈被称为空栈，此时栈顶就是栈底。</p>
<h2 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><p><strong>栈一般使用顺序存储结构</strong>实现。使用链式存储结构时，栈底为链表头部，栈顶为链表尾部。</p>
<h2 id="使用栈来进行进制转换"><a href="#使用栈来进行进制转换" class="headerlink" title="使用栈来进行进制转换"></a>使用栈来进行进制转换</h2><p>例子，使用顺序存储结构的栈计算把<code>8</code>位数的二进制数转换成十进制数。</p>
<figure class="highlight js"><figcaption><span>Javascript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stack = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// 11001001 (2)</span></span><br><span class="line"><span class="comment">// 1*2^0 + 0*2^1 + 0*2^2 + 1*2^3 + 0*2^4 + 0*2^5 + 1*2^6 + 1*2^7</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> power = <span class="number">0</span>; <span class="comment">// start with power of 0 in first digit</span></span><br><span class="line"><span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">  result += stack.pop() * <span class="built_in">Math</span>.pow(<span class="number">2</span>, power++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result = 201 (10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster way in JavaScript</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;11001001&#x27;</span>, <span class="number">2</span>).toString(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>例子，使用顺序存储结构的栈计算把<code>8</code>位数的二进制数转换成八进制数。</p>
<figure class="highlight js"><figcaption><span>Javascript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stack = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// 11001001 (2)</span></span><br><span class="line"><span class="comment">// 001=&gt;1, 001=&gt;1, 11=&gt;3, final 311 (8)</span></span><br><span class="line"><span class="keyword">let</span> temp = [];</span><br><span class="line"><span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">  <span class="comment">// 3-digit pair</span></span><br><span class="line">  <span class="keyword">let</span> d0 = stack.pop() | <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> d1 = (stack.pop() | <span class="number">0</span>) * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> d2 = (stack.pop() | <span class="number">0</span>) * <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">let</span> D = d0 + d1 + d2;</span><br><span class="line">  temp.push(D);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = temp.reverse().join(<span class="string">&#x27;&#x27;</span>); <span class="comment">// result = 311 (8)</span></span><br><span class="line">temp = <span class="built_in">parseInt</span>(result, <span class="number">8</span>); <span class="comment">// 201 (10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster way in JavaScript</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;11001001&#x27;</span>, <span class="number">2</span>).toString(<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>例子，使用顺序存储结构的栈计算把<code>8</code>位数的二进制数转换成十六进制数。</p>
<figure class="highlight js"><figcaption><span>Javascript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stack = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// 11001001 (2)</span></span><br><span class="line"><span class="comment">// 1001=&gt;9, 1100=&gt;C, final C9 (16)</span></span><br><span class="line"><span class="keyword">let</span> letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> temp = [];</span><br><span class="line"><span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">  <span class="comment">// 4-digit pair</span></span><br><span class="line">  <span class="keyword">let</span> d0 = stack.pop() | <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> d1 = (stack.pop() | <span class="number">0</span>) * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> d2 = (stack.pop() | <span class="number">0</span>) * <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">let</span> d3 = (stack.pop() | <span class="number">0</span>) * <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">let</span> D = d0 + d1 + d2 + d3;</span><br><span class="line">  temp.push(D &gt; <span class="number">9</span> ? letters[D % <span class="number">10</span>] : D);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = temp.reverse().join(<span class="string">&#x27;&#x27;</span>); <span class="comment">// result = C9 (16)</span></span><br><span class="line">temp = <span class="built_in">parseInt</span>(result, <span class="number">16</span>); <span class="comment">// 201 (10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster way in JavaScript</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;11001001&#x27;</span>, <span class="number">2</span>).toString(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<h2 id="使用栈来计算普通数学表达式"><a href="#使用栈来计算普通数学表达式" class="headerlink" title="使用栈来计算普通数学表达式"></a>使用栈来计算普通数学表达式</h2><p>计算<code>1 + (2 - 3 * 4.5) / 6</code>;</p>
<p>第一步，转换中缀表达式到后缀表达式（逆波兰表达式）。</p>
<figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Expected Result: 1 2 3 4.5 * - 6 / +</span></span><br><span class="line"><span class="keyword">let</span> input = <span class="string">&#x27;1 + (2 - 3 * 4.5) / 6&#x27;</span>;</span><br><span class="line">input = input.replace(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// 1+(2-3*4.5)/6</span></span><br><span class="line"><span class="keyword">let</span> numbers = input.split(<span class="regexp">/[\+\-\*\/\(\)]+/</span>);</span><br><span class="line"><span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4.5&quot;, &quot;6&quot;]</span></span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num, i</span>) =&gt;</span> &#123;</span><br><span class="line">  input = input.replace(num, i); <span class="comment">// 0+(1-2*3)/4</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = input.charAt(i);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[\+\-\*\/\(\)]/</span>.test(value)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> symbol = stack.pop();</span><br><span class="line">      <span class="keyword">while</span> (symbol !== <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        result += <span class="string">`<span class="subst">$&#123;symbol&#125;</span> `</span>;</span><br><span class="line">        symbol = stack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\*\//</span>.test(symbol) &amp;&amp; !<span class="regexp">/\*\//</span>.test(value)) &#123;</span><br><span class="line">          result += <span class="string">`<span class="subst">$&#123;symbol&#125;</span> `</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          stack.push(symbol);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stack.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result += <span class="string">`<span class="subst">$&#123;numbers[value]&#125;</span> `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  result += <span class="string">`<span class="subst">$&#123;stack.pop()&#125;</span> `</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result = &quot;1 2 3 4.5 * - 6 / + &quot;</span></span><br></pre></td></tr></table></figure>

<p>第二步，计算转换后的逆波兰表达式，最后输出结果。</p>
<figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Expected Result: -0.9166666666666667</span></span><br><span class="line"><span class="keyword">let</span> input = <span class="string">&#x27;1 2 3 4.5 * - 6 / + &#x27;</span>;</span><br><span class="line">input = input.trim().split(<span class="regexp">/\s/</span>);</span><br><span class="line"><span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4.5&quot;, &quot;*&quot;, &quot;-&quot;, &quot;6&quot;, &quot;/&quot;, &quot;+&quot;]</span></span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = input[i];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">let</span> backNum = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> frontNum = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> subResult = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">      subResult = frontNum + backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">      subResult = frontNum - backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">      subResult = frontNum * backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (backNum === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Divisor cannot be 0&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      subResult = frontNum / backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Operator must be &quot;+&quot;, &quot;-&quot;, &quot;*&quot; or &quot;/&quot;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      stack.push(subResult);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = subResult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    stack.push(<span class="built_in">parseFloat</span>(value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result = -0.9166666666666667</span></span><br></pre></td></tr></table></figure>

<h1 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h1><p>队列Queue是一种线性结构，也是线性表的一种具体形式。队列这种先进先出（First In First Out，FIFO）的应用也非常广泛，是只允许在一段进行插入操作，而在另一端进行删除操作的线性表，例如输入缓冲功能，任务顺序加载功能等等。</p>
<p>队列可以用顺序储存结构实现，但是跟栈相反，<strong>队列一般都用链式储存结构</strong>实现。</p>
<p>队列Queue的特性：</p>
<ul>
<li>队列的元素必须“后进先出”</li>
<li>队列的操作只能于线性表头尾进行</li>
</ul>
<p>队列Queue的操作：</p>
<ul>
<li>插入操作（Offer），进队列</li>
<li>删除操作（Poll），出队列</li>
</ul>
<p><img src="/.com//data-structure-queue.png" alt="Queue Offer And Poll"></p>
<blockquote>
<p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之基础</title>
    <url>/2020/04/18/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。</p>
<span id="more"></span>

<h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><ul>
<li><strong>输入</strong>：可以有零个或多个参数</li>
<li><strong>输出</strong>：必须有一个或多个结果</li>
<li><strong>有穷性</strong>：算法必须会结束，没有无限循环</li>
<li><strong>确定性</strong>：有唯一结果</li>
<li><strong>可行性</strong>：算法每一步都能通过执行有限次数完成</li>
</ul>
<h1 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h1><ul>
<li><strong>正确性</strong>：算法至少具有输入、输出和过程明确的加工处理，正确反映问题的需求，最后得到期望的答案<ul>
<li>算法程序没有语法错误</li>
<li>算法程序对于合法输入能产生期望的答案</li>
<li>算法程序对于非法输入能产生警告和提示</li>
<li>算法程序对于故意掉难得测试输入都能产生期望的结果</li>
</ul>
</li>
<li><strong>可读性</strong>：算法便于阅读、理解和交流</li>
<li><strong>健壮性</strong>：能够处理异常、崩溃或莫名其妙的结果</li>
<li><strong>高时间效率和低存储量</strong>：算法要考虑处理速度和内存用量</li>
</ul>
<h1 id="算法效率度量方法"><a href="#算法效率度量方法" class="headerlink" title="算法效率度量方法"></a>算法效率度量方法</h1><ul>
<li>事后统计方法：通过执行多个输入测试，记录执行时间平均值</li>
<li>事前估算方法：通过统计方法对算法进行估算，涉及以下因素<ol>
<li>算法策略，<strong>例子使用公式或者循环等</strong></li>
<li>编译后的代码质量，<strong>基础操作的次数统计</strong></li>
<li>问题的输入规模，<strong>例子数值大小或元素数量等</strong></li>
<li>机器执行指令的速度，<strong>硬件性能</strong></li>
</ol>
</li>
</ul>
<p><strong>算法基础种类分别有：<code>1</code>、<code>n</code>、<code>n*n</code>。</strong></p>
<p>一般使用公式或瀑布式条件判断的算法策略属于<code>1</code>；使用单个循环的属于<code>n</code>；使用嵌套循环的属于<code>n*n</code>。3种算法中往往常数算法<code>1</code>要优于<code>n</code>和<code>n*n</code>。给以下基础操作次数公式分类：</p>
<ul>
<li><code>1</code>：<code>3</code>、<code>5</code>、<code>9</code>等</li>
<li><code>n</code>：<code>n</code>、<code>n+1</code>、<code>2n+3</code>等</li>
<li><code>n*n</code>：<code>n^2</code>、<code>n^2+5</code>、<code>2n^3+1</code>等</li>
</ul>
<p><strong>一般判断算法好坏，更应该关注函数公式的主项：指数最高项。</strong><br>比如算法<code>2n^2+n+3</code>对比算法<code>n^3+2n+1</code>，因为<code>2n^2</code>指数低于<code>n^3</code>，所以算法<code>2n^2+n+3</code>优于算法<code>n^3+2n+1</code>。</p>
<h2 id="怎么分析一个算法的输入时间？"><a href="#怎么分析一个算法的输入时间？" class="headerlink" title="怎么分析一个算法的输入时间？"></a>怎么分析一个算法的输入时间？</h2><ul>
<li>抽象算法：去除算法中循环的外包装、条件的判断、变量的声明、打印输出等操作</li>
<li>指令计数：统计关联的输入模式下基础操作的数量</li>
</ul>
<h2 id="求和1-100的算法例子分析"><a href="#求和1-100的算法例子分析" class="headerlink" title="求和1-100的算法例子分析"></a>求和1-100的算法例子分析</h2><p>以下<em>算法一</em>，算法策略使用<code>循环</code>，编译后的代码质量为<code>n</code>次，问题的输入规模<code>100</code>，机器执行指令的速度取决于算法运行所在计算机。</p>
<figure class="highlight js"><figcaption><span>JavaScript 算法一</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; i++) &#123;</span><br><span class="line">  sum += i;                  <span class="comment">// 执行 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下<em>算法二</em>，算法策略使用<code>公式</code>，编译后的代码质量为<code>1</code>次，问题的输入规模<code>100</code>，机器执行指令的速度取决于算法运行所在计算机。</p>
<figure class="highlight js"><figcaption><span>JavaScript 算法二</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line">sum = (i + n) * n  / <span class="number">2</span>;      <span class="comment">// 执行 1 次</span></span><br></pre></td></tr></table></figure>

<p>对比以上算法，它们的输入规模都是<code>100</code>，在同一计算机运行的情况下，<strong>算法一</strong>的基础操作次数受输入规模的影响，造成工作量超出<strong>算法二</strong>，<strong>所以算法二效率更高</strong>。</p>
<h2 id="求和3x3表格内数值的例子分析"><a href="#求和3x3表格内数值的例子分析" class="headerlink" title="求和3x3表格内数值的例子分析"></a>求和3x3表格内数值的例子分析</h2><p>以下<em>表格遍历例子</em>，算法策略使用<code>嵌套的循环</code>，编译后的代码质量为<code>n^2</code>次，问题的输入规模<code>3x3</code>，机器执行指令的速度取决于算法运行所在计算机。</p>
<figure class="highlight js"><figcaption><span>JavaScript 表格遍历求和例子</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, </span><br><span class="line">    table = [</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">      [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= table.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= table[i].length; j++) &#123;</span><br><span class="line">    sum += table[i][j];      <span class="comment">// 执行 n^2 次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上算法，它根据表格的大小，基础操作的数量是以指数上升的，<strong>所以<code>3x3</code>的表格内数值总和计算一共有基础操作<code>3^2</code>等于9次</strong>。</p>
<h1 id="用大O记法表示算法时间复杂度"><a href="#用大O记法表示算法时间复杂度" class="headerlink" title="用大O记法表示算法时间复杂度"></a>用大O记法表示算法时间复杂度</h1><p>复杂度分为：<strong>时间复杂度</strong>或<strong>空间复杂度</strong><br><strong>一般计算“复杂度”是指“时间复杂度”，而不是空间复杂度，目前主流还是时间复杂度，不求用内存换取时间。</strong></p>
<p>**T(n) = O(f(n))**，<code>f(n)</code>为算法的函数或入口，随着输入规模<code>n</code>的增长，<code>T(n)</code>增长最慢的算法为最优算法。因为以下原因：</p>
<p><strong>基础操作数量 = 时间</strong></p>
<p>所以当<code>n</code>翻倍时，<em>基础操作数量</em>增长越少，花费的<em>时间</em>越少。</p>
<p>上面用到的三个求和算法例子，如果用大O表示算法的时间复杂度分别为<code>O(1)</code>、<code>O(n)</code>、<code>O(n^2)</code>。</p>
<p><strong>大O记法表示时间的增长率</strong></p>
<ul>
<li><code>O(1)</code>：增长率不变</li>
<li><code>O(n)</code>：增长率倍数增长</li>
<li><code>O(n^2)</code>：增长率指数增长</li>
</ul>
<h2 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h2><p>用一下方法来推导<code>5</code>、<code>2n+3</code>、<code>n(n+1)/2</code>和<code>O(logn)</code>的大O阶：</p>
<ol>
<li>用常数1取代所有加法常数</li>
<li>只保留最高阶项</li>
<li>最高阶项不是1的话，去除这个项相乘的常数</li>
</ol>
<p><code>5</code> =&gt; <code>O(1)</code>，<br><code>2n+3</code> =&gt; <code>O(n)</code>，<br><code>n(n+1)/2</code> =&gt; <code>O(n^2)</code></p>
<p>一面这个例子的话就是<code>O(logn)</code>：</p>
<figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">  i *= <span class="number">2</span>; <span class="comment">// 2^x = n，那么 x = log(2)n，x为循环次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><table>
<thead>
<tr>
<th align="center">例子</th>
<th align="center">时间复杂度</th>
<th align="center">术语</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">O(1)</td>
<td align="center">常数阶</td>
</tr>
<tr>
<td align="center">3n+4</td>
<td align="center">O(n)</td>
<td align="center">线性阶</td>
</tr>
<tr>
<td align="center">3n^2+4n+5</td>
<td align="center">O(n^2)</td>
<td align="center">平方阶</td>
</tr>
<tr>
<td align="center">3log(2)n+4</td>
<td align="center">O(logn)</td>
<td align="center">对数阶</td>
</tr>
<tr>
<td align="center">2n+3nlog(2)n+14</td>
<td align="center">O(nlogn)</td>
<td align="center">nlogn阶</td>
</tr>
<tr>
<td align="center">n^3+2n^2+4n+6</td>
<td align="center">O(n^3)</td>
<td align="center">立方阶</td>
</tr>
<tr>
<td align="center">2^n</td>
<td align="center">O(2^n)</td>
<td align="center">指数阶</td>
</tr>
</tbody></table>
<p>时间复杂度对比：<br><strong><code>O(1)</code> &lt; <code>O(logn)</code> &lt; <code>O(n)</code> &lt; <code>O(nlogn)</code> &lt; <code>O(n^2)</code> &lt; <code>O(n^3)</code> &lt; <code>O(2^n)</code> &lt; <code>O(n!)</code> &lt; <code>O(n^n)</code></strong></p>
<blockquote>
<p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>Big O</tag>
      </tags>
  </entry>
  <entry>
    <title>测试区2048JS代码</title>
    <url>/2019/01/17/%E6%B5%8B%E8%AF%95%E5%8C%BA2048JS%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p><img src="/.com//yao2048-0.jpg" alt="测试区Yao2048截图"><br>测试区2048JS代码</p>
<span id="more"></span>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _2048 = <span class="keyword">new</span> Yao2048(<span class="built_in">document</span>.body);</span><br><span class="line">_2048.show();</span><br></pre></td></tr></table></figure>

<h2 id="JS全代码"><a href="#JS全代码" class="headerlink" title="JS全代码"></a>JS全代码</h2>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Plugin</category>
      </categories>
      <tags>
        <tag>2048</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐歌单JS音乐播放器JS代码</title>
    <url>/2019/01/17/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95JS%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8JS%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p><img src="/.com//yaoplayer-0.jpg" alt="JS音乐播放器截图"><br>网易云音乐歌单JS音乐播放器JS代码<br>感谢<a href="//github.com/messoer/mess-api-doc">MessAPI</a>提供的网易云音乐API<br>代码依赖jQuery和fontawesome</p>
<span id="more"></span>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(<span class="string">&#x27;https://v1.itooi.cn/netease/songList&#x27;</span>, &#123;</span><br><span class="line">	<span class="string">&#x27;id&#x27;</span>: <span class="number">998389130</span> <span class="comment">// 此处歌单ID</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (json.data != <span class="literal">undefined</span> &amp;&amp; json.data != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">		json.data.tracks != <span class="literal">undefined</span> &amp;&amp; json.data.tracks != <span class="literal">null</span>) &#123;</span><br><span class="line">		$(<span class="string">&#x27;body&#x27;</span>).append(<span class="keyword">new</span> YaoPlayer(<span class="string">&#x27;YaoPlayer&#x27;</span>, json.data.tracks.map(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: song.name,</span><br><span class="line">        <span class="string">&#x27;singer&#x27;</span>: song.artists.map(<span class="function"><span class="params">artist</span> =&gt;</span> artist.name).join(<span class="string">&#x27;, &#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;lrc&#x27;</span>: <span class="string">&#x27;Not found&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pic&#x27;</span>: song.album.picUrl,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">`https://v1.itooi.cn/netease/url?id=<span class="subst">$&#123;song.id&#125;</span>&amp;quality=128`</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="插件全代码"><a href="#插件全代码" class="headerlink" title="插件全代码"></a>插件全代码</h2>]]></content>
      <categories>
        <category>Blog</category>
        <category>Plugin</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>音乐播放器</tag>
      </tags>
  </entry>
  <entry>
    <title>旧版日记仿markdown编译代码</title>
    <url>/2019/02/21/%E6%97%A7%E7%89%88%E6%97%A5%E8%AE%B0%E4%BB%BFmarkdown%E7%BC%96%E8%AF%91%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>旧版日记仿markdown编译代码</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;hexo-fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDiary = fs.readFileSync(<span class="string">&#x27;source/my.diary&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timeRangeAndDiaries = myDiary.split(<span class="regexp">/-&#123;9,&#125;/</span>); <span class="comment">// Split by /-&#123;9,&#125;/ so that having time ranges and diaries separated (trimmed).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; timeRangeAndDiaries.length; i++) &#123;</span><br><span class="line">    timeRangeAndDiaries[i] = timeRangeAndDiaries[i].trim();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeRangeAndDiaries[i].startsWith(<span class="string">&#x27;#&#x27;</span>)) &#123; <span class="comment">// Edit time ranges to have h2 tags covered.</span></span><br><span class="line">        timeRangeAndDiaries[i] = <span class="string">&#x27;&lt;h2&gt;&#x27;</span> + timeRangeAndDiaries[i].replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&#x27;</span>).trim() + <span class="string">&#x27;&lt;/h2&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// switch \n to &#123;newline&#125;</span></span><br><span class="line">        timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(<span class="regexp">/\n+/g</span>, <span class="string">&#x27;&#123;newline&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search list tags in each diaries and save them into temps for parts of paragraph.</span></span><br><span class="line">        <span class="keyword">var</span> tempLists = timeRangeAndDiaries[i].match(<span class="regexp">/\[list\](.*?)\[\/list\]/g</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search img tags in each diaries and save them into temps for parts of paragraph.</span></span><br><span class="line">        <span class="keyword">var</span> tempImgs = timeRangeAndDiaries[i].match(<span class="regexp">/\[img\](.*?)\[\/img\]/g</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Edit the saved temps for parts of paragraph to html tags and replace them to each diary (clear out newline characters).</span></span><br><span class="line">        <span class="keyword">if</span> (tempLists != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tempLists.length; j++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = tempLists[j].replace(<span class="regexp">/\[\/?list\]/g</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;&#123;newline&#125;&#x27;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; temp.length; k++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> trimmed = temp[k].replace(<span class="regexp">/(&#123;newline&#125;)+/g</span>, <span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line">                    <span class="keyword">if</span> (trimmed == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        temp[k] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        temp[k] = <span class="string">&#x27;&lt;li&gt;&#x27;</span> + trimmed + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tempLists[j] = <span class="string">&#x27;&lt;ul&gt;&#x27;</span> + temp.join(<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line">                timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(<span class="regexp">/\[list\](.*?)\[\/list\]/</span>, tempLists[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tempImgs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tempImgs.length; j++) &#123;</span><br><span class="line">                tempImgs[j] = <span class="string">&#x27;&lt;img src=&quot;&#x27;</span> + tempImgs[j].replace(<span class="regexp">/\[\/?img\]/g</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/(&#123;newline&#125;)+/g</span>, <span class="string">&#x27;&#x27;</span>).trim() + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">                timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(<span class="regexp">/\[img\](.*?)\[\/img\]/</span>, tempImgs[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Split each diary by newline characters and save them into temps for paragraphing.</span></span><br><span class="line">        <span class="keyword">var</span> tempParagraphing = timeRangeAndDiaries[i].replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;&#123;newline&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Edit the saved temps for paragraphing to html tags and replace them to each diary (clear out newline characters and empty lines).</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tempParagraphing.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> trimmed = tempParagraphing[j].replace(<span class="regexp">/(&#123;newline&#125;)+/g</span>, <span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line">            <span class="keyword">if</span> (trimmed == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                tempParagraphing[j] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!trimmed.startsWith(<span class="string">&#x27;&lt;ul&#x27;</span>)) &#123;</span><br><span class="line">                tempParagraphing[j] = <span class="string">&#x27;&lt;p&gt;&#x27;</span> + trimmed + <span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> tempDiary = tempParagraphing.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (tempDiary.trim() != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            timeRangeAndDiaries[i] = <span class="string">&#x27;&lt;div class=&quot;diary-item&quot;&gt;&#x27;</span> + tempDiary + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Join these converted time ranges and diaries into string.</span></span><br><span class="line"><span class="keyword">var</span> html = timeRangeAndDiaries.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(html)</span></span><br><span class="line">fs.writeFileSync(<span class="string">&#x27;public/diaries.html&#x27;</span>, html);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>old blog</tag>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>重新理解链表的节点与指针</title>
    <url>/2021/11/17/%EF%BC%88%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%EF%BC%89%E2%80%9D/</url>
    <content><![CDATA[<p>下图为头指针与头结点以及首元结点的关系-0</p>
<p><img src="https://s3.bmp.ovh/imgs/2022/01/3ab90c8563e3503e.jpg"></p>
<p>链表定义：c语言 </p>
<p>typedef struct LinkList<br>{</p>
<pre><code>     int Element;
 
     LinkList * next;
</code></pre>
<p>}LinkList; <span id="more"></span> </p>
<p>链表内包含很多结点（当然也可以包含零个结点）。其中每个结点的数据空间一般会包含一个数据结构（用于存放各种类型的数据）以及一个指针，该指针一般称为next，用来指向下一个结点的位置。由于下一个结点也是链表类型，所以next的指针也要定义为链表类型。</p>
<p>链表定义：java语言</p>
<p>public class Node {<br>     protected Node next; //指针域<br>     public  int data;//数据域  </p>
<pre><code> public Node( int data) &#123;  
       this. data = data;  
 &#125;  
</code></pre>
<p>}<br>对于两个节点pA和pB,    pA.value=A,    pB.value=B，指针变量分别为pA,pB</p>
<p><img src="https://img-blog.csdnimg.cn/20190228164323467.png" alt="img"></p>
<p>执行pA.next=pB， 表述pA指向节点的下一个节点是pB</p>
<p><img src="https://img-blog.csdnimg.cn/2019022816522710.png" alt="img"></p>
<p>执行pA=pB，就是让pA指向pB所指的节点</p>
<p><img src="https://img-blog.csdnimg.cn/20190228165309283.png" alt="img"></p>
<p>对于如下链表：</p>
<p><img src="https://img-blog.csdnimg.cn/20190228164835403.png" alt="img"></p>
<p>pA=pB.next，表述指针pA指向指针pC指向的节点</p>
<p>如下图：</p>
<p><img src="https://img-blog.csdnimg.cn/20190228165030905.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20190228165510397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25zamxpdmU=,size_16,color_FFFFFF,t_70" alt="img"></p>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题Mustom使用指南（对应主题1.0版）</title>
    <url>/2020/04/15/Hexo%E4%B8%BB%E9%A2%98Mustom%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<ul>
<li>本主题<a href="//github.com/jinyaoMa/hexo-theme-mustom">Mustom</a>是我参考了卡片式和窗口展示的样式设计的Hexo主题。</li>
<li>本主题通过大量的replaceWith函数和PJAX来加载，而且用了Live2D的插件，初始加载时回流特别厉害。</li>
<li>本主题可以衍生一个CSS的框架，但是作者本人目前还是在给每个组件都弄一个单独的样式表。</li>
<li>本主题把各类资源文件都分门别类了，在以后添加内容方面应该还是较方便的。</li>
</ul>
<span id="more"></span>

<h1 id="Hexo根目录结构"><a href="#Hexo根目录结构" class="headerlink" title="Hexo根目录结构"></a>Hexo根目录结构</h1><p><strong>注：主题文件可以下载<a href="//github.com/jinyaoMa/ma-jinyao.cn">本站</a>所有源代码后，通过复制粘贴<code>themes/mustom</code>文件夹获得，或者下载<a href="//github.com/jinyaoMa/hexo-theme-mustom">Mustom</a>所有源代码获得</strong><br><strong>注：以下文件及文件夹都是使用Mustom主题必要的结构</strong></p>
<p>先来看看<a href="//github.com/jinyaoMa/ma-jinyao.cn">本站</a>的根目录结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─scaffolds    : 模板</span><br><span class="line">├─source       : 内容资源文件夹</span><br><span class="line">├─themes       : 下载的主题放这里</span><br><span class="line">├─package.json : 里面可以看我都用了什么没有魔改过的Hexo插件</span><br><span class="line">├─_config.yml  : 根配置文件</span><br></pre></td></tr></table></figure>

<p>这就是一个普通Hexo建站的初始结构。这里主要讲下，<strong>使用我的Mustom主题时，可以使用<code>scaffolds</code>里我的模板，里面包含了必要的front-matter变量。可以复制粘贴整个<code>scaffolds</code>文件去覆盖原本的文件夹。推荐按照<a href="//github.com/jinyaoMa/ma-jinyao.cn">本站</a>里的<code>package.json</code>来安装依赖，因为基本上安装的依赖都是用于优化和兼容。可以复制粘贴本站的<code>package.json</code>去替换原本的文件，之后运行命令<code>npm i</code>安装依赖。之后所有的例子默认都使用了我的模板和依赖之后的操作。</strong></p>
<h1 id="config-yml根配置文件"><a href="#config-yml根配置文件" class="headerlink" title="_config.yml根配置文件"></a>_config.yml根配置文件</h1><p><strong>注：使用本主题的你可以在上面添加变量和修改变量的值，但是最好不要删除某一个变量，你可以留个空字符串</strong><br><strong>可以在复制粘贴以下配置之后，通过网站效果慢慢改</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;耀 の 个人网站 | Mark の Personal Website&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;耀の个人网站, 耀的个人网站, Mark の Personal Website, Mark&#x27;s Personal Website, 耀的部落阁, 耀の部落阁, jinyaoMa, Mustom, Hexo&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">jinyaoMa</span> <span class="string">(</span> <span class="string">耀</span> <span class="string">/</span> <span class="string">Mark</span> <span class="string">)</span></span><br><span class="line"><span class="attr">year:</span> <span class="number">2019</span> <span class="comment"># 建站年</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://ma-jinyao.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">docs</span> <span class="comment"># 方便使用Github Page</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">code</span> <span class="comment"># markdown使用include_code标签</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;code/*.*&quot;</span> <span class="comment"># 排除code_dir</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;extension/**/*.html&quot;</span> <span class="comment"># 排除extension</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;*.html&quot;</span> <span class="comment"># 如果在在主目录source文件夹里放了搜索引擎验证的.html文件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;CNAME&quot;</span> <span class="comment"># 如果在在主目录source文件夹里放了CNAME文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&quot;  &quot;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## Use post&#x27;s date for updated date unless set in front-matter</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">mustom</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span> <span class="comment"># 如果装了 hexo-all-minifier</span></span><br><span class="line"><span class="attr">markdown:</span> <span class="comment"># 如果换了原装 hexo-renderer-marked, 用了 hexo-renderer-markdown-it</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">headerlink</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">nofollow:</span> <span class="comment"># 如果装了 hexo-filter-nofollow</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">sitemap:</span> <span class="comment"># 如果装了 hexo-generator-sitemap</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="attr">rel:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">autoprefixer:</span> <span class="comment"># 如果装了 hexo-autoprefixer</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.min.css&quot;</span></span><br><span class="line">  <span class="attr">overrideBrowserslist:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;last 2 versions&quot;</span></span><br><span class="line"><span class="attr">babelify:</span> <span class="comment"># 如果装了 hexo-renderer-babelify + @babel/preset-env</span></span><br><span class="line">  <span class="attr">presets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">  <span class="attr">sourceMaps:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="comment"># 如果装了 hexo-filter-mathjax</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">none</span> <span class="comment"># or &#x27;ams&#x27; or &#x27;all&#x27;</span></span><br><span class="line">  <span class="attr">single_dollars:</span> <span class="literal">true</span> <span class="comment"># enable single dollar signs as in-line math delimiters</span></span><br><span class="line">  <span class="attr">cjk_width:</span> <span class="number">0.9</span> <span class="comment"># relative CJK char width</span></span><br><span class="line">  <span class="attr">normal_width:</span> <span class="number">0.6</span> <span class="comment"># relative normal (monospace) width</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;**/source/asset/js/common/*.js&quot;</span> <span class="comment"># 如果装了 hexo-renderer-babelify</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;**/source/asset/js/part/*.js&quot;</span> <span class="comment"># 如果装了 hexo-renderer-babelify</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;**/source/asset/js/plugin/!(L2Dwidget.0.min.js)&quot;</span> <span class="comment"># 如果装了 hexo-renderer-babelify</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">1000</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">ma-jinyao.cn</span> <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidu_translate:</span> <span class="comment"># 用于划词翻译组件</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">valine:</span> <span class="comment"># 用于评论组件</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎验证</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="themes-mustom目录结构"><a href="#themes-mustom目录结构" class="headerlink" title="themes/mustom目录结构"></a>themes/mustom目录结构</h1><p>接下来看看<a href="//github.com/jinyaoMa/ma-jinyao.cn/tree/master/themes/mustom">themes/mustom</a>的目录结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及</span><br><span class="line">├─source : 主题资源文件夹</span><br><span class="line">|   ├─browser.ejs : 不用babelify时旧浏览器会重定向到这个页面</span><br><span class="line">|   ├─robots.txt</span><br><span class="line">|   ├─sw.tpl : pwa需要加载的service worker模板</span><br><span class="line">|   ├─asset</span><br><span class="line">|   |   ├─part : 所有组件模板文件放这</span><br><span class="line">|   |   |  ├─audioplayer.ejs</span><br><span class="line">|   |   |  ├─brand.ejs</span><br><span class="line">|   |   |  ├─codelib.ejs</span><br><span class="line">|   |   |  ├─comment.ejs</span><br><span class="line">|   |   |  ├─extension.ejs</span><br><span class="line">|   |   |  ├─footer.ejs</span><br><span class="line">|   |   |  ├─gallery.ejs</span><br><span class="line">|   |   |  ├─goingto.ejs</span><br><span class="line">|   |   |  ├─hitokoto.ejs</span><br><span class="line">|   |   |  ├─menus.ejs</span><br><span class="line">|   |   |  ├─page.ejs</span><br><span class="line">|   |   |  ├─panels.ejs</span><br><span class="line">|   |   |  ├─pather.ejs</span><br><span class="line">|   |   |  ├─post.ejs</span><br><span class="line">|   |   |  ├─recentposts.ejs</span><br><span class="line">|   |   |  ├─records.ejs</span><br><span class="line">|   |   |  ├─search.ejs</span><br><span class="line">|   |   |  ├─settings.ejs</span><br><span class="line">|   |   |  ├─sitename.ejs</span><br><span class="line">|   |   |  ├─skin.ejs</span><br><span class="line">|   |   |  ├─timeline.ejs</span><br><span class="line">|   |   |  ├─toc.ejs</span><br><span class="line">|   |   |  ├─translater.ejs</span><br><span class="line">|   |   |  ├─xaside.ejs</span><br><span class="line">|   |   |  ├─xcanvas.ejs</span><br><span class="line">|   |   |  ├─xdrawer.ejs</span><br><span class="line">|   |   |  └xsearch.ejs</span><br><span class="line">|   |   ├─live2d : Live2D的文件放这</span><br><span class="line">|   |   |   ├─haruto.model.json</span><br><span class="line">|   |   |   ├─haruto.physics.json</span><br><span class="line">|   |   |   ├─mtn</span><br><span class="line">|   |   |   |  ├─01.mtn</span><br><span class="line">|   |   |   |  ├─02.mtn</span><br><span class="line">|   |   |   |  ├─03.mtn</span><br><span class="line">|   |   |   |  ├─04.mtn</span><br><span class="line">|   |   |   |  ├─05.mtn</span><br><span class="line">|   |   |   |  ├─06.mtn</span><br><span class="line">|   |   |   |  ├─07.mtn</span><br><span class="line">|   |   |   |  ├─08.mtn</span><br><span class="line">|   |   |   |  ├─09.mtn</span><br><span class="line">|   |   |   |  └idle_02.mtn</span><br><span class="line">|   |   |   ├─moc</span><br><span class="line">|   |   |   |  ├─haruto.moc</span><br><span class="line">|   |   |   |  ├─haruto.2048</span><br><span class="line">|   |   |   |  |      └texture_00.png</span><br><span class="line">|   |   ├─lang : 所有的语言界面资源文件放这</span><br><span class="line">|   |   |  ├─en.yml : 英文</span><br><span class="line">|   |   |  └zh-cn.yml : 中文</span><br><span class="line">|   |   ├─js : 所有的JS资源文件放这</span><br><span class="line">|   |   | ├─main.js : 管理所有资源的加载和程序</span><br><span class="line">|   |   | ├─nomodule.js : 不使用babelify时用得到的旧浏览器重定向</span><br><span class="line">|   |   | ├─plugin : 所有第三方JS插件模块</span><br><span class="line">|   |   | |   ├─APlayer.min.js</span><br><span class="line">|   |   | |   ├─av-min.js</span><br><span class="line">|   |   | |   ├─evanyou.js</span><br><span class="line">|   |   | |   ├─L2Dwidget.0.min.js</span><br><span class="line">|   |   | |   ├─L2Dwidget.min.js</span><br><span class="line">|   |   | |   ├─md5.min.js</span><br><span class="line">|   |   | |   ├─Meting.min.js</span><br><span class="line">|   |   | |   ├─socialShare.min.js</span><br><span class="line">|   |   | |   └Valine.min.js</span><br><span class="line">|   |   | ├─part : 所有组件加载必要的模块</span><br><span class="line">|   |   | |  ├─audioplayer.js</span><br><span class="line">|   |   | |  ├─brand.js</span><br><span class="line">|   |   | |  ├─codelib.js</span><br><span class="line">|   |   | |  ├─comment.js</span><br><span class="line">|   |   | |  ├─extension.js</span><br><span class="line">|   |   | |  ├─footer.js</span><br><span class="line">|   |   | |  ├─gallery.js</span><br><span class="line">|   |   | |  ├─goingto.js</span><br><span class="line">|   |   | |  ├─hitokoto.js</span><br><span class="line">|   |   | |  ├─menus.js</span><br><span class="line">|   |   | |  ├─page.js</span><br><span class="line">|   |   | |  ├─panels.js</span><br><span class="line">|   |   | |  ├─pather.js</span><br><span class="line">|   |   | |  ├─post.js</span><br><span class="line">|   |   | |  ├─recentposts.js</span><br><span class="line">|   |   | |  ├─records.js</span><br><span class="line">|   |   | |  ├─search.js</span><br><span class="line">|   |   | |  ├─settings.js</span><br><span class="line">|   |   | |  ├─sitename.js</span><br><span class="line">|   |   | |  ├─skin.js</span><br><span class="line">|   |   | |  ├─timeline.js</span><br><span class="line">|   |   | |  ├─toc.js</span><br><span class="line">|   |   | |  ├─translater.js</span><br><span class="line">|   |   | |  ├─xaside.js</span><br><span class="line">|   |   | |  ├─xcanvas.js</span><br><span class="line">|   |   | |  ├─xdrawer.js</span><br><span class="line">|   |   | |  └xsearch.js</span><br><span class="line">|   |   | ├─common : 包含所有通用JS函数</span><br><span class="line">|   |   | |   ├─ajax.js</span><br><span class="line">|   |   | |   ├─api.js</span><br><span class="line">|   |   | |   ├─config.js</span><br><span class="line">|   |   | |   ├─fetch.js</span><br><span class="line">|   |   | |   ├─lang.js</span><br><span class="line">|   |   | |   ├─part.js</span><br><span class="line">|   |   | |   ├─storage.js</span><br><span class="line">|   |   | |   └util.js</span><br><span class="line">|   |   ├─img : 所有的固定图像资源文件放这</span><br><span class="line">|   |   |  ├─android-chrome-192x192.png</span><br><span class="line">|   |   |  ├─android-chrome-512x512.png</span><br><span class="line">|   |   |  ├─author.large.png</span><br><span class="line">|   |   |  ├─author.medium.png</span><br><span class="line">|   |   |  ├─author.small.png</span><br><span class="line">|   |   |  ├─by-nc-sa.svg</span><br><span class="line">|   |   |  ├─icon.large.png</span><br><span class="line">|   |   |  ├─icon.medium.png</span><br><span class="line">|   |   |  ├─icon.small.png</span><br><span class="line">|   |   |  ├─qf3cu.huaji.png</span><br><span class="line">|   |   |  ├─qf3cu.jpg</span><br><span class="line">|   |   |  ├─qf3cu.png</span><br><span class="line">|   |   |  ├─qf3cu.temp.bw.png</span><br><span class="line">|   |   |  ├─qf3cu.temp.png</span><br><span class="line">|   |   |  ├─qq.png</span><br><span class="line">|   |   |  ├─start.png</span><br><span class="line">|   |   |  ├─start.reverse.png</span><br><span class="line">|   |   |  └wechat.png</span><br><span class="line">|   |   ├─font : 所有的字体文件放这</span><br><span class="line">|   |   |  ├─fa-brands-400.eot</span><br><span class="line">|   |   |  ├─fa-brands-400.svg</span><br><span class="line">|   |   |  ├─fa-brands-400.ttf</span><br><span class="line">|   |   |  ├─fa-brands-400.woff</span><br><span class="line">|   |   |  ├─fa-brands-400.woff2</span><br><span class="line">|   |   |  ├─fa-regular-400.eot</span><br><span class="line">|   |   |  ├─fa-regular-400.svg</span><br><span class="line">|   |   |  ├─fa-regular-400.ttf</span><br><span class="line">|   |   |  ├─fa-regular-400.woff</span><br><span class="line">|   |   |  ├─fa-regular-400.woff2</span><br><span class="line">|   |   |  ├─fa-solid-900.eot</span><br><span class="line">|   |   |  ├─fa-solid-900.svg</span><br><span class="line">|   |   |  ├─fa-solid-900.ttf</span><br><span class="line">|   |   |  ├─fa-solid-900.woff</span><br><span class="line">|   |   |  ├─fa-solid-900.woff2</span><br><span class="line">|   |   |  ├─iconfont.eot</span><br><span class="line">|   |   |  ├─iconfont.svg</span><br><span class="line">|   |   |  ├─iconfont.ttf</span><br><span class="line">|   |   |  ├─iconfont.woff</span><br><span class="line">|   |   |  └SourceHanSansCN.otf</span><br><span class="line">|   |   ├─css : 所有的样式文件放这</span><br><span class="line">|   |   |  ├─style.styl : 引用了所有的样式</span><br><span class="line">|   |   |  ├─_plugin : 所有第三方样式插件</span><br><span class="line">|   |   |  |    ├─APlayer.min.css</span><br><span class="line">|   |   |  |    ├─fontawesome.min.css</span><br><span class="line">|   |   |  |    ├─github-markdown.min.css</span><br><span class="line">|   |   |  |    ├─highlight.styl</span><br><span class="line">|   |   |  |    └share.min.css</span><br><span class="line">|   |   |  ├─_part : 所有组件样式</span><br><span class="line">|   |   |  |   ├─audioplayer.styl</span><br><span class="line">|   |   |  |   ├─brand.styl</span><br><span class="line">|   |   |  |   ├─codelib.styl</span><br><span class="line">|   |   |  |   ├─comment.styl</span><br><span class="line">|   |   |  |   ├─extension.styl</span><br><span class="line">|   |   |  |   ├─footer.styl</span><br><span class="line">|   |   |  |   ├─gallery.styl</span><br><span class="line">|   |   |  |   ├─goingto.styl</span><br><span class="line">|   |   |  |   ├─hitokoto.styl</span><br><span class="line">|   |   |  |   ├─menus.styl</span><br><span class="line">|   |   |  |   ├─page.styl</span><br><span class="line">|   |   |  |   ├─panels.styl</span><br><span class="line">|   |   |  |   ├─pather.styl</span><br><span class="line">|   |   |  |   ├─post.styl</span><br><span class="line">|   |   |  |   ├─recentposts.styl</span><br><span class="line">|   |   |  |   ├─records.styl</span><br><span class="line">|   |   |  |   ├─search.styl</span><br><span class="line">|   |   |  |   ├─settings.styl</span><br><span class="line">|   |   |  |   ├─sitename.styl</span><br><span class="line">|   |   |  |   ├─skin.styl</span><br><span class="line">|   |   |  |   ├─timeline.styl</span><br><span class="line">|   |   |  |   ├─toc.styl</span><br><span class="line">|   |   |  |   ├─translater.styl</span><br><span class="line">|   |   |  |   ├─xaside.styl</span><br><span class="line">|   |   |  |   ├─xcanvas.styl</span><br><span class="line">|   |   |  |   ├─xdrawer.styl</span><br><span class="line">|   |   |  |   └xsearch.styl</span><br><span class="line">|   |   |  ├─_common : 包含所有页面的通用样式</span><br><span class="line">|   |   |  |    ├─color.styl : 所有的受皮肤影响的颜色配置</span><br><span class="line">|   |   |  |    ├─dimension.styl : 所有的固定距离、固定值等配置</span><br><span class="line">|   |   |  |    └layout.styl : 所有页面通用样式，主要包含“m-”开头的主模板样式</span><br><span class="line">├─scripts : 主题预处理脚本文件夹</span><br><span class="line">|    ├─$filter.js</span><br><span class="line">|    ├─$helper.js</span><br><span class="line">|    ├─$renderer.js</span><br><span class="line">|    ├─renderer</span><br><span class="line">|    |    ├─$partplus.js</span><br><span class="line">|    |    └$template.js</span><br><span class="line">|    ├─plugin : 放改过的预处理时用到的第三方插件</span><br><span class="line">|    |   ├─pangunode.js</span><br><span class="line">|    |   ├─toc.js</span><br><span class="line">|    |   ├─hexo-generator-restful</span><br><span class="line">|    |   |           ├─index.js</span><br><span class="line">|    |   |           ├─lib</span><br><span class="line">|    |   |           |  └generator.js</span><br><span class="line">|    |   ├─hexo-abbrlink</span><br><span class="line">|    |   |       ├─index.js</span><br><span class="line">|    |   |       ├─lib</span><br><span class="line">|    |   |       |  ├─crc16.js</span><br><span class="line">|    |   |       |  ├─crc32.js</span><br><span class="line">|    |   |       |  ├─logic.js</span><br><span class="line">|    |   |       |  └model.js</span><br><span class="line">|    ├─helper : 放预处理渲染生成期间用到的函数</span><br><span class="line">|    |   ├─$count.js</span><br><span class="line">|    |   ├─$css.js</span><br><span class="line">|    |   ├─$encode.js</span><br><span class="line">|    |   ├─$forIn.js</span><br><span class="line">|    |   ├─$gallery.js</span><br><span class="line">|    |   ├─$js.js</span><br><span class="line">|    |   ├─$min2read.js</span><br><span class="line">|    |   ├─$mjs.js</span><br><span class="line">|    |   ├─$nomjs.js</span><br><span class="line">|    |   ├─$word4post.js</span><br><span class="line">|    |   └$word4site.js</span><br><span class="line">├─layout : 主题预处理页面模板文件夹</span><br><span class="line">|   ├─archive.ejs : 管理所有归档页面头部涉及的数据</span><br><span class="line">|   ├─index.ejs : 管理首页面头部涉及的数据</span><br><span class="line">|   ├─page.ejs : 管理所有单独页面头部涉及的数据</span><br><span class="line">|   ├─post.ejs : 管理所有文章页面头部涉及的数据</span><br><span class="line">|   ├─_partial</span><br><span class="line">|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及</span><br></pre></td></tr></table></figure>

<h2 id="普通使用主题时涉及的文件及文件夹"><a href="#普通使用主题时涉及的文件及文件夹" class="headerlink" title="普通使用主题时涉及的文件及文件夹"></a>普通使用主题时涉及的文件及文件夹</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─_config.yml : 主题配置文件，改菜单、改图标、改皮肤、改音乐/一言组件配置、新增组件时涉及</span><br><span class="line">├─source : 主题资源文件夹</span><br><span class="line">|   ├─asset</span><br><span class="line">|   |   ├─part : 所有组件模板文件放这</span><br><span class="line">|   |   ├─lang : 所有的语言界面资源文件放这</span><br><span class="line">|   |   |  ├─en.yml : 英文</span><br><span class="line">|   |   |  └zh-cn.yml : 中文</span><br><span class="line">|   |   ├─js : 所有的JS资源文件放这</span><br><span class="line">|   |   | ├─main.js : 管理所有资源的加载和程序</span><br><span class="line">|   |   | ├─part : 所有组件加载必要的模块</span><br><span class="line">|   |   ├─css : 所有的样式文件放这</span><br><span class="line">|   |   |  ├─style.styl : 引用了所有的样式</span><br><span class="line">|   |   |  ├─_part : 所有组件样式</span><br><span class="line">├─layout : 主题预处理页面模板文件夹</span><br><span class="line">|   ├─_partial</span><br><span class="line">|   |    └frame.ejs : 网页模板，增减改组件和修改头部模板时涉及</span><br></pre></td></tr></table></figure>

<h1 id="source目录结构"><a href="#source目录结构" class="headerlink" title="source目录结构"></a>source目录结构</h1><p>再来看看<a href="//github.com/jinyaoMa/ma-jinyao.cn/tree/master/source">source</a>的目录结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─CNAME : 锁定github pages域名定向</span><br><span class="line">├─_posts : 所有的文章</span><br><span class="line">|   ├─Gallery-Post-Not-Supported.md</span><br><span class="line">|   ├─Hello-Hexo.md</span><br><span class="line">|   ├─Helpful-Links.md</span><br><span class="line">|   ├─HTTP是什么？.md</span><br><span class="line">|   ├─Markdown-Basic-Syntax.md</span><br><span class="line">|   ├─Oracle-SQL-Basic-Usage.md</span><br><span class="line">|   ├─TCP-IP是什么？.md</span><br><span class="line">|   ├─主题hexo-theme-mustom使用指南.md</span><br><span class="line">|   ├─旧版日记仿markdown编译代码.md</span><br><span class="line">|   ├─测试区2048JS代码.md</span><br><span class="line">|   └网易云音乐歌单JS音乐播放器JS代码.md</span><br><span class="line">├─resume : 这是个“简历小贴士”单页面</span><br><span class="line">|   └index.md</span><br><span class="line">├─records : 这是个“记录”单页面</span><br><span class="line">|    ├─content.yml : 记录组件加载时从这里读取数据</span><br><span class="line">|    └index.md</span><br><span class="line">├─library : 这是个“代码库”单页面</span><br><span class="line">|    └index.md</span><br><span class="line">├─letter : 这是个“求职信小贴士”单页面</span><br><span class="line">|   └index.md</span><br><span class="line">├─gallery : 这是个“图库”单页面</span><br><span class="line">|    ├─FaceQ1583444636773.png</span><br><span class="line">|    ├─http-request-example.jpg</span><br><span class="line">|    ├─http-request-format.png</span><br><span class="line">|    ├─http-response-example.jpg</span><br><span class="line">|    ├─http-response-format.png</span><br><span class="line">|    ├─index.md</span><br><span class="line">|    ├─tcp-ip-ipv6-prefix.jpg</span><br><span class="line">|    ├─tcp-ip-router-network.jpg</span><br><span class="line">|    ├─tcp-ip-router-subnet.jpg</span><br><span class="line">|    ├─wallpaper-2311325.jpg</span><br><span class="line">|    ├─wallpaper-2572384.jpg</span><br><span class="line">|    ├─wallpaper-878514.jpg</span><br><span class="line">|    ├─yao2048-0.jpg</span><br><span class="line">|    └yaoplayer-0.jpg</span><br><span class="line">├─extension : 这个是本站左下角的扩展功能</span><br><span class="line">|     ├─content.yml : 扩展组件加载时从这里读取数据</span><br><span class="line">|     ├─test : “测试”扩展</span><br><span class="line">|     ├─resume : “简历生成”扩展</span><br><span class="line">|     ├─palette : “图像颜色提取”扩展</span><br><span class="line">|     ├─letter : “求职信”扩展</span><br><span class="line">├─code : 所有使用Hexo标签“include_code”的代码文件都放这</span><br><span class="line">├─about : 这是个“关于”单页面</span><br><span class="line">|   └index.md</span><br></pre></td></tr></table></figure>

<h1 id="新建单页面例子"><a href="#新建单页面例子" class="headerlink" title="新建单页面例子"></a>新建单页面例子</h1><p><strong>注：需要我的scaffolds/page.md模板为前提</strong></p>
<p>假如我要新建一个“友链”单页面，我需要运行新建命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;links&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行命令后得到以下新目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─_posts</span><br><span class="line">├─resume</span><br><span class="line">├─records</span><br><span class="line">├─links : 新“友链”单页面</span><br><span class="line">|   └index.md : 模板生成的index.md</span><br><span class="line">├─library</span><br><span class="line">├─letter</span><br><span class="line">├─gallery</span><br><span class="line">├─extension</span><br><span class="line">├─code</span><br><span class="line">├─about</span><br></pre></td></tr></table></figure>

<p>如何修改<code>links/index.md</code>可以参考<a href="//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/source/about/index.md">about/index.md</a></p>
<h2 id="添加菜单项目"><a href="#添加菜单项目" class="headerlink" title="添加菜单项目"></a>添加菜单项目</h2><p>在主题配置<code>_config.yml</code>中，按格式新增<code>menus</code>下的项目</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menus:</span></span><br><span class="line">  <span class="attr">main:</span> <span class="comment"># 项目组</span></span><br><span class="line">    <span class="attr">home:</span> <span class="comment"># 项目</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">/</span> <span class="comment"># 项目链接</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fas fa-home fa-fw&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="comment"># 项目图标</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="comment"># 项目</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">/archives/</span> <span class="comment"># 项目链接</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fas fa-archive fa-fw&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="comment"># 项目图标</span></span><br><span class="line">    <span class="attr">about:</span> <span class="comment"># 项目</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">/about/</span> <span class="comment"># 项目链接</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fas fa-user fa-fw&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="comment"># 项目图标</span></span><br><span class="line">    <span class="attr">links:</span> <span class="comment"># 新项目 &lt;----------------------------------------------------</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">/links/</span>  <span class="comment"># 新项目链接 &lt;----------------------------------------</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fas fa-link fa-fw&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="comment"># 新项目图标 &lt;------------</span></span><br></pre></td></tr></table></figure>

<p>接下来，在主题<code>source/asset/lang</code>文件夹中的<code>.yml</code>语言文件新增<code>menus</code>下的项目</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menus:</span></span><br><span class="line">  <span class="attr">main:</span> <span class="comment"># 对应_config.yml中的项目组</span></span><br><span class="line">    <span class="attr">caption:</span> <span class="string">本站</span> <span class="comment"># 项目组名称</span></span><br><span class="line">    <span class="attr">items:</span> <span class="comment"># 对应_config.yml中的项目</span></span><br><span class="line">      <span class="attr">home:</span> <span class="string">首页</span> <span class="comment"># 项目名称</span></span><br><span class="line">      <span class="attr">archive:</span> <span class="string">归档</span> <span class="comment"># 项目名称</span></span><br><span class="line">      <span class="attr">about:</span> <span class="string">关于</span> <span class="comment"># 项目名称</span></span><br><span class="line">      <span class="attr">links:</span> <span class="string">友链</span> <span class="comment"># 新项目名称 &lt;-----------------------------------------</span></span><br></pre></td></tr></table></figure>

<h1 id="新建文章例子"><a href="#新建文章例子" class="headerlink" title="新建文章例子"></a>新建文章例子</h1><p><strong>注：需要我的scaffolds/post.md模板为前提</strong></p>
<p>假如我要新建一个“HTTP是什么？”文章，我需要运行新建命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;HTTP是什么？&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行命令后得到以下新目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─_posts</span><br><span class="line">|   └HTTP是什么？.md : 新“HTTP是什么？”文章</span><br><span class="line">├─resume</span><br><span class="line">├─records</span><br><span class="line">├─links</span><br><span class="line">├─library</span><br><span class="line">├─letter</span><br><span class="line">├─gallery</span><br><span class="line">├─extension</span><br><span class="line">├─code</span><br><span class="line">├─about</span><br></pre></td></tr></table></figure>

<p>打开<code>HTTP是什么？.md</code>，可以看到front-matter中没有abbrlink，没有关系，这是自动生成。<strong>如果文章里使用了MathJax，需要设置<code>mathjax: true</code>。</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">HTTP是什么？</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="bullet">-</span> <span class="literal">null</span> <span class="comment"># 分类设置</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">null</span> <span class="comment"># 标签设置</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-04-10 14:15:34</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2020-04-10 14:15:34</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h1 id="添加组件例子"><a href="#添加组件例子" class="headerlink" title="添加组件例子"></a>添加组件例子</h1><p>假如我要在“友链”单页面里添加一个像”记录”单页面下的记录组件，命名为<code>links</code>组件：</p>
<p><strong>首先，在Hexo根目录下<code>source/links</code>文件夹建立一个<code>content.yml</code>用以记录友链，里面的内容可以是这样的：</strong></p>
<figure class="highlight yml"><figcaption><span>source/links/content.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 友链模板</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jinyaoMa</span></span><br><span class="line">  <span class="attr">site:</span> <span class="string">//ma-jinyao.cn</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">//ma-jinyao.cn/asset/img/author.medium.png</span></span><br><span class="line"><span class="comment"># 其他友链</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">  <span class="attr">site:</span> <span class="string">//baidu.com</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...以此类推</span></span><br></pre></td></tr></table></figure>

<p><strong>然后，在主题目录<code>themes/mustom</code>新建和修改以下必要的文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─_config.yml : 添加需要的图标</span><br><span class="line">├─source</span><br><span class="line">|   ├─asset</span><br><span class="line">|   |   ├─part</span><br><span class="line">|   |   |  └links.ejs : 必要“组件模板”</span><br><span class="line">|   |   ├─lang</span><br><span class="line">|   |   |  ├─en.yml : 添加需要的英文文本</span><br><span class="line">|   |   |  └zh-cn.yml : 添加需要的中文文本</span><br><span class="line">|   |   ├─js</span><br><span class="line">|   |   | ├─part</span><br><span class="line">|   |   | |  └links.js : 必要“JS加载模块”</span><br><span class="line">|   |   ├─css</span><br><span class="line">|   |   |  ├─_part</span><br><span class="line">|   |   |  |   └links.styl : 必要“组件样式”</span><br></pre></td></tr></table></figure>

<p><code>links.ejs</code>：可以参照<a href="//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/part/records.ejs">asset/part/records.ejs</a>组件模板，刚开始可以只有以下部分：</p>
<figure class="highlight html"><figcaption><span>asset/part/links.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-links&quot;</span>&gt;</span><span class="comment">&lt;!-- 注意类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-links-caption&quot;</span>&gt;</span><span class="comment">&lt;!-- 窗口标题部分 --&gt;</span></span><br><span class="line">    &lt;%- theme.links.icon %&gt;<span class="comment">&lt;!-- 窗口标题图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-lang</span>=<span class="string">&quot;links.caption&quot;</span>&gt;</span><span class="comment">&lt;!-- 加载语言文件中links.caption的字符串 --&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>_config.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fas fa-link fa-fw&quot;&gt;&lt;/i&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在<code>en.yml</code>和<code>zh-cn.yml</code>中添加以下代码：</p>
<figure class="highlight yml"><figcaption><span>en.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">caption:</span> <span class="string">LINKS</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>zh-cn.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">caption:</span> <span class="string">友链</span></span><br></pre></td></tr></table></figure>

<p><code>links.js</code>：可以参照<a href="//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/js/part/records.js">asset/js/part/records.js</a>加载模块，刚开始可以只有以下部分：</p>
<figure class="highlight js"><figcaption><span>asset/js/part/links.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> part <span class="keyword">from</span> <span class="string">&quot;../common/part.js&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tag = <span class="string">&#x27;links&#x27;</span>; <span class="comment">// 注意标签名</span></span><br><span class="line"><span class="keyword">let</span> element = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> init = <span class="function">(<span class="params">params, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  part(tag, <span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    element = el;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(tag).replaceWith(element);</span><br><span class="line">    callback &amp;&amp; callback(element);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  tag,</span><br><span class="line">  init</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>links.styl</code>：可以参照<a href="//raw.githubusercontent.com/jinyaoMa/ma-jinyao.cn/master/themes/mustom/source/asset/css/_part/records.styl">asset/css/_part/records.styl</a>组件样式，刚开始可以什么样式都没有。</p>
<p><strong>完成必要文件的新建之后，就要把这个组件加载到页面上，需要修改一下文件：</strong></p>
<p>在Hexo根目录<code>source/links/index.md</code>里面的front-matter中标记这个组件。</p>
<figure class="highlight yml"><figcaption><span>source/links/index.md</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">page</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">parts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">page</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">links</span> <span class="comment"># 标记组件</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>在<code>themes/mustom</code>主题目录中<code>source/asset/css/style.styl</code>引用<code>links.styl</code>。</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件末尾添加</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_part/links&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在<code>themes/mustom</code>主题目录中<code>source/asset/js/main.js</code>对号插入以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头部所有import下面</span></span><br><span class="line"><span class="keyword">import</span> links <span class="keyword">from</span> <span class="string">&#x27;./part/links.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ctrl+F 查找 “Extra Operations”，在“Extra Operations”下添加代码加载组件到“links”单页面 */</span></span><br><span class="line"><span class="comment">// Extra Operations</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/^\/(links)\//</span>.test(pathname())) &#123;</span><br><span class="line">  ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/links/content.json`</span>, <span class="comment">// content.yml 预编译成的JSON文件，友链的记录文件</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      parts.includes(<span class="string">&#x27;links&#x27;</span>) &amp;&amp; links.init(&#123;</span><br><span class="line">        data</span><br><span class="line">      &#125;, <span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">        checklist.links = <span class="literal">true</span>;</span><br><span class="line">        progress.step(stepping);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>themes/mustom</code>主题目录中<code>layout/_partial/frame.ejs</code>中<code>div.m-content</code>插入组件标签<code>&lt;links&gt;&lt;/links&gt;</code>。</p>
<p><strong>通过以上步骤就能把组件添加到单页面“友链”中</strong></p>
<h1 id="删除单页面组件"><a href="#删除单页面组件" class="headerlink" title="删除单页面组件"></a>删除单页面组件</h1><p>想要停用某个单页面组件只要在单页面所属<code>source/YourPage/index.md</code>里面的front-matter中注释掉组件标记即可，例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">page</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">parts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">page</span></span><br><span class="line">  <span class="comment"># - links # 注释掉组件标记</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><strong><em>我这个主题所用技术都是比较野生和混杂，不懂可以Github Issue我，也可以百度。自己研究一下熟悉之后就简单了，因为来来去去也就几个地方，只是代码分得较细，改动过程鼠标可能比较累。</em></strong></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Mustom</tag>
      </tags>
  </entry>
  <entry>
    <title>幂级数的本质</title>
    <url>/2021/04/22/%E2%80%9C%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8%E2%80%9D/</url>
    <content><![CDATA[<h1 id="级数（幂级数）"><a href="#级数（幂级数）" class="headerlink" title="级数（幂级数）"></a>级数（幂级数）</h1><h2 id="回到梦开始的地方"><a href="#回到梦开始的地方" class="headerlink" title="回到梦开始的地方"></a>回到梦开始的地方</h2><p>在一元函数微积分的世界中，我们沿着极限、导数、微分、积分的路已经走出了一段路。 <span id="more"></span></p>
<p>这时候回头看我们在第一篇《从极限开始》中介绍的芝诺悖论，你是否还记得计算阿喀琉斯追赶上乌龟所需要的时间的表达式：</p>
<p><img src="https://www.zhihu.com/equation?tex=T=%5Cfrac%7B90%7D%7B10%7D+%5Cfrac%7B9%7D%7B10%7D+%5Cfrac%7B0.9%7D%7B10%7D+..." alt="[公式]"></p>
<p>显而易见的，这个求和算式中的每一项所组成的，是一个首项为9，公比为0.1的等比数列，其通项可写为：</p>
<p><img src="https://www.zhihu.com/equation?tex=a_n=9%5Ccdot+(0.1)%5E%7Bn-1%7D" alt="[公式]"></p>
<p>而所求时间 <img src="https://www.zhihu.com/equation?tex=T" alt="[公式]"> ，则是对这个数列的项数 <img src="https://www.zhihu.com/equation?tex=n%5Cto+%5Cinfty" alt="[公式]"> 时进行求和，即：</p>
<p><img src="https://www.zhihu.com/equation?tex=T=%5Csum_%7Bn=1%7D%5E%5Cinfty+a_n+" alt="[公式]"></p>
<p><strong>无穷数列的求和</strong>就是无穷级数，简称<strong>级数</strong>。</p>
<p>所以，级数，实际上就是再次借助极限的工具，将对数列的有限项求和推广到了无限项求和。因此我们可以说，积分是无限连续项的求和，级数则是无限离散项的求和。</p>
<p>接下来，有了级数的概念以后，我们就可以用它来解决芝诺没有想明白的地方：即无穷项求和的结果，到底是趋向无穷的不可得还是趋向一个确定的数，即讨论级数的敛散性。</p>
<hr>
<h2 id="级数的敛散性"><a href="#级数的敛散性" class="headerlink" title="级数的敛散性"></a>级数的敛散性</h2><p>就让我们先从非常熟悉的等比数列开始说起：</p>
<p>有等比数列，公比为 <img src="https://www.zhihu.com/equation?tex=q" alt="[公式]"> ，首项为 <img src="https://www.zhihu.com/equation?tex=a_1" alt="[公式]"> ，其中 <img src="https://www.zhihu.com/equation?tex=p,a_1%5Cneq0" alt="[公式]"> 且 <img src="https://www.zhihu.com/equation?tex=q%5Cneq+1" alt="[公式]"> ，则有通项：</p>
<p><img src="https://www.zhihu.com/equation?tex=a_n=a_1%5Ccdot+p%5E%7Bn-1%7D" alt="[公式]"></p>
<p>由等比数列的前 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 项求和公式知：</p>
<p><img src="https://www.zhihu.com/equation?tex=S_n=a_1%5Ccdot+%5Cfrac%7B1-q%5En%7D%7B1-q%7D" alt="[公式]"></p>
<p>求解级数 <img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7Da_n" alt="[公式]"> ，实际上就是在求：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7DS_n=a_1%5Ccdot+%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cfrac%7B1-q%5En%7D%7B1-q%7D" alt="[公式]"></p>
<p>可以看到：</p>
<p>若 <img src="https://www.zhihu.com/equation?tex=-1%3Cq%3C1" alt="[公式]"> ，则 <img src="https://www.zhihu.com/equation?tex=q%5En%5Crightarrow+0" alt="[公式]"> ，故级数： <img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7DS_n=%5Cfrac%7Ba_1%7D%7B1-q%7D" alt="[公式]"> ，则称该级数发散；</p>
<p>若 <img src="https://www.zhihu.com/equation?tex=q%3E1" alt="[公式]"> 或 <img src="https://www.zhihu.com/equation?tex=q%3C-1" alt="[公式]"> ，则 <img src="https://www.zhihu.com/equation?tex=q%5En%5Crightarrow+%5Cpm%5Cinfty" alt="[公式]"> ，则级数： <img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7DS_n=%5Cpm+%5Cinfty" alt="[公式]"> ，即为一种狭义的不存在，称该级数发散。</p>
<p>从等比数列的敛散性判别看得出，从定义出发直接对级数的求和表达式进行求极限的运算显然是一种较为直接的方式。</p>
<p>但是，并非每种数列，都可以像基本数列（如等差，等比）那样通过写出清晰的求和公式来进行讨论，我们还需要更多的方法来帮助我们判别和求解。</p>
<p>有数列通项 <img src="https://www.zhihu.com/equation?tex=u_n%5Cgeq+0" alt="[公式]"> ，存在三种类型的级数，即：</p>
<p>正项级数： <img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7Du_n=u_1+u_2+...u_n" alt="[公式]"> ，起所有项数均为正；</p>
<p>交错级数： <img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7D(-1)%5E%7Bn-1%7Du_n=u_1-u_2+u_3-u_4+...u_n" alt="[公式]"> ，数列项数为正负相间；</p>
<p>任意项级数：数列各项正负不一。</p>
<p>对这三类级数，应使用不同的方法判别其敛散性。</p>
<p>对于正项级数：</p>
<ol>
<li>根据 <img src="https://www.zhihu.com/equation?tex=S_n%5Cgeq+S_%7Bn-1%7D" alt="[公式]"> ，即级数恒不增，故可以使用有界性；</li>
<li>比较判别法：将 <img src="https://www.zhihu.com/equation?tex=u_n" alt="[公式]"> 与另一个已知敛散性的级数项 <img src="https://www.zhihu.com/equation?tex=v_n" alt="[公式]"> 进行比较;</li>
<li>比值判别法：通过比较 <img src="https://www.zhihu.com/equation?tex=%5Crho+=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cfrac%7Bu_%7Bn+1%7D%7D%7Bu_n%7D" alt="[公式]"> 与1的关系；</li>
<li>根植判别法：通过比较 <img src="https://www.zhihu.com/equation?tex=%5Crho+=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Csqrt%5Bn%5D%7Bu_n%7D+" alt="[公式]"> 与1的关系。</li>
</ol>
<p>对于交错级数，则需使用莱布尼茨判别法，即满足去除正负号的数列 <img src="https://www.zhihu.com/equation?tex=%5C%7Bu_n%5C%7D" alt="[公式]"> 单调不增且 <img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7Du_n=0" alt="[公式]"> ，则该交错级数收敛。</p>
<p>而对于任意项级数，以目前我们所学的内容，暂时还不能给出通用的判别方式。</p>
<p>不过如果通过绝对值运算 <img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7D%5Cvert+u_n%5Cvert+" alt="[公式]"> 将任意项级数转换为正项级数，就可以使用正项级数的判别法对其进行研究，这也由此引申除了绝对收敛的概念，即：</p>
<ul>
<li>若原级数的绝对值级数收敛，则称该级数绝对收敛；</li>
<li>若原级数收敛，但该级数的绝对值级数收敛，则称该级数条件收敛。</li>
</ul>
<hr>
<h2 id="以一个新的角度来看待函数"><a href="#以一个新的角度来看待函数" class="headerlink" title="以一个新的角度来看待函数"></a>以一个新的角度来看待函数</h2><p>想象有一根笔直的铁丝，然后我们用手对它进行变形，使它弯曲成一定的角度：</p>
<p><img src="https://pic2.zhimg.com/v2-7fe91eb75378b692d6f56acbc7fce36d_r.jpg" alt="img">对铁丝进行弯曲</p>
<p>接着，想象在直角坐标系中的横坐标轴，即为那根比直的铁丝；函数 <img src="https://www.zhihu.com/equation?tex=f(x)=e%5Ex" alt="[公式]"> 的图像则为弯曲后的铁丝：</p>
<p><img src="https://pic4.zhimg.com/v2-b8548ada14de1056caa386b5295838a3_r.jpg" alt="img">函数的图像变换</p>
<p>以这个例子为启示，我们是否，可以将函数看作是一种变换图形的模具。</p>
<p>在机械加工产业的制造车间里，为铸造模具送入一个原型坯料，经过加工后，将为我们返回一个模具形状的产品；若我们将函数 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 也看作是一种加工图形的模具，为它送入初始图形 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 轴，经过模具的加工返回一个新的图形 <img src="https://www.zhihu.com/equation?tex=e%5Ex" alt="[公式]"></p>
<p>——即<strong>将函数，看作是一种变换图形的工具</strong>。</p>
<p>在有了这个概念以后，令人兴奋的问题来了：</p>
<p>如果现在，有一个异常复杂的图案，我们能否使用手里那根初始的铁丝，通过拗的方式，将它坳成复杂的图形？</p>
<p>换句话说，我们能否使用一些简单的图形，通过函数这个变换工具，将它变形为复杂的图形。</p>
<p>而此前，微积分的核心知识告诉我们：这，不正是用线性模拟非线性的过程吗？</p>
<hr>
<p>假设有一个 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 阶可导的复杂图形 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"></p>
<p><strong>第一步，从一根直铁丝开始：</strong></p>
<p>现在，我们手里有一根尚未经过任何加工的铁丝，要想将它逐渐变为一个想要的复杂图形。</p>
<p>首先，肯定是要将它摆放于图形上的某一点 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处，而它的倾斜角度——微分的只是告诉了我们，导数即函数在一点处切线的斜率——故我们的第一步就是将这根铁丝摆成为 复杂图形在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的切线：</p>
<p>有函数在某一点处的切线方程 <img src="https://www.zhihu.com/equation?tex=y-y_0=y%5Cprime(x-x_0)" alt="[公式]"></p>
<p>即： <img src="https://www.zhihu.com/equation?tex=y=f(x_0)+f%5Cprime(x_0)(x-x_0)" alt="[公式]"></p>
<p><img src="https://pic1.zhimg.com/v2-d6dc7a1c514f24ee629577fe64dce3dc_r.jpg" alt="img">从一根铁丝开始</p>
<p>但，显而易见的，若这根铁丝只能保持笔直，那么这样的摆放只能使得它在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处这一点是与我们的目标图形相一致的，一旦偏离 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处，哪怕一点点，它们的形态都将不再吻合。</p>
<p><strong>因此，第二步：将这根铁丝坳弯一点点以使得它也能够贴合</strong> <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> <strong>处附近的图形</strong></p>
<p>根据连续函数的定义，若有：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx+%5Cto+x_0%7Df(x)=f(x_0)=A" alt="[公式]"></p>
<p>如果把极限符号去掉，即有：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(x)=A+%5Calpha+(x)" alt="[公式]"></p>
<p>它的意思是在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 附近（也即它的去心邻域）的一点 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> ，它的函数值与 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的函数值存在一个微小的偏差 <img src="https://www.zhihu.com/equation?tex=%5Calpha(x)" alt="[公式]"></p>
<p>于是，我们来看这样一个极限，即根据 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的导数定义有：</p>
<p><img src="https://www.zhihu.com/equation?tex=f%5Cprime(x_0)=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D" alt="[公式]"></p>
<p>去掉极限符号，即有：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D=f%5Cprime(x_0)+%5Calpha(x)" alt="[公式]"></p>
<p>解出 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 的表达式为：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(x)=f(x_0)+f%5Cprime(x_0)(x-x_0)+%5Calpha(x)(x-x_0)" alt="[公式]"></p>
<p>可以看到的是，表达式中前面的这两项构成的恰是第一步中已经摆好的切线 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 。</p>
<p>因此，本质上，<strong>我们通过“拗铁丝”来使直线更贴合函数图形的过程，就是从 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处出发，通过求解偏差量 <img src="https://www.zhihu.com/equation?tex=%5Calpha(x)" alt="[公式]"> 来向 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 的邻域拓展，从而能够在更广范围内逼近原函数的过程。</strong></p>
<p>那么，问题来了，该如何求解 <img src="https://www.zhihu.com/equation?tex=%5Calpha(x)" alt="[公式]"> 这一偏差部分呢。</p>
<p><strong>对偏差的部分，再度使用线性拟合的思想！</strong></p>
<p>记第一次贴合后的局部偏差为 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)" alt="[公式]"> ，则类比于对函数在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的第一次线性拟合过程：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(x)=f(x_0)+f%5Cprime(x_0)(x-x_0)+%5Calpha_1(x)(x-x_0)" alt="[公式]"></p>
<p>将 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)" alt="[公式]"> 视为新的等待逼近的函数，则有：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Calpha_1(x_0)+%5Calpha_1%5Cprime(x_0)(x-x_0)+%5Calpha_2(x)(x-x_0)" alt="[公式]"></p>
<p>其中， <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x_0)" alt="[公式]"> 部分，代表拟合图形在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的误差——而这是目前为止我们唯一精确贴合的点，故不存在误差——则有 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x_0)=0" alt="[公式]"></p>
<p>因此：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Calpha_1%5Cprime(x_0)(x-x_0)+%5Calpha_2(x)(x-x_0)" alt="[公式]"></p>
<p>而由前文中的表达式 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D=f%5Cprime(x_0)+%5Calpha_1(x)" alt="[公式]"> 可知：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D-f%5Cprime(x_0)" alt="[公式]"></p>
<p>根据导数的定义：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1%5Cprime+(x)=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Calpha_1(x)-%5Calpha_1(x_0)%7D%7Bx-x_0%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Calpha_1(x)%7D%7Bx-x_0%7D" alt="[公式]"></p>
<p>将 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)" alt="[公式]"> 代入：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Calpha_1(x)%7D%7Bx-x_0%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Cfrac%7Bf(x)-f(x_0)-f%5Cprime+(x_0)(x-x_0)%7D%7Bx-x_0%7D%7D%7Bx-x_0%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf(x)-f(x_0)-f%5Cprime+(x_0)(x-x_0)%7D%7B(x-x_0)%5E2%7D" alt="[公式]"></p>
<p>这是一个 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B0%7D%7B0%7D" alt="[公式]"> 型的未定式极限，可以使用洛必达进行求解：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf(x)-f(x_0)-f%5Cprime+(x_0)(x-x_0)%7D%7B(x-x_0)%5E2%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf%5Cprime(x)-0-f%5Cprime(x_0)%5Ccdot+1%7D%7B2(x-x_0)%5Ccdot+1%7D=%5Cfrac%7Bf%5Cprime%5Cprime(x)-0%7D%7B2-0%7D=%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2%7D" alt="[公式]"></p>
<p>因此：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Calpha_1%5Cprime(x_0)(x-x_0)+%5Calpha_2(x)(x-x_0)=%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2%7D(x-x_0)+%5Calpha_2(x)(x-x_0)" alt="[公式]"></p>
<p>然后，将这个结果带过原函数的展开式中得出：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(x)=f(x_0)+f%5Cprime(x_0)(x-x_0)+%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2%7D(x-x_0)%5E2+%5Calpha_2(x)(x-x_0)%5E2" alt="[公式]"></p>
<p>这样，我们就实现了将铁丝掰弯一点点的过程：</p>
<p><img src="https://pic4.zhimg.com/v2-221da1249e652432145f34f02fe2f9fb_r.jpg" alt="img">求解偏差部分的过程，就是对直线进行弯折以使得它再更大范围内贴合图形的过程</p>
<p><strong>集中一点，登峰造极</strong></p>
<p>于是，进一步的，通过对 <img src="https://www.zhihu.com/equation?tex=%5Calpha_2(x),%5Calpha_3(x)..." alt="[公式]"> 不断求解，我们也在不断的调整“铁丝”，不断的在越来越广 的 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 邻域上精确毕竟函数。</p>
<p><img src="https://pic4.zhimg.com/v2-900bcb5e775bba2f0c306465228781ef_r.jpg" alt="img">从一点处出发，越来越精确刻画其邻域内的图形</p>
<p>最终，我们就得到了这样一个函数展开式：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(x)=%5Cfrac%7Bf(x_0)%7D%7B0!%7D+%5Cfrac%7Bf%5Cprime(x_0)%7D%7B1!%7D(x-x_0)+%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2!%7D(x-x_0)%5E2+...+%5Cfrac%7Bf%5E%7B(n)%7D(x)%7D%7Bn!%7D(x-x_0)%5En+%5Calpha_%7Bn+1%7D(x)(x-x_0)%5E%7Bn+1%7D" alt="[公式]"></p>
<p>而在前文我们已经知道，数列的无穷项求和，就是级数。</p>
<p>当把数列中的通项，由确定的数值，推广至函数，即 <img src="https://www.zhihu.com/equation?tex=u_n=f_n(x)" alt="[公式]"> 。则无穷级数的概念，就从数列的常数项级数拓展到了函数项级数。</p>
<p>再进一步的，如果在函数项级数中的各项函数，都是属于同一系列(series)的函数，譬如：前文这个展开式所表示的函数项级数，其每一项就都是由 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 的多项式与一个常系数相乘构成的幂函数组成。</p>
<p>这种由幂函数构成的函数项级数，就是<strong>幂级数</strong>，而上文这个幂级数，就是<strong>泰勒级数</strong>。</p>
<p>而通过前面这一系列的推导，你应该可以理解，幂级数之所以如此特殊，之所以在分析学中占据如此重要的地位，其本质是因为：</p>
<p><strong>常义的微分与积分是以区间为整体对函数进行全局的线性拟合；而幂级数是从一点处出发对函数进行局部的线性拟合。</strong></p>
<p>一个是高屋建瓴，把握整体；一个是集中一点，登峰造极！</p>
<hr>
<h2 id="幂级数的收敛域"><a href="#幂级数的收敛域" class="headerlink" title="幂级数的收敛域"></a>幂级数的收敛域</h2><p>有函数项级数：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bn%7D%5E%7B%5Cinfty%7Du_n(x)=u_1(x)+u_2(x)+...u_n(x)" alt="[公式]"></p>
<p>当 <img src="https://www.zhihu.com/equation?tex=u_n(x)" alt="[公式]"> 为定义域 <img src="https://www.zhihu.com/equation?tex=x%5Cin+I%5C!R" alt="[公式]"> 的幂函数时，则有幂级数：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bn%7D%5E%7B%5Cinfty%7Da_n(x-x_0)%5En=a_0+a_1(x-x_0)+a_2(x-x_0)%5E2+...+a_n(x-x_0)%5En" alt="[公式]"></p>
<p>幂级数本身是一个任意项级数，由前文得知，可以将它转变为绝对值级数，然后通过判断它是否绝对收敛来判断原级数的敛散性。</p>
<p>故，可以通过比值判别法，比较：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert%5Cfrac%7Bu_%7Bn+1%7D(x)%7D%7Bu_n(x)%7D%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D(x-x_0)%5E%7Bn+1%7D%7D%7Ba_n(x-x_0)%5En%7D+%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D%7D%7Ba_n%7D(x-x_0)++%5Cvert" alt="[公式]"></p>
<p>与1的关系来判别绝对值级数的敛散性。</p>
<p>而其中， <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 为 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 去心邻域内的一点，即：</p>
<p><img src="https://www.zhihu.com/equation?tex=0%3C%5Cvert+x-x_0%5Cvert%3C%5Csigma,%5Csigma%3E0" alt="[公式]"> ， 我们知道 <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 即该去心邻域的半径；</p>
<p>同时可记 <img src="https://www.zhihu.com/equation?tex=%5Crho=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D%7D%7Ba_n%7D+%5Cvert" alt="[公式]"> ，因此我们只需讨论 <img src="https://www.zhihu.com/equation?tex=%5Crho%5Ccdot+%5Csigma" alt="[公式]"> 与1之间的关系：</p>
<ul>
<li>若满足 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma+%3C+1" alt="[公式]"> ，则绝对值级数收敛，原级数必收敛；</li>
<li>若满足 <img src="https://www.zhihu.com/equation?tex=%5Crho%5Ccdot+%5Csigma%3E1" alt="[公式]"> ，则绝对值级数发散，原级数必发散；</li>
<li>若 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma=1" alt="[公式]"> ，则无法通过比值判别法判断敛散性。</li>
</ul>
<p>故可据此来讨论 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> 的不同取值：</p>
<ul>
<li>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=0" alt="[公式]"> ，则 <img src="https://www.zhihu.com/equation?tex=%5Crho%5Ccdot+%5Csigma+%5Cequiv0+%3C1" alt="[公式]"> ，无论去心邻域的半径 <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 取多大，级数都必然收敛；</li>
<li>若 <img src="https://www.zhihu.com/equation?tex=0%3C%5Crho%3C+%5Cinfty" alt="[公式]"> ，则为了满足 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma%3C1" alt="[公式]"> ，需要使去心邻域半径 <img src="https://www.zhihu.com/equation?tex=%5Csigma%3C%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> ；</li>
<li>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=+%5Cinfty" alt="[公式]"> ，则无论去心邻域的半径取多小，都不可能满足 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma%3C1" alt="[公式]"></li>
</ul>
<p>此外，可以看到，在 <img src="https://www.zhihu.com/equation?tex=0%3C%5Crho%3C+%5Cinfty" alt="[公式]"> 时，若 <img src="https://www.zhihu.com/equation?tex=%5Csigma=%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> ，即恰好处于去心邻域的边界时，我们无法通过比值判别法直接判断这两点的敛散性。</p>
<p>在这其中，我们将满足幂级数收敛的定义域范围 <img src="https://www.zhihu.com/equation?tex=(x_0-%5Csigma,+x_0+%5Csigma)" alt="[公式]"> 成为幂级数的收敛域，将收敛域的边界点 <img src="https://www.zhihu.com/equation?tex=x_0-%5Csigma" alt="[公式]"> 与 <img src="https://www.zhihu.com/equation?tex=x_0+%5Csigma" alt="[公式]"> 称为收敛点，定义域的半径 <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 称为幂级数的收敛半径。</p>
<p>因此，对于之前敛散性判别的结论整理后，有：</p>
<p>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=0" alt="[公式]"> ，则该幂级数在整个定义域上恒收敛，收敛半径为 <img src="https://www.zhihu.com/equation?tex=+%5Cinfty" alt="[公式]"> ;</p>
<p>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=+%5Cinfty" alt="[公式]"> ，则该幂级数在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 以外的所有区域全部发散，收敛半径为 <img src="https://www.zhihu.com/equation?tex=0" alt="[公式]"> ；</p>
<p>若 <img src="https://www.zhihu.com/equation?tex=0%3C%5Crho%3C+%5Cinfty" alt="[公式]"> ，则该幂级数的收敛半径为 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> ，在收敛半径以内 <img src="https://www.zhihu.com/equation?tex=(x_0-%5Cfrac%7B1%7D%7B%5Crho%7D,x_0+%5Cfrac%7B1%7D%7B%5Crho%7D)" alt="[公式]"> 全部收敛，在收敛半径以外 <img src="https://www.zhihu.com/equation?tex=(-%5Cinfty,+x_0-%5Cfrac%7B1%7D%7B%5Crho%7D),(x_0+%5Cfrac%7B1%7D%7B%5Crho%7D,+%5Cinfty)" alt="[公式]"> 全部发散，在收敛半径处 <img src="https://www.zhihu.com/equation?tex=x_0-%5Cfrac%7B1%7D%7B%5Crho%7D,x_0+%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> 需单独判断。而这个结论，也就是幂级数的<strong>阿贝尔收敛定理</strong>。</p>
<p>更本质的来说，<strong>求解幂级数收敛域的过程，实际上，就是在求我们通过“拗铁丝”方式得到的拟合图像与目标函数实现贴合的范围</strong>。</p>
<p><img src="https://pic4.zhimg.com/v2-98099080849ac47c3c460fb88847d4d7_r.jpg" alt="img">求解收敛域，就是求取局部贴合的范围</p>
<hr>
<p>对于泰勒级数：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(x)=%5Cfrac%7Bf(x_0)%7D%7B0!%7D+%5Cfrac%7Bf%5Cprime(x_0)%7D%7B1!%7D(x-x_0)+%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2!%7D(x-x_0)%5E2+...+%5Cfrac%7Bf%5E%7B(n)%7D(x)%7D%7Bn!%7D(x-x_0)%5En+..." alt="[公式]"></p>
<p>对于特别的当 <img src="https://www.zhihu.com/equation?tex=x_0=0" alt="[公式]"> 时，也就是对函数在零点处展开，其形式变为：</p>
<p><img src="https://www.zhihu.com/equation?tex=f(0)+f%5Cprime(0)x+%5Cfrac%7Bf%5Cprime%5Cprime(0)%7D%7B2!%7Dx%5E2+...+%5Cfrac%7Bf%5E%7B(n)%7D(0)%7D%7Bn!%7Dx%5En+..." alt="[公式]"></p>
<p>将这个级数称为<strong>麦克劳林级数</strong>。</p>
<p>我们在求极限时，用到的等价无穷小，绝大多数都是由麦克劳林公式推导得来，譬如经典的：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Csin+x+%5Csim+x,x+%5Cto+0" alt="[公式]"></p>
<p>即有 <img src="https://www.zhihu.com/equation?tex=%5Csin+x" alt="[公式]"> 的麦克劳林展开式：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Csin+x=%5Csin+0+%5Ccos+0%5Ccdot+x+%5Cfrac%7B-%5Csin+0%7D%7B2!%7D+x%5E2+%5Cfrac%7B-%5Ccos+0%7D%7B3!%7Dx%5E3+...=x-%5Cfrac%7Bx%5E3%7D%7B3!%7D+%5Cfrac%7Bx%5E5%7D%7B5!%7D+..." alt="[公式]"></p>
<p>等价无穷小就是通过忽略麦克劳林的高阶无穷小部分获得的。</p>
<p>级数的另一个重要作用，是为我们提供高精度的数值计算手段，譬如：</p>
<p>如何计算 <img src="https://www.zhihu.com/equation?tex=%5Cpi" alt="[公式]"></p>
<p>在现实世界的各种实际应用中，如计算机、工业制造、导弹的弹道等等领域，往往需要使用诸如 <img src="https://www.zhihu.com/equation?tex=e,%5Cpi" alt="[公式]"> 等等之类的具体数值，且有极高的精度要求。在这些领域，幂级数就能为我们提供有效的计算手段。</p>
<p>有 <img src="https://www.zhihu.com/equation?tex=%5Carctan+x" alt="[公式]"> 的麦克劳林级数：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Carctan+x=x-%5Cfrac%7Bx%5E3%7D%7B3%7D+%5Cfrac%7Bx%5E5%7D%7B5%7D+...+(-1)%5E%7Bn+1%7D%5Cfrac%7Bx%5E%7B2n-1%7D%7D%7B2n-1%7D+..." alt="[公式]"></p>
<p>通过求：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Crho=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D%7D%7Ba_n%7D+%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7B(-1)%5E%7B2n-3%7D(2n-3)%7D%7B(-1)%5E%7B2n-1%7D(2n-1)%7D+%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7B2n-3%7D%7B2n-1%7D+%5Cvert=1" alt="[公式]"></p>
<p>可知，该级数的收敛半径为 <img src="https://www.zhihu.com/equation?tex=r=%5Cfrac%7B1%7D%7B%5Crho%7D=1" alt="[公式]"> ，故在 <img src="https://www.zhihu.com/equation?tex=-1%3C+x%3C1" alt="[公式]"> 上绝对收敛，而在半径处，即 <img src="https://www.zhihu.com/equation?tex=x=-1,x=1" alt="[公式]"> 处，则需要单独讨论：</p>
<p>由于对绝对值级数的比值判别法失效，则可以改用交错级数的莱布尼茨判别法，当 <img src="https://www.zhihu.com/equation?tex=%5Cvert+x+%5Cvert=1" alt="[公式]"> 时，其去除正负号后的数列 <img src="https://www.zhihu.com/equation?tex=%5C%7Bu_n%5C%7D" alt="[公式]"> ，显然有：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7B2n-1%7D%3C%5Cfrac%7B1%7D%7B2n-3%7D%5Cimplies+u_%7Bn-1%7D%3Cu_n" alt="[公式]"></p>
<p>且：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7Du_n=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cfrac%7B1%7D%7B2n-1%7D=0" alt="[公式]"></p>
<p>故该级数在半径处也收敛，即 <img src="https://www.zhihu.com/equation?tex=%5Carctan+x" alt="[公式]"> 的麦格劳林级数收敛域为 <img src="https://www.zhihu.com/equation?tex=x%5Cin%5B-1,1%5D" alt="[公式]"></p>
<p>而由三角函数的取值可知， <img src="https://www.zhihu.com/equation?tex=%5Carctan+1=%5Cfrac%7B%5Cpi%7D%7B4%7D" alt="[公式]"></p>
<p>利用麦克劳林展开式，有：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Carctan+1=%5Cfrac%7B%5Cpi%7D%7B4%7D=1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D+..." alt="[公式]"> ，得出 <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D+...)" alt="[公式]"></p>
<p>若展开至第二项，有： <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D)=2.%5Cdot%7B6%7D" alt="[公式]"></p>
<p>展开至第三项：有： <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D)=3.4%5Cdot%7B6%7D" alt="[公式]"></p>
<p>至第四项，有： <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D-%5Cfrac%7B1%7D%7B7%7D)=2.89523%5Cdot%7B8%7D0952%5Cdot%7B3%7D" alt="[公式]"></p>
<p>…</p>
<p>这就是使用麦克劳林级数推导出的一个圆周率计算公式。</p>
<blockquote>
<p>值得一提的是，利用 <img src="https://www.zhihu.com/equation?tex=%5Carctan+x" alt="[公式]"> 在的麦克劳林级数计算 <img src="https://www.zhihu.com/equation?tex=%5Cpi" alt="[公式]"> 的过程，其收敛速度相当缓慢，在展开到第100项左右， <img src="https://www.zhihu.com/equation?tex=%5Cpi" alt="[公式]"> 的值也只接近于3.1315929。你能否想出收敛速度更快的级数来帮助我们更快的算出较为精确的圆周率数值~</p>
</blockquote>
<hr>
<p>结束级数的学习之后，我们对一元微积分的热身活动就基本完毕。</p>
<p>在这一段的历程中，我们建立了：</p>
<p>原函数 <img src="https://www.zhihu.com/equation?tex=F(x)" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=%5Ciff" alt="[公式]"> 函数 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=%5Ciff" alt="[公式]"> 导函数 <img src="https://www.zhihu.com/equation?tex=f%5Cprime(x)" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=%5Ciff" alt="[公式]"> 高阶导函数 <img src="https://www.zhihu.com/equation?tex=f%5E%7B(2+)%7D(x)" alt="[公式]"></p>
<p>这数者之间的联系。</p>
<p>从 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 出发：</p>
<p>以求导、微分、中值定理连接导函数 <img src="https://www.zhihu.com/equation?tex=f%5Cprime(x)" alt="[公式]"></p>
<p>以积分、变限积分联系原函数 <img src="https://www.zhihu.com/equation?tex=F(x)" alt="[公式]"></p>
<p>以幂级数展开联系高阶导函数 <img src="https://www.zhihu.com/equation?tex=f%5Cprime%5Cprime(x),f%5Cprime%5Cprime(x)..." alt="[公式]"></p>
<p>从下一篇文章开始，在将微积分从一元函数向二元、三元推广之前，我准备先转入线性代数的学习。</p>
<p>这其中的原因，我也将会在之后学习线性代数的过程中，以及在开始学习多元函数微积分前，予以说明。</p>
]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
  </entry>
  <entry>
    <title>坂本龙一先生对我的影响</title>
    <url>/2021/04/16/%E2%80%9C%E5%9D%82%E6%9C%AC%E9%BE%99%E4%B8%80%E5%85%88%E7%94%9F%E5%AF%B9%E6%88%91%E7%9A%84%E5%BD%B1%E5%93%8D%E2%80%9D/</url>
    <content><![CDATA[<p>硬要说影响几乎没有，自然流露的就是最好的，他的通透就是我繁琐俗常生活的一面自我之象吧。</p>
<p>不忘记看每天的月亮，直至生命燃尽：坂本龙一68岁了 <span id="more"></span></p>
<iframe frameborder="0" allowfullscreen src="https://www.zhihu.com/video/1200375282907267072?autoplay=false&amp;useMSE="></iframe>

<p>《坂本龙一：终曲》正在中国上映，</p>
<p>导演史蒂芬从2012年到2017年，</p>
<p>5年跟拍制作，</p>
<p>完成这部关于坂本龙一的纪录片。</p>
<p>豆瓣上3万5千人看过，打出8.8的高分。</p>
<p><img src="https://pic1.zhimg.com/50/v2-2998f7738c6c2ad054171d8d233a67a8_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-2998f7738c6c2ad054171d8d233a67a8_r.jpg?source=1940ef5c" alt="img"></p>
<p>1989年 摄影：Albert Watson</p>
<p>坂本龙一，被大家昵称“教授”，</p>
<p>世界级音乐家、电影配乐大师，</p>
<p>是亚洲年轻人的共同偶像。</p>
<p><img src="https://pic4.zhimg.com/50/v2-73fc99cb5f0cb5e514466b958694c73c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-73fc99cb5f0cb5e514466b958694c73c_r.jpg?source=1940ef5c" alt="img"></p>
<p>坂本年轻时组乐队YMO，在欧美和日本走红，</p>
<p>对后世的电子乐、hip-hop有开创性影响，</p>
<p>35岁因《末代皇帝》获得奥斯卡最佳原创配乐。</p>
<p>38岁定居纽约后，</p>
<p>常以环保、反战为题材进行创作。</p>
<p>粉丝对他的喜爱，早就不限音乐，</p>
<p>而是把他当做一种文化ICON、</p>
<p>一个精神领袖，去崇敬。</p>
<p><img src="https://pic2.zhimg.com/50/v2-2a4c1ea7a78d4bf6a6bbfa87e38e276f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-2a4c1ea7a78d4bf6a6bbfa87e38e276f_r.jpg?source=1940ef5c" alt="img">一条专访斯蒂芬导演</p>
<p>再过一周，就是坂本龙一的68岁生日。</p>
<p>我们在《坂本龙一：终曲》上映之际，</p>
<p>专访了来到北京的史蒂芬导演，</p>
<p>“我希望这部电影，能让大家感受到</p>
<p>坂本龙一是如何听到这个世界的。”  <strong>编辑 倪蒹葭</strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-116078311a84bf9a10d737634c4c304a_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-116078311a84bf9a10d737634c4c304a_r.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic4.zhimg.com/50/v2-b1311b063acbda54cfd48a388b61ff95_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-b1311b063acbda54cfd48a388b61ff95_r.jpg?source=1940ef5c" alt="img"></p>
<p>2017年9月，威尼斯电影节，纪录片《坂本龙一：终曲》世界首映，现场观众起立鼓掌，长时间不息。</p>
<p>前排的坂本龙一有些害羞，他略有尴尬地对身边的纪录片导演说：斯蒂芬，我们离开这里吧。</p>
<p>《坂本龙一：终曲》记录了这位音乐家，在日本福岛核泄露、及亲历咽喉癌之后，如何用艺术回应灾难，重新开始创作音乐。</p>
<p>2019年12月，电影终于在中国上映。乐迷、影迷等各路粉丝，纷纷前往膜拜。</p>
<p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/dc7bf35c-23c4-11eb-b41f-86c835170013.mp4?disable_local_cache=1&amp;auth_key=1618591333-0-0-7e822bfcbe0f42ae907c128a310e315f&amp;f=mp4&amp;bu=pico&amp;expiration=1618591333&amp;v=hw" data-thumbnail="https://pic1.zhimg.com/50/v2-ef62e3c5be230f0e204aa7369698778f_hd.jpg?source=1940ef5c" poster="https://pic1.zhimg.com/50/v2-ef62e3c5be230f0e204aa7369698778f_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p>
<p><img src="https://pic1.zhimg.com/50/v2-ef62e3c5be230f0e204aa7369698778f_hd.jpg?source=1940ef5c" alt="img"></p>
<p>坂本龙一在格陵兰岛，为当地自然声着迷</p>
<p><img src="https://pic3.zhimg.com/50/v2-f5711a8d22e374061c44db6aa0b6f28b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-f5711a8d22e374061c44db6aa0b6f28b_r.jpg?source=1940ef5c" alt="img">《坂本龙一：终曲》截图《终曲》</p>
<p>从2012年开拍，2017年完成。</p>
<p>起初，导演史蒂芬想要拍摄一部演奏会电影，然而在2014年，坂本龙一被诊断出了癌症，纪录片的方向也随之改为传记纪录片，我们也得以了解坂本龙一不为人知的人生经历。</p>
<p><img src="https://pic2.zhimg.com/50/v2-b04a3556bfc5c40b8e62baea43b79454_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-b04a3556bfc5c40b8e62baea43b79454_r.jpg?source=1940ef5c" alt="img">YMO成军时期</p>
<p> <strong>古典乐出身，却成为日本当代音乐的革新者</strong> </p>
<p>坂本龙一1952年出生在东京，3岁开始学钢琴，年少时觉得自己是德彪西转世。</p>
<p>但坂本龙一从未刻意要成为音乐人，因为不想被任何固定职业限制，他在填写志愿的时候写了“没有志愿”，直到细野晴臣推了他一把。</p>
<p>1978年，细野晴臣邀请坂本龙一和高桥幸宏，一起组个乐队，就是后来赫赫有名的YMO（Yellow Magic Orchestra）。坂本当时刚从东京艺术大学作曲系研究生毕业，高桥幸宏打趣他，在搞音乐的人中算学历高的了，问他以后会不会成为教授。“教授”的昵称由此而来。</p>
<p><img src="https://pic2.zhimg.com/50/v2-829e24b20a7d0468fd7cf3c2eb04d5be_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-829e24b20a7d0468fd7cf3c2eb04d5be_r.jpg?source=1940ef5c" alt="img">YMO乐队，左起：细野晴臣、坂本龙一、高桥幸宏</p>
<p><img src="https://pic2.zhimg.com/50/v2-be11d83e55482d27c6b8d686f125a678_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-be11d83e55482d27c6b8d686f125a678_r.jpg?source=1940ef5c" alt="img">YMO专辑封面</p>
<p>坂本龙一惊讶于细野和高桥没受过正统音乐教育，却掌握了音乐的核心。与受系统古典音乐训练、热爱实验性现代音乐的坂本不同，细野和高桥的音乐源头中有爵士乐和流行音乐的元素。</p>
<p>YMO的音乐在欧美走红之后，开始在日本被接纳，80年代初的东京街头，随处可以听见YMO乐队前卫、高科技感的电子音乐。对后世的电子乐、hip-hop有开创性影响。</p>
<p>坂本说，“加入YMO之前，我不过是半瓶醋，在乐队中经历了争执和纠葛后，才一点一点成长。”</p>
<p>1983年，YMO在巅峰时解散，成为传奇；坂本龙一单飞，也开始在电影配乐领域大放异彩。</p>
<p><img src="https://pic1.zhimg.com/50/v2-ebb0560f7c46cf04f14927a4658c06c4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-ebb0560f7c46cf04f14927a4658c06c4_r.jpg?source=1940ef5c" alt="img">《战场上的快乐圣诞》</p>
<p> <strong>电影配乐大师</strong> </p>
<p>1982年，电影导演大岛渚邀请坂本龙一主演《战场上的快乐圣诞》，饰演一名日本军官。坂本是大岛渚的影迷，看过他几乎所有电影，但傲娇的年轻人附加了一个要求：那请把配乐也交给我来做吧。大岛渚说好。当时日本电影通常是在上映前一周匆忙配上音乐，但是坂本向大岛渚要求了3个月时间，大岛渚再次同意，而且没有任何指示，给他100%创作自由。结果，主题曲《圣诞快乐，劳伦斯》的影响力，甚至超过了电影本身。</p>
<p><img src="https://pic4.zhimg.com/50/v2-659e0062a9f50399a8c1a05dd6dc8e7f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/v2-659e0062a9f50399a8c1a05dd6dc8e7f_r.jpg?source=1940ef5c" alt="img">《战场上的快乐圣诞》</p>
<p>メリー・クリスマス ミスターローレンス坂本龙一 - 戦場のメリー・クリスマス</p>
<p> 关于这首神曲的创作，坂本龙一本人是这样阐述的：“因为是圣诞，所以想用铃声。而电影故事发生在南太平洋的小岛，不能用欧洲的铃声，所以想到用巴厘岛甘美兰的声音。”</p>
<p>由此，坂本龙一开始了和多位国际名导合作电影配乐的生涯。</p>
<p><img src="https://pic1.zhimg.com/50/v2-428def30e5390c45307bf84c62b54434_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-428def30e5390c45307bf84c62b54434_r.jpg?source=1940ef5c" alt="img">《末代皇帝》剧照</p>
<p><img src="https://pic1.zhimg.com/50/v2-79577b71aaf6d3e39d68301b944d7a66_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-79577b71aaf6d3e39d68301b944d7a66_r.jpg?source=1940ef5c" alt="img">坂本龙一和陈冲，拍摄《末代皇帝》时</p>
<p>1986年，贝托鲁奇的《末代皇帝》在北京紫禁城开拍，邀请坂本龙一饰演日本军官甘粕正彦。拍摄结束后，他被紧急任命为影片作曲。</p>
<p>2个星期后，坂本交出了44首曲子。</p>
<p>皇妃文绣在雨中离开了溥仪的家，扔下雨伞出走，他为文绣写了一首《Rain》。第一次给意大利的工作人员听的时候，所有人互相拥抱，喊着，“bellissimo（太美了）、bellissimo（太美了）。</p>
<p>Rain坂本龙一 - The Last Emperor (Original Motion Picture Soundtrack)</p>
<p><img src="https://pic2.zhimg.com/50/v2-9187faa199c3be71edf4cfc788ea2273_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-9187faa199c3be71edf4cfc788ea2273_r.jpg?source=1940ef5c" alt="img">《末代皇帝》还获得了金球奖最佳原创配乐</p>
<p>其实坂本没有学习过中国音乐，他接到任务马上买来20多张中国音乐精选集，花了一天时间全部听完，2周赶出44首，完工之后就累得住院。</p>
<p>他说做电影配乐，是因为这些电影创作者吸引着他，“我好像继承了父亲的性格，很容易被人或事吸引，而且入迷。”</p>
<p><img src="https://pic1.zhimg.com/50/v2-8fa80867fa3fae0f4687f1537b588e22_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-8fa80867fa3fae0f4687f1537b588e22_r.jpg?source=1940ef5c" alt="img"></p>
<p>坂本龙一在纽约的私人工作室2014年，在自己癌症治疗的关键时期，坂本不顾家人反对，接受了电影《荒野猎人》的配乐邀请，因为没有办法对亚利桑德罗导演说不。</p>
<p>2017年，台湾导演蔡明亮把新片《你的脸》寄给他请他看看，他便回信说想要做这部电影的配乐。一个月后，坂本龙一把音乐发给了蔡明亮，附了一封短讯：您想用多少，用在哪里，都可以。</p>
<p>音乐放进电影中，非常贴合，后来获得台北电影节最佳原创配乐。</p>
<p> <strong>“万物皆音乐”</strong> </p>
<p>纪录片《终曲》中，坂本龙一随时随地都在收集、记录声音：</p>
<p><img src="https://pic2.zhimg.com/50/v2-7c81e2e48d9e3cf45047f6fbd0a5d915_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-7c81e2e48d9e3cf45047f6fbd0a5d915_r.jpg?source=1940ef5c" alt="img"></p>
<p>穿着蓝T的坂本龙一，头上套着个蓝色塑料桶，站在雨中感受雨滴敲击的声音。</p>
<p><img src="https://pic3.zhimg.com/50/v2-d8407c10bdee52b59ed31afed2b8f6c7_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-d8407c10bdee52b59ed31afed2b8f6c7_r.jpg?source=1940ef5c" alt="img"></p>
<p>潜入森林，收集踩在枯叶上的脚步声。</p>
<p><img src="https://pic2.zhimg.com/50/v2-2df0ecdee82cfa912a07f20b05db095c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-2df0ecdee82cfa912a07f20b05db095c_r.jpg?source=1940ef5c" alt="img"></p>
<p>去非洲记录原始部落的歌声，在肯尼亚的湖泊上采集自然声。</p>
<p>少年时代，受到约翰·凯奇（John Cage）等现代音乐家影响，坂本龙一认为万物皆是音乐。80年代的巴厘岛旅行，他看到当地人在鸽子脚上系上鸽哨，放飞的时候，鸽哨发出忽远忽近的声响，和悠悠的风声、森林的声音混在一起，他念念难忘。</p>
<p>所以担任2014年札幌艺术节总监时，他设计的开幕式并不奏乐，而是让一群系上鸽哨的鸽子飞翔。</p>
<p><img src="https://pic2.zhimg.com/50/v2-081935cb5b8718fd3b889e9fcebd6b14_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-081935cb5b8718fd3b889e9fcebd6b14_r.jpg?source=1940ef5c" alt="img"></p>
<p>坂本龙一录屋顶上的雨声坂本龙一感兴趣的不仅是音乐本身，还有整个环境的声音景观。</p>
<p>“每次下雨的时候，我都打开窗户，然后把录音器放出去。”他会在任何地方敲打看到的东西，了解它们的声音。在巴塞罗那，一辆巡逻车响着汽笛驶过，他赶紧掏出手机录音，为没有错过这个声音开心。</p>
<p><img src="https://pic4.zhimg.com/50/v2-6b7403723688ba05c113700e51da835c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-6b7403723688ba05c113700e51da835c_r.jpg?source=1940ef5c" alt="img"></p>
<p>2011年日本海啸和福岛核泄漏后，坂本龙一发现了一架被海啸吞噬过的钢琴，钢琴完全走音了，他却被这个声音迷住了，“海浪一瞬间涌上来，让钢琴回复到自然状态，经过自然调音的钢琴声，我觉得特别美。”</p>
<p>他把这架钢琴的声音，放进了新专辑《异步》中。</p>
<p><img src="https://pic4.zhimg.com/50/v2-0fcb5566e480df56a64ebd3e88e90491_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/v2-0fcb5566e480df56a64ebd3e88e90491_r.jpg?source=1940ef5c" alt="img">《坂本龙一：终曲》截图纪录片</p>
<p>《终曲》的拍摄过程，刚好也是坂本龙一新专辑《异步》的创作阶段。他十分喜欢这张专辑，甚至有把它藏起来、不给别人听的想法。</p>
<p>这张专辑里的音乐与以往十分不同：</p>
<p>几乎没有旋律，而是由踩在落叶上的脚步声、被海啸损坏的钢琴发出的声音、测量核污染仪器的哀嚎声、日本传统的三味线等等声音，奇妙地组合着。</p>
<p>这是福岛事故和经历癌症之后，更加感受生命脆弱的坂本龙一，最想要做的音乐。</p>
<p><img src="https://pic1.zhimg.com/50/v2-efbe91cc188b6c49b3198d034fe0ec85_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-efbe91cc188b6c49b3198d034fe0ec85_r.jpg?source=1940ef5c" alt="img">2017年NHK专访坂本龙一</p>
<p>2017年《异步》发行之时，他在NHK电视台被访问道，想以怎样的方式燃烧至尽，坂本想了一会回答，“确实有一个强烈的想法，就是不对自己说谎，想做真实的音乐，真实地活下去，还有不忘记看每天的月亮。”</p>
<p>虽然早在80年代就成为欧美和日本的音乐偶像，但坂本龙一从未停止对音乐边界的探索。在现代音乐、古典乐、流行乐、电子乐、民族乐等等之间来回跳跃，也在地球的各个地方，北极、非洲、南洋小岛汲取声音灵感，越来越不受到限制。</p>
<p><img src="https://pic1.zhimg.com/50/v2-c37c1820fc76f3259c0bbc2d465d4193_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-c37c1820fc76f3259c0bbc2d465d4193_r.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic2.zhimg.com/50/v2-2c93b8f87a25cf2e2efbc0a1081455e5_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-2c93b8f87a25cf2e2efbc0a1081455e5_r.jpg?source=1940ef5c" alt="img"></p>
<p>“总觉得无论我们说什么，上头的人都听不见。最终又回归沉默，日本人已经沉默四十多年了。”</p>
<p>纪录片《终曲》中，坂本龙一参加了反对重启核电站的大型集会，他说：“不管是核电站事故，还是灾后日本的政治状况、社会情况，全都每况愈下……如果不把自己的想法说出来，我会感到非常压抑。我做不到视而不见。”</p>
<p>一直以来，坂本龙一有自己鲜明的政治立场，是积极的社会活动推动者。</p>
<p><img src="https://pic4.zhimg.com/50/v2-15d8972cab1f4136e4d001f23bfa13e4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-15d8972cab1f4136e4d001f23bfa13e4_r.jpg?source=1940ef5c" alt="img">大学时的坂本龙一</p>
<p>坂本龙一的父亲是出版社编辑，母亲是帽子设计师。70年代，左翼思潮在日本非常流行。出身有闲阶级的坂本龙一，从高中就是一枚左翼热血青年，积极参加左翼运动。</p>
<p>“仿效中国的精神，我们也要用音乐为工农服务！”“一起解放被资本主义操控的音乐”。反对学校统一的制服，统一的考试制度，在他们高中的罢课运动中，校服、校帽和考试，真的因此被取消了。</p>
<p>虽然坂本龙一最后还是参加大学入学考试，但他认为自己带着“瓦解大学制度”的想法进入了东京艺术大学。</p>
<p><img src="https://pic2.zhimg.com/50/v2-bde677543068ef21115c2ab7bafc9cc2_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-bde677543068ef21115c2ab7bafc9cc2_r.jpg?source=1940ef5c" alt="img">高中时的坂本龙一</p>
<p><img src="https://pic4.zhimg.com/50/v2-53da80c701221fd4bb00affeefd6c36e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-53da80c701221fd4bb00affeefd6c36e_r.jpg?source=1940ef5c" alt="img">1969年，在新宿高中校舍前发表激情演说</p>
<p>在自传《音乐即自由》中，坂本龙一回忆当年积极参加运动的自己，“当时有个传言，在被封锁的新宿高中校园里，坂本带着安全帽在弹奏德彪西的乐曲。不过我已经不记得这些事了，如果我真的做过，毫无疑问就是想出风头。”</p>
<p>如果说少年时代的积极运动，带着“中二”气息，38岁搬到纽约居住之后，他越来越深刻感受到存在于世界上的断层。</p>
<p><img src="https://pic2.zhimg.com/50/v2-b47273c547a0e2802b7635cc56d1252d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-b47273c547a0e2802b7635cc56d1252d_r.jpg?source=1940ef5c" alt="img">摄于南青山的个人录音室</p>
<p>1997年，写下《Discord》（意为不调和、争端）这首曲子是因为，他看到电视正在报道卢旺达内战难民的新闻，当天夜里，梦到自己想要写一首关于这起事件的管弦乐曲，于是立刻起身，冲到位于地下室的工作室内，赶紧动笔写下了。</p>
<p>“当时我有一种无法沉默下去的心情。对我来说，这应该是一个很大的转机。”</p>
<p><img src="https://pic4.zhimg.com/50/v2-bc98924943d9ecad0e7dc53ed6a30e35_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-bc98924943d9ecad0e7dc53ed6a30e35_r.jpg?source=1940ef5c" alt="img">《LIFE》中原子弹之父奥本海默的头像</p>
<p>1999年，世纪之交，坂本龙一写了一出歌剧《LIFE》（生活），蕴藏了许多与环境问题、社会问题相关的信息，比如核武器原子弹之父奥本海默的头像投影在巨大屏幕上。坂本期待经过20世纪的战争和灾难，数以亿计的人因此死去，到了新世纪，人类也会变得更明智一些。</p>
<p><img src="https://pic1.zhimg.com/50/v2-e5dde5b547df358728e3f2f458e86c50_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-e5dde5b547df358728e3f2f458e86c50_1440w.jpg?source=1940ef5c" alt="img">坂本龙一拍摄于911事件</p>
<p>可是21世纪的头一年，他在纽约亲历911事件，生活陷入恐慌之中。很多人担心恐怖分子会用核武器发动第二波攻击，为此坂本龙一买了一辆越野车，里面储备了一个月的水和粮食，打算随时逃难，还买了很多防毒面具，分送别人，也送了前妻一个。</p>
<p>12月，他和村上龙等好友一起出版了一本评论集《反战》。</p>
<p><img src="https://pic4.zhimg.com/50/v2-64b5387c9c2001a6b0483f0c91d08a9b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-64b5387c9c2001a6b0483f0c91d08a9b_r.jpg?source=1940ef5c" alt="img">《Chasm》专辑封面</p>
<p>21世纪，他发行的第一张专辑就是《Chasm》（意为裂痕、断层），专辑发行于2004年，这前一年美军进攻伊拉克。专辑充满着被愤怒驱使的心情，比如第一首歌就是说唱，由韩国说唱歌手MC Sniper联合演绎，歌词写着“搬运因为饥饿呻吟的老人，被恐怖中的不安和危险拽着的你和我……”</p>
<p>“虽然一般大众走上了全球各地的街头，质疑美军进攻的动机并不单纯，但那些媒体或专业人士，却对此一声不吭。我真的看不下去，每天都很痛心，想着这是开什么玩笑。”</p>
<p><img src="https://pic1.zhimg.com/50/v2-d90d7d6a2ba3733ef7413c857d2ddb01_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-d90d7d6a2ba3733ef7413c857d2ddb01_r.jpg?source=1940ef5c" alt="img">2008年格陵兰岛之旅</p>
<p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/9cf3250e-239f-11eb-93b5-a2d9c4dc5e08.mp4?disable_local_cache=1&amp;auth_key=1618591340-0-0-d3cacd64854417005b644b885f73f3db&amp;f=mp4&amp;bu=pico&amp;expiration=1618591340&amp;v=hw" data-thumbnail="https://pic2.zhimg.com/50/v2-bd9c5c6acbc371a2fa7cd5ee2e16fc94_hd.jpg?source=1940ef5c" poster="https://pic2.zhimg.com/50/v2-bd9c5c6acbc371a2fa7cd5ee2e16fc94_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p>
<p><img src="https://pic2.zhimg.com/50/v2-bd9c5c6acbc371a2fa7cd5ee2e16fc94_hd.jpg?source=1940ef5c" alt="img"></p>
<p>坂本龙一把录音机放进冰川，“我在把声音钓上来”</p>
<p>坂本龙一对人为灾难和环境问题的思考，在2008年的格陵兰之旅中，得到了某种解答。</p>
<p>当时是一个艺术项目，邀请艺术家去格陵兰岛，直观地看全球暖化的后果。见到数量惊人的海水和冰山，坂本内心受到很大冲击。</p>
<p>“当人类加诸大自然的负担一超出大自然容许的范围，受害的是人类，大自然不会感到任何困扰。生活在冰山和海水的世界的那期间，我不断感到人类是多么微不足道。”</p>
<p>格陵兰之旅也深刻改变了他正在创作的专辑《Out of Noise》（2009），使用了北极冰雪融化声、流水声，他让这些原始声音直接排列，崭新的音乐也逐渐成形。</p>
<p><img src="https://pic1.zhimg.com/50/v2-bc0919f122ef6477e2304423f9e72413_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-bc0919f122ef6477e2304423f9e72413_r.jpg?source=1940ef5c" alt="img">坂本龙一和东北青少年管弦乐团</p>
<p>2011年的日本大地震以及核泄漏事件，对坂本龙一影响深远，他招募受灾地区的孩子，组建了一支东北青少年管弦乐团，亲自教授，把他们带进音乐世界。</p>
<p>直到2019年的采访中，他仍然说“事件带给我的震动至今还在。那种震动究竟是什么，我应该怎么做？我还没能找到答案，它们也影响着我的创作”。</p>
<p>《坂本龙一：终曲》也记录了他寻找答案的过程。</p>
<p><strong>以下是纪录片导演史蒂芬的自述。</strong></p>
<p><img src="https://pic2.zhimg.com/50/v2-3077963a6dd802013f81ee8e57a903e6_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-3077963a6dd802013f81ee8e57a903e6_r.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic2.zhimg.com/50/v2-930f2137031b6be5bec2747f3aaa7d5d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-930f2137031b6be5bec2747f3aaa7d5d_r.jpg?source=1940ef5c" alt="img"></p>
<p><strong>自述  史蒂芬·野村·斯奇博</strong></p>
<p> <strong>福岛核泄露事故后，</strong></p>
<p> <strong>我见到了不一样的坂本龙一</strong> </p>
<p>1990年前后，我和坂本龙一，几乎在同一时间从东京搬到了纽约。</p>
<p>我是1970年出生在东京，妈妈是日本人，爸爸是美国人。我还是孩子的时候，整个东京，我感觉YMO的音乐无处不在。我一直是坂本龙一的粉丝。</p>
<p>2011年，日本东太平洋发生9级地震，继而发生海啸，福岛核电站放射性物质泄漏，它在当时是世界上最大的在役核电站。家乡的一切发生了翻天覆地的变化。</p>
<p>2012年5月，我在纽约的一次有关福岛核灾难的活动中见到了坂本龙一，当时是一位京都大学的核物理学家，来做核污染的演讲。眼前的坂本龙一，和我印象中的完全不一样了 。</p>
<p><img src="https://pic2.zhimg.com/50/v2-0a6dd64af290bdbe7cb4019f7055f417_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-0a6dd64af290bdbe7cb4019f7055f417_r.jpg?source=1940ef5c" alt="img">YMO时期，坂本龙一做出机械感的电子音乐</p>
<p>在我的印象中，他是YMO乐队最英俊的成员。80年代，日本经济腾飞，科技迅速发展，从战后阴影中走出来，大家对未来有一种梦幻的向往，YMO的音乐带着时髦的机械感，他就像一个时代典型，代表着科技能带来的希望和幸福。</p>
<p>而眼前的坂本龙一，年纪大了，他显得有些懊悔，意识到技术也会给我们带来很多麻烦。</p>
<p><img src="https://pic4.zhimg.com/50/v2-8e472d9a609550608f33f5093e621131_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-8e472d9a609550608f33f5093e621131_r.jpg?source=1940ef5c" alt="img">坂本龙一在反对重启核电站的活动现场</p>
<p>在这个活动上，我第一次知道坂本龙一对环境问题、核问题有自己的立场。我也得知他计划于2012年7月在东京举办一场名为“无核”的音乐节。日本主流媒体对于他反对核污染的立场感到不安，因为他太有名了。</p>
<p>这些媒体不跟进报道、保持沉默，而我是一个住在纽约的独立电影制作人，我觉得我应该去记录它。</p>
<p>我真的不知道坂本龙一为什么会答应。他后来告诉我，看过我的另一部音乐纪录片，关于埃里克·克莱普顿（Eric Clapton），他很喜欢。</p>
<p>而且我猜测他的确希望有人能在福岛核事故之后，帮他讲述自己的故事。也许他认为我能以国际化的视角去讲述。</p>
<p><img src="https://pic1.zhimg.com/50/v2-846a16e4582b9d11b9314188f3e56595_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-846a16e4582b9d11b9314188f3e56595_r.jpg?source=1940ef5c" alt="img"></p>
<p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/29d41184-232a-11eb-9a60-c6446caf7a05.mp4?disable_local_cache=1&amp;auth_key=1618591342-0-0-22d3ebcfd6d98f26c03931998e1bb07e&amp;f=mp4&amp;bu=pico&amp;expiration=1618591342&amp;v=hw" data-thumbnail="https://pic4.zhimg.com/50/v2-1f4dc93ea8a82fff2b4b30096702291e_hd.jpg?source=1940ef5c" poster="https://pic4.zhimg.com/50/v2-1f4dc93ea8a82fff2b4b30096702291e_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p>
<p><img src="https://pic4.zhimg.com/50/v2-1f4dc93ea8a82fff2b4b30096702291e_hd.jpg?source=1940ef5c" alt="img"></p>
<p>坂本龙一为灾区人们演奏</p>
<p> <strong>灾难之后，我们能做些什么</strong> </p>
<p>面对灾难，我们无能为力，只能试着找出自己能做什么。坂本龙一成为了一个积极活动的音乐家，而我为他拍了一部纪录片。</p>
<p>在岩手县一个叫陆前高田的小镇，很多人在海啸中丧生，是一个重灾区。2012年12月，坂本龙一去那里为当地人表演。</p>
<p>地震发生在2011年3月，此时是在一年零9个月后，但一些人告诉我们，在坂本龙一演出的时候，他们终于可以真正入睡了。</p>
<p>当时那个情境很打动教授，但是他努力让自己冷静下来，为了使人们从音乐中感到放松，演奏者不能够太情绪化。福岛核事故之后，我们已知的世界似乎要走到尽头，好像进入了一个时代尾声。</p>
<p>我想展现坂本龙一是如何用艺术回应灾难。</p>
<p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/342fdca8-2357-11eb-9ba8-86b142f84435.mp4?disable_local_cache=1&amp;auth_key=1618591342-0-0-4dcb39c0fe4f6fa4a4c51491cae18e27&amp;f=mp4&amp;bu=pico&amp;expiration=1618591342&amp;v=hw" data-thumbnail="https://pic4.zhimg.com/50/v2-59b1d24267355075e5bd337817c1a68b_hd.jpg?source=1940ef5c" poster="https://pic4.zhimg.com/50/v2-59b1d24267355075e5bd337817c1a68b_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p>
<p><img src="https://pic4.zhimg.com/50/v2-59b1d24267355075e5bd337817c1a68b_hd.jpg?source=1940ef5c" alt="img"></p>
<p>这部电影的第一个场景，是坂本龙一在弹奏一架被海啸损坏的钢琴，他觉得走音的钢琴声很美。</p>
<p>这个场景基本囊括了所有这部电影在探索的主题：关于一个人克服困难、并开始创造新的美妙音乐的故事；他最终拥抱了生活，但同时，他对世界上所有正在分崩离析的事物有着非常敏锐的意识。</p>
<p><img src="https://pic4.zhimg.com/50/v2-7e71918c6299c5e834566d795b826a56_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-7e71918c6299c5e834566d795b826a56_r.jpg?source=1940ef5c" alt="img"></p>
<p> <strong>患癌症后，他鼓励我继续拍下去</strong> </p>
<p>拍摄期间，2014年，他患上癌症。</p>
<p>得知他的病情后不久，他允许我去采访他。我不忍心继续打扰，但他说你应该拍下来。这是整个拍摄中最痛苦的部分。我采访了他很多内容，因为癌在他的咽喉，我们担心他以后不能说话。当时坂本龙一先生和他家人，不希望除了我以外的任何人来他们家拍摄。</p>
<p>当时他的儿子刚刚大学毕业，是个很有天赋的电影制作人，我一个人在他们家拍摄时，他就帮我打灯、收音。我就跟他说，你为什么不直接自己拍呢？</p>
<p>我很快就发现，他拍的镜头非常好，有一种非常温柔的关系在里面。后来他一听见父亲弹琴的声音，就像消防员一样，拿着相机冲过去拍。家里面的很多镜头是坂本先生的儿子拍的。后来坂本先生的身体恢复了一些，我会带一个小小的团队来，他的儿子也会成为团队一员。</p>
<p><img src="https://pic3.zhimg.com/50/v2-614651f5fa52ef1e3567f9b3307c7351_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-614651f5fa52ef1e3567f9b3307c7351_r.jpg?source=1940ef5c" alt="img">坂本龙一纽约家附近的街区</p>
<p>solari坂本龙一 - async</p>
<p>我曾经尝试导演坂本龙一，但是从来行不通。他太聪明了，一意识到我在做些安排，他就会毁了它。他相信自然流露是最好的，你就是在诚实地表达。</p>
<p>也的确如此，我之前一直想以新的音乐的诞生作为电影的尾声，事情就自然发生了。</p>
<p>那天我们已经完成拍摄，只想从坂本龙一身后补拍一个在弹琴的镜头，他说，那我就随便弹了。他开始弹《Solari》，这是他写的一首新歌，他第一次在别人面前演奏这首曲子。</p>
<p>那其实是我等待了5年的时刻。</p>
<p><img src="https://pic4.zhimg.com/50/v2-e0cc88e00dc5b21f2feb1c03b68a2557_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-e0cc88e00dc5b21f2feb1c03b68a2557_r.jpg?source=1940ef5c" alt="img"></p>
<p>拍摄过程中，有很多回忆，最美好的就是和坂本龙一待在一个小房间，他在一架钢琴前作曲。</p>
<p>那整个夏天他都投入在《异步》这张新专辑的创作中。我们每个周末去拜访他，会谈论他的想法、他的生活，最妙的是，有时他有了灵感就会突然开始弹奏。</p>
<p>音乐太美了，而且他就坐在那儿。</p>
<p><img src="https://pic4.zhimg.com/50/v2-7ac5889920fbcf1e722c31228e38955e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-7ac5889920fbcf1e722c31228e38955e_r.jpg?source=1940ef5c" alt="img"></p>
<p> <strong>“我想让观众感受</strong> </p>
<p> <strong>坂本龙一是如何听到这个世界”</strong> </p>
<p>我们都叫坂本龙一“教授”，我想把他的理念，也融入到纪录片的制作中。</p>
<p>坂本龙一是一个极简主义者，他总是说少即是多。所以电影中有很多沉默的时刻，有时沉默是最有力的。</p>
<p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/95acbe4c-237f-11eb-a25a-ea37c03d7100.mp4?disable_local_cache=1&amp;auth_key=1618591343-0-0-c53a02208d600bf05e1bcdb622ad155d&amp;f=mp4&amp;bu=pico&amp;expiration=1618591343&amp;v=hw" data-thumbnail="https://pic1.zhimg.com/50/v2-8cd6ed58fda9a68145d74c8b82dd76e9_hd.jpg?source=1940ef5c" poster="https://pic1.zhimg.com/50/v2-8cd6ed58fda9a68145d74c8b82dd76e9_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p>
<p><img src="https://pic1.zhimg.com/50/v2-8cd6ed58fda9a68145d74c8b82dd76e9_hd.jpg?source=1940ef5c" alt="img"></p>
<p>《东京旋律》中坂本龙一弹奏《圣诞快乐劳伦斯》</p>
<p>这部电影有许多片段，在过去和现在来回穿梭，剪辑上还会从世界一个地方跳到另一个地方，因为我觉得这是坂本龙一的思想特点之一。</p>
<p>电影中我穿插使用了一些1985年，法国摄影师Elizabeth拍摄的坂本龙一纪录片《东京旋律》，那就像一个时间胶囊，当时他弹奏《圣诞快乐劳伦斯》的速度更快，钢琴音调也调得更高，他说话也更快。当时和现在的对比很有趣，也很美。</p>
<p>1987年，坂本龙一就出过一张专辑《Neo Geo》（新地理），其中有巴厘岛的音乐，有日本冲绳的，也有来源于非洲的音乐，对他来说，这是一整个平坦的世界。电影中也是如此，上一刻在非洲，下一个场景就到了格陵兰岛。</p>
<p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/4ab36892-2329-11eb-8fc6-ba04eef90046.mp4?disable_local_cache=1&amp;auth_key=1618591343-0-0-8b3ae62a2ead7d09311707bd391cf0ee&amp;f=mp4&amp;bu=pico&amp;expiration=1618591343&amp;v=hw" data-thumbnail="https://pic4.zhimg.com/50/v2-1e1a9583a71a47436a6555586a559a25_hd.jpg?source=1940ef5c" poster="https://pic4.zhimg.com/50/v2-1e1a9583a71a47436a6555586a559a25_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p>
<p><img src="https://pic4.zhimg.com/50/v2-1e1a9583a71a47436a6555586a559a25_hd.jpg?source=1940ef5c" alt="img"></p>
<p>坂本龙一在福岛核事故后的灾区，电影中此处可听见测量放射污染仪器的鸣叫</p>
<p>我把电影的整体节奏放慢，让声音能够停留，被感觉到。这种方式也跟我和坂本龙一一起去福岛核污染区的经验有关。</p>
<p>那儿实际上非常平静，有鸟类，但没有人烟，我感到最恐怖的是，我一点也感觉不到危险。人的五感是没法感知到核污染的，只能通过科技的东西探测，无色无味，我们人类制造出来了一种危险，我们自己无法感知。</p>
<p>我希望通过这部电影，让观众感受到坂本龙一是如何听到这个世界的。</p>
<p><img src="https://pic1.zhimg.com/50/v2-2130bcf1c637f00973b67efaff2868dd_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-2130bcf1c637f00973b67efaff2868dd_r.jpg?source=1940ef5c" alt="img">坂本龙一在新专辑《异步》的演奏会上</p>
<p><img src="https://pic2.zhimg.com/50/v2-072846e4a0b0db42ccab7f40ff91cbdf_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-072846e4a0b0db42ccab7f40ff91cbdf_r.jpg?source=1940ef5c" alt="img"></p>
<p>龙一相信所有的声音都是音乐性的——即使是环境声。他收录各种声音，把它们带入专辑。比如，把麦克风挂在家里的墙上，让他的房子变成像一件乐器。这个理念启发了他最新的作品，以及我们的剪辑方式。</p>
<p>破碎的钢琴声、测定放射能量仪器的哀嚎声、北极冰层融化的声音，以及坂本龙一弹奏美妙的旋律——所有这些，像乐句一样被组合。我们根据声音来剪辑电影，希望它就像一首很长的乐曲。</p>
<p>电影的结尾，他创作出了美妙的新音乐，然后又回到生活中，天气很冷，他说要动动手指，保持温暖，继续创作。</p>
<p>所以平和无味的日常隐藏你我的爆裂无声也是浪漫主义的复生吧，枯燥无聊的我收拾欲望成为一个通透的人还任重而道远啊，也是无力的自嘲罢了，好在我还能意识到这点，没有妄自尊大。</p>
<p>最后在文章末尾附上龙一先生的经典作品，不求有所悟，但求有所慰藉，毕竟生活给予各人的体悟没必要再在一首简单却悠长的作品里了。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4899152&auto=1&height=66"></iframe>



]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>艺术家</tag>
      </tags>
  </entry>
  <entry>
    <title>咖啡入门浅析</title>
    <url>/2021/09/22/%E2%80%9C%E5%92%96%E5%95%A1%E5%85%A5%E9%97%A8%E6%B5%85%E6%9E%90%E2%80%9D/</url>
    <content><![CDATA[<p>当前时代也可以说是咖啡的时代，虽然我们的日常生活中充斥着各种各样的咖啡，但其实我们也许对一杯咖啡风味的基本构成都不甚了解，此文章为鄙人对咖啡风味构成的一些浅薄的认识。</p>
<span id="more"></span>


<p>一杯成品咖啡的构成可以分为以下几点</p>
<p>1.豆种</p>
<p>2.处理法</p>
<p>3烘培方式</p>
<p>4冲泡方式</p>
<p>5辅料配比</p>
<p>1.先从豆种说起。咖啡属于茜草科咖啡属的常绿灌木，以热带地区为中心，约有500属6000种茜草科植物分布于此。一直以来咖啡被认为具有某些药效，如健胃，醒脑，止血，散热，强身等。比较有名的茜草科植物还有栀子，它的果实很早以前就被晒干拿来作为药材。</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/151106/1R1593H7-0.jpg" alt="img"></p>
<p>　　咖啡的三大原生种</p>
<p>　　咖啡属的植物约有40种，但能够生产出具有商品价值咖啡豆的仅有阿拉比卡种，罗布斯塔种，利比里亚种，这三种称为“咖啡三大原生种”。</p>
<p>　　1.阿拉比卡种(学名Coffea arabica)</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/151106/1R15aY0-1.jpg" alt="img"></p>
<p>　　阿拉比卡种的原产地是埃塞俄比亚的阿比西尼亚高原(即现在的埃塞俄比亚高原)，初期主要作为药物食用(伊斯兰教的情侣们用来当作治疗身心的秘药或者用来醒脑)，13世纪培养出烘焙饮用的习惯，16世纪经由阿拉伯地区传入欧洲，进而成为全世界人们共同喜爱的饮料。</p>
<p>　　所有的咖啡中，阿拉比卡种的咖啡占75%-80%，它的绝佳风味与香气，使它成为这些原生种中唯一能够直接饮用的咖啡。但其对干燥，霜害，病虫害等 的抵抗力较低，特别不耐咖啡的天敌——叶锈病，因而各生产国都在致力于品种改良。斯里兰卡就是一个例子。过去斯里兰卡曾是远近闻名的咖啡生产国，19世纪 末却因为叶锈病的肆虐，咖啡庄园无一幸免。此后，斯里兰卡转而发展红茶产业，并与印度同列红茶王国。</p>
<p>　　阿拉比卡种咖啡豆主要产地为南美洲(阿根廷与巴西部分区域除外)，中美洲、非洲(肯尼亚，埃塞俄比亚等地，主要是东非诸国)、亚洲(包括也门、印度、巴布亚新几内亚的部分区域)。</p>
<p>　　2.罗布斯塔种(学名Coffea robusta Linden)</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/151106/1R1594M5-2.jpg" alt="img"></p>
<p>　　在非洲刚果发现的耐叶锈病品种，教阿拉比卡种有更强的抗病力。人们都喜欢将罗布斯塔种与阿拉比卡种咖啡相提并论，事实上罗布斯塔种原是刚果种(学名 Cofffea canephora)的突变品种，所以说，该拿来与阿拉比卡种相提并论的是刚果种。然而直至今日，罗布斯塔种的名称已为大众惯用，而把它与刚果种视为同一 种类。</p>
<p>　　阿拉比卡种咖啡豆生长在热带较冷的高海拔地区，不适合阿拉比卡种咖啡生长的高温多湿地带就是罗布斯塔种咖啡生长的地方。罗布斯塔种具有独特的香味 (称为“罗布味”的异味，有些人认为是霉臭味)与苦味，仅仅占混合咖啡的2%-3%，整杯咖啡就成了罗布斯塔味。它的风味就是如此鲜明强烈，若想直接品尝 它恐怕得考虑一下。它一般被用于速溶咖啡(其萃取出的咖啡液大约是阿拉比卡种的2倍)、灌装咖啡、液体咖啡等工业生产咖啡上。咖啡因的含量3.2%左右， 远高于阿拉比卡种的1.5%。</p>
<p>　　罗布斯塔种的主要生产国是印度尼西亚、越南以及科特迪瓦、阿尔及利亚、安哥拉为中心的西非诸国，近年来越南更致力于跻身主要咖啡生产国的行列，并将咖啡生产列入国家政策中(越南也生产部分阿拉比卡种咖啡)。</p>
<p>　　3.利比里亚种(学名Coffea liberica)</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/151106/1R1594A0-3.jpg" alt="img"></p>
<p>　　西部非洲为利比里亚种咖啡的原产地，对于不论是高温或低温、潮湿或干燥等各种环境，皆有很强的适应能力，唯独不耐叶锈病，风味又较阿拉比卡种差，故仅在西非部分国家(利比亚、科特迪瓦等)国内交易买卖，或者栽种来供研究使用。</p>
<p>　　在世界市场流通的咖啡中约有65%是阿拉比卡种</p>
<p>　　根据国际咖啡组织(ICO)的统计，扣除个咖啡生产国国内交易的部分，在世界市场流通的咖啡中约65%为阿拉比卡种，35%为罗布斯塔种。阿拉比卡种的特征是颗粒细长且扁平，罗布斯塔种的咖啡豆较浑圆，由形状即可轻易分辨出。</p>
<p>　　但若再加上阿拉比卡种与罗布斯塔种的杂交种——例如变种哥伦比亚(Variedad Colombia)次种，它属于哥伦比亚咖啡的主要品种，有四分之一罗布斯塔种血统，因而抗叶锈病且产量高——及其突变的次种咖啡豆，分类上会更加复杂。 有的阿拉比卡种咖啡豆相当接近原生种，也有些阿拉比卡种相当类似于罗布斯塔种。即使咖啡名称相同(命名来自产地)，只要栽培品种不同，风味也就不同。</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/151106/1R1595100-4.jpg" alt="img"></p>
<p>当然，这只是豆种大体的原始分类。现在中国的云南咖啡，日本的otokaze也有不错的发展。</p>
<p>从风味上来说，阿拉比卡普遍强于罗布斯塔和利比里亚，所以较多用于精品咖啡。罗布斯塔和利比里亚胜在数量优势，数量优势同时也决定了其拥有价格优势（相对非常便宜）。罗布斯塔和利比里亚一般多用于商业咖啡，比如说星巴克，illy，国内的瑞幸（民族之光），这类作为冲量饮品只要做得好也还是可以喝的。</p>
<p>2 接下里说说咖啡的处理法。</p>
<p><strong>日晒法</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-8c11a418d5e0e0da5a065e1188aed401_1440w.jpg" alt="img"></p>
<p>日晒法是最古老的处理方法，据文献记载，最早在西元11世纪1000多年前的阿拉伯人，就开始使用日晒法处理咖啡果实。</p>
<p>将沉入槽底的红果子和半青半红的快熟果子取出，（更糙的一种方法直接将树上摘下来的咖啡果子不经过水槽清洗直接放在地上晒）铺在晒豆场进行自然干燥。时间视气候而定，大约2-4周就可以使果子内咖啡豆的含水量降到12%，之后用去壳机打掉干硬的果肉和羊皮层，取出咖啡豆。</p>
<p><img src="https://pic2.zhimg.com/80/v2-e46434c7adf8b6d9f07d544bddd04e71_1440w.jpg" alt="img"></p>
<p>特点：日晒豆颜色偏黄，豆体易出现缺角（打壳机造成的）。在干燥过程中会吸收咖啡果肉中的果糖精华，因此果香浓郁，甜度也高，醇厚度亦优于半水洗或水洗豆。但品质不好保证，往往是一年好一年坏，干净度和明亮度逊于半水洗和水洗豆。</p>
<p><strong>水洗法</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-5b24f64c5348e2de0a9eea6ea1ce83ef_1440w.jpg" alt="img"></p>
<p>由于日晒法缺点过多，因此发明了水洗法。水洗法是目前最为广泛使用的处理方式，与日晒法最大的不同是利用发酵去除果胶层。</p>
<p><img src="https://pic4.zhimg.com/80/v2-55a031fce612338225dd9186fe19bd63_1440w.jpg" alt="img"></p>
<p>特点：水洗豆颜色偏绿，整体较为完整，卖相极佳。豆子通常带有明亮的酸味与果香，喝起来比较干净。</p>
<p><strong>蜜处理法</strong></p>
<p>所谓蜜处理，意指带着黏膜进行日晒干燥的生豆制成过程。在咖啡豆去掉外层的果肉之后，会有层黏稠状的胶状物。传统的水洗处理法即用清水把之洗去，但因为有些高海拔产地的水资源限制，所以出现了这种直接晒干的方式。</p>
<p><img src="https://pic3.zhimg.com/80/v2-77beb517d8bf1a34fb6282c4c485c2c2_1440w.jpg" alt="img"></p>
<p>蜜处理法是一种介于日晒法和水洗法中间的处理方式。它让咖啡保留了水洗处理的干净，尽管咖啡的明亮度有所下降，但增加了甜度与焦糖口感。</p>
<p><img src="https://pic2.zhimg.com/80/v2-aa058ca9b396b4fa154d43aa092ff115_1440w.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/80/v2-cacf2266b9f36cba2a2ca14af35fb85f_1440w.jpg" alt="img"></p>
<h2 id="White-Honey-白蜜80-90-果胶被移除。"><a href="#White-Honey-白蜜80-90-果胶被移除。" class="headerlink" title="White Honey 白蜜80%-90% 果胶被移除。"></a><strong>White Honey 白蜜80%-90% 果胶被移除。</strong></h2><h2 id="Yellow-Honey-黄蜜保留50-果胶，无发酵。"><a href="#Yellow-Honey-黄蜜保留50-果胶，无发酵。" class="headerlink" title="Yellow Honey 黄蜜保留50%果胶，无发酵。"></a><strong>Yellow Honey 黄蜜保留50%果胶，无发酵。</strong></h2><h2 id="Red-Honey-红蜜基本上保留全部果胶，无发酵。"><a href="#Red-Honey-红蜜基本上保留全部果胶，无发酵。" class="headerlink" title="Red Honey 红蜜基本上保留全部果胶，无发酵。"></a><strong>Red Honey 红蜜基本上保留全部果胶，无发酵。</strong></h2><h2 id="Black-Honey-黑蜜基本上保留全部果胶，低海拔温度稍高进行干燥，前24小时覆盖轻微发酵，后面干燥过程转移至非洲晾晒床进行干燥。"><a href="#Black-Honey-黑蜜基本上保留全部果胶，低海拔温度稍高进行干燥，前24小时覆盖轻微发酵，后面干燥过程转移至非洲晾晒床进行干燥。" class="headerlink" title="Black Honey 黑蜜基本上保留全部果胶，低海拔温度稍高进行干燥，前24小时覆盖轻微发酵，后面干燥过程转移至非洲晾晒床进行干燥。"></a><strong>Black Honey 黑蜜基本上保留全部果胶，低海拔温度稍高进行干燥，前24小时覆盖轻微发酵，后面干燥过程转移至非洲晾晒床进行干燥。</strong></h2><h2 id="Gold-Honey-金蜜基本上保留全部果胶，高海拔低温干燥，拉长干燥时间。"><a href="#Gold-Honey-金蜜基本上保留全部果胶，高海拔低温干燥，拉长干燥时间。" class="headerlink" title="Gold Honey 金蜜基本上保留全部果胶，高海拔低温干燥，拉长干燥时间。"></a><strong>Gold Honey 金蜜基本上保留全部果胶，高海拔低温干燥，拉长干燥时间。</strong></h2><p><strong>厌氧发酵法</strong></p>
<p>厌氧发酵（Anaerobuic），也称二氧化碳浸渍法。2015年的世界咖啡师大赛上，参赛者Sasa Sestic 便使用了厌氧发酵法的豆子来参赛，自此厌氧发酵法才开始走进了大众视野。</p>
<p><img src="https://pic1.zhimg.com/80/v2-771b880a537187d791dea62bcd0dc2f4_1440w.jpg" alt="img"></p>
<p>实际上这种新兴的咖啡豆发酵法，灵感来源于红酒的酿造工艺。其原理是将咖啡豆放进一个金属的密闭容器内，容器应该是有类似于红酒发酵栓，亦或是单项排气阀的装置。之后往密闭的容器里注入二氧化碳，挤出里面的氧气，在无氧的环境下，减缓咖啡果胶中糖分的分解速度，PH值也以更缓慢的速度下降，延长发酵时间，借此发展出更佳的甜味，以及更丰富的风味。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7f64b6edfa77e4077a25de33577af132_1440w.jpg" alt="img"></p>
<p>相比于传统处理方式对咖啡豆多变的发酵程度难以控制，厌氧发酵法在人为干预下则可以通过控制PH值，甚至是温度和湿度，以确保咖啡豆的品质，而密闭的发酵可以增加圆润风味，容易带有乳酪、奶油和酒的香气，避免不舒服的干涩和醋酸。让芳香物质不易挥发。（乳酸发酵法，厌氧发酵法的一种）</p>
<p><strong>湿刨法</strong></p>
<p>“湿刨法”是印尼咖啡独有的一种处理法。前期从树上采摘下来后，只晾晒一两天，在豆体内含水量还高达30%-50%，豆体还半硬半软的情况下直接去掉种壳再晒，直到含水率达到大概12%——15%，前后约四天。从而大大缩短整个晾晒过程，发酵期与酸味大为降低，醇厚度却因此增加，焦糖与果香会更加明显。</p>
<p><img src="https://pic4.zhimg.com/80/v2-f975fc0009b6de8b92a7434b3b6aaf27_1440w.jpg" alt="img"></p>
<p>过早的去掉种壳，使湿漉漉的咖啡豆暴露在空气中，咖啡豆极易遭到真菌、霉菌的污染从而让咖啡豆产生出诸如腐败、霉臭、碘味等不好的味道。因此印尼的“湿刨法”更像是一把双刃剑，在处理过程中稍有不慎便会毁掉整批豆子。但印尼多雨多湿的气候环境并不允许它像非洲、中南美洲那样采用日晒、水洗法长时间的发在外面晾晒。所以印尼独创的“湿刨法”既是不得已之举，也是其的一个招牌。可谓是“成也萧何败也萧何！”</p>
<p><img src="https://pic3.zhimg.com/80/v2-2e2d50cdbf98a13fecaa1db1af9c64ce_1440w.jpg" alt="img"></p>
<p>特点：生豆表面带有白色斑点，泥土味、烟味和巧克力味、低酸度，醇厚而又显得十分沉闷。</p>
<p>3来说说烘培度</p>
<p>为什么咖啡生豆经过高温烘焙后会呈现出风味呢？其实就是因为在烘焙的过程中产生了化学变化，下面来解释一下有哪些化学变化吧。</p>
<p>　　</p>
<p><strong>【梅拉德反应】</strong></p>
<p>　　</p>
<p>这个反应会在约150℃时发生，此时咖啡豆仍在吸热，并继续在烘焙过程释放热量。热量导致豆子的碳水化合物和氨基酸之间的反应，导致颜色、味道和营养成分的变化。</p>
<p>　　</p>
<p>颜色的改变主要是因为类黑素的产生，这些大量的物质不只是让咖啡豆转为褐色，还会影响咖啡的口感跟醇厚度。</p>
<p>　　</p>
<p>梅纳德反应这个阶段的温度与时间只要有一点小变化，都可能对最终的风味产生很大的影响。</p>
<p>　　</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/210825/18-210R5120J43X.jpg" alt="img"></p>
<p>在梅纳德反应中花费较长时间的咖啡会增加其黏度，较短的梅纳德反应则会生更多的甜度和酸质，因为如果梅纳德反应时间过长，果酸以及会转化成甜味的酸都会被破坏。</p>
<p>　　</p>
<p>前街<a href="https://m.gafei.com/views-135179">咖啡烘焙</a>师实验烘焙咖啡豆时，也会改变梅纳德反应的时间长度和强度，并记录这些变化会带给最终的风味什么样的影响。</p>
<p><strong>【焦糖化反应】</strong></p>
<p>　　</p>
<p>在加热到大约170℃时，热量会让大量复杂的碳水化合物，分解成可以溶解在水中较小的糖分子，这代表最后冲出来的咖啡甜度会增加。</p>
<p>　　</p>
<p>这种反应会一直持续到烘焙过程结束，它也有助于咖啡中的甜香气，如焦糖和杏仁味。</p>
<p>　　</p>
<p>通过梅纳反应和焦糖化反应，大家可以知道咖啡烘焙产生的反应会怎么影响一杯咖啡的风味了吧，之前有听别人说影响一杯咖啡的因素中，其实咖啡生豆占70%烘焙度20%，冲煮占10%。</p>
<p>　　</p>
<p><img src="https://v2.coffeecdn.com/uploads/allimg/210825/18-210R5120Q15b.jpg" alt="img"></p>
<p>咖啡豆要经过烘培的高温环境中才会有如此强烈的香气与丰富的口感滋味！随着<a href="https://m.gafei.com/views-133722">咖啡豆烘培</a>的时间与温度，会让同一种咖啡豆呈现多元不同变化的咖啡风貌！</p>
<p>　　</p>
<p><strong>大致上可分“浅焙”、“中焙”、“深焙”三大类。</strong></p>
<p>　　</p>
<p>但口感之微妙又细分成八种程度：Light Roast——Italian Roast</p>
<p>　　</p>
<p><strong>浅烘焙：</strong>Light Roast（浅度烘焙）、Cinnamon Roast （肉桂烘焙）具有强烈的香气、明显果酸口感。</p>
<p>　　</p>
<p><strong>中烘焙：</strong>Medium Roast（中度烘焙）、High Roast（深度烘焙）、City Roast （城市烘焙）更多的咖啡豆香气、甜味、微果酸，典型维也纳咖啡风味。</p>
<p>　　</p>
<p><strong>深烘焙：</strong>Full City Roast（全城市烘焙）、French Roast（法式烘焙）、Italian Roast （意式烘焙）强烈的焦糖味、浓厚强烈的口感。</p>
<p>总而言之，如果你的豆子的品质足够高，尽量选择浅中烘培，这样将尽可能展现咖啡豆本身的特质。要是豆子就一般般就直接深烘培吧，取个平均数后期辅料加的好也是一杯爽朗的好饮料。</p>
<p>4 咖啡经典冲泡方式</p>
<p><strong>1. The Espresso Coffee Machine</strong></p>
<p><strong>意式浓缩咖啡机</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/40b5cbb089b64f648e4c9436ec7d7bcd_th.jpeg" alt="img"></p>
<p>对咖啡有些许了解的小伙伴们应该都会知道意式咖啡机 —— 这个从1901年就开始非我们提供咖啡因的好丽友。咖啡机的萃取黄金法则：使用15-20g细研磨咖啡粉，在9bar的压力下，用90-91摄氏度的水温，使用25-30秒的时间，萃取25ml-30ml的单份espresso。因为使用不同的咖啡豆的蜜点不同，所以参数也会根据情况而有所调整。使用意式机萃取出的正确的浓缩咖啡味道强烈，醇厚，尖锐，充满风味，但不会全部都是无法忍受的苦。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/88a8fe89d6434fdd8c6240744cba82f4_th.jpeg" alt="img"></p>
<p><strong>2. The Mocha Pot</strong></p>
<p><strong>摩卡壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/88e505c216b74632aad8eb06516a11c8_th.jpeg" alt="img"></p>
<p>不想要花很多钱买意式咖啡机，但是仍想要得到和意式咖啡机一样经过高压萃取的espresso？那你可以试试在炉上操作的摩卡壶！摩卡壶的魔力来自于它的三部蒸馏法：存水的下座加热后转换成蒸汽产生压力，带动水滤过装咖啡粉的粉槽，萃取出咖啡液，存放在上座。使用摩卡壶是需要一点技巧的，关火的时间如果拖太久会产生明显的涩味。如果你是想要用低一点价格买一个实用的咖啡器具的话，摩卡壶将是你的不二佳选；如果你是追求口感和品质的处女座，那还是别将摩卡壶纳入你的购物车啦。使用方法可以参考文章：摩卡壶——一杯老派的复古风Espresso，回到Bette Davis的魂断蓝桥。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/62adc21890a941a4bff6f72f98af0764_th.jpeg" alt="img"></p>
<p><strong>3. The AeroPress</strong></p>
<p><strong>爱乐压</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/9fcaf601110e4ac0a2358c862ba660ec_th.jpeg" alt="img"></p>
<p>相比是一个用于制作咖啡的器具，爱乐压看起来更像是一个科研产品。当你买了一只爱乐压，在用对的水温，对的气压环境下，使用研磨度刚好的咖啡粉，仅仅几分钟内，用爱乐压，不需要费力就能够给你一杯口感顺滑，明亮干净的咖啡。某种程度上来说，我们喜欢这个器具多过于使用更流行的Chemex。爱乐压的神奇之处在于它对于研磨刻度没有任何苛刻的要求，刻度上任何一点小的调整在风味上都会有所改变，所以找到适合自己口味的研磨刻度最重要。在使用上，爱乐压不需要任何技术上的修炼，只是一个按压的工作，简单到连你家的猫也可以自己操作。如果你期待寻找一个简单，快速，易操作的咖啡器具，选爱乐压准没错。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/b2f90f4efb214f81aeac3b306bfc6ca0_th.jpeg" alt="img"></p>
<p><strong>4. The French Press</strong></p>
<p><strong>法压壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/9c965e78aaa345dfa3a97e3cfaa0d7cb_th.jpeg" alt="img"></p>
<p>法压壶很早就在咖啡消耗大国的家庭中被视为吉祥物一样的存在着。他有着皇室贵族的气质，并深受家庭咖啡师的追捧。价格中等且简单易操作，制作出的咖啡味道独特。使用法压壶制作咖啡，咖啡粉应该要磨的很粗，以免滤网被咖啡粉堵住从而造成过萃，而且容易过滤不干净。因此建议使用中深烘至深烘的豆子，这样尾段的甜感会比较容易突出。而且法压壶所需的制作时间比较长，从浸泡到过滤，大概会需要十分钟的时间。法压壶使用起来，也十分灵活多变，你还可以使用它制作冷萃咖啡，冲茶，打冷奶泡（虽然制作的奶泡细腻绵密，但是滤网很容易被损伤）。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/37ce2f0dbef946b299e31cbfe5e30c6d_th.jpeg" alt="img"></p>
<p><strong>5. The SoftBrew</strong></p>
<p><strong>陶瓷咖啡壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/d0694a245419411ebf5eefa2115e556d.jpeg" alt="img"></p>
<p>这是一个相对来说比较新颖的发明，SoftBrew也被称作是“原始高科技”。确切来说，我并不确定它真正含义是什么，但如果让我来描述它的话，我会说“它和法压壶很像，但在操作上更加简单。”它的操作说明十分简单：将你的咖啡粉放进不锈钢滤网里面，倒进热水，然后让它静置4-8分钟，然后就可以品尝啦。就像是用茶壶泡茶那样。SoftBrew对于豆子的粗细研磨度没有要求，这可以根据你个人的口味和豆子来定。因为特殊的滤网上面有着成千上万的小孔，可以将特别细的粉渣也过滤掉，并制造出醇厚的Body，喝起来味道更浓郁。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/f6bd3f00d2514df5a89302ff3468a0de_th.jpeg" alt="img"></p>
<p><strong>6. The Coffee Bag</strong></p>
<p><strong>挂耳咖啡包</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/bae680bcb7604880ac684e64c0341721_th.jpeg" alt="img"></p>
<p>用挂耳包/自制咖啡袋和热水制作咖啡实在是一个十分绝妙的想法，可以把它放到小罐子里，然后带到任何地方；只需加入热水，就可以调出一杯咖啡了。但只有一个问题：它的味道实在是不敢恭维。但是它的魅力在于如果你是喜欢动手的人，可以自己制作随身携带的咖啡挂耳包。因为咖啡粉再研磨出来之后的3-5分钟后风味就会挥发完了，剩下的就是苦味和酸味，在这种情况下如果控制不好浸泡和萃取的时间，做出来的咖啡就只剩下苦味了，甚至有可能是令人感到无法忍受的苦味。如果你不喜欢速溶咖啡，但时常需要咖啡因的补给，那么你可以尝试使用挂耳包/自制咖啡袋。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/007b2278b63a485191dcc578046fd9e1_th.jpeg" alt="img"></p>
<p><strong>7. The Vaccum Pot</strong></p>
<p><strong>虹吸壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/66a324b78e7c4a3a975914d2039ad653_th.jpeg" alt="img"></p>
<p>英文中也叫siphon pot，使用这个器具制作出来的咖啡与之名称一样别具一格。这款器具的冲煮方式不仅只有浸泡冲煮这一个环节，它是与压力冲煮相结合的。用这种方式冲煮咖啡并不简单，使用步骤繁琐且在制作咖啡的过程当中要注意到的细节很多。不仅需要花长时间制作咖啡，清洗虹吸壶也是一个大麻烦。你不会想要每天使用这个器具，除非你没有其他的事情要去做。但是虹吸壶在制作过程当中的观赏性是其他器具所无法比拟的。但如果正确使用虹吸壶，制出的咖啡味道干净明亮，风味突出。研磨度建议使用中粗研磨，和Chemex的差不多就可以。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/ae871e249e4b43dfaf13a9593cb26128_th.jpeg" alt="img"></p>
<p><strong>8. The Electric Percolator</strong></p>
<p><strong>过滤式电咖啡壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/4d66fcbb04f24966b09ad0d311026759_th.jpeg" alt="img"></p>
<p>过滤式电咖啡壶已经不是什么新奇的玩意儿了。如果你去过北半球的某一家看起来平淡无奇的餐厅，那你很有可能已经品尝过使用过滤式电咖啡壶制作的咖啡了。有流言说有人的确喜欢通过这种方式制出的咖啡，但有人认为这完全是屁话。咖啡爱好者认为，这完全是对咖啡的不尊重。重复的加热和长时间的浸泡得到的咖啡就是一杯只有苦味的过萃的咖啡。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/0f5693c2262440c1bc537e2841094ee3_th.jpeg" alt="img"></p>
<p><strong>9. The Chemex</strong></p>
<p><strong>沙漏咖啡壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/b3542e5c5f5d4e4db1334f78530ca13c_th.jpeg" alt="img"></p>
<p>当你第一次看到Chemex的时候，你可能会想要用它插花而不是冲咖啡，但是用这支造型简约的Chemex冲咖啡只有一个原因：这咖啡的口味实在是太棒了！而且独成一派。这支壶最首要的优点就是容量大，用它一次可以提供3-4人份的咖啡。使用Chemex冲咖啡需要一定的技能，它不同于其它把咖啡粉倒入，再加上水就完事儿的咖啡器具。你需要掌握咖啡粉的研磨大小，水温，以及咖啡液的量，所以要得到一杯无涩感，风味明显，回甘很强烈的咖啡要经过不断的练习。当然，这也跟咖啡豆有关。Chemex要比其它滤杯厚30%，所以冲出的咖啡比其他滴滤咖啡器具口感更丰富，层次感分明。一旦你开始使用它，你要做好准备你会爱上它。</p>
<p><strong>10. The Hario V60 Dripper</strong></p>
<p><strong>哈里欧V6滤杯</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/b14911b6a1dc424bbb3edf608a0d9abe_th.jpeg" alt="img"></p>
<p>Hario V60是一个十分简单的滤杯且是制作咖啡很棒的方式——小巧轻便易携带，你可以带去任何地方。和Chemex一起属于第三波咖啡浪潮下，最受追捧和分享的咖啡制作方式。它看起来和其他的滤杯没什么区别，但是它设计上暗藏着很多心机。</p>
<p>Hario V60系列滤杯杯口比较大，加上独特的螺旋形曲线肋骨，使得气流更容易被导出，提高了萃取质量；使用鹅颈壶注水时，底部的大圆过滤孔也会随着注水水流的大小，改变咖啡最后的风味。使用锥形滤杯更能够表现，肋骨设计使得咖啡在萃取的时候能够在短时间内将可溶解性物质萃取出来，使其浓度提高。搭配不同的注水方式和手法，也会得到不同口感和风味的咖啡。一开始的不熟练在冲上几壶之后的练习，就会越操作越顺利。通过对水温，研磨刻度，萃取时间，萃取手法等参数的修改，也会得到不同的风味和口感的咖啡，提高咖啡爱好者们对手冲咖啡的热爱和理解。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/92b9303b730943f4b4f8686f4a211040_th.jpeg" alt="img"></p>
<p><strong>11. The Kalita Wave Dripper</strong></p>
<p><strong>卡里塔蛋糕滤杯</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/c7498512bb4e43f4a413377e16b9fcee_th.jpeg" alt="img"></p>
<p>蛋糕滤杯算得上是Hario V60最大的竞争对手了。蛋糕滤杯有着独特的设计，横向的沟糟，起到了适当调节水流渗入的作用；平坦的杯底，使得咖啡粉会以均等的高度在滤杯中，这意味着蛋糕滤杯中水停留的时间更长；圆柱的杯体，能够使咖啡粉均匀接触到水，并且内部压强基本上一样，减少了萃取不均衡的影响。在注水的过程，浇注的水流不会倾斜流向一个方向，而是均匀的渗入，稳定地萃取，使用这款滤杯会让咖啡味道不产生偏差。</p>
<p>相对锥形滤杯，蛋糕滤杯会更加口感均衡，更醇厚使得入口的咖啡有从一而终的稳定口感，也正因为这样，比较适合咖啡初学者，喜欢均衡口感的朋友使用。因为出错率较低，出品表现稳定，因此这款滤杯越来越受一般家庭的喜爱。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/6f230cb5ab584ef89b805a302dd98ed0_th.jpeg" alt="img"></p>
<p><strong>12. The Vietnamese Dripper</strong></p>
<p><strong>越南滤杯</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/8e6118d541d840e59ba3cc275a6d9b84_th.jpeg" alt="img"></p>
<p>这只越南滤杯就是为冲煮一人份的咖啡而设计的，冲煮时间只需4-5分钟。不同于以上列出的几种滤杯，不需要任何有技术性的花式注水手法，它的使用方法就像这只壶一样简单，只要把水倒进去然后等待就好了。用它制作冰咖啡是最合适不过的，如果你是冰咖啡狂热爱好者，那么就买一只这个滤杯试试看吧？</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/529ba279bb0845f59e3fc03d5675bfe3_th.jpeg" alt="img"></p>
<p><strong>13. The Bee House Dripper</strong></p>
<p><strong>Bee House滤杯</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/ab6f90182d1f4dbf9a9a2acca59890e6_th.jpeg" alt="img"></p>
<p>和Hario V60 还有Melita蛋糕滤杯一样，这也是一款日本制造的陶瓷滤杯，是另一种手冲咖啡使用的滴滤型咖啡器具，一次性能制作出1-2人份的咖啡。广泛受到世界咖啡爱好者的喜爱，众多原因中值得一提的是，这个滤杯比其他的更容易学习和掌握。频繁的练习总归不是坏事儿。这是手冲咖啡入门级的最好的器具。保证你会冲出一杯不错的咖啡，尽管你还是个麻瓜。坚硬光滑的外表，外表凉面的彩釉，不仅好看且耐用。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/67df560ac6c74755bac463e7c8c6f152_th.jpeg" alt="img"></p>
<p><strong>14. The Clever Dripper</strong></p>
<p><strong>聪明杯</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/3a85624269254384ad8fdb93cb789385_th.jpeg" alt="img"></p>
<p>或许你会认为聪明杯只不过是另外一种滤杯器具，并没有什么特别的。但近距离仔细观察你会发现，它是介于滴滤式咖啡器具和浸泡式咖啡器具之间的一种器具。让其与之不同的是它有一个小巧的出水阀，等你觉得咖啡已经冲泡完毕时，将聪明杯放置于你的杯子/分享壶上，出水阀会被打开，然后让咖啡液流出来。使用聪明杯不用担心水流强弱和用不用断水对咖啡粉的影响，不管你是咖啡达人还是新手都能轻松获得一杯优质的咖啡。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/49ce59148c9746de8e40e1b909c1bd02_th.jpeg" alt="img"></p>
<p><strong>15. The Cold Drip Brewing</strong></p>
<p><strong>冰滴咖啡</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/4f02c8992f0c4c2ea617b50ed5ddc7dc_th.jpeg" alt="img"></p>
<p>如果还未听说过冰滴咖啡这个东西，那你一定是位新人。冰滴咖啡壶是目前最受欢迎的泡制咖啡因的发明之一，而且，是制作冰咖啡的专用器具。简言之，这就是一款用融化的冰水，慢速滴落在磨好的咖啡粉上，析出过滤咖啡液。这个过程十分漫长——一般要十小时以上。最后，你所得到的一杯咖啡，是有着丰富的口感，浓郁的醇厚度，咖啡豆原有的风味在嘴里尽情释放，几乎尝不出任何苦味和酸味，回甘强烈。冰滴咖啡适合在夏天饮用，或者你是住在热带地区。研磨度适合调整在沙粒粗度。冰滴咖啡含有高咖啡因，但是它释放的速度比较缓慢，让你可以长时间处在一个集中精力但是十分冷静的状态下。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/9e57037a8a134868909d443e9e958a54_th.jpeg" alt="img"></p>
<p><strong>16. The Nitrous Coffee</strong></p>
<p><strong>氮气咖啡</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/2f3f8ae4077a4ee1b32d6953787139dc_th.jpeg" alt="img"></p>
<p>区别于冰滴咖啡，氮气咖啡属于是咖啡界的超新星。咖啡如其名，就是在冰滴/冷萃咖啡里面充满会改善它味道的氮气，口感更清爽，更甜一些，喝起来像一品脱的爱尔兰啤酒。但是目前如果要想轻易品尝到这种咖啡的话，恐怕还是有些难度的。可以在旅行的时候去某家特色一点的小馆品尝，或者爱动手的朋友们可以自己配备器具，在车库里进行试验，像绝命毒师那样。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/6d86a2fac9e243448fc049c5cbf7838b_th.jpeg" alt="img"></p>
<p><strong>17. The Cowboy Method</strong></p>
<p><strong>牛仔冲煮法</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/cbbbb481066f4874a20f4f19a41ff86e_th.jpeg" alt="img"></p>
<p>这应该是为人所熟知的最古老的咖啡制作方法，但这种方式却很实用。常见应用于营地，而且用这种方式制作咖啡并不需要其他的器具，只用一团明火和一口普普通通的平底锅就可以了。首先锅中加入3/4的纯净水，水在接近烧开的时候加入咖啡粉（大概的比例是6oz的水加入2勺咖啡粉，但依据口味而调整），加入咖啡粉后锅迅速离火，盖盖子闷蒸4-5分钟。打开盖子看一下，咖啡粉全部沉底时，就可以享用你的咖啡啦！可以使用长柄勺将咖啡舀进马克杯中，以替代使用其他过滤的器具。牛仔冲煮法完全不需要任何技能，只要你会煮鸡蛋就可以了！</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/c2f23873f7c944e1af9ec5b9fafae4f6_th.jpeg" alt="img"></p>
<p><strong>18. The Turkish Coffee</strong></p>
<p><strong>土耳其咖啡</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/2933ee40bde648e4a956a1ad1be57fdd_th.jpeg" alt="img"></p>
<p>1299年，奥斯曼帝国统治了土耳其的相当长的时间，而且土耳其咖啡在这过程当中也发挥了推波助澜的作用。当然这只是个玩笑，不过土耳其咖啡其确实在世界上风靡了一段时间。制作土耳其咖啡看起来简单但是操作起来确实需要一点技巧。将冷水加入土耳其壶中，同时加入很细的，像面粉一般，甚至可以比面粉还细的咖啡粉和糖（如果你需要的话）。用勺子搅拌均匀，然后放到火上加热，过程当中尽量少用勺子搅拌，会影响咖啡液产生泡沫。当咖啡液快要沸腾的时候，表面会出现一层厚实绵密的泡沫，这时就可以将壶离火了。苦味尖锐明显，风味十足，味道醇厚浓郁且特别，偏向浓缩。如果喜欢黑咖啡的话，你一定会爱上这款咖啡。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/4cbfccc9c2344cabb1603cf22c072f48_th.jpeg" alt="img"></p>
<p><strong>19. The Balancing Syphon</strong></p>
<p><strong>比利时壶</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20161203/8ae87f8c623b46a7a6f0b3e180458162_th.jpeg" alt="img"></p>
<p>比利时皇家咖啡壶，又名「平衡式塞风壶」（Balancing Syphon）。发明人是英国造船师傅 James Napier。早在19世纪已经是比利时皇室的御用咖啡壶，欧洲社会名流不只要求最好的烹调技术，同时也要精致的手工艺术，比利时的巧匠光耀了这历史传统，并将之详实记录下来，流传至今。比利时皇家咖啡壶其外表只是历史的一半，虹吸管本身亦是相当值得探讨。它结合了数种自然的力量：火，蒸汽，压力，重力，这些使得比利时皇家咖啡壶的操作感觉更具可看性。整个调煮过程有如上演一出舞台剧的咖啡器，因为其工作原理奇特，增加了咖啡感性浪漫的分数。但是做起来十分复杂，且具有危险性。</p>
<p><img src="http://img.mp.itc.cn/upload/20161203/7a1b0ba691654eeaa95b8bdf3891a739_th.jpeg" alt="img"></p>
<p>5 辅料配比</p>
<p>如果你是精品咖啡爱好者，那么看到这里基本上就可以结束了。个人的偏向是添加辅料的咖啡更多程度上偏向于饮料，牛奶，糖，蜂蜜，可可等会极大破坏咖啡本来的味道。</p>
<p><img src="https://pic1.zhimg.com/v2-5e0bd00ec154e9e9a52d7fda00dd3280_1440w.jpg?source=172ae18b" alt="咖啡知识 | 咖啡的基本知识"></p>
<p><img src="https://pic2.zhimg.com/80/v2-41f8566ff6189c6197b12f8e1dc155e5_1440w.jpg" alt="img"></p>
<hr>
<p><img src="https://pic4.zhimg.com/80/v2-450d331a3bb41972a0db0508699c6cf3_1440w.jpg" alt="img"></p>
<p>我们平常喝的咖啡主要分三种：<strong>意式咖啡、美式咖啡、和法式咖啡</strong></p>
<p>最主要的是<strong>意式咖啡</strong>，Espresso，是一个意大利词，是应要求而特别现做的意思，现特指意式浓缩咖啡；Espresso，是用7克左右新鲜研磨的咖啡粉，使用92度左右水温的水在9Bar左右的压力下，通过20<del>30秒的时间萃取得到一杯约20</del>30ml的咖啡饮料，这杯咖啡的表面应该覆盖有一层红棕色的泡沫。在咖啡馆里点Espresso的客人，不是真正的咖啡爱好者就是困极需要提神的人，因为味道真的很苦，有些咖啡馆的Espresso可以选择“Single单份”或者“Double双份”，这个双份的不是两杯的意思，而是用双倍的咖啡粉萃取，会更苦。</p>
<p><strong>美式咖啡</strong>，很多咖啡馆的“当日咖啡”其实就是美式咖啡，说的简单明白点就是Espresso兑白开水，美式咖啡味道淡、颜色浅、味酸微苦。通常咖啡馆会提供牛奶和砂糖。（精品咖啡可以划分于此类）</p>
<p><img src="https://pic3.zhimg.com/80/v2-e34c30fd8dfd4c01a4fbe448c8f40d92_1440w.jpg" alt="img"></p>
<p>接下来就是<strong>拿铁</strong></p>
<p>拿铁是Espresso和奶沫的经典混合，杯底倒入少量的Espresso，倒入牛奶与Espresso充分混合，咖啡师在杯中拉出各种各样经典的图案，拿铁在我们国家很受欢迎，好的拿铁咖啡味和牛奶味都很浓，不好的就是有咖啡味的牛奶了，这其中的手法很关键。拿铁的经典混合是70%的牛奶+20%奶沫+10%咖啡。</p>
<p><img src="https://pic2.zhimg.com/80/v2-89822feb21b136fc2ad7d4d4882908f5_1440w.jpg" alt="img"></p>
<p><strong>卡布奇诺</strong></p>
<p>萧亚轩原来有一首《Cappuccino》红遍大江南北，歌词中“爱情像Cappuccino，浓浓的眷恋泡沫”这一句，让大家都知道了这种咖啡的特点——泡沫多。卡布和拿铁的成分一样，都是咖啡+牛奶+奶沫，区别真的是奶沫比拿铁多，咖啡味更浓郁，奶沫丰富，女生应该喜欢卡布奇诺的多一点卡布奇诺是意式咖啡与牛奶的经典之作，因为咖啡的颜色像卡布奇诺教会修士深褐色外衣上覆的头巾一样，所以咖啡因此得名。</p>
<p><img src="https://pic3.zhimg.com/80/v2-8d34a993533633045f5c36cb7dbbb7f6_1440w.jpg" alt="img"></p>
<p><strong>摩卡</strong></p>
<p>它的的配方成分相对比较复杂，Espresso+牛奶+巧克力酱，顶端不是奶泡，是打发的鲜奶油，再挤上巧克力酱，或者撒上可可粉、肉桂粉，别有一番风味。巧克力和奶油都有甜味，因此摩卡咖啡是苦甜结合的典范。</p>
<p><strong>玛奇朵</strong></p>
<p>又叫焦糖玛奇朵，Caramel Machiatto，；Caramel 是英文里焦糖的意思，而Machiatto在意大利文里是“印记、烙印”的意思。所以，它的名字焦糖玛奇朵就象征着甜蜜的印记。它的成分也是基本的Espresso+牛奶+奶沫，只是在基础的奶沫上面用焦糖淋网格状。</p>
<p><img src="https://pic1.zhimg.com/80/v2-c312176a922df3e15f8f0f11e74cc314_1440w.jpg" alt="img"></p>
<p>这些都是很古老的后期处理了，现在又出现很多花活。什么康宝蓝啊，魅蓝之星，红酒摩卡等，但本质都是品尝一个混合的化学反应，对豆子本身的品质要求并没有这么的高。</p>
<p>作为咖啡爱好者，鄙人的浅见是大家玩到最后都会走精品咖啡这种少而美的路线的。</p>
]]></content>
      <categories>
        <category>coffee</category>
      </categories>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机文件系统</title>
    <url>/2021/04/24/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E2%80%9D/</url>
    <content><![CDATA[<p>文件系统的基本组成：</p>
<p>文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。</p>
<p>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。 <span id="more"></span></p>
<p>Linux 最经典的一句话是：「<strong>一切皆文件</strong>」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</p>
<p>Linux 文件系统会为每个文件分配两个数据结构：<strong>索引节点（*index node*）和目录项（*directory entry*）</strong>，它们主要用来记录文件的元信息和目录层次结构。</p>
<ul>
<li>索引节点，也就是 <em>inode</em>，用来记录文件的元信息，比如 inode 编号、文件大小、访问权限、创建时间、修改时间、<strong>数据在磁盘的位置</strong>等等。索引节点是文件的<strong>唯一</strong>标识，它们之间一一对应，也同样都会被存储在硬盘中，所以<strong>索引节点同样占用磁盘空间</strong>。</li>
<li>目录项，也就是 <em>dentry</em>，用来记录文件的名字、<strong>索引节点指针</strong>以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是，<strong>目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存</strong>。</li>
</ul>
<p>由于索引节点唯一标识一个文件，而目录项记录着文件的名，所以目录项和索引节点的关系是多对一，也就是说，一个文件可以有多个别字。比如，硬链接的实现就是多个目录项中的索引节点指向同一个文件。</p>
<p>注意，目录也是文件，也是用索引节点唯一标识，和普通文件不同的是，普通文件在磁盘里面保存的是文件数据，而目录文件在磁盘里面保存子目录或文件。</p>
<blockquote>
<p>目录项和目录是一个东西吗？</p>
</blockquote>
<p>虽然名字很相近，但是它们不是一个东西，目录是个文件，持久化存储在磁盘，而目录项是内核一个数据结构，缓存在内存。</p>
<p>如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经读过的目录用目录项这个数据结构缓存在内存，下次再次读到相同的目录时，只需从内存读就可以，大大提高了文件系统的效率。</p>
<p>注意，目录项这个数据结构不只是表示目录，也是可以表示文件的。</p>
<blockquote>
<p>那文件数据是如何存储在磁盘的呢？</p>
</blockquote>
<p>磁盘读写的最小单位是<strong>扇区</strong>，扇区的大小只有 <code>512B</code> 大小，很明显，如果每次读写都以这么小为单位，那这读写的效率会非常低。</p>
<p>所以，文件系统把多个扇区组成了一个<strong>逻辑块</strong>，每次读写的最小单位就是逻辑块（数据块），Linux 中的逻辑块大小为 <code>4KB</code>，也就是一次性读写 8 个扇区，这将大大提高了磁盘的读写的效率。</p>
<p>以上就是索引节点、目录项以及文件数据的关系，下面这个图就很好的展示了它们之间的关系：</p>
<p><img src="https://pic2.zhimg.com/v2-9d77e25913894df26b0374ceae25c605_r.jpg" alt="img"></p>
<p>索引节点是存储在硬盘上的数据，那么为了加速文件的访问，通常会把索引节点加载到内存中。</p>
<p>另外，磁盘进行格式化的时候，会被分成三个存储区域，分别是超级块、索引节点区和数据块区。 - <em>超级块</em>，用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等。 - <em>索引节点区</em>，用来存储索引节点； - <em>数据块区</em>，用来存储文件或目录数据；</p>
<p>我们不可能把超级块和索引节点区全部加载到内存，这样内存肯定撑不住，所以只有当需要使用的时候，才将其加载进内存，它们加载进内存的时机是不同的：</p>
<ul>
<li>超级块：当文件系统挂载时进入内存；</li>
<li>索引节点区：当文件被访问时进入内存；</li>
</ul>
<hr>
<h3 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h3><p>文件系统的种类众多，而操作系统希望<strong>对用户提供一个统一的接口</strong>，于是在用户层与文件系统层引入了中间层，这个中间层就称为<strong>虚拟文件系统（*Virtual File System，VFS*）。</strong></p>
<p>VFS 定义了一组所有文件系统都支持的数据结构和标准接口，这样程序员不需要了解文件系统的工作原理，只需要了解 VFS 提供的统一接口即可。</p>
<p>在 Linux 文件系统中，用户空间、系统调用、虚拟机文件系统、缓存、文件系统以及存储之间的关系如下图：</p>
<p><img src="https://pic3.zhimg.com/v2-b92499b17ed11bc279689ecdb6efb4b6_r.jpg" alt="img"></p>
<p>Linux 支持的文件系统也不少，根据存储位置的不同，可以把文件系统分为三类：</p>
<ul>
<li><em>磁盘的文件系统</em>，它是直接把数据存储在磁盘中，比如 Ext 2/3/4、XFS 等都是这类文件系统。</li>
<li><em>内存的文件系统</em>，这类文件系统的数据不是存储在硬盘的，而是占用内存空间，我们经常用到的 <code>/proc</code> 和 <code>/sys</code> 文件系统都属于这一类，读写这类文件，实际上是读写内核中相关的数据数据。</li>
<li><em>网络的文件系统</em>，用来访问其他计算机主机数据的文件系统，比如 NFS、SMB 等等。</li>
</ul>
<p>文件系统首先要先挂载到某个目录才可以正常使用，比如 Linux 系统在启动时，会把文件系统挂载到根目录。</p>
<hr>
<h3 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h3><p>我们从用户角度来看文件的话，就是我们要怎么使用文件？首先，我们得通过系统调用来打开一个文件。</p>
<p><img src="https://pic1.zhimg.com/v2-bb6dc369fbf16afbdb088c6c7c26d9cc_r.jpg" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd = open(name, flag); # 打开文件</span><br><span class="line">...</span><br><span class="line">write(fd,...);         # 写数据</span><br><span class="line">...</span><br><span class="line">close(fd);             # 关闭文件</span><br></pre></td></tr></table></figure>

<p>上面简单的代码是读取一个文件的过程： - 首先用 <code>open</code> 系统调用打开文件，<code>open</code> 的参数中包含文件的路径名和文件名。 - 使用 <code>write</code> 写数据，其中 <code>write</code> 使用 <code>open</code> 所返回的<strong>文件描述符</strong>，并不使用文件名作为参数。 - 使用完文件后，要用 <code>close</code> 系统调用关闭文件，避免资源的泄露。</p>
<p>我们打开了一个文件后，操作系统会跟踪进程打开的所有文件，所谓的跟踪呢，就是操作系统为每个进程维护一个打开文件表，文件表里的每一项代表「<strong>文件描述符</strong>」，所以说文件描述符是打开文件的标识。</p>
<p><img src="https://pic3.zhimg.com/80/v2-4d1f24d7102933f32a560a1cbdfce6da_1440w.jpg" alt="img"></p>
<p>操作系统在打开文件表中维护着打开文件的状态和信息： - 文件指针：系统跟踪上次读写位置作为当前文件位置指针，这种指针对打开文件的某个进程来说是唯一的； - 文件打开计数器：文件关闭时，操作系统必须重用其打开文件表条目，否则表内空间不够用。因为多个进程可能打开同一个文件，所以系统在删除打开文件条目之前，必须等待最后一个进程关闭文件，该计数器跟踪打开和关闭的数量，当该计数为 0 时，系统关闭文件，删除该条目； - 文件磁盘位置：绝大多数文件操作都要求系统修改文件数据，该信息保存在内存中，以免每个操作都从磁盘中读取； - 访问权限：每个进程打开文件都需要有一个访问模式（创建、只读、读写、添加等），该信息保存在进程的打开文件表中，以便操作系统能允许或拒绝之后的 I/O 请求；</p>
<p>在用户视角里，文件就是一个持久化的数据结构，但操作系统并不会关心你想存在磁盘上的任何的数据结构，操作系统的视角是如何把文件数据和磁盘块对应起来。</p>
<p>所以，用户和操作系统对文件的读写操作是有差异的，用户习惯以字节的方式读写文件，而操作系统则是以数据块来读写文件，那屏蔽掉这种差异的工作就是文件系统了。</p>
<p>我们来分别看一下，读文件和写文件的过程：</p>
<ul>
<li>当用户进程从文件读取 1 个字节大小的数据时，文件系统则需要获取字节所在的数据块，再返回数据块对应的用户进程所需的数据部分。</li>
<li>当用户进程把 1 个字节大小的数据写进文件时，文件系统则找到需要写入数据的数据块的位置，然后修改数据块中对应的部分，最后再把数据块写回磁盘。</li>
</ul>
<p>所以说，<strong>文件系统的基本操作单位是数据块</strong>。</p>
<hr>
<h3 id="文件的存储"><a href="#文件的存储" class="headerlink" title="文件的存储"></a>文件的存储</h3><p>文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种：</p>
<ul>
<li>连续空间存放方式</li>
<li>非连续空间存放方式</li>
</ul>
<p>其中，非连续空间存放方式又可以分为「链表方式」和「索引方式」。</p>
<p>不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。</p>
<h3 id="连续空间存放方式"><a href="#连续空间存放方式" class="headerlink" title="连续空间存放方式"></a>连续空间存放方式</h3><p>连续空间存放方式顾名思义，<strong>文件存放在磁盘「连续的」物理空间中</strong>。这种模式下，文件的数据都是紧密相连，<strong>读写效率很高</strong>，因为一次磁盘寻道就可以读出整个文件。</p>
<p>使用连续存放的方式有一个前提，必须先知道一个文件的大小，这样文件系统才会根据文件的大小在磁盘上找到一块连续的空间分配给文件。</p>
<p>所以，<strong>文件头里需要指定「起始块的位置」和「长度」</strong>，有了这两个信息就可以很好的表示文件存放方式是一块连续的磁盘空间。</p>
<p>注意，此处说的文件头，就类似于 Linux 的 inode。</p>
<p><img src="https://pic4.zhimg.com/v2-7fc9cbf9c253d0ee84af8f61c605d50f_r.jpg" alt="img"></p>
<p>连续空间存放的方式虽然读写效率高，<strong>但是有「磁盘空间碎片」和「文件长度不易扩展」的缺陷。</strong></p>
<p>如下图，如果文件 B 被删除，磁盘上就留下一块空缺，这时，如果新来的文件小于其中的一个空缺，我们就可以将其放在相应空缺里。但如果该文件的大小大于所有的空缺，但却小于空缺大小之和，则虽然磁盘上有足够的空缺，但该文件还是不能存放。当然了，我们可以通过将现有文件进行挪动来腾出空间以容纳新的文件，但是这个在磁盘挪动文件是非常耗时，所以这种方式不太现实。</p>
<p><img src="https://pic1.zhimg.com/v2-5e0b69486a4e42554941c93a44d538e0_r.jpg" alt="img"></p>
<p>另外一个缺陷是文件长度扩展不方便，例如上图中的文件 A 要想扩大一下，需要更多的磁盘空间，唯一的办法就只能是挪动的方式，前面也说了，这种方式效率是非常低的。</p>
<p>那么有没有更好的方式来解决上面的问题呢？答案当然有，既然连续空间存放的方式不太行，那么我们就改变存放的方式，使用非连续空间存放方式来解决这些缺陷。</p>
<h3 id="非连续空间存放方式"><a href="#非连续空间存放方式" class="headerlink" title="非连续空间存放方式"></a>非连续空间存放方式</h3><p>非连续空间存放方式分为「链表方式」和「索引方式」。</p>
<blockquote>
<p>我们先来看看链表的方式。</p>
</blockquote>
<p>链表的方式存放是<strong>离散的，不用连续的</strong>，于是就可以<strong>消除磁盘碎片</strong>，可大大提高磁盘空间的利用率，同时<strong>文件的长度可以动态扩展</strong>。根据实现的方式的不同，链表可分为「<strong>隐式链表</strong>」和「<strong>显式链接</strong>」两种形式。</p>
<p>文件要以「<strong>隐式链表</strong>」的方式存放的话，<strong>实现的方式是文件头要包含「第一块」和「最后一块」的位置，并且每个数据块里面留出一个指针空间，用来存放下一个数据块的位置</strong>，这样一个数据块连着一个数据块，从链头开是就可以顺着指针找到所有的数据块，所以存放的方式可以是不连续的。</p>
<p><img src="https://pic2.zhimg.com/v2-b3d581a3d561f3386a497d5622180c81_r.jpg" alt="img"></p>
<p>隐式链表的存放方式的<strong>缺点在于无法直接访问数据块，只能通过指针顺序访问文件，以及数据块指针消耗了一定的存储空间</strong>。隐式链接分配的<strong>稳定性较差</strong>，系统在运行过程中由于软件或者硬件错误<strong>导致链表中的指针丢失或损坏，会导致文件数据的丢失。</strong></p>
<p>如果取出每个磁盘块的指针，把它放在内存的一个表中，就可以解决上述隐式链表的两个不足。那么，这种实现方式是「<strong>显式链接</strong>」，它指<strong>把用于链接文件各数据块的指针，显式地存放在内存的一张链接表中</strong>，该表在整个磁盘仅设置一张，<strong>每个表项中存放链接指针，指向下一个数据块号</strong>。</p>
<p>对于显式链接的工作方式，我们举个例子，文件 A 依次使用了磁盘块 4、7、2、10 和 12 ，文件 B 依次使用了磁盘块 6、3、11 和 14 。利用下图中的表，可以从第 4 块开始，顺着链走到最后，找到文件 A 的全部磁盘块。同样，从第 6 块开始，顺着链走到最后，也能够找出文件 B 的全部磁盘块。最后，这两个链都以一个不属于有效磁盘编号的特殊标记（如 -1 ）结束。内存中的这样一个表格称为<strong>文件分配表（*File Allocation Table，FAT*）</strong>。</p>
<p><img src="https://pic3.zhimg.com/v2-848b55299135f1775cb9fa5e6f9f9272_r.jpg" alt="img"></p>
<p>由于查找记录的过程是在内存中进行的，因而不仅显著地<strong>提高了检索速度</strong>，而且<strong>大大减少了访问磁盘的次数</strong>。但也正是整个表都存放在内存中的关系，它的主要的缺点是<strong>不适用于大磁盘</strong>。</p>
<p>比如，对于 200GB 的磁盘和 1KB 大小的块，这张表需要有 2 亿项，每一项对应于这 2 亿个磁盘块中的一个块，每项如果需要 4 个字节，那这张表要占用 800MB 内存，很显然 FAT 方案对于大磁盘而言不太合适。</p>
<blockquote>
<p>接下来，我们来看看索引的方式。</p>
</blockquote>
<p>链表的方式解决了连续分配的磁盘碎片和文件动态扩展的问题，但是不能有效支持直接访问（FAT除外），索引的方式可以解决这个问题。</p>
<p>索引的实现是为每个文件创建一个「<strong>索引数据块</strong>」，里面存放的是<strong>指向文件数据块的指针列表</strong>，说白了就像书的目录一样，要找哪个章节的内容，看目录查就可以。</p>
<p>另外，<strong>文件头需要包含指向「索引数据块」的指针</strong>，这样就可以通过文件头知道索引数据块的位置，再通过索引数据块里的索引信息找到对应的数据块。</p>
<p>创建文件时，索引块的所有指针都设为空。当首次写入第 i 块时，先从空闲空间中取得一个块，再将其地址写到索引块的第 i 个条目。</p>
<p><img src="https://pic3.zhimg.com/v2-1e6d2ef6d8782117779143843798b79e_r.jpg" alt="img"></p>
<p>索引的方式优点在于： - 文件的创建、增大、缩小很方便； - 不会有碎片的问题； - 支持顺序读写和随机读写；</p>
<p>由于索引数据也是存放在磁盘块的，如果文件很小，明明只需一块就可以存放的下，但还是需要额外分配一块来存放索引数据，所以缺陷之一就是存储索引带来的开销。</p>
<p>如果文件很大，大到一个索引数据块放不下索引信息，这时又要如何处理大文件的存放呢？我们可以通过组合的方式，来处理大文件的存。</p>
<p>先来看看链表 + 索引的组合，这种组合称为「<strong>链式索引块</strong>」，它的实现方式是<strong>在索引数据块留出一个存放下一个索引数据块的指针</strong>，于是当一个索引数据块的索引信息用完了，就可以通过指针的方式，找到下一个索引数据块的信息。那这种方式也会出现前面提到的链表方式的问题，万一某个指针损坏了，后面的数据也就会无法读取了。</p>
<p><img src="https://pic3.zhimg.com/v2-ede534663e1c19169eb40cbe01384da2_r.jpg" alt="img"></p>
<p>还有另外一种组合方式是索引 + 索引的方式，这种组合称为「<strong>多级索引块</strong>」，实现方式是<strong>通过一个索引块来存放多个索引数据块</strong>，一层套一层索引，像极了俄罗斯套娃是吧。</p>
<p><img src="https://pic1.zhimg.com/v2-fb7d558d7b1d2d48fa4544adbead57bc_r.jpg" alt="img"></p>
<h3 id="Unix-文件的实现方式"><a href="#Unix-文件的实现方式" class="headerlink" title="Unix 文件的实现方式"></a>Unix 文件的实现方式</h3><p>我们先把前面提到的文件实现方式，做个比较：</p>
<p><img src="https://pic4.zhimg.com/v2-e01c7af752461c0794a10f383dbe465b_r.jpg" alt="img"></p>
<p>那早期 Unix 文件系统是组合了前面的文件存放方式的优点，如下图：</p>
<p><img src="https://pic4.zhimg.com/v2-0c16919bcad17d1391f162e0363229b7_r.jpg" alt="img"></p>
<p>它是根据文件的大小，存放的方式会有所变化：</p>
<ul>
<li>如果存放文件所需的数据块小于 10 块，则采用直接查找的方式；</li>
<li>如果存放文件所需的数据块超过 10 块，则采用一级间接索引方式；</li>
<li>如果前面两种方式都不够存放大文件，则采用二级间接索引方式；</li>
<li>如果二级间接索引也不够存放大文件，这采用三级间接索引方式；</li>
</ul>
<p>那么，文件头（<em>Inode</em>）就需要包含 13 个指针： - 10 个指向数据块的指针； - 第 11 个指向索引块的指针； - 第 12 个指向二级索引块的指针； - 第 13 个指向三级索引块的指针；</p>
<p>所以，这种方式能很灵活地支持小文件和大文件的存放： - 对于小文件使用直接查找的方式可减少索引数据块的开销； - 对于大文件则以多级索引的方式来支持，所以大文件在访问数据块时需要大量查询；</p>
<p>这个方案就用在了 Linux Ext 2/3 文件系统里，虽然解决大文件的存储，但是对于大文件的访问，需要大量的查询，效率比较低。</p>
<p>为了解决这个问题，Ext 4 做了一定的改变，具体怎么解决的，本文就不展开了。</p>
<hr>
<h3 id="空闲空间管理"><a href="#空闲空间管理" class="headerlink" title="空闲空间管理"></a>空闲空间管理</h3><p>前面说到的文件的存储是针对已经被占用的数据块组织和管理，接下来的问题是，如果我要保存一个数据块，我应该放在硬盘上的哪个位置呢？难道需要将所有的块扫描一遍，找个空的地方随便放吗？</p>
<p>那这种方式效率就太低了，所以针对磁盘的空闲空间也是要引入管理的机制，接下来介绍几种常见的方法：</p>
<ul>
<li>空闲表法</li>
<li>空闲链表法</li>
<li>位图法</li>
</ul>
<h3 id="空闲表法"><a href="#空闲表法" class="headerlink" title="空闲表法"></a>空闲表法</h3><p>空闲表法就是为所有空闲空间建立一张表，表内容包括空闲区的第一个块号和该空闲区的块个数，注意，这个方式是连续分配的。如下图：</p>
<p><img src="https://pic3.zhimg.com/v2-1ec1e7e0b313a92e0028691ae97c9766_r.jpg" alt="img"></p>
<p>当请求分配磁盘空间时，系统依次扫描空闲表里的内容，直到找到一个合适的空闲区域为止。当用户撤销一个文件时，系统回收文件空间。这时，也需顺序扫描空闲表，寻找一个空闲表条目并将释放空间的第一个物理块号及它占用的块数填到这个条目中。</p>
<p>这种方法仅当有少量的空闲区时才有较好的效果。因为，如果存储空间中有着大量的小的空闲区，则空闲表变得很大，这样查询效率会很低。另外，这种分配技术适用于建立连续文件。</p>
<h3 id="空闲链表法"><a href="#空闲链表法" class="headerlink" title="空闲链表法"></a>空闲链表法</h3><p>我们也可以使用「链表」的方式来管理空闲空间，每一个空闲块里有一个指针指向下一个空闲块，这样也能很方便的找到空闲块并管理起来。如下图：</p>
<p><img src="https://pic3.zhimg.com/v2-a14c65a4ec2fbb470fba728b818a6d22_r.jpg" alt="img"></p>
<p>当创建文件需要一块或几块时，就从链头上依次取下一块或几块。反之，当回收空间时，把这些空闲块依次接到链头上。</p>
<p>这种技术只要在主存中保存一个指针，令它指向第一个空闲块。其特点是简单，但不能随机访问，工作效率低，因为每当在链上增加或移动空闲块时需要做很多 I/O 操作，同时数据块的指针消耗了一定的存储空间。</p>
<p>空闲表法和空闲链表法都不适合用于大型文件系统，因为这会使空闲表或空闲链表太大。</p>
<h3 id="位图法"><a href="#位图法" class="headerlink" title="位图法"></a>位图法</h3><p>位图是利用二进制的一位来表示磁盘中一个盘块的使用情况，磁盘上所有的盘块都有一个二进制位与之对应。</p>
<p>当值为 0 时，表示对应的盘块空闲，值为 1 时，表示对应的盘块已分配。它形式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1111110011111110001110110111111100111 ...</span><br></pre></td></tr></table></figure>

<p>在 Linux 文件系统就采用了位图的方式来管理空闲空间，不仅用于数据空闲块的管理，还用于 inode 空闲块的管理，因为 inode 也是存储在磁盘的，自然也要有对其管理。</p>
<hr>
<h3 id="文件系统的结构"><a href="#文件系统的结构" class="headerlink" title="文件系统的结构"></a>文件系统的结构</h3><p>前面提到 Linux 是用位图的方式管理空闲空间，用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配。要存储数据时，会通过块的位图找到空闲的块，并分配，但仔细计算一下还是有问题的。</p>
<p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块 4K，每位表示一个数据块，共可以表示 <code>4 * 1024 * 8 = 2^15</code> 个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为 <code>2^15 * 4 * 1024 = 2^27</code> 个 byte，也就是 128M。</p>
<p>也就是说按照上面的结构，如果采用「一个块的位图 + 一系列的块」，外加「一个块的 inode 的位图 + 一系列的 inode 的结构」能表示的最大空间也就 128M，这太少了，现在很多文件都比这个大。</p>
<p>在 Linux 文件系统，把这个结构称为一个<strong>块组</strong>，那么有 N 多的块组，就能够表示 N 大的文件。</p>
<p>下图给出了 Linux Ext2 整个文件系统的结构和块组的内容，文件系统都由大量块组组成，在硬盘上相继排布：</p>
<p><img src="https://pic2.zhimg.com/v2-d9e36f97b24b2a7f760a81d0b095c36d_r.jpg" alt="img"></p>
<p>最前面的第一个块是引导块，在系统启动时用于启用引导，接着后面就是一个一个连续的块组了，块组的内容如下： - <em>超级块</em>，包含的是文件系统的重要信息，比如 inode 总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等。 - <em>块组描述符</em>，包含文件系统中各个块组的状态，比如块组中空闲块和 inode 的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」。 - <em>数据位图和 inode 位图</em>， 用于表示对应的数据块或 inode 是空闲的，还是被使用中。 - <em>inode 列表</em>，包含了块组中所有的 inode，inode 用于保存文件系统中与各个文件和目录相关的所有元数据。 - <em>数据块</em>，包含文件的有用数据。</p>
<p>你可以会发现每个块组里有很多重复的信息，比如<strong>超级块和块组描述符表，这两个都是全局信息，而且非常的重要</strong>，这么做是有两个原因： - 如果系统崩溃破坏了超级块或块组描述符，有关文件系统结构和内容的所有信息都会丢失。如果有冗余的副本，该信息是可能恢复的。 - 通过使文件和管理数据尽可能接近，减少了磁头寻道和旋转，这可以提高文件系统的性能。</p>
<p>不过，Ext2 的后续版本采用了稀疏技术。该做法是，超级块和块组描述符表不再存储到文件系统的每个块组中，而是只写入到块组 0、块组 1 和其他 ID 可以表示为 3、 5、7 的幂的块组中。</p>
<hr>
<h3 id="目录的存储"><a href="#目录的存储" class="headerlink" title="目录的存储"></a>目录的存储</h3><p>在前面，我们知道了一个普通文件是如何存储的，但还有一个特殊的文件，经常用到的目录，它是如何保存的呢？</p>
<p>基于 Linux 一切皆文件的设计思想，目录其实也是个文件，你甚至可以通过 <code>vim</code> 打开它，它也有 inode，inode 里面也是指向一些块。</p>
<p>和普通文件不同的是，<strong>普通文件的块里面保存的是文件数据，而目录文件的块里面保存的是目录里面一项一项的文件信息。</strong></p>
<p>在目录文件的块中，最简单的保存格式就是<strong>列表</strong>，就是一项一项地将目录下的文件信息（如文件名、文件 inode、文件类型等）列在表里。</p>
<p>列表中每一项就代表该目录下的文件的文件名和对应的 inode，通过这个 inode，就可以找到真正的文件。</p>
<p><img src="https://pic1.zhimg.com/v2-89f1e2f2d2a2cb232920d2df16a5f3f4_r.jpg" alt="img"></p>
<p>通常，第一项是「<code>.</code>」，表示当前目录，第二项是「<code>..</code>」，表示上一级目录，接下来就是一项一项的文件名和 inode。</p>
<p>如果一个目录有超级多的文件，我们要想在这个目录下找文件，按照列表一项一项的找，效率就不高了。</p>
<p>于是，保存目录的格式改成<strong>哈希表</strong>，对文件名进行哈希计算，把哈希值保存起来，如果我们要查找一个目录下面的文件名，可以通过名称取哈希。如果哈希能够匹配上，就说明这个文件的信息在相应的块里面。</p>
<p>Linux 系统的 ext 文件系统就是采用了哈希表，来保存目录的内容，这种方法的优点是查找非常迅速，插入和删除也较简单，不过需要一些预备措施来避免哈希冲突。</p>
<p>目录查询是通过在磁盘上反复搜索完成，需要不断地进行 I/O 操作，开销较大。所以，为了减少 I/O 操作，把当前使用的文件目录缓存在内存，以后要使用该文件时只要在内存中操作，从而降低了磁盘操作次数，提高了文件系统的访问速度。</p>
<hr>
<h3 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h3><p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过<strong>硬链接（*Hard Link*）</strong> 和<strong>软链接（*Symbolic Link*）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p>
<p>硬链接是<strong>多个目录项中的「索引节点」指向一个文件</strong>，也就是指向同一个 inode，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以<strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个 inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p>
<p><img src="https://pic4.zhimg.com/v2-7cf8cec396a66dca2dd1fcd6dadab537_r.jpg" alt="img"></p>
<p>软链接相当于重新创建一个文件，这个文件有<strong>独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的</strong>，甚至<strong>目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p>
<p><img src="https://pic3.zhimg.com/v2-5606413e1b5d2c727399711d347617a2_r.jpg" alt="img"></p>
<hr>
<h3 id="文件-I-O"><a href="#文件-I-O" class="headerlink" title="文件 I/O"></a>文件 I/O</h3><p>文件的读写方式各有千秋，对于文件的 I/O 分类也非常多，常见的有</p>
<ul>
<li>缓冲与非缓冲 I/O</li>
<li>直接与非直接 I/O</li>
<li>阻塞与非阻塞 I/O VS 同步与异步 I/O</li>
</ul>
<p>接下来，分别对这些分类讨论讨论。</p>
<h3 id="缓冲与非缓冲-I-O"><a href="#缓冲与非缓冲-I-O" class="headerlink" title="缓冲与非缓冲 I/O"></a>缓冲与非缓冲 I/O</h3><p>文件操作的标准库是可以实现数据的缓存，那么<strong>根据「是否利用标准库缓冲」，可以把文件 I/O 分为缓冲 I/O 和非缓冲 I/O</strong>： - 缓冲 I/O，利用的是标准库的缓存实现文件的加速访问，而标准库再通过系统调用访问文件。 - 非缓冲 I/O，直接通过系统调用访问文件，不经过标准库缓存。</p>
<p>这里所说的「缓冲」特指标准库内部实现的缓冲。</p>
<p>比方说，很多程序遇到换行时才真正输出，而换行前的内容，其实就是被标准库暂时缓存了起来，这样做的目的是，减少系统调用的次数，毕竟系统调用是有 CPU 上下文切换的开销的。</p>
<h3 id="直接与非直接-I-O"><a href="#直接与非直接-I-O" class="headerlink" title="直接与非直接 I/O"></a>直接与非直接 I/O</h3><p>我们都知道磁盘 I/O 是非常慢的，所以 Linux 内核为了减少磁盘 I/O 次数，在系统调用后，会把用户数据拷贝到内核中缓存起来，这个内核缓存空间也就是「页缓存」，只有当缓存满足某些条件的时候，才发起磁盘 I/O 的请求。</p>
<p>那么，<strong>根据是「否利用操作系统的缓存」，可以把文件 I/O 分为直接 I/O 与非直接 I/O</strong>：</p>
<ul>
<li>直接 I/O，不会发生内核缓存和用户程序之间数据复制，而是直接经过文件系统访问磁盘。</li>
<li>非直接 I/O，读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘。</li>
</ul>
<p>如果你在使用文件操作类的系统调用函数时，指定了 <code>O_DIRECT</code> 标志，则表示使用直接 I/O。如果没有设置过，默认使用的是非直接 I/O。</p>
<blockquote>
<p>如果用了非直接 I/O 进行写数据操作，内核什么情况下才会把缓存数据写入到磁盘？</p>
</blockquote>
<p>以下几种场景会触发内核缓存的数据写入磁盘： - 在调用 <code>write</code> 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上； - 用户主动调用 <code>sync</code>，内核缓存会刷到磁盘上； - 当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上； - 内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；</p>
<h3 id="阻塞与非阻塞-I-O-VS-同步与异步-I-O"><a href="#阻塞与非阻塞-I-O-VS-同步与异步-I-O" class="headerlink" title="阻塞与非阻塞 I/O VS 同步与异步 I/O"></a>阻塞与非阻塞 I/O VS 同步与异步 I/O</h3><p>为什么把阻塞 / 非阻塞与同步与异步放一起说的呢？因为它们确实非常相似，也非常容易混淆，不过它们之间的关系还是有点微妙的。</p>
<p>先来看看<strong>阻塞 I/O</strong>，当用户程序执行 <code>read</code> ，线程会被阻塞，一直等到内核数据准备好，并把数据从内核缓冲区拷贝到应用程序的缓冲区中，当拷贝过程完成，<code>read</code> 才会返回。</p>
<p>注意，<strong>阻塞等待的是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程</strong>。过程如下图：</p>
<p><img src="https://pic2.zhimg.com/v2-7f73fdcaca316aa0f12d77b6873785e5_r.jpg" alt="img"></p>
<p>知道了阻塞 I/O ，来看看<strong>非阻塞 I/O</strong>，非阻塞的 read 请求在数据未准备好的情况下立即返回，可以继续往下执行，此时应用程序不断轮询内核，直到数据准备好，内核将数据拷贝到应用程序缓冲区，<code>read</code> 调用才可以获取到结果。过程如下图：</p>
<p><img src="https://pic2.zhimg.com/v2-51e052e2beecef41da3aed3ebc2b80bd_r.jpg" alt="img"></p>
<p>注意，<strong>这里最后一次 read 调用，获取数据的过程，是一个同步的过程，是需要等待的过程。这里的同步指的是内核态的数据拷贝到用户程序的缓存区这个过程。</strong></p>
<p>举个例子，访问管道或 socket 时，如果设置了 <code>O_NONBLOCK</code> 标志，那么就表示使用的是非阻塞 I/O 的方式访问，而不做任何设置的话，默认是阻塞 I/O。</p>
<p>应用程序每次轮询内核的 I/O 是否准备好，感觉有点傻乎乎，因为轮询的过程中，应用程序啥也做不了，只是在循环。</p>
<p>为了解决这种傻乎乎轮询方式，于是 <strong>I/O 多路复用</strong>技术就出来了，如 select、poll，它是通过 I/O 事件分发，当内核数据准备好时，再以事件通知应用程序进行操作。</p>
<p>这个做法大大改善了应用进程对 CPU 的利用率，在没有被通知的情况下，应用进程可以使用 CPU 做其他的事情。</p>
<p>下图是使用 select I/O 多路复用过程。注意，<code>read</code> 获取数据的过程（数据从内核态拷贝到用户态的过程），也是一个<strong>同步的过程</strong>，需要等待：</p>
<p><img src="https://pic4.zhimg.com/v2-02cfbd8572026087fc9b8e946b4d98bf_r.jpg" alt="img"></p>
<p>实际上，无论是阻塞 I/O、非阻塞 I/O，还是基于非阻塞 I/O 的多路复用<strong>都是同步调用。因为它们在 read 调用时，内核将数据从内核空间拷贝到应用程序空间，过程都是需要等待的，也就是说这个过程是同步的，如果内核实现的拷贝效率不高，read 调用就会在这个同步过程中等待比较长的时间。</strong></p>
<p>而真正的<strong>异步 I/O</strong> 是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程都不用等待。</p>
<p>当我们发起 <code>aio_read</code> 之后，就立即返回，内核自动将数据从内核空间拷贝到应用程序空间，这个拷贝过程同样是异步的，内核自动完成的，和前面的同步操作不一样，应用程序并不需要主动发起拷贝动作。过程如下图：</p>
<p><img src="https://pic4.zhimg.com/v2-b01988dd44a5edbe596a280d1c266033_r.jpg" alt="img"></p>
<p>下面这张图，总结了以上几种 I/O 模型：</p>
<p><img src="https://pic1.zhimg.com/v2-1e7c3779cdf820da751a4fb1c84a602c_r.jpg" alt="img"></p>
<p>在前面我们知道了，I/O 是分为两个过程的： 1. 数据准备的过程 2. 数据从内核空间拷贝到用户进程缓冲区的过程</p>
<p>阻塞 I/O 会阻塞在「过程 1 」和「过程 2」，而非阻塞 I/O 和基于非阻塞 I/O 的多路复用只会阻塞在「过程 2」，所以这三个都可以认为是同步 I/O。</p>
<p>异步 I/O 则不同，「过程 1 」和「过程 2 」都不会阻塞。</p>
<blockquote>
<p>用故事去理解这几种 I/O 模型</p>
</blockquote>
<p>举个你去饭堂吃饭的例子，你好比用户程序，饭堂好比操作系统。</p>
<p>阻塞 I/O 好比，你去饭堂吃饭，但是饭堂的菜还没做好，然后你就一直在那里等啊等，等了好长一段时间终于等到饭堂阿姨把菜端了出来（数据准备的过程），但是你还得继续等阿姨把菜（内核空间）打到你的饭盒里（用户空间），经历完这两个过程，你才可以离开。</p>
<p>非阻塞 I/O 好比，你去了饭堂，问阿姨菜做好了没有，阿姨告诉你没，你就离开了，过几十分钟，你又来饭堂问阿姨，阿姨说做好了，于是阿姨帮你把菜打到你的饭盒里，这个过程你是得等待的。</p>
<p>基于非阻塞的 I/O 多路复用好比，你去饭堂吃饭，发现有一排窗口，饭堂阿姨告诉你这些窗口都还没做好菜，等做好了再通知你，于是等啊等（<code>select</code> 调用中），过了一会阿姨通知你菜做好了，但是不知道哪个窗口的菜做好了，你自己看吧。于是你只能一个一个窗口去确认，后面发现 5 号窗口菜做好了，于是你让 5 号窗口的阿姨帮你打菜到饭盒里，这个打菜的过程你是要等待的，虽然时间不长。打完菜后，你自然就可以离开了。</p>
<p>异步 I/O 好比，你让饭堂阿姨将菜做好并把菜打到饭盒里后，把饭盒送到你面前，整个过程你都不需要任何等待。</p>
<p>最后送上这张图：<img src="https://pic1.zhimg.com/v2-9a85e905f1d5d649bbd6b5524d8b2954_r.jpg" alt="img"></p>
<hr>
]]></content>
      <categories>
        <category>计算机常识</category>
      </categories>
  </entry>
  <entry>
    <title>咖啡设备新体验-星粒咖啡杯</title>
    <url>/2022/02/05/port%E5%92%96%E5%95%A1%E8%AE%BE%E5%A4%87%E6%96%B0%E4%BD%93%E9%AA%8C-%E6%98%9F%E7%B2%92%E5%92%96%E5%95%A1%E6%9D%AF/</url>
    <content><![CDATA[<p>我觉得有二不需要换三，三零件多的确使用麻烦一些。优点是可以直接打到任意咖啡杯里。出品我没感觉到差异。</p>
<p>———————————————————</p>
<p>最近被组里种草了星粒三 和玲珑手磨 </p>
<p>因为我已经有栗子c 和星粒二，用的还不错，但是看到群里讨论压粉，隔热垫，泄压 感觉特别专业（不是）所以我决定升级一下设备。然后把旧设备分别送给我两个闺蜜<span id="more"></span></p>
<p><img src="https://img9.doubanio.com/view/group_topic/l/public/p468115884.webp" alt="img"></p>
<p>这些是我目前全套设备 还有一个折纸滤没有入镜 配staresso3我买了压粉的 整粉的 防漏的 （感谢搞清楚53mm的友邻！）</p>
<p><img src="https://img2.doubanio.com/view/group_topic/l/public/p468115902.webp" alt="img"></p>
<p><img src="https://img1.doubanio.com/view/group_topic/l/public/p468115879.webp" alt="img"></p>
<p>这些是用staresso3做到咖啡</p>
<p><img src="https://img2.doubanio.com/view/group_topic/l/public/p468115892.webp" alt="img"></p>
<p><img src="https://img9.doubanio.com/view/group_topic/l/public/p468115904.webp" alt="img"></p>
<p>这个是staresso2和用它自带的杯子做的冰博克咖啡！冷热交融非常棒！！（有个感受是这种咖啡不能量太多，要不一口闷没办法同时喝到冰牛奶和热咖啡）（我星三做出来的，如果直接喝会觉得只能喝到苦苦烫烫的咖啡）</p>
<p>对比星粒三和星粒二，我的感觉是</p>
<p>首先星粒三我感觉似乎好压一点，可以用大家探索出来的15压-30s-15压的方式。</p>
<p>第二个就是星粒三好清洗一点，但是星粒二零件少，晾干不需要占据太多空间。</p>
<p>另外就是剂量问题，星粒二粉9g 做出一个shot的咖啡，比较适合一个人喝，要做两杯跟朋友分享的时候就比较累。星粒三粉18g 做出来两个shot，比较适合两个人分享，一个人喝可能会剂量超标，容易心慌。我就是很容易心慌的人，看到楼下友邻的建议，放9g/10g一人份的咖啡粉 压出来就是一人份了，压15下，后面的咖啡液可以不要。</p>
<p><a href="https://www.douban.com/group/topic/220082874/?dt_dapp=1">https://www.douban.com/group/topic/220082874/?dt_dapp=1</a> 星二的制作技巧</p>
<p>说实话我现在没感觉到咖啡水准的差异 觉得两者都是不错的 差别主要还是粉量 然后星三零件要多一点 </p>
<p>后面再慢慢体会吧！ </p>
]]></content>
      <categories>
        <category>coffee</category>
      </categories>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>怪兽MONSTER-红豆沙拿铁</title>
    <url>/2022/02/07/%E6%80%AA%E5%85%BDMONSTER-%E7%BA%A2%E8%B1%86%E6%B2%99%E6%8B%BF/</url>
    <content><![CDATA[<p>回到舟山，来到monter咖啡，见一个快光头的老友–犯罪嫌疑人张某。例行公事般得点了杯红豆沙拿铁，这回的口味和以前略微有点不同， 没有慢慢细啜饮，大口大口一下子就喝得差不多了，这样反而多了点奶油的口感，显得会更加润滑浓郁可口。</p>
<p>回味也确实浓郁了非常多，有种非常明显的红豆膏的味道，会想起小时候经常吃的绿色心情，而且结合个人体验来看这款的咖啡因浓度非常低，某种意义上可能更适合叫做奶茶。</p>
<p>看上了老板家自己卖的几款豆子，下手吧，等成为了熟人了再去和老板进一步沟通吧。随便写几句，就这样吧，下次再来就试试重新上架的冷萃。</p>
]]></content>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>小谈v60手冲</title>
    <url>/2022/02/16/%E5%B0%8F%E8%B0%88v60%E6%89%8B%E5%86%B2/</url>
    <content><![CDATA[<p>本来想写的，结果今天下午用的时候炸锅了，等我心情好了再补上吧，我现在想说的是，什么技巧。很多根本就是强行扭捏作态，扯淡罢了。</p>
]]></content>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>咖啡风云人物--霍夫曼</title>
    <url>/2022/02/16/%E5%92%96%E5%95%A1%E9%A3%8E%E4%BA%91%E4%BA%BA%E7%89%A9-%E9%9C%8D%E5%A4%AB%E6%9B%BC/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>James Hoffmann：咖啡新视界</p>
<p><img src="http://www.coffeeteaimagazine.com/wp-content/uploads/2020/05/20200303115644.jpg" alt="img"></p>
<p>Photo: Atomic Coffee Roaster <span id="more"></span></p>
<p><em>*<em>*</em>*咖啡届的网红担当****</em>*</p>
<p>对于绝大部分人眼中，职场中最为重要的莫过于职位的升迁。在这点上，James Hoffmann无疑是一个另类。这名20 0 7年世界咖啡师大赛冠军表示：“我现在没有所谓的‘职位’，这点让我无比开心。”自从摘得冠军头衔后， James一心多用，投身于数个项目，包括他和朋友在伦敦合作创办的Square Mile Roasters。这家公司也在日后赢得了不少业内奖项。他更是在2014年出版了《世界咖啡地图》一书，内容涵盖了超过35个咖啡原产国/区，并被译成多国语言，实为业内首创。目前，该书第二修订版已经上架销售。James的个人YouTube账号发布超过150支视频，订阅人数超过29.7万人。毫不夸张地说，只要是和咖啡相关的博览会和活动中，你就一定能看到他的身影。而他的粉丝们经常会将他团团围住，争先恐后地向他讨教商业上的管理运营以及行业的未来趋势。</p>
<p>虽然已经在咖啡行业中跌爬滚打了逾十五年，James这场咖啡之旅的起点却不像是大部分人所想象的那样。“我和咖啡 结缘完全是出于机缘巧合。刚开始，我只是因为工作的关系才接触到了咖啡，在那之前，我甚至都不怎么喝咖啡。”他 坦言道：“但我却渐渐对咖啡产生了浓厚的兴趣，最后一发 不可收拾地爱上了它。正是由于咖啡行业的存在，其他的一切工作选择对我而言都只是将就。”有时候，下意识的选择 也许才是真正的选择。</p>
<p><img src="http://www.coffeeteaimagazine.com/wp-content/uploads/2020/05/20200303115658.jpg" alt="img"></p>
<p><em><strong>*放眼“可持续发展”*</strong></em></p>
<p>正如全球各行各业一样，可持续发展也成为咖啡行业的聚焦之一。从种子到杯子，小小的一杯咖啡中浓缩了产业链上各个环节上努力的结果。为达成这个目标，咖啡人必须仔细钻研每一个环节，探讨一切改进的可能。而有着长期和众多咖啡品牌、公司合作的经历，无论是咨询师还是顾问，James 的“有心又有能力”使其成为这场变革中颇具影响力的人物。</p>
<p>新近的一个项目便是他和Victoria Arduino公司进行了深度合作，共同开发了Eagle One咖啡机。这也是他深入咖啡机的核心设计的一个项目。他解释道：“一开始，我的任务只是提供  大致的意见和方向。因为我深知使用咖啡机人群的需求与面临的挑战，希望我的建议能够更好地满足其工作需求。”</p>
<p>Eagle One可谓是为新一代的咖啡馆应运而生的，以其精妙设计、优异性能以及可持续性而闻名。“试想一下，制作同等量咖啡，但可以节约三分之一的能源，听上去是不是非常振奋人心？”从James 的话中不难发现，E agl e One咖啡机的核心设计理念就是：设计更精简，功能更强大。Eagle One几乎完美实现了这一核心理念。比如说， 小体积的外观设计极大地满足了小型咖啡馆的需求。同时， 在确保产量的前提下，其能耗大大降低。这对于咖啡馆主以及咖啡师来说，无疑是大好消息。</p>
<p>James分享道：“在我看来，产品设计需要植根于功能，简约主义且具美观性。”值得一提的是，自去年以来，许多咖  啡机生产商都开始尝试在产品功能以及外观设计上提供更多的个性化选项。</p>
<p><img src="http://www.coffeeteaimagazine.com/wp-content/uploads/2020/05/SquareMile-Packaging-One-Darnley-Road_05.jpg" alt="img"></p>
<p><em><strong>*咖啡品鉴，由浅到深*</strong></em></p>
<p>James开设YouTube的初衷源于分享，分享自己对于咖啡 的理解和认识。而这早已成为了他日常生活的重要组成部分。“我的目标是，让本就对咖啡略知一二的观众，在观看 我的节目后能够由浅入深，逐步进入咖啡的奇妙世界。”现 如今，世界各地都在经历一场“咖啡热潮”，人们都纷纷开始对咖啡行业及其文化产生了浓厚的兴趣。James的每一期视频也许在形式和主题上略有不同，但其内容主旨却始终围绕“咖啡”展开。</p>
<p>针对各类观众，James也推出了不同的视频主题。比如“如何做”系列就是为“新手”量身打造的节目，可以让观众在最短时间内熟悉制作咖啡的各种工具、咖啡的不同种类，从而逐渐化身为家庭中的“咖啡大师”。不只是新手，即便是专业的咖啡师看了他的视频之后，也会自觉大有长进。“测评”系列是另一大热门，其对象涵盖咖啡机、磨豆机、咖啡饮料等。无论是咖啡师还是爱好者，均可从中获取建议，买到心仪的产品。James告诉我们：“YouTube称得上是全世界最大的社交网络了。许多人早已养成了在YouTube上刷视 频的习惯，而这正是我们吸引流量的大好时机。”他口中的“ 吸引（力）”则是咖啡行业可持续发展的关键要素： “（为了实现咖啡的可持续发展，）我们需要更多的顾客，而YouTube就是我们‘招募’新人的最佳地点，”他解释道。</p>
<p><img src="http://www.coffeeteaimagazine.com/wp-content/uploads/2020/05/20200303120126.png" alt="img"></p>
<p>《世界咖啡地图》</p>
<p><em><strong>*打破定式思维*</strong></em></p>
<p>一直以来，咖啡界都缺少一本全面、可靠、具有权威性的科普图书。为了填补这个空缺，James毅然决然，着手编写《世界咖啡地图》。他当时的想法很简单，就是“缩短人和咖啡之间的距离。”他在2014年书出版时接受的一次采访中分享道：“我只是希望大家能够更好地享受咖啡。无论是在冲煮时，或是购买咖啡豆时，甚至是零碎的几条咖啡小知识都能极大地提升咖啡在生活中带给我们的愉悦之感。”日前，该书的修订版也已正式发售，不仅有新章节，也更新了每个咖啡原产国的相关数据。</p>
<p>咖啡市场在火速发展的同时，竞争也愈发激烈。当被问及他最想改变咖啡文化中的哪一点时，James这么回答：“只要一提到发展（咖啡行业），许多人的第一反应是和其他店家争抢客人，而不是试图去吸引新的消费者，这点我难以认同。”尽管目前咖啡市场蓬勃发展，但这样的定式思维是注 定走不远的。想要实现咖啡行业的可持续发展，整个咖啡圈都必须团结一致，包括咖啡从业人员和消费者。</p>
<p><strong>设计的下一个关键词</strong></p>
<p>一直以来，市场的走向源于需求。为了更好地满足消费者的需求，各厂商不断完善设计， 推陈出新。从设计角度出发，James相信，咖啡器具的下一个关键词将会是材质：  “各公司都会逐步采用更加环保的制造材料，或降低其生产时造成的污染，或增加其使用后的回收利用价值。目前，环保问题在许多国家都在被反复提及，所以，我认为在接下来的数年里，‘环保材料’会是驱使咖啡行业前进的主动力。”</p>
<p>今年，James首次把自己的业务范围拓展到咖啡之外。不过别担心，他在采访中已经透露了：“今年我的YouTube频道会有‘大动作’。”所以，赶紧去订阅吧！</p>
<p><img src="http://www.coffeeteaimagazine.com/wp-content/uploads/2020/05/Is-The-coffee-World-Too-Gear-Obssessed-Gear-Patrol-Lead-Full.jpg" alt="img"></p>
<p><em><strong>*Q&amp;A*</strong></em></p>
<p><em><strong>*平时空闲时喜欢做什么？*</strong></em></p>
<p>说句心里话，我都记不起自己上次闲着的时候了。日常零星时间，我会用来看书或者刷YouTube视频。</p>
<p><em><strong>*你最喜欢哪一款滤壶/咖啡机？*</strong></em></p>
<p>我每天清晨的第一杯咖啡都是用Breville/Sage咖啡壶冲煮。</p>
<p><em><strong>*最喜欢哪个咖啡原产国？*</strong></em></p>
<p>我其实有点选择困难症。如果非要选的话，可能还是哥伦比亚吧，那里的咖啡品种繁多，你总能找到自己喜欢的那款。我个人的最爱是来自惠兰或娜玲珑产区的咖啡豆，钟爱其果香四溢，回味甘甜。</p>
<p><em>James Hoffmann</em></p>
<p><em>英 国 伦 敦 Square Mile Roasters的联合创始人兼执行总监。2003年入行，从咖啡师、咖啡培训师到演讲者、咨询师。他曾夺得2007年世界咖啡师大赛冠军，并在2014年出版了《世界咖啡地图》一书。</em></p>
]]></content>
      <categories>
        <category>coffee</category>
      </categories>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>“手冲咖啡历史”</title>
    <url>/2022/02/16/%E2%80%9C%E6%89%8B%E5%86%B2%E5%92%96%E5%95%A1%E5%8E%86%E5%8F%B2%E2%80%9D/</url>
    <content><![CDATA[<p>上世纪二十年代，以雀巢、麦斯威尔等品牌为代表的速溶咖啡浪潮出现，二战后意式蒸汽萃取浓缩咖啡浪潮兴起，发展到今天，咖啡已经进入了崭新的时代——精品咖啡时代，即第三次咖啡浪潮。 <span id="more"></span></p>
<p><img src="https://pic2.zhimg.com/80/v2-8a1192a11112791b6f97a41930319cb1_720w.jpg" alt="img"></p>
<p>▲精品咖啡浪潮代表Blue Bottle Coffee</p>
<p>所谓精品咖啡，最早是指在特定自然环境下培育出的带有地方特色的咖啡豆，后来这一概念逐渐丰富，除了强调咖啡豆本身的品质外，更对生豆运输、烘焙、萃取的流程，以及最后的饮用场景给出了要求。简单来说，<strong>精品咖啡就是「好生豆、好烘焙、好萃取」三位一体的高品质咖啡，真正让咖啡变为可以细细品尝的艺术</strong>。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b86624246827c3426ca426ab8c682591_720w.jpg" alt="img"></p>
<p><strong>一杯精品咖啡的组成，除了咖啡豆外，最重要的就是萃取方式——手冲</strong>，不加入其他任何东西，仅通过热水提取咖啡豆中的美好物质，这种简单、直接的方式不仅可以完美地保留咖啡香，而且仪式般的冲泡过程更是让人着迷。</p>
<p><img src="https://pic3.zhimg.com/80/v2-5e48c1e3cc86395444e84f28911b13ba_720w.jpg" alt="img"></p>
<p><em>“I believe humans get a lot done, not because we’re smart, butbecause we have thumbs so we can make coffee.”</em></p>
<p><em>—— Flash Rosenberg</em></p>
<p><strong>手冲咖啡最早起源于二十世纪初的德国，但真正发展为一个行业，却要从日本谈起。</strong>上世纪五十年代开始，日本人对手冲咖啡几乎到了如痴如醉的地步，各式各样的咖啡器具般层出不穷，完整的手冲滤泡式咖啡理论及操作技术也得以建立。在这浪潮之中，一个名叫「Hario」的咖啡器具品牌开始萌芽，并迅速成为行业领军品牌，<strong>「Hario」风格简约、以体现咖啡原有品质为宗旨的单品冲泡方式也被认为是对手冲咖啡概念的完美诠释。</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-3fb5502fd668d66693c63fe7d3b1593a_720w.jpg" alt="img"></p>
<p>1921年，日本东京神田须田町，一座名为「柴田弘制造所」，主要生产物理化学玻璃器皿的小工坊建立了，这里就是Hario株式会社的前身。自品牌建立伊始，Hario便致力于耐热玻璃设备的技术研究及制造，后经活用投入消费性玻璃领域，<strong>生产出了红极一时的首款咖啡器具——虹吸咖啡壶。</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-4b4c30eefa434091e131d98aa21e2701_720w.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-a844bef8937477c844863ee8f257b4fd_720w.jpg" alt="img"></p>
<p>▲虹吸咖啡壶</p>
<p>上世纪中叶，使用荷兰绒滤网的滴滤设备制作咖啡的方法较为普遍，但过程繁琐、冲泡时间很长，市场上急缺一款操作简单、冲泡快捷的咖啡器具。有着多年耐热玻璃研究经验的<strong>Hario敏锐地捕捉到了商机，经过精密的测算、设计及开发，手冲历史上的旗帜产品——Hario V60滴滤咖啡杯的雏形就此诞生。</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-1ae1b06ba2794807516fb5bc3873b46a_720w.jpg" alt="img"></p>
<p>Hario V60一经推出，相较于同类产品的显著优势便迅速吸引了咖啡爱好者的关注，首批产品很快脱销。为了满足市场多元化需求，V60开始衍生出多个品类——纯玻璃制和彩绘陶瓷、极简风格和现代主义，造型多变的Hario V60迅速成为了手冲咖啡市场的宠儿，也让Hario这个名字在世界范围内人尽皆知。</p>
<p><img src="https://pic3.zhimg.com/80/v2-3d0b3ebc98a136cc050c951526745442_720w.jpg" alt="img"></p>
<p>▲玻璃、陶瓷、金属、树脂V60</p>
<p>时至今日，Hario的产品范围覆盖茶具、厨房用具、汽车照明、实验器皿、零部件等诸多领域，但公司超过一半的收入仍来自以Hario V60等咖啡用具的海外销售。<strong>对于Hario而言，重要的已不再是单纯的咖啡器具生产销售，而是如何引领世界手冲咖啡文化。</strong></p>
<p><em>“I think if Iwere a woman I’d wear coffee as a perfume.”</em></p>
<p><em>—— John Van Drute</em></p>
<p><img src="https://pic2.zhimg.com/80/v2-e304e46e0ba2ce087eb409d6ad1f49b5_720w.jpg" alt="img"></p>
<p><strong>灵魂器具</strong></p>
<p>只为一杯好咖啡</p>
<p>☕️</p>
<p><strong>Hario所有产品的选材，都以保证对人体和环境无害为前提</strong>——不使用任何重金属材质、百分百天然矿晶、无杂味滤纸、无铅印墨，就连玻璃上的印花也选用无铅印墨。并且为了实现性能最优，还活用玻璃、树脂、陶瓷、金属等材质制作零件。</p>
<p><img src="https://pic2.zhimg.com/80/v2-1e1a0c88c982ba526a7ec2f7957f8259_720w.jpg" alt="img"></p>
<p>耐热玻璃原材料需要超高温才能熔化，Hario独创的电熔技术可以在熔炉中心温度高达1600摄氏度的同时维持无烟环境，从而避免杂质附着，保证材料的完美纯净；玻璃均匀熔化之后，使用16头的自动成形机将接近1300摄氏度的玻璃球压至平坦；再利用气压和离心力使其逐渐成形；最后经过冷却、加工、打印、烧印、装配等诸多环节，才能制成一件完好的玻璃成品。在高度自动化、机械化的用时，Hario也依然保留了手工制作的传统，玻璃杯手柄和虹吸壶滴管等关键部分的制作均是手工完成，从而造就了最为成熟优质的咖啡器具。</p>
<p><img src="https://pic4.zhimg.com/80/v2-080c5c4467cc3cdb240104e18daa5a6b_720w.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-f47f94087f1e8909e5527fc44ca7aea5_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-cfab21c6b0511b7b375f39075dbaecde_720w.jpg" alt="img"></p>
<p><strong>纵观Hario的发展史，每一次飞跃都离不开大胆创新的尝试。</strong>从专业的实验设备到消费性玻璃领域，再从虹吸咖啡壶到V60系列、BUONO手冲壶，Hario凭借着卓越的创造力一步一步走到了今天。</p>
<p><img src="https://pic4.zhimg.com/80/v2-beb3b8b04ecb6a9bda63ec2bad9ef9a3_720w.jpg" alt="img"></p>
<p>▲BUONO不锈钢手冲壶</p>
<p><strong>V60的设计完美诠释了Hario对手冲咖啡的极致追求</strong>。滤杯杯壁延伸交叉60度的夹角设计，可以将咖啡风味最大程度地发挥出来；长短不一的悬脊设计，使咖啡粉层在由低到高的过程中均匀受力，保持往上排气与往下滴滤的通畅度；直径较大的下水口，便于通过改变水流流速从而根据个人喜好控制咖啡风格。</p>
<p><img src="https://pic2.zhimg.com/80/v2-c8635567ccd3aa2a646ab7bb21d88aa5_720w.jpg" alt="img"></p>
<p>二十世纪初，市面上多数手冲咖啡壶内壁都设有直线型悬脊，滤纸很容易粘黏在滤碗上阻碍水流通过，这个问题一度让咖啡爱好者们困扰不已。Hario在滤碗内壁上加入了螺旋状悬脊，保证水流顺畅的同时让空气可以从四周向上逸出，最大限度地使咖啡粉膨胀，从而完美解决了这一问题。</p>
<p><img src="https://pic2.zhimg.com/80/v2-0331b310fa27a17a830aac90476b8b2d_720w.jpg" alt="img"></p>
<p>▲螺旋形悬脊设计</p>
<p><img src="https://pic2.zhimg.com/80/v2-ddea09cbf76e42468a4c70e4629323fd_720w.jpg" alt="img"></p>
<p>▲悬脊长短不一</p>
<p><strong>手冲咖啡</strong></p>
<p>生活不可或缺的仪式感</p>
<p>☕️</p>
<p>Hario在做的不只是咖啡设备那么简单而已，更是在探讨如何通过咖啡构建完美生活。<strong>难得的是，生活节奏快到无法呼吸的今天，手冲咖啡却能带给人们专注与沉静。</strong>挑选咖啡豆，研磨成粉，在香气萦绕间轻轻打湿滤纸，缓缓倒入咖啡粉，温柔地拍平，慢慢注入热水，耐心等待滴滤出杯，闻着淡淡的咖啡香，疲惫的心灵竟也被神奇地治愈了，这大概就是手冲咖啡的魅力所在。</p>
<p><em>“That’s something that annoys the hell out of me——I mean if somebody says thecoffee’s all ready and it isn’t.”</em></p>
<p><em>—— J.D. Salinger</em></p>
<p><img src="https://pic2.zhimg.com/v2-0022c99aed843a5accd015a86b62abf9_b.jpg" alt="img"></p>
<p>有人说，手冲时的心情与力度会明显地影响咖啡风味，如茶道追求自然平和一般，咖啡也需要我们怀着轻松愉悦的心情冲泡。</p>
<p><strong>你的手冲咖啡，是什么味道呢？</strong></p>
<p><img src="https://pic3.zhimg.com/v2-ac74dab9f9d1321f9604d4e44b853e66_b.jpg" alt="img"></p>
]]></content>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>历史的经典：Chemex咖啡壶</title>
    <url>/2022/02/16/%E5%8E%86%E5%8F%B2%E7%9A%84%E7%BB%8F%E5%85%B8%EF%BC%9AChemex%E5%92%96%E5%95%A1%E5%A3%B6/</url>
    <content><![CDATA[<h2 id="Chemex，手冲咖啡器具历史的经典，直译为“化学交换”，之所以取这个名字，是因为创始人Peter-J-Schlumbohm本职就是一名化学工作者。"><a href="#Chemex，手冲咖啡器具历史的经典，直译为“化学交换”，之所以取这个名字，是因为创始人Peter-J-Schlumbohm本职就是一名化学工作者。" class="headerlink" title="Chemex，手冲咖啡器具历史的经典，直译为“化学交换”，之所以取这个名字，是因为创始人Peter J.Schlumbohm本职就是一名化学工作者。"></a><strong>Chemex，手冲咖啡器具历史的经典，直译为“化学交换”，之所以取这个名字，是因为创始人Peter J.Schlumbohm本职就是一名化学工作者。</strong></h2><p><img src="https://pic4.zhimg.com/80/v2-2cf18f00ab7a122a13f0077e3b8645fb_720w.jpg" alt="img"></p>
<p><strong>Schlumbohm博士</strong>在德国出生，后移居美国，研究化学的同时，也是一名狂热的发明者，一生发明大大小小<strong>3000</strong>余件物品，其中最成功的，就是<strong>Chemex咖啡壶</strong>。&lt;<span id="more"></span>&gt;</p>
<p><img src="https://pic4.zhimg.com/80/v2-04ab7621da9f3b3062b6acb49814f50f_720w.jpg" alt="img"></p>
<p>常年的实验室工作，令<strong>Schlumbohm博士</strong>受到<strong>“玻璃漏斗”</strong>和“<strong>锥型烧瓶”</strong>的启发，<strong>1941</strong>年，他设计出这款造型简洁的咖啡壶，<strong>仅需附加一张滤纸，就可冲泡出一杯风味纯正的咖啡。</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-0550f4c26303a060d0229ea1bab39711_720w.jpg" alt="img"></p>
<h2 id="Chemex的独到设计"><a href="#Chemex的独到设计" class="headerlink" title="Chemex的独到设计"></a>Chemex的独到设计</h2><p><img src="https://pic4.zhimg.com/80/v2-89ff9342c9d70465c46754c7aa5cd293_720w.jpg" alt="img"></p>
<p><strong>① 排气通道及排水口</strong><br>这个设计被<strong>Schlumbohm</strong>称为<strong>“Air Channel”</strong>，通过这条通道，冲泡咖啡时产生的热气能避开滤纸，及时排出，使咖啡萃取更纯粹。同时，这条通道在倒咖啡时，也能起到导流作用，防止外溢。</p>
<p><img src="https://pic2.zhimg.com/80/v2-1b6cbd78a59fe9926ea8da47ae668829_720w.jpg" alt="img"></p>
<p><strong>② 防烫把手</strong><br>在曲线形瓶身中间，加上了可拆卸的木制防烫把手。</p>
<p><img src="https://pic1.zhimg.com/80/v2-3538e23a982144c2cfa86fb81078ace0_720w.jpg" alt="img"></p>
<p><strong>③圆钮与皮绳</strong><br>除了基本功用，特别添加被人称为<strong>“肚脐眼”</strong>的圆钮，和精美的皮绳，弥补了玻璃材质的冰冷，凭添一分洒脱的西部风情。</p>
<p><img src="https://pic3.zhimg.com/80/v2-459bc954db0ad656ab876a82bd628f26_720w.jpg" alt="img"></p>
<p>现在的<strong>Chemex</strong>，已发展出一个完整的产品家族。单人壶，一人独酌，三人壶，全家共享，同时还有大容量的八人壶和十人壶，适合大家庭和聚会使用。</p>
<p><img src="https://pic3.zhimg.com/80/v2-b53c85a948e10cd54f61b9ddd4c3e412_720w.jpg" alt="img"></p>
<p><strong>Chemex</strong>作为美国设计的代表杰作，被伊利诺伊理工学院评选为<strong>“现代设计最佳咖啡器具”</strong>，并且<strong>由纽约现代艺术博物馆、费城博物馆和康宁博物馆永久收藏</strong>。</p>
<p><img src="https://pic2.zhimg.com/v2-952b0ffce2d3483bbed12cb87152f1f2_1440w.jpg?source=172ae18b" alt="历史的经典：Chemex咖啡壶"></p>
]]></content>
      <tags>
        <tag>coffee</tag>
      </tags>
  </entry>
  <entry>
    <title>爵士嘻哈「JAZZ HIPHOP」今夜的星空因Nujabes而浪漫</title>
    <url>/2022/02/16/%E7%88%B5%E5%A3%AB%E5%98%BB%E5%93%88%E3%80%8CJAZZ-HIPHOP%E3%80%8D%E4%BB%8A%E5%A4%9C%E7%9A%84%E6%98%9F%E7%A9%BA%E5%9B%A0Nujabes%E8%80%8C%E6%B5%AA%E6%BC%AB/</url>
    <content><![CDATA[<p>2020年2月的某一天，记得是一个阳光明媚的下午，疫情在家coding的自己，在休闲之余，意外点开了一位名叫蛋堡的说唱歌手的歌曲。</p>
<p>不同于以往听到的嘻哈歌曲，或者说在那个嘻哈综艺和歌曲泛滥的年份里，听到了一些不同的声音，对自己来说是无比新奇的。进一步的探寻后，终于发现了两个关键性的词汇——“爵士嘻哈”和“Nujabes”。 </p>
<p><img src="https://pic4.zhimg.com/80/v2-fe022cf3c30473a93cb7d7f61f4c7c07_720w.jpg" alt="img"></p>
<p>&lt;<span id="more"></span>&gt;</p>
<p>爵士嘻哈（Jazz Hiphop），从字面上可以单纯理解为爵士乐与嘻哈音乐的融合。爵士音乐发展至今，早已影响到许多其他类型的音乐流派，这一点在流行音乐里体现的最为明显。</p>
<p>在上个世纪的美国，爵士乐在三四十年代逐渐成为主流音乐。随后的几十年里，爵士乐便像母亲一般，不断滋养着其他新兴的音乐流派，例如R&amp;B，FUNK，以及今天所提到的嘻哈音乐。</p>
<p><img src="https://pic2.zhimg.com/80/v2-d10e2ab755713c1083c95a04bfe44f59_720w.jpg" alt="img"></p>
<p>上世纪八十年代，是嘻哈音乐发展的黄金年代。由于表达随性自由，视觉与听觉效果显著，在逐渐成为主流音乐的同时，也带动着更多人参与其中表达自己。而爵士乐，由于审美门槛高，历史相较于其他音乐较为悠久，便逐渐被视为了大众眼里的老古董。</p>
<p>另一边，嘻哈音乐来源于街头文化，由于历史原因，大多数黑人在物质匮乏的年代，只能通过收音机和街头表演的形式，来记录音乐，表达自己。而忍受种族歧视与贫困生活的底层黑人，也就不可避免的在嘻哈音乐中加入了许多批判与反抗元素。</p>
<p><img src="https://pic4.zhimg.com/80/v2-2786f23be7840bbb1834c9c7716bc0eb_720w.jpg" alt="img"></p>
<p>但不是所有的黑人都面临这一窘境，也存在着许多家境还算优越的非裔人群，或多或少受到过较为良好的音乐教育。他们受到嘻哈音乐感染，也想通过嘻哈表达自身。由于并没有底层黑人的生活经历，对于社会残酷也就没有那么多感触，在表达方式和情感上便更加温和。</p>
<p>基于这个出发点，他们破天荒的将浪漫的爵士音乐与嘻哈节奏相互融合，并在此后的几年里，逐渐找到了两者完美的平衡点。而随着1985年CARGO发行作品《Jazz Rap》，标志着爵士嘻哈的正式诞生。</p>
<p><img src="https://pic4.zhimg.com/80/v2-f3fea63cf5193c026d0187b32f9d651b_720w.jpg" alt="img"></p>
<p>而后，ATCQ、Gangstarr等一批优秀的Jazz Hiphop音乐人不断涌现。就连爵士传奇人物Miles Davis（英里哥）也顺应潮流，在自己的作品《Mystery》中将爵士与嘻哈相互融合创新。</p>
<p><a href="https://link.zhihu.com/?target=https://c.y.qq.com/base/fcgi-bin/u?__=QZidA04A">What I’m Here 4——GangStarrc.y.qq.com/base/fcgi-bin/u?__=QZidA04A</a></p>
<p>随着采样技术的出现与发展，方便了嘻哈音乐的制作与传播，将嘻哈音乐在西方推向高潮的同时，也带去了大洋彼岸的亚洲，由此引出了今天的主角——Nujabes。</p>
<p><img src="https://pic1.zhimg.com/80/v2-cb96509dfe8b3c7dc1ec0d198a47a5a0_720w.jpg" alt="img"></p>
<p>Nujabes原本只是一名普通的日本唱片店老板，在自家的唱片店售卖着自己喜欢的唱片。由于酷爱爵士乐，便收集聆听了大量爵士唱片，并在1998年创建了自己的唱片公司。</p>
<p>2004年，Nujabes接手了为动漫《混沌武士》配乐的工作，导演渡边信一郎与他一起，创造性地在动漫中增加了嘻哈元素，而带有爵士风味的嘻哈音乐，更是成为了《混沌武士》的点睛之笔。</p>
<p><a href="https://link.zhihu.com/?target=https://c.y.qq.com/base/fcgi-bin/u?__=aNfUXfq">Aruarian Dancec.y.qq.com/base/fcgi-bin/u?__=aNfUXfq</a></p>
<p><a href="https://link.zhihu.com/?target=https://c.y.qq.com/base/fcgi-bin/u?__=yYwAGhK">四季之歌c.y.qq.com/base/fcgi-bin/u?__=yYwAGhK</a></p>
<p>时至今日，《混沌武士》在某瓣仍旧有着9.5分的佳绩。每当音乐响起，画面交织，我们脑海中，仍旧会浮现出，三个少年迎着夕阳，走向未知的道路，寻找着带有向日葵气味的武士。</p>
<p><img src="https://pic4.zhimg.com/80/v2-bc41ac777114ce1bb68533d363b6427f_720w.jpg" alt="img"></p>
<p>爵士嘻哈传入日本后，也不断进行着改良，相较于原本纯正的西方爵士嘻哈，日本的爵士嘻哈在保留基本节奏律动的同时，更大程度丰富了旋律性，增强了氛围感与朦胧美，更加符合亚洲人的审美喜好。</p>
<p>而Nujabes最为著名的作品，则是他与好友Shing02在长达十余年间，以爱为主题，创作的“Luv（sic.）系列”。该系列正式发行的歌曲共6首，采样了不同类型的音乐风格，而在歌词上则都以体现美好永恒的爱为主题，从而展现了专属于Nujabes浪漫星空。其中Luv(sic)Pt.4是笔者最喜欢的一首。</p>
<p><a href="https://link.zhihu.com/?target=https://c.y.qq.com/base/fcgi-bin/u?__=9j1EfF">Luv(sic)Pt.4c.y.qq.com/base/fcgi-bin/u?__=9j1EfF</a></p>
<p>在Nujabes的作品里，不仅采样过他长期聆听的爵士音乐，更包含了巴西音乐，电子音乐等其他音乐类型。而采样技术并不是对原曲的照搬与剪辑，而是根据自己的需要，对原曲进行重新的解构。高质量的采样，需要深厚的音乐积累与感知能力。</p>
<p>例如在Luv(sic)中，Nujabes便展现了他强大的采样水准，对爵士音乐家Aki Takase的《Minerva’s Owl》进行了独特风格的重塑。</p>
<p><a href="https://link.zhihu.com/?target=https://c.y.qq.com/base/fcgi-bin/u?__=EJaIcOG">Luv(sic)c.y.qq.com/base/fcgi-bin/u?__=EJaIcOG</a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1Hv411A78f?spm_id_from=333.999.0.0">Aki Takase - Minerva’s Owl (1981)_哔哩哔哩_bilibiliwww.bilibili.com/video/BV1Hv411A78f?spm_id_from=333.999.0.0<img src="https://pic1.zhimg.com/v2-40ac808bc9bd2a933878312d46558d38_180x120.jpg" alt="img"></a></p>
<p>然而，或许真的是天妒英才，2010年2月26日深夜，Nujabes在东京遭遇车祸，因抢救无效死亡，终年36岁。</p>
<p>时至今日，Nujabes对于爵士嘻哈与亚洲音乐的推动作用，都是不容置疑的，其风格不仅影响了日本本土的音乐人，更影响了中国乃至西方的大批嘻哈音乐人。文章开始所提及的蛋堡，便是Nujabes的歌迷之一，在其作品里，也随处可见爵士嘻哈对其的影响。</p>
<p><a href="https://link.zhihu.com/?target=https://c.y.qq.com/base/fcgi-bin/u?__=AhmnFOm">收敛水——蛋堡c.y.qq.com/base/fcgi-bin/u?__=AhmnFOm</a></p>
<p>谨以此文，献给我们挚爱的Nujabes与Jazz Hiphop。</p>
<p>希望我们永远记住他的名字，今夜的星空因Nujabes而浪漫。</p>
<p><img src="https://pic2.zhimg.com/80/v2-8efab9004234c4205eb53ff69ef0d1c1_720w.jpg" alt="img"></p>
]]></content>
      <tags>
        <tag>jazz hiphop</tag>
      </tags>
  </entry>
  <entry>
    <title>“hexo-next添加网易云音乐外链”</title>
    <url>/2022/02/16/%E2%80%9Chexo-next%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE%E2%80%9D/</url>
    <content><![CDATA[<h2 id="添加网易云音乐"><a href="#添加网易云音乐" class="headerlink" title="添加网易云音乐"></a>添加网易云音乐</h2><h3 id="生成外链"><a href="#生成外链" class="headerlink" title="生成外链"></a>生成外链</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDcvMTcvNWQyZTc1MDFkZmJlZDUyMTIxLnBuZw" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDcvMTcvNWQyZTc1MzRjYmZhYTU2MDYwLnBuZw" alt="img"></p>
<span id="more"></span>

<h3 id="修改模板文件"><a href="#修改模板文件" class="headerlink" title="修改模板文件"></a>修改模板文件</h3><p>就是这个<code>themes\next\layout\_macro\sidebar.swig</code><br>自己找个位置复制粘贴进去<br>我是放在那个最下面<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDcvMTcvNWQyZTc1NTM2MTQwYjkzOTkwLnBuZw" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDcvMTcvNWQyZTc1NmI3OTQzZDU0NjIyLnBuZw" alt="img"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>论百度对gitpage文章的收录</title>
    <url>/2022/02/16/%E8%AE%BA%E7%99%BE%E5%BA%A6%E5%AF%B9gitpage%E6%96%87%E7%AB%A0%E7%9A%84%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://pic3.zhimg.com/v2-144289f0a59dcb1fdad0703780a27860_1440w.jpg?source=172ae18b" alt="如何让百度收录 GitHub Pages 个人博客"></p>
<h1 id="如何让百度收录-GitHub-Pages-个人博客"><a href="#如何让百度收录-GitHub-Pages-个人博客" class="headerlink" title="如何让百度收录 GitHub Pages 个人博客"></a>如何让百度收录 GitHub Pages 个人博客</h1><p>很多程序员朋友都有在 GitHub Pages 上搭建自己的个人博客，对于个人博客，没有被搜索引擎收录的话，别人基本是是看不到的，再好的技术文无法被分享也是白搭。</p>
<p>基于 GitHub Pages 的个人博客， Google 收录非常及时全面。然而，到目前为止，GitHub 还是拒绝百度爬虫的访问，直接返回 403。</p>
<p>官方给出原因是，百度爬虫爬得太狠，影响了 Github Pages 服务的正常使用。这就导致了，但凡在 Github Pages 搭建的个人博客，都无法被百度收录<span id="more"></span></p>
<!--more-->

<h2 id="现有的解决办s"><a href="#现有的解决办s" class="headerlink" title="现有的解决办s"></a>现有的解决办s</h2><p>1、使用 <a href="https://link.zhihu.com/?target=http://coding.net">http://coding.net</a> 建立镜像网站</p>
<p>我之前使用过 <a href="https://link.zhihu.com/?target=http://coding.net">http://coding.net</a>，在本地 repo 的配置文件中同时添加 GitHub 和 <a href="https://link.zhihu.com/?target=http://coding.net">http://coding.net</a> 远程 repo 地址，发布时，两边都会部署到，加上域名智能解析，对于国内的请求，转发到 Coding Page 即可。</p>
<p>但是通过 <a href="https://link.zhihu.com/?target=http://coding.net">http://coding.net</a> 访问个人主页时会先出现跳转页面，导致百度无法正确爬取。</p>
<p>2、利用 CDN</p>
<p>这个没试过，理论上来说，百度在第一次爬取时，CDN 上必须要已经有相应页面的缓存，否则，爬取的请求会被转发到 GitHub 源站，GitHub 还是会拒绝。</p>
<p>3、使用 Nginx 反向代理</p>
<p>Nginx 做反向代理，直接代理百度爬虫，去 GitHub Pages 请求，然后将结果返回给百度爬虫。</p>
<p>这种方式可行，只不过，这些方法都需要一定的定制能力，对于个人开发者，还得买一台 VPS 或者云服务器。</p>
<h2 id="可靠、免费还简单的方法"><a href="#可靠、免费还简单的方法" class="headerlink" title="可靠、免费还简单的方法"></a>可靠、免费还简单的方法</h2><p>Guillermo Rauch 大神创业搞了一个静态站 hosting 服务 <a href="https://link.zhihu.com/?target=https://zeit.co/">zeit.co</a>，可以通过 GitHub Hooks 实现自动部署，zeit 提供 存储 + CDN + DNS 一套完整的服务。</p>
<p>我给个人网站配置完成后，去百度站长试了一下，发现抓取成功了，sitemap 也提交成功了，坐等百度收录。</p>
<p><img src="https://pic2.zhimg.com/80/v2-eff5416aef06c07f8be590718b7c5d51_1440w.jpg" alt="img"></p>
<p>下面我把配置的步骤记录下来，给有需要的朋友一个参考。</p>
<p>zeit 网站主要就三个步骤：</p>
<ul>
<li>Github 账户登陆 <a href="https://link.zhihu.com/?target=http://zeit.io">http://zeit.io</a>，授予 zeit repo 的 read 权限；</li>
<li>导入 GitHub 博客 repo；</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-07b897efe47b4fe1b2000fe37a6771df_1440w.jpg" alt="img"></p>
<ul>
<li>稍等片刻，部署成功。</li>
</ul>
<p><img src="https://pic2.zhimg.com/80/v2-efd5a7b6ee08ae3a3bb2f0d1e86e288d_1440w.jpg" alt="img"></p>
<p>项目名中的 <code>.</code> 自动替换成 <code>-</code>，生成了一个类似于 <code>xxxx.now.sh</code> 的链接，点击可以访问你的博客主页，这时候静态资源已经部署到 zeit 的边缘 CDN 节点上了，下次你 GitHub 项目的任何更新会触发 zeit 项目更新。</p>
<p>接下来的就是切换域名，通过智能 DNS 将国内流量切过去。通过 <a href="https://link.zhihu.com/?target=http://zeit.co">http://zeit.co</a> 提供的 DNS 解析服务配置自己的域名，然后在百度站长里配置信息。</p>
<p>在 Domains 下为项目添加你的个人域名。</p>
<p><img src="https://pic2.zhimg.com/80/v2-12a67dc637cdb57d5252727bfb848325_1440w.jpg" alt="img"></p>
<p>我添加后出现以下配置错误，原因我的域名权威 dns 是 dnspod。</p>
<p>一种解决方式是将直接使用 zeit 提供的 nameserver 智能 DNS，另一种方式，就是保留 dnspod 作为权威 dns 服务器，但是要添加一条 ANAME 记录。</p>
<p><img src="https://pic2.zhimg.com/80/v2-7e96f3287879fefd8839ed2c39aff0f5_1440w.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-fa3b03be500ee8bad0f9e6e220aadb61_1440w.jpg" alt="img"></p>
<p>有两张配置方式，一种是改 nameserver，我用的是这种，权威 dns 服务器改成左边那些，我看到你还是用的 dnspod 来解析的。另一种方式，就是保留 dnspod 作为权威 dns 服务器，但是要添加一条 ANAME 记录。</p>
<p>我使用的是第一种方式，直接在阿里云替换了 DNS 服务器，直接用 zeit 提供的 nameserver 智能 DNS。</p>
<p><img src="https://pic3.zhimg.com/80/v2-16628a7e107f3c7aa2fc24e7d953cd92_1440w.jpg" alt="img"></p>
<p>回到 zeit，刷新下，正常是这样，这里是给你签发 https 证书，免费的。</p>
<p><img src="https://pic3.zhimg.com/80/v2-719f2d670a1b4945a864c6857d96297e_1440w.jpg" alt="img"></p>
<p>过一会儿应该就好了。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8af44e78844a47b3f83fc21f31c92504_1440w.jpg" alt="img"></p>
<p>看一下 DNS 解析地址，说明 zeit 域名已经配置成功了。</p>
<p><img src="https://pic4.zhimg.com/80/v2-cec45691a89c7ba690685130af16cb37_1440w.jpg" alt="img"></p>
<p>最后就是在百度站长里面添加个人域名了。这里注意选择 https 协议，因为 zeit 默认都是 https 了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-4fce7af4fd596a8e8a62bc36d93028d2_1440w.jpg" alt="img"></p>
<p>网站验证我采用的是文件验证，下载验证文件放在你博客本地 repo 的 source 目录下，部署到 GitHub，当然也会及时更新到 zeit。然后完成验证就好了，试一下链接诊断，看能不能正常抓取，失败的话，看看抓取的 ip 地址是不是还是之前的缓存，等待一段时间重新抓取下，时间取决于 dns 的 ttl。</p>
<p><img src="https://pic4.zhimg.com/80/v2-d2dbffee70843e20c59852c96f138683_1440w.jpg" alt="img"></p>
<p>从<a href="https://link.zhihu.com/?target=https://zeit.co/">zeit.co</a> 官网上看，台湾和香港都有 CDN 节点，免费账户可以有 20G/月，个人博客应该是够用了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-3be791ad8a5ac8317703b47658acfdae_1440w.jpg" alt="img"></p>
<p>配置还是很简单的，赶紧试试吧，有问题欢迎交流。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>用户态和核心态</title>
    <url>/2022/04/06/%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E6%A0%B8%E5%BF%83%E6%80%81/</url>
    <content><![CDATA[<ol>
<li>什么是用户态、内核态<br> 一般的操作系统对执行权限进行分级，分别为用保护态和内核态。用户态相较于内核态有较低的执行权限，很多操作是不被操作系统允许的，原因简单来说就是用户态出现问题（自己写的bug），也不能让操作系统崩溃呀。</li>
</ol>
<p>内核态相当于一个介于硬件与应用之间的层，内核有ring 0的权限，可以执行任何cpu指令，也可以引用任何内存地址，包括外围设备, 例如硬盘, 网卡，权限等级最高。 <span id="more"></span></p>
<p>用户态则权利有限，例如在内存分配中，有一部分内存是仅为内核态使用的，用户态code则不允许访问那些内存地址，每个进程只允许访问自己申请到的内存。而且不允许访问外围设备。另外在执行cpu指令的时候也可以被高优先级抢占。<br> 大多数时间各类程序都是执行在用户态下，毕竟内核就是基础而已。</p>
<ol>
<li>状态转换<br> 用户程序跑在用户态下，但是如果需要执行一些操作例如申请内存，网络读写时，自己的权限不够，就需要转换到内核态去让内核的code帮忙干一些事情。下面三个方式是<br> a. 系统调用<br> 这是用户态进程主动要求切换到内核态的一种方式，用户态进程通过系统调用申请使 用操作系统提供的服务程序完成工作，比如前例中fork()实际上就是执行了一个创建新进程的系统调用。而系统调用的机制其核心还是使用了操作系统为用户 特别开放的一个中断来实现，例如Linux的int 80h中断。<br> b. 异常<br> 当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。<br> c. 外围设备的中断<br> 当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会 暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到 内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</li>
</ol>
<p>很多博客都提到了一个状态转换的例子：c语言在malloc的时候需要涉及到从用户态到内核态的转换，malloc是个函数，所以算作系统调用，是用户态的主动申请转换。但是在实际实现中，未必一定需要进入内核态拿到新的内存，详细看这个博客：<a href="https://blog.csdn.net/zdy0_2004/article/details/47787631">https://blog.csdn.net/zdy0_2004/article/details/47787631</a></p>
<p>3.为什么两者切换耗时<br> linux下每个进程的栈有两个，一个是用户态栈，一个是内核态栈。在需要从用户态栈切换到内核的时候，需要进行执行栈的转换，保存用户态的状态，包括寄存器状态，然后执行内核态操作，操作完成后要恢复现场，切换到用户态，这个过程是耗时的。当然这里有很多细节，但是我不懂，只了解宏观上的原因。</p>
<p>很多人都说mutex加锁解锁很慢，为什么呢，因为他也是需要从用户态到内核态的切换，因此有一些无锁技巧例如CAS(Compare and swap)，还有spin lock这种停等不作context切换的锁。<br> 这个博客说的挺好，介绍了mutex咋切换的细节，反正我是写不出来：<a href="https://www.jianshu.com/p/5725db8f07dc">https://www.jianshu.com/p/5725db8f07dc</a></p>
<p>3.一些讨论<br> <a href="https://blog.codinghorror.com/understanding-user-and-kernel-mode/">https://blog.codinghorror.com/understanding-user-and-kernel-mode/</a><br> 这个博客在介绍user mode和kernel mode，但是评论里都在争论各类语言在处理exception的时候是否切换到了内核态，跑偏了🤣。这个exception不知那种缺页的系统异常，那个异常无疑是内核态来解决。这里讨论的是语言里定义的哪些异常，其中我觉得这个参考了文档的说的可能好一些（第二个评论）：<a href="https://stackoverflow.com/questions/28384931/do-exceptions-explicitly-caught-and-handled-cause-switch-to-kernel-mode">https://stackoverflow.com/questions/28384931/do-exceptions-explicitly-caught-and-handled-cause-switch-to-kernel-mode</a><br> 我也觉得是depends on implement，异常处理要查看栈信息，可能是直接拽出来系统的栈，这种方法铁铁的需要进入内核态。如果是JVM这种自己维护了这样的栈呢？那其实就不需要去内核态拿栈。但是不管怎么说，异常处理是极其耗时的这点不会错。</p>
]]></content>
      <tags>
        <tag>计算机技术</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/2022/04/07/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>1、在互联网主干道上，大家都是用的公网IP来标识自己。知道这个IP，就可以直接定位连接。</p>
<p>2、IP有两种，IPV4、IPV6；只有IPV4会有内网穿透的情况</p>
<p>3、鉴于IPV4的数量，不可能让所有设备都在主干道上标识自己的且是不重复的唯一IP</p>
<p>4、所以就想了个办法，把一个区域内的所有设备连在一起并统一和主干道上其他区域设备联系，对外只共用一个公网IP来标识自己，对内则分配一些够用的私有地址。简称NAT</p>
<p>5、设备与设备之间的连接除了物理存在的端口外，还有软件层面的端口，要产生连接必须要有个端口给你把数据传进去。<span id="more"></span></p>
<p>6、所以NAT就干了这么一件事：私有IP+端口《–》公网IP+端口  从而实现某台内网机器的上网</p>
<p>7、而当自己所能操作的范围内没有公网ip，就不能实现自己想要的内网穿透。但实际上只要你能上网，对外而言你就一定有一个公网ip，只是你操作不到！比如小区局域网、城域局域网</p>
<p>8、而内网穿透，本质就是对公网IP或者端口做文章，从而实现自定义访问。</p>
<p>9、比如使用其他的公网IP：</p>
<p>​        a：需要一台自己拥有的能够操作的、具有公网IP的机子A（物理机、<a href="https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1500976034%7D">虚拟机</a>都可以）</p>
<p>​        b：需要进行端口映射/转发，让本地局域网的机子和机子A建立联系，从而实现内网穿透</p>
<p>​        c：nat123、花生壳、frp、只要是类似的，都是这种模式：使用其他能操作的公网ip进行转发</p>
<p>​        d：这种模式的好处在于访问端可以直接用域名或地址访问而不需要安装其他任何辅助<a href="https://www.zhihu.com/search?q=%E5%AE%A2%E6%88%B7%E7%AB%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1500976034%7D">客户端</a></p>
<p>​        f：缺点是机子A可能需要另外购买，还要付对应的宽带费用。像花生壳它自己的服务器就是机子A，给你提供这样的服务，便宜的带宽也小、速度也慢，顺带给你一个域名解析。</p>
<p>10、知道端口后直接连：</p>
<p>​       a：一般情况下，NAT转换出去的端口是随机的，但你要知道，我们手机或电脑上玩的各种软件是可以和他们自己的服务器进行双向通信的。</p>
<p>​       b：原因就是，在他们通信的时候，相互获取了对方的公网IP+端口（有些app是固定的域名）</p>
<p>​       c：而不管是p2p连接，还是VPN，只要是类似的，就是这种模式</p>
<p>​       d：它必须在两端都安装使用辅助的客户端才行（可以理解为获取对方地址相互连接，甚至还可以加密提高安全性）</p>
<p>​       f：这种模式的难点在于建立起初始连接，有很多种方式，简称打洞、穿越。</p>
<p>​       g：缺点就是才说的：两端必须都需要安装使用辅助客户端来实现。</p>
<p>11、ipv6就不存在内网穿透的问题，因为终端设备获取的几乎都是可以直接访问的IPV6地址，所以，我自家服务器使用的IPV4转发穿透+IPV6；IPV6无法访问的时候（访问设备也要支持IPV6）就用IPV4访问。</p>
<p>12、对于有自己能操作的公网IPV4地址，那么，最简单的，对应路由器里面登录花生壳账号，实现域名解析，然后在端口映射内网主机即可。</p>
]]></content>
      <tags>
        <tag>计算机技术</tag>
      </tags>
  </entry>
  <entry>
    <title>mac在终端中写入mysql配置</title>
    <url>/2022/04/07/mac%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E5%86%99%E5%85%A5mysql%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>mac 配置mysql 环境变量<br>解决：安装mysql后，在终端输入mysql提示 Mac -bash: mysql: command not found问题</p>
<p>下载安装mysql<br>mysql v8.0.12 <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a><br>配置mysql时使用user legacy password encryption （兼容性好些）</p>
<p>配置环境变量<br>打开终端，输入：<br>sudo vim /etc/profile<br>注：(同JDK环境变量配置目录)<br>在profile文件最后写入：<br>export PATH=$PATH:/usr/local/mysql/bin</p>
<p>退出vim并保存 :wq!<br>输入 source /etc/profile 更新配置<br>这样环境变量就配置好了，下面是进入 mysql：<br>确定mysql已经开启：</p>
<p>输入 mysql -u root -p<br>输入之前配置的 mysql 密码</p>
]]></content>
      <tags>
        <tag>计算机知识</tag>
      </tags>
  </entry>
  <entry>
    <title>uipath基础配置</title>
    <url>/2022/04/12/uipath%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>port基于DOM的Web信息提取方法</title>
    <url>/2022/05/06/port%E5%9F%BA%E4%BA%8EDOM%E7%9A%84Web%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>文章目录<br>一、什么是DOM？<br>DOM树：<br>1.文档：<br>2.元素：<br>3.节点：<br>二、获取页面中的元素的几种方法：<br>1.根据 id 获取元素<br>2.根据标签名获取元素<br>3.通过HTML5新增的方法获取元素<br>4.根据特殊元素获取元素<br>一、什么是DOM？<br>DOM简称：文档对象模型，是一种处理可扩展编程语言的标准编程接口，我们通过这些接口来改变网页的内容、结构和样式。</p>
<p>DOM树：</p>
<p>1.文档：<br>一个网页就是一个文档，DOM中使用document表示</p>
<p>2.元素：<br>页面中的所有标签都是元素，DOM中使用element表示</p>
<p>3.节点：<br>网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</p>
<p>二、获取页面中的元素的几种方法：<br>1.根据 id 获取<br>2.根据标签名获取<br>3.通过HTML5新增的方法获取<br>4.特殊元素获取</p>
<p>1.根据 id 获取元素<br>这里我们讲通过使用getElementByld根据id获取页面元素：</p>
<p>getElementByld语法： var element = doucument.getElementByld(id);<br>参数：element是一个Element对象，如果当前文档中拥有特定ID的元素不存在则返回null<br>     id是大小写敏感的字符串，代表了所要查找元素的唯一ID<br>返回值：返回一个匹配到 ID 的 DOM Element对象。若在当前Document下没有找到，则返回null<br>1<br>2<br>3<br>4<br>代码如下（示例）：</p>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width,initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
    </head>
    <body>
        <div id="time">2022-3-2</div>
        <script>
            var timer = document.getElementById('time');
            console.log(timer);
            console.log(typeof timer);/*返回的是一个元素对象*/
        </script>
    </body>
</html>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
运行结果：

<p>我们可以看到返回的类型是对象类型，这就更能体现出DOM是一个文档对象模型了</p>
<p>2.根据标签名获取元素</p>
<ul>
            <li>噜啦啦噜啦啦，啦啦啦啦啦</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦</li>
</ul>
1
2
3
4
5
6
7
如果我们想获取这五个li对象应该怎么做呢，这个时候根据id获取是不是很麻烦，所以这时候就用到了我们的根据标签名获取元素的getElementsByTagName()方法

<p>代码如下所示：</p>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width,initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
    </head>
    <body>
        <ul>
            <li>噜啦啦噜啦啦，啦啦啦啦啦1</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦2</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦3</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦4</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦5</li>
        </ul>
        <script>
            var lis = document.getElementsByTagName('li');
            console.log(lis);
        </script>
    </body>
</html>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
运行结果：

<p>getElementsByTagName返回的是获取过来元素对象的集合，以伪数组的形式存储的</p>
<p>如果我们想获取第一个li里面的元素可以通过数组形式访问：<br>console.log(lis[0]);</p>
<p>如果想要依次打印里面的元素对象我们可以采取遍历的方式：<br>for( var i = 0; i &lt; lis.length; i++)<br>{<br>    console.log(lis[i]);<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>注意：<br>1.因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。<br>2.得到元素对象是动态的</p>
<ul>
            <li>噜啦啦噜啦啦，啦啦啦啦啦1</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦2</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦3</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦4</li>
            <li>噜啦啦噜啦啦，啦啦啦啦啦5</li>
</ul>
<ol>
            <li>哇哇哇哇哇哇哇哇</li>
            <li>哇哇哇哇哇哇哇哇</li>
            <li>哇哇哇哇哇哇哇哇</li>
            <li>哇哇哇哇哇哇哇哇</li>
</ol>
1
2
3
4
5
6
7
8
9
10
11
12
13
那如果我们的代码是这样的。我们想获取ol 里面的 li 该怎么办。
那我们就不可以用document.getElementsByTagName()来获取对象了，因为这样会把我们页面里的所有 li 都获取出来。

<p>这时候我们可以通过这个方法获取某个元素（父元素）内部所有指定标签名的子元素</p>
<p>element.getElementsByTagName(‘标签名’);<br>1<br>注意：父元素必须是单个对象（必须指明是哪一个元素对象）.获取的时候不包括父元素自己</p>
<p>我们可以这样做：</p>
<p>var ol = document.getElementsByTagName(‘ol’);  //[ol],得到的是一个伪数组，所以父元素应该是ol[0]<br>console.log(ol[0].getElementsByTagName(‘li’));<br>1<br>2<br>也可以这样做：<br>为了方便我们给ol 标签加一个id属性：</p>
<ol id="ol">
1
var ol = document.getElementById('ol');//这样我们就直接获取到了父元素
console.log(ol.getElementsByTagName('li'));
1
2
3.通过HTML5新增的方法获取元素
这个是HTML5新增的获取元素的方法

<p>document.getElementsByClassName(‘类名’); //根据类名返回元素对象集合<br>1<br>示例代码如下：</p>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width,initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
    </head>
    <body>
        <div class="box">盒子1</div>
        <div class="box">盒子2</div>
        <div class="nav">
            <ul>
                <li>首页</li>
                <li>产品</li>
            </ul>
        </div>
        <script>
            var boxs = document.getElementsByClassName('box');
            console.log(boxs);
        </script>
    </body>
</html>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
返回的对象也是以伪数组的形式存储的


<p>这个同样也是HTML5新增的，而且功能非常强大</p>
<p>document.querySelector(‘选择器’);  //根据指定选择器返回第一个元素对象<br>1<br>代码示例：</p>
<script>
            var fisrtbox = document.querySelector('.box');
            console.log(fisrtbox);
            var nav = document.querySelector('#nav');//＃用于id选择器
            console.log(nav);
            var li = document.querySelector('li');
            console.log(li);
</script>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>注意： querySelector 返回指定选择器的第一个元素对象，切记里面的选择器需要加符号</p>
<p>还有querySelectorAll方法</p>
<p>document.querySelectorAll(‘选择器’);  //根据指定选择器返回<br>1<br>querySelectorAll返回的是指定选择器的所有元素对象集合</p>
<p>代码示例:</p>
<script>
            var allbox = document.querySelectorAll('.box');
            console.log(allbox);
 </script>
<p>1<br>2<br>3<br>4<br>运行结果：</p>
<p>如果不考虑兼容性的话，推荐使用querySelector和querySelectorAll来获取元素</p>
<p>4.根据特殊元素获取元素<br>如果我们想获取页面中的body 元素，和html元素应该怎么办呢？<br>大家看以下代码：</p>
<script>
            //获取body元素
            var bodyELE = document.body;
            console.log(bodyELE);
            //获取html元素
            var htmlELE = document.documentElement;
            console.log(htmlELE);
 </script>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>运行结果：</p>
<p>那么以下就是获取特殊元素（body,html）的语法：</p>
<p>1.document.body  //返回body元素对象<br>2.document.documentElement  //返回html元素对象</p>
</ol>]]></content>
  </entry>
</search>
