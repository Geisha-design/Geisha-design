<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小红书的惊喜</title>
      <link href="2021/05/04/%E5%B0%8F%E7%BA%A2%E4%B9%A6%E7%9A%84%E6%83%8A%E5%96%9C/"/>
      <url>2021/05/04/%E5%B0%8F%E7%BA%A2%E4%B9%A6%E7%9A%84%E6%83%8A%E5%96%9C/</url>
      
        <content type="html"><![CDATA[<p>被一个有趣的非常能吃的小女孩安利了小红书，在里面看到了我非常喜欢的 梁文道 先生的节目《看理想》，意外之喜吧。</p><p>嘿嘿，这个节目原来搬到这里了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>南京友记-李家馨</title>
      <link href="2021/05/03/%E2%80%9C%E5%8D%97%E4%BA%AC%E5%8F%8B%E8%AE%B0-%E6%9D%8E%E5%AE%B6%E9%A6%A8%E2%80%9D/"/>
      <url>2021/05/03/%E2%80%9C%E5%8D%97%E4%BA%AC%E5%8F%8B%E8%AE%B0-%E6%9D%8E%E5%AE%B6%E9%A6%A8%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p> 这次来到了南京，见到了那个有趣的女生。我还记得最早的印象那应该是个非常高冷的女孩，因为处理好和玩嗨了的朋友们的事宜，我还是迟到了，不得不说五一真就堵得离谱。（再提一嘴，短短一公里我打了两辆车，中间遇到一个可怜的老人，下车给予了些力所能及的帮助，好家伙，一回头打的车溜了。。。害）。当时真害怕女孩子不高兴，我自己本身就很讨厌男孩子不守时。匆匆到了大厦，人家已经把一切都准备好了，惭愧惭愧。当时疲乏感涌上心头，实在没有胃口，但那时她点的饭菜确实好看又精致。因为是同乡，见到还是倍感亲切的，聊了会吧。</p><p> 吃完饭就要出去逛啦，老实说走出去的那瞬间我一下子超级饿，就让她带着我走走吧，她应该比较了解的，只是漫步，就能感觉到南京这个城市独特的韵味。记得她说她的朋友去过南京都说，杭州，狗都不去。 嗯，她是对的。        一路上她都在聊吃吃吃，反正她也看不到，我就直说了，我居然一直觉得她就是个樱桃小嘴的淑女，喝半碗水就会饱的那种，然后她打开小红书给我介绍吃的知识，知道她说自己可以生吃n个汉堡，一瞬间，形象崩塌了。可能这就是美女吧。</p><p> （她小红书给我留下最深刻的印象就是各种吃的，饕餮派美少女就是这样吧）</p><p> 再然后就是经典中的经典，我这个臭直男硬要拉着人家喝咖啡，典中典吧，结果到了，找了一家评分貌似不错的咖啡店，最后把整个金鹰都找遍了也没找到，我怀疑店开到了天上。 好吧，去一楼的咖啡店随便喝点。 对不起，咖啡售罄，行吧行吧，红茶也行。好在小姑娘喜欢甜品，巧的是我也喜欢，吃的算开心，也被教育了很多awesome的吃法，确实，这个女孩子很会吃却还是这么好看，这么瘦，我真的很酸。下辈子我也要做女的。</p><p> 时间差不多了也该回去了，在地铁上她说她很喜欢周杰伦。我快哭了，知己，不必多说，尽在不言中。（能唱出冷门的反钟的可不多）。到了她的学校，周围好多吃的，其实我也很饿，但是我这里故作矜持了啊，下次不会了，后来饿死了😭😭😭。偷偷溜进去她的学校玩了一圈，有点午夜探险的味道，有趣且生动。带着我玩了一圈，确实还是蛮有意思的。</p><p> 之后她回寝室后我因为朋友的和学校的事情很快溜回去了。很高兴可以认识这样有趣可爱的人，（确实很能吃，我没觉得她对吃的叙述有任何夸张）</p><p> 谢谢，李家馨同学为我这次的旅游增添了一丝乐活的色彩。</p><pre><code>                                                                 对南京有趣的人的记录 完。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>南京之旅-中山陵</title>
      <link href="2021/05/01/%E5%8D%97%E4%BA%AC%E4%B9%8B%E6%97%85-episode-1/"/>
      <url>2021/05/01/%E5%8D%97%E4%BA%AC%E4%B9%8B%E6%97%85-episode-1/</url>
      
        <content type="html"><![CDATA[<p>北伐之后，孙文灵柩于南京“奉安”。此时章太炎做一联挽孙：</p><blockquote><p>“洪以甲子灭，公以乙丑殂，六十年间成败异；生当中山称，死傍孝陵葬，一匡天下<strong>古今同</strong>”。</p></blockquote><p>联中称孙文功绩高过洪秀全、而与朱元璋相同（朱洪均为孙文偶像），当为赞美孙之功业。然时人均以为“微言大义”，为何？</p><p>古今未变罢了</p><p>最后我也来到了中山陵。去掉五一特别的交通红利和人口激励，脱离种种困顿和老张漫步在林子中，有一种从压抑已久的环境中一下子突破的快感。在门口我作为外来者一片茫然，只是进入误打误撞罢了，深深在陷在林子中只觉得曲径通幽，满绿连天的碧树，最开始老实说并无感受到历史的底蕴。</p><p>慢慢地向前，一个一个景点浮现在眼前，有一种江南园林浮光掠影的味道，景致都在转角处显现，蓦然回首，那人却在灯火阑珊处，形容景致也并不差。</p><p>接下来就是爬一爬那高塔，很累很高，嗯，有趣。</p><p>我就是这么词穷。好了，看完孙先生的陵园今天的景点考察告一段落。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>“计算机文件系统”</title>
      <link href="2021/04/24/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E2%80%9D/"/>
      <url>2021/04/24/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic2.zhimg.com/v2-8e32ced15780434b197e7bebe24e2671_r.jpg" alt="img"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不多 BB，直接上「硬菜」。</p><p><img src="https://pic1.zhimg.com/v2-9a85e905f1d5d649bbd6b5524d8b2954_r.jpg" alt="img"></p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="文件系统的基本组成"><a href="#文件系统的基本组成" class="headerlink" title="文件系统的基本组成"></a>文件系统的基本组成</h3><p>文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。</p><p>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。</p><p>Linux 最经典的一句话是：「<strong>一切皆文件</strong>」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</p><p>Linux 文件系统会为每个文件分配两个数据结构：<strong>索引节点（*index node*）和目录项（*directory entry*）</strong>，它们主要用来记录文件的元信息和目录层次结构。</p><ul><li>索引节点，也就是 <em>inode</em>，用来记录文件的元信息，比如 inode 编号、文件大小、访问权限、创建时间、修改时间、<strong>数据在磁盘的位置</strong>等等。索引节点是文件的<strong>唯一</strong>标识，它们之间一一对应，也同样都会被存储在硬盘中，所以<strong>索引节点同样占用磁盘空间</strong>。</li><li>目录项，也就是 <em>dentry</em>，用来记录文件的名字、<strong>索引节点指针</strong>以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是，<strong>目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存</strong>。</li></ul><p>由于索引节点唯一标识一个文件，而目录项记录着文件的名，所以目录项和索引节点的关系是多对一，也就是说，一个文件可以有多个别字。比如，硬链接的实现就是多个目录项中的索引节点指向同一个文件。</p><p>注意，目录也是文件，也是用索引节点唯一标识，和普通文件不同的是，普通文件在磁盘里面保存的是文件数据，而目录文件在磁盘里面保存子目录或文件。</p><blockquote><p>目录项和目录是一个东西吗？</p></blockquote><p>虽然名字很相近，但是它们不是一个东西，目录是个文件，持久化存储在磁盘，而目录项是内核一个数据结构，缓存在内存。</p><p>如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经读过的目录用目录项这个数据结构缓存在内存，下次再次读到相同的目录时，只需从内存读就可以，大大提高了文件系统的效率。</p><p>注意，目录项这个数据结构不只是表示目录，也是可以表示文件的。</p><blockquote><p>那文件数据是如何存储在磁盘的呢？</p></blockquote><p>磁盘读写的最小单位是<strong>扇区</strong>，扇区的大小只有 <code>512B</code> 大小，很明显，如果每次读写都以这么小为单位，那这读写的效率会非常低。</p><p>所以，文件系统把多个扇区组成了一个<strong>逻辑块</strong>，每次读写的最小单位就是逻辑块（数据块），Linux 中的逻辑块大小为 <code>4KB</code>，也就是一次性读写 8 个扇区，这将大大提高了磁盘的读写的效率。</p><p>以上就是索引节点、目录项以及文件数据的关系，下面这个图就很好的展示了它们之间的关系：</p><p><img src="https://pic2.zhimg.com/v2-9d77e25913894df26b0374ceae25c605_r.jpg" alt="img"></p><p>索引节点是存储在硬盘上的数据，那么为了加速文件的访问，通常会把索引节点加载到内存中。</p><p>另外，磁盘进行格式化的时候，会被分成三个存储区域，分别是超级块、索引节点区和数据块区。 - <em>超级块</em>，用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等。 - <em>索引节点区</em>，用来存储索引节点； - <em>数据块区</em>，用来存储文件或目录数据；</p><p>我们不可能把超级块和索引节点区全部加载到内存，这样内存肯定撑不住，所以只有当需要使用的时候，才将其加载进内存，它们加载进内存的时机是不同的：</p><ul><li>超级块：当文件系统挂载时进入内存；</li><li>索引节点区：当文件被访问时进入内存；</li></ul><hr><h3 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h3><p>文件系统的种类众多，而操作系统希望<strong>对用户提供一个统一的接口</strong>，于是在用户层与文件系统层引入了中间层，这个中间层就称为<strong>虚拟文件系统（*Virtual File System，VFS*）。</strong></p><p>VFS 定义了一组所有文件系统都支持的数据结构和标准接口，这样程序员不需要了解文件系统的工作原理，只需要了解 VFS 提供的统一接口即可。</p><p>在 Linux 文件系统中，用户空间、系统调用、虚拟机文件系统、缓存、文件系统以及存储之间的关系如下图：</p><p><img src="https://pic3.zhimg.com/v2-b92499b17ed11bc279689ecdb6efb4b6_r.jpg" alt="img"></p><p>Linux 支持的文件系统也不少，根据存储位置的不同，可以把文件系统分为三类：</p><ul><li><em>磁盘的文件系统</em>，它是直接把数据存储在磁盘中，比如 Ext 2/3/4、XFS 等都是这类文件系统。</li><li><em>内存的文件系统</em>，这类文件系统的数据不是存储在硬盘的，而是占用内存空间，我们经常用到的 <code>/proc</code> 和 <code>/sys</code> 文件系统都属于这一类，读写这类文件，实际上是读写内核中相关的数据数据。</li><li><em>网络的文件系统</em>，用来访问其他计算机主机数据的文件系统，比如 NFS、SMB 等等。</li></ul><p>文件系统首先要先挂载到某个目录才可以正常使用，比如 Linux 系统在启动时，会把文件系统挂载到根目录。</p><hr><h3 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h3><p>我们从用户角度来看文件的话，就是我们要怎么使用文件？首先，我们得通过系统调用来打开一个文件。</p><p><img src="https://pic1.zhimg.com/v2-bb6dc369fbf16afbdb088c6c7c26d9cc_r.jpg" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(name, flag); # 打开文件</span><br><span class="line">...</span><br><span class="line">write(fd,...);         # 写数据</span><br><span class="line">...</span><br><span class="line">close(fd);             # 关闭文件</span><br></pre></td></tr></table></figure><p>上面简单的代码是读取一个文件的过程： - 首先用 <code>open</code> 系统调用打开文件，<code>open</code> 的参数中包含文件的路径名和文件名。 - 使用 <code>write</code> 写数据，其中 <code>write</code> 使用 <code>open</code> 所返回的<strong>文件描述符</strong>，并不使用文件名作为参数。 - 使用完文件后，要用 <code>close</code> 系统调用关闭文件，避免资源的泄露。</p><p>我们打开了一个文件后，操作系统会跟踪进程打开的所有文件，所谓的跟踪呢，就是操作系统为每个进程维护一个打开文件表，文件表里的每一项代表「<strong>文件描述符</strong>」，所以说文件描述符是打开文件的标识。</p><p><img src="https://pic3.zhimg.com/80/v2-4d1f24d7102933f32a560a1cbdfce6da_1440w.jpg" alt="img"></p><p>操作系统在打开文件表中维护着打开文件的状态和信息： - 文件指针：系统跟踪上次读写位置作为当前文件位置指针，这种指针对打开文件的某个进程来说是唯一的； - 文件打开计数器：文件关闭时，操作系统必须重用其打开文件表条目，否则表内空间不够用。因为多个进程可能打开同一个文件，所以系统在删除打开文件条目之前，必须等待最后一个进程关闭文件，该计数器跟踪打开和关闭的数量，当该计数为 0 时，系统关闭文件，删除该条目； - 文件磁盘位置：绝大多数文件操作都要求系统修改文件数据，该信息保存在内存中，以免每个操作都从磁盘中读取； - 访问权限：每个进程打开文件都需要有一个访问模式（创建、只读、读写、添加等），该信息保存在进程的打开文件表中，以便操作系统能允许或拒绝之后的 I/O 请求；</p><p>在用户视角里，文件就是一个持久化的数据结构，但操作系统并不会关心你想存在磁盘上的任何的数据结构，操作系统的视角是如何把文件数据和磁盘块对应起来。</p><p>所以，用户和操作系统对文件的读写操作是有差异的，用户习惯以字节的方式读写文件，而操作系统则是以数据块来读写文件，那屏蔽掉这种差异的工作就是文件系统了。</p><p>我们来分别看一下，读文件和写文件的过程：</p><ul><li>当用户进程从文件读取 1 个字节大小的数据时，文件系统则需要获取字节所在的数据块，再返回数据块对应的用户进程所需的数据部分。</li><li>当用户进程把 1 个字节大小的数据写进文件时，文件系统则找到需要写入数据的数据块的位置，然后修改数据块中对应的部分，最后再把数据块写回磁盘。</li></ul><p>所以说，<strong>文件系统的基本操作单位是数据块</strong>。</p><hr><h3 id="文件的存储"><a href="#文件的存储" class="headerlink" title="文件的存储"></a>文件的存储</h3><p>文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种：</p><ul><li>连续空间存放方式</li><li>非连续空间存放方式</li></ul><p>其中，非连续空间存放方式又可以分为「链表方式」和「索引方式」。</p><p>不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。</p><h3 id="连续空间存放方式"><a href="#连续空间存放方式" class="headerlink" title="连续空间存放方式"></a>连续空间存放方式</h3><p>连续空间存放方式顾名思义，<strong>文件存放在磁盘「连续的」物理空间中</strong>。这种模式下，文件的数据都是紧密相连，<strong>读写效率很高</strong>，因为一次磁盘寻道就可以读出整个文件。</p><p>使用连续存放的方式有一个前提，必须先知道一个文件的大小，这样文件系统才会根据文件的大小在磁盘上找到一块连续的空间分配给文件。</p><p>所以，<strong>文件头里需要指定「起始块的位置」和「长度」</strong>，有了这两个信息就可以很好的表示文件存放方式是一块连续的磁盘空间。</p><p>注意，此处说的文件头，就类似于 Linux 的 inode。</p><p><img src="https://pic4.zhimg.com/v2-7fc9cbf9c253d0ee84af8f61c605d50f_r.jpg" alt="img"></p><p>连续空间存放的方式虽然读写效率高，<strong>但是有「磁盘空间碎片」和「文件长度不易扩展」的缺陷。</strong></p><p>如下图，如果文件 B 被删除，磁盘上就留下一块空缺，这时，如果新来的文件小于其中的一个空缺，我们就可以将其放在相应空缺里。但如果该文件的大小大于所有的空缺，但却小于空缺大小之和，则虽然磁盘上有足够的空缺，但该文件还是不能存放。当然了，我们可以通过将现有文件进行挪动来腾出空间以容纳新的文件，但是这个在磁盘挪动文件是非常耗时，所以这种方式不太现实。</p><p><img src="https://pic1.zhimg.com/v2-5e0b69486a4e42554941c93a44d538e0_r.jpg" alt="img"></p><p>另外一个缺陷是文件长度扩展不方便，例如上图中的文件 A 要想扩大一下，需要更多的磁盘空间，唯一的办法就只能是挪动的方式，前面也说了，这种方式效率是非常低的。</p><p>那么有没有更好的方式来解决上面的问题呢？答案当然有，既然连续空间存放的方式不太行，那么我们就改变存放的方式，使用非连续空间存放方式来解决这些缺陷。</p><h3 id="非连续空间存放方式"><a href="#非连续空间存放方式" class="headerlink" title="非连续空间存放方式"></a>非连续空间存放方式</h3><p>非连续空间存放方式分为「链表方式」和「索引方式」。</p><blockquote><p>我们先来看看链表的方式。</p></blockquote><p>链表的方式存放是<strong>离散的，不用连续的</strong>，于是就可以<strong>消除磁盘碎片</strong>，可大大提高磁盘空间的利用率，同时<strong>文件的长度可以动态扩展</strong>。根据实现的方式的不同，链表可分为「<strong>隐式链表</strong>」和「<strong>显式链接</strong>」两种形式。</p><p>文件要以「<strong>隐式链表</strong>」的方式存放的话，<strong>实现的方式是文件头要包含「第一块」和「最后一块」的位置，并且每个数据块里面留出一个指针空间，用来存放下一个数据块的位置</strong>，这样一个数据块连着一个数据块，从链头开是就可以顺着指针找到所有的数据块，所以存放的方式可以是不连续的。</p><p><img src="https://pic2.zhimg.com/v2-b3d581a3d561f3386a497d5622180c81_r.jpg" alt="img"></p><p>隐式链表的存放方式的<strong>缺点在于无法直接访问数据块，只能通过指针顺序访问文件，以及数据块指针消耗了一定的存储空间</strong>。隐式链接分配的<strong>稳定性较差</strong>，系统在运行过程中由于软件或者硬件错误<strong>导致链表中的指针丢失或损坏，会导致文件数据的丢失。</strong></p><p>如果取出每个磁盘块的指针，把它放在内存的一个表中，就可以解决上述隐式链表的两个不足。那么，这种实现方式是「<strong>显式链接</strong>」，它指<strong>把用于链接文件各数据块的指针，显式地存放在内存的一张链接表中</strong>，该表在整个磁盘仅设置一张，<strong>每个表项中存放链接指针，指向下一个数据块号</strong>。</p><p>对于显式链接的工作方式，我们举个例子，文件 A 依次使用了磁盘块 4、7、2、10 和 12 ，文件 B 依次使用了磁盘块 6、3、11 和 14 。利用下图中的表，可以从第 4 块开始，顺着链走到最后，找到文件 A 的全部磁盘块。同样，从第 6 块开始，顺着链走到最后，也能够找出文件 B 的全部磁盘块。最后，这两个链都以一个不属于有效磁盘编号的特殊标记（如 -1 ）结束。内存中的这样一个表格称为<strong>文件分配表（*File Allocation Table，FAT*）</strong>。</p><p><img src="https://pic3.zhimg.com/v2-848b55299135f1775cb9fa5e6f9f9272_r.jpg" alt="img"></p><p>由于查找记录的过程是在内存中进行的，因而不仅显著地<strong>提高了检索速度</strong>，而且<strong>大大减少了访问磁盘的次数</strong>。但也正是整个表都存放在内存中的关系，它的主要的缺点是<strong>不适用于大磁盘</strong>。</p><p>比如，对于 200GB 的磁盘和 1KB 大小的块，这张表需要有 2 亿项，每一项对应于这 2 亿个磁盘块中的一个块，每项如果需要 4 个字节，那这张表要占用 800MB 内存，很显然 FAT 方案对于大磁盘而言不太合适。</p><blockquote><p>接下来，我们来看看索引的方式。</p></blockquote><p>链表的方式解决了连续分配的磁盘碎片和文件动态扩展的问题，但是不能有效支持直接访问（FAT除外），索引的方式可以解决这个问题。</p><p>索引的实现是为每个文件创建一个「<strong>索引数据块</strong>」，里面存放的是<strong>指向文件数据块的指针列表</strong>，说白了就像书的目录一样，要找哪个章节的内容，看目录查就可以。</p><p>另外，<strong>文件头需要包含指向「索引数据块」的指针</strong>，这样就可以通过文件头知道索引数据块的位置，再通过索引数据块里的索引信息找到对应的数据块。</p><p>创建文件时，索引块的所有指针都设为空。当首次写入第 i 块时，先从空闲空间中取得一个块，再将其地址写到索引块的第 i 个条目。</p><p><img src="https://pic3.zhimg.com/v2-1e6d2ef6d8782117779143843798b79e_r.jpg" alt="img"></p><p>索引的方式优点在于： - 文件的创建、增大、缩小很方便； - 不会有碎片的问题； - 支持顺序读写和随机读写；</p><p>由于索引数据也是存放在磁盘块的，如果文件很小，明明只需一块就可以存放的下，但还是需要额外分配一块来存放索引数据，所以缺陷之一就是存储索引带来的开销。</p><p>如果文件很大，大到一个索引数据块放不下索引信息，这时又要如何处理大文件的存放呢？我们可以通过组合的方式，来处理大文件的存。</p><p>先来看看链表 + 索引的组合，这种组合称为「<strong>链式索引块</strong>」，它的实现方式是<strong>在索引数据块留出一个存放下一个索引数据块的指针</strong>，于是当一个索引数据块的索引信息用完了，就可以通过指针的方式，找到下一个索引数据块的信息。那这种方式也会出现前面提到的链表方式的问题，万一某个指针损坏了，后面的数据也就会无法读取了。</p><p><img src="https://pic3.zhimg.com/v2-ede534663e1c19169eb40cbe01384da2_r.jpg" alt="img"></p><p>还有另外一种组合方式是索引 + 索引的方式，这种组合称为「<strong>多级索引块</strong>」，实现方式是<strong>通过一个索引块来存放多个索引数据块</strong>，一层套一层索引，像极了俄罗斯套娃是吧。</p><p><img src="https://pic1.zhimg.com/v2-fb7d558d7b1d2d48fa4544adbead57bc_r.jpg" alt="img"></p><h3 id="Unix-文件的实现方式"><a href="#Unix-文件的实现方式" class="headerlink" title="Unix 文件的实现方式"></a>Unix 文件的实现方式</h3><p>我们先把前面提到的文件实现方式，做个比较：</p><p><img src="https://pic4.zhimg.com/v2-e01c7af752461c0794a10f383dbe465b_r.jpg" alt="img"></p><p>那早期 Unix 文件系统是组合了前面的文件存放方式的优点，如下图：</p><p><img src="https://pic4.zhimg.com/v2-0c16919bcad17d1391f162e0363229b7_r.jpg" alt="img"></p><p>它是根据文件的大小，存放的方式会有所变化：</p><ul><li>如果存放文件所需的数据块小于 10 块，则采用直接查找的方式；</li><li>如果存放文件所需的数据块超过 10 块，则采用一级间接索引方式；</li><li>如果前面两种方式都不够存放大文件，则采用二级间接索引方式；</li><li>如果二级间接索引也不够存放大文件，这采用三级间接索引方式；</li></ul><p>那么，文件头（<em>Inode</em>）就需要包含 13 个指针： - 10 个指向数据块的指针； - 第 11 个指向索引块的指针； - 第 12 个指向二级索引块的指针； - 第 13 个指向三级索引块的指针；</p><p>所以，这种方式能很灵活地支持小文件和大文件的存放： - 对于小文件使用直接查找的方式可减少索引数据块的开销； - 对于大文件则以多级索引的方式来支持，所以大文件在访问数据块时需要大量查询；</p><p>这个方案就用在了 Linux Ext 2/3 文件系统里，虽然解决大文件的存储，但是对于大文件的访问，需要大量的查询，效率比较低。</p><p>为了解决这个问题，Ext 4 做了一定的改变，具体怎么解决的，本文就不展开了。</p><hr><h3 id="空闲空间管理"><a href="#空闲空间管理" class="headerlink" title="空闲空间管理"></a>空闲空间管理</h3><p>前面说到的文件的存储是针对已经被占用的数据块组织和管理，接下来的问题是，如果我要保存一个数据块，我应该放在硬盘上的哪个位置呢？难道需要将所有的块扫描一遍，找个空的地方随便放吗？</p><p>那这种方式效率就太低了，所以针对磁盘的空闲空间也是要引入管理的机制，接下来介绍几种常见的方法：</p><ul><li>空闲表法</li><li>空闲链表法</li><li>位图法</li></ul><h3 id="空闲表法"><a href="#空闲表法" class="headerlink" title="空闲表法"></a>空闲表法</h3><p>空闲表法就是为所有空闲空间建立一张表，表内容包括空闲区的第一个块号和该空闲区的块个数，注意，这个方式是连续分配的。如下图：</p><p><img src="https://pic3.zhimg.com/v2-1ec1e7e0b313a92e0028691ae97c9766_r.jpg" alt="img"></p><p>当请求分配磁盘空间时，系统依次扫描空闲表里的内容，直到找到一个合适的空闲区域为止。当用户撤销一个文件时，系统回收文件空间。这时，也需顺序扫描空闲表，寻找一个空闲表条目并将释放空间的第一个物理块号及它占用的块数填到这个条目中。</p><p>这种方法仅当有少量的空闲区时才有较好的效果。因为，如果存储空间中有着大量的小的空闲区，则空闲表变得很大，这样查询效率会很低。另外，这种分配技术适用于建立连续文件。</p><h3 id="空闲链表法"><a href="#空闲链表法" class="headerlink" title="空闲链表法"></a>空闲链表法</h3><p>我们也可以使用「链表」的方式来管理空闲空间，每一个空闲块里有一个指针指向下一个空闲块，这样也能很方便的找到空闲块并管理起来。如下图：</p><p><img src="https://pic3.zhimg.com/v2-a14c65a4ec2fbb470fba728b818a6d22_r.jpg" alt="img"></p><p>当创建文件需要一块或几块时，就从链头上依次取下一块或几块。反之，当回收空间时，把这些空闲块依次接到链头上。</p><p>这种技术只要在主存中保存一个指针，令它指向第一个空闲块。其特点是简单，但不能随机访问，工作效率低，因为每当在链上增加或移动空闲块时需要做很多 I/O 操作，同时数据块的指针消耗了一定的存储空间。</p><p>空闲表法和空闲链表法都不适合用于大型文件系统，因为这会使空闲表或空闲链表太大。</p><h3 id="位图法"><a href="#位图法" class="headerlink" title="位图法"></a>位图法</h3><p>位图是利用二进制的一位来表示磁盘中一个盘块的使用情况，磁盘上所有的盘块都有一个二进制位与之对应。</p><p>当值为 0 时，表示对应的盘块空闲，值为 1 时，表示对应的盘块已分配。它形式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1111110011111110001110110111111100111 ...</span><br></pre></td></tr></table></figure><p>在 Linux 文件系统就采用了位图的方式来管理空闲空间，不仅用于数据空闲块的管理，还用于 inode 空闲块的管理，因为 inode 也是存储在磁盘的，自然也要有对其管理。</p><hr><h3 id="文件系统的结构"><a href="#文件系统的结构" class="headerlink" title="文件系统的结构"></a>文件系统的结构</h3><p>前面提到 Linux 是用位图的方式管理空闲空间，用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配。要存储数据时，会通过块的位图找到空闲的块，并分配，但仔细计算一下还是有问题的。</p><p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块 4K，每位表示一个数据块，共可以表示 <code>4 * 1024 * 8 = 2^15</code> 个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为 <code>2^15 * 4 * 1024 = 2^27</code> 个 byte，也就是 128M。</p><p>也就是说按照上面的结构，如果采用「一个块的位图 + 一系列的块」，外加「一个块的 inode 的位图 + 一系列的 inode 的结构」能表示的最大空间也就 128M，这太少了，现在很多文件都比这个大。</p><p>在 Linux 文件系统，把这个结构称为一个<strong>块组</strong>，那么有 N 多的块组，就能够表示 N 大的文件。</p><p>下图给出了 Linux Ext2 整个文件系统的结构和块组的内容，文件系统都由大量块组组成，在硬盘上相继排布：</p><p><img src="https://pic2.zhimg.com/v2-d9e36f97b24b2a7f760a81d0b095c36d_r.jpg" alt="img"></p><p>最前面的第一个块是引导块，在系统启动时用于启用引导，接着后面就是一个一个连续的块组了，块组的内容如下： - <em>超级块</em>，包含的是文件系统的重要信息，比如 inode 总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等。 - <em>块组描述符</em>，包含文件系统中各个块组的状态，比如块组中空闲块和 inode 的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」。 - <em>数据位图和 inode 位图</em>， 用于表示对应的数据块或 inode 是空闲的，还是被使用中。 - <em>inode 列表</em>，包含了块组中所有的 inode，inode 用于保存文件系统中与各个文件和目录相关的所有元数据。 - <em>数据块</em>，包含文件的有用数据。</p><p>你可以会发现每个块组里有很多重复的信息，比如<strong>超级块和块组描述符表，这两个都是全局信息，而且非常的重要</strong>，这么做是有两个原因： - 如果系统崩溃破坏了超级块或块组描述符，有关文件系统结构和内容的所有信息都会丢失。如果有冗余的副本，该信息是可能恢复的。 - 通过使文件和管理数据尽可能接近，减少了磁头寻道和旋转，这可以提高文件系统的性能。</p><p>不过，Ext2 的后续版本采用了稀疏技术。该做法是，超级块和块组描述符表不再存储到文件系统的每个块组中，而是只写入到块组 0、块组 1 和其他 ID 可以表示为 3、 5、7 的幂的块组中。</p><hr><h3 id="目录的存储"><a href="#目录的存储" class="headerlink" title="目录的存储"></a>目录的存储</h3><p>在前面，我们知道了一个普通文件是如何存储的，但还有一个特殊的文件，经常用到的目录，它是如何保存的呢？</p><p>基于 Linux 一切皆文件的设计思想，目录其实也是个文件，你甚至可以通过 <code>vim</code> 打开它，它也有 inode，inode 里面也是指向一些块。</p><p>和普通文件不同的是，<strong>普通文件的块里面保存的是文件数据，而目录文件的块里面保存的是目录里面一项一项的文件信息。</strong></p><p>在目录文件的块中，最简单的保存格式就是<strong>列表</strong>，就是一项一项地将目录下的文件信息（如文件名、文件 inode、文件类型等）列在表里。</p><p>列表中每一项就代表该目录下的文件的文件名和对应的 inode，通过这个 inode，就可以找到真正的文件。</p><p><img src="https://pic1.zhimg.com/v2-89f1e2f2d2a2cb232920d2df16a5f3f4_r.jpg" alt="img"></p><p>通常，第一项是「<code>.</code>」，表示当前目录，第二项是「<code>..</code>」，表示上一级目录，接下来就是一项一项的文件名和 inode。</p><p>如果一个目录有超级多的文件，我们要想在这个目录下找文件，按照列表一项一项的找，效率就不高了。</p><p>于是，保存目录的格式改成<strong>哈希表</strong>，对文件名进行哈希计算，把哈希值保存起来，如果我们要查找一个目录下面的文件名，可以通过名称取哈希。如果哈希能够匹配上，就说明这个文件的信息在相应的块里面。</p><p>Linux 系统的 ext 文件系统就是采用了哈希表，来保存目录的内容，这种方法的优点是查找非常迅速，插入和删除也较简单，不过需要一些预备措施来避免哈希冲突。</p><p>目录查询是通过在磁盘上反复搜索完成，需要不断地进行 I/O 操作，开销较大。所以，为了减少 I/O 操作，把当前使用的文件目录缓存在内存，以后要使用该文件时只要在内存中操作，从而降低了磁盘操作次数，提高了文件系统的访问速度。</p><hr><h3 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h3><p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过<strong>硬链接（*Hard Link*）</strong> 和<strong>软链接（*Symbolic Link*）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p><p>硬链接是<strong>多个目录项中的「索引节点」指向一个文件</strong>，也就是指向同一个 inode，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以<strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个 inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p><p><img src="https://pic4.zhimg.com/v2-7cf8cec396a66dca2dd1fcd6dadab537_r.jpg" alt="img"></p><p>软链接相当于重新创建一个文件，这个文件有<strong>独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的</strong>，甚至<strong>目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p><p><img src="https://pic3.zhimg.com/v2-5606413e1b5d2c727399711d347617a2_r.jpg" alt="img"></p><hr><h3 id="文件-I-O"><a href="#文件-I-O" class="headerlink" title="文件 I/O"></a>文件 I/O</h3><p>文件的读写方式各有千秋，对于文件的 I/O 分类也非常多，常见的有</p><ul><li>缓冲与非缓冲 I/O</li><li>直接与非直接 I/O</li><li>阻塞与非阻塞 I/O VS 同步与异步 I/O</li></ul><p>接下来，分别对这些分类讨论讨论。</p><h3 id="缓冲与非缓冲-I-O"><a href="#缓冲与非缓冲-I-O" class="headerlink" title="缓冲与非缓冲 I/O"></a>缓冲与非缓冲 I/O</h3><p>文件操作的标准库是可以实现数据的缓存，那么<strong>根据「是否利用标准库缓冲」，可以把文件 I/O 分为缓冲 I/O 和非缓冲 I/O</strong>： - 缓冲 I/O，利用的是标准库的缓存实现文件的加速访问，而标准库再通过系统调用访问文件。 - 非缓冲 I/O，直接通过系统调用访问文件，不经过标准库缓存。</p><p>这里所说的「缓冲」特指标准库内部实现的缓冲。</p><p>比方说，很多程序遇到换行时才真正输出，而换行前的内容，其实就是被标准库暂时缓存了起来，这样做的目的是，减少系统调用的次数，毕竟系统调用是有 CPU 上下文切换的开销的。</p><h3 id="直接与非直接-I-O"><a href="#直接与非直接-I-O" class="headerlink" title="直接与非直接 I/O"></a>直接与非直接 I/O</h3><p>我们都知道磁盘 I/O 是非常慢的，所以 Linux 内核为了减少磁盘 I/O 次数，在系统调用后，会把用户数据拷贝到内核中缓存起来，这个内核缓存空间也就是「页缓存」，只有当缓存满足某些条件的时候，才发起磁盘 I/O 的请求。</p><p>那么，<strong>根据是「否利用操作系统的缓存」，可以把文件 I/O 分为直接 I/O 与非直接 I/O</strong>：</p><ul><li>直接 I/O，不会发生内核缓存和用户程序之间数据复制，而是直接经过文件系统访问磁盘。</li><li>非直接 I/O，读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘。</li></ul><p>如果你在使用文件操作类的系统调用函数时，指定了 <code>O_DIRECT</code> 标志，则表示使用直接 I/O。如果没有设置过，默认使用的是非直接 I/O。</p><blockquote><p>如果用了非直接 I/O 进行写数据操作，内核什么情况下才会把缓存数据写入到磁盘？</p></blockquote><p>以下几种场景会触发内核缓存的数据写入磁盘： - 在调用 <code>write</code> 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上； - 用户主动调用 <code>sync</code>，内核缓存会刷到磁盘上； - 当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上； - 内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；</p><h3 id="阻塞与非阻塞-I-O-VS-同步与异步-I-O"><a href="#阻塞与非阻塞-I-O-VS-同步与异步-I-O" class="headerlink" title="阻塞与非阻塞 I/O VS 同步与异步 I/O"></a>阻塞与非阻塞 I/O VS 同步与异步 I/O</h3><p>为什么把阻塞 / 非阻塞与同步与异步放一起说的呢？因为它们确实非常相似，也非常容易混淆，不过它们之间的关系还是有点微妙的。</p><p>先来看看<strong>阻塞 I/O</strong>，当用户程序执行 <code>read</code> ，线程会被阻塞，一直等到内核数据准备好，并把数据从内核缓冲区拷贝到应用程序的缓冲区中，当拷贝过程完成，<code>read</code> 才会返回。</p><p>注意，<strong>阻塞等待的是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程</strong>。过程如下图：</p><p><img src="https://pic2.zhimg.com/v2-7f73fdcaca316aa0f12d77b6873785e5_r.jpg" alt="img"></p><p>知道了阻塞 I/O ，来看看<strong>非阻塞 I/O</strong>，非阻塞的 read 请求在数据未准备好的情况下立即返回，可以继续往下执行，此时应用程序不断轮询内核，直到数据准备好，内核将数据拷贝到应用程序缓冲区，<code>read</code> 调用才可以获取到结果。过程如下图：</p><p><img src="https://pic2.zhimg.com/v2-51e052e2beecef41da3aed3ebc2b80bd_r.jpg" alt="img"></p><p>注意，<strong>这里最后一次 read 调用，获取数据的过程，是一个同步的过程，是需要等待的过程。这里的同步指的是内核态的数据拷贝到用户程序的缓存区这个过程。</strong></p><p>举个例子，访问管道或 socket 时，如果设置了 <code>O_NONBLOCK</code> 标志，那么就表示使用的是非阻塞 I/O 的方式访问，而不做任何设置的话，默认是阻塞 I/O。</p><p>应用程序每次轮询内核的 I/O 是否准备好，感觉有点傻乎乎，因为轮询的过程中，应用程序啥也做不了，只是在循环。</p><p>为了解决这种傻乎乎轮询方式，于是 <strong>I/O 多路复用</strong>技术就出来了，如 select、poll，它是通过 I/O 事件分发，当内核数据准备好时，再以事件通知应用程序进行操作。</p><p>这个做法大大改善了应用进程对 CPU 的利用率，在没有被通知的情况下，应用进程可以使用 CPU 做其他的事情。</p><p>下图是使用 select I/O 多路复用过程。注意，<code>read</code> 获取数据的过程（数据从内核态拷贝到用户态的过程），也是一个<strong>同步的过程</strong>，需要等待：</p><p><img src="https://pic4.zhimg.com/v2-02cfbd8572026087fc9b8e946b4d98bf_r.jpg" alt="img"></p><p>实际上，无论是阻塞 I/O、非阻塞 I/O，还是基于非阻塞 I/O 的多路复用<strong>都是同步调用。因为它们在 read 调用时，内核将数据从内核空间拷贝到应用程序空间，过程都是需要等待的，也就是说这个过程是同步的，如果内核实现的拷贝效率不高，read 调用就会在这个同步过程中等待比较长的时间。</strong></p><p>而真正的<strong>异步 I/O</strong> 是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程都不用等待。</p><p>当我们发起 <code>aio_read</code> 之后，就立即返回，内核自动将数据从内核空间拷贝到应用程序空间，这个拷贝过程同样是异步的，内核自动完成的，和前面的同步操作不一样，应用程序并不需要主动发起拷贝动作。过程如下图：</p><p><img src="https://pic4.zhimg.com/v2-b01988dd44a5edbe596a280d1c266033_r.jpg" alt="img"></p><p>下面这张图，总结了以上几种 I/O 模型：</p><p><img src="https://pic1.zhimg.com/v2-1e7c3779cdf820da751a4fb1c84a602c_r.jpg" alt="img"></p><p>在前面我们知道了，I/O 是分为两个过程的： 1. 数据准备的过程 2. 数据从内核空间拷贝到用户进程缓冲区的过程</p><p>阻塞 I/O 会阻塞在「过程 1 」和「过程 2」，而非阻塞 I/O 和基于非阻塞 I/O 的多路复用只会阻塞在「过程 2」，所以这三个都可以认为是同步 I/O。</p><p>异步 I/O 则不同，「过程 1 」和「过程 2 」都不会阻塞。</p><blockquote><p>用故事去理解这几种 I/O 模型</p></blockquote><p>举个你去饭堂吃饭的例子，你好比用户程序，饭堂好比操作系统。</p><p>阻塞 I/O 好比，你去饭堂吃饭，但是饭堂的菜还没做好，然后你就一直在那里等啊等，等了好长一段时间终于等到饭堂阿姨把菜端了出来（数据准备的过程），但是你还得继续等阿姨把菜（内核空间）打到你的饭盒里（用户空间），经历完这两个过程，你才可以离开。</p><p>非阻塞 I/O 好比，你去了饭堂，问阿姨菜做好了没有，阿姨告诉你没，你就离开了，过几十分钟，你又来饭堂问阿姨，阿姨说做好了，于是阿姨帮你把菜打到你的饭盒里，这个过程你是得等待的。</p><p>基于非阻塞的 I/O 多路复用好比，你去饭堂吃饭，发现有一排窗口，饭堂阿姨告诉你这些窗口都还没做好菜，等做好了再通知你，于是等啊等（<code>select</code> 调用中），过了一会阿姨通知你菜做好了，但是不知道哪个窗口的菜做好了，你自己看吧。于是你只能一个一个窗口去确认，后面发现 5 号窗口菜做好了，于是你让 5 号窗口的阿姨帮你打菜到饭盒里，这个打菜的过程你是要等待的，虽然时间不长。打完菜后，你自然就可以离开了。</p><p>异步 I/O 好比，你让饭堂阿姨将菜做好并把菜打到饭盒里后，把饭盒送到你面前，整个过程你都不需要任何等待。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数第二章总结</title>
      <link href="2021/04/24/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/24/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数总结-第二章-矩阵-第二节-矩阵的分块（注意行列式与矩阵区别）"><a href="#线性代数总结-第二章-矩阵-第二节-矩阵的分块（注意行列式与矩阵区别）" class="headerlink" title="线性代数总结 第二章 矩阵 第二节 矩阵的分块（注意行列式与矩阵区别）"></a>线性代数总结 第二章 矩阵 第二节 矩阵的分块（注意行列式与矩阵区别）</h1><p>1、<strong>子块：</strong>将矩阵A用<strong>若干条水平线</strong>和<strong>垂直线</strong>划分成一些<strong>小矩阵</strong>，每一个小矩阵称为<strong>矩阵A</strong>的一个子块。</p><p>2、<strong>分块矩阵：以子块为元素</strong>的矩阵称为分块矩阵。</p><p>设 <img src="https://www.zhihu.com/equation?tex=A=(a_%7Bij%7D)_%7Bmn%7D" alt="[公式]"> ，且 <img src="https://www.zhihu.com/equation?tex=m%E8%A1%8C=m_%7B1%7D+m_%7B2%7D+...m_%7Br%7D%EF%BC%8Cn%E5%88%97=n_%7B1%7D+n_%7B2%7D+...n_%7Bs%7D" alt="[公式]"></p><p>则可把A分块如下：</p><p><img src="https://pic3.zhimg.com/v2-9f47f761273c8e8b91db488d9672ddc6_r.jpg" alt="img"></p><p>3、<strong>准对角矩阵：</strong>分成的s与r相等，并且当 <img src="https://www.zhihu.com/equation?tex=r%E2%89%A0s" alt="[公式]"> 时， <img src="https://www.zhihu.com/equation?tex=A_%7Brs%7D=0" alt="[公式]"> 则称A为准对角矩阵。</p><p><img src="https://pic4.zhimg.com/80/v2-473a5c6915be29a652270f0116b6256b_1440w.jpg" alt="img"></p><p>4、<strong>分块矩阵</strong>也可以按<strong>普通矩阵</strong>的<strong>运算方法运算</strong>。前提是: <strong>所有(小)矩阵之间的运算有意义.</strong></p><p>5、<strong>分块矩阵的转置：</strong>先转置<strong>分块矩阵</strong>，再转置每个<strong>小分块</strong>。</p><p><img src="https://pic4.zhimg.com/80/v2-d2bfed139ce5a2315d18db55bd341f1b_1440w.jpg" alt="img"></p><p>6、方阵的A行列式：设 <img src="https://www.zhihu.com/equation?tex=A=(a_%7Bij%7D)_%7Bnn%7D" alt="[公式]"> 是一个n阶方阵，则称下列行列式为方阵A的行列式。记为 <img src="https://www.zhihu.com/equation?tex=%7CA%7C%E6%88%96%E8%80%85det(A)" alt="[公式]"></p><p><img src="https://pic1.zhimg.com/80/v2-738bee96b30d50ff565b70d421031404_1440w.jpg" alt="img"></p><p>注意注意！！：<strong>区分一下矩阵和行列式！！！</strong></p><p>（1）<strong>n阶方阵</strong>是一个<strong>“数表”</strong>，而<strong>行列式</strong>是按<strong>一定规则所确定的数。</strong></p><p>（2）<strong>只有方阵</strong>可以有行列式。若矩阵的<strong>行数≠列数</strong>，矩阵<strong>不能取行列式</strong>。</p><p>7、n阶方阵A的性质：</p><p>（1） <img src="https://www.zhihu.com/equation?tex=%7CA%5E%7BT%7D%7C=%7CA%7C" alt="[公式]"> （这个用行列式计算公式容易证明）</p><p>（2） <img src="https://www.zhihu.com/equation?tex=%7CkA%7C=k%5E%7Bn%7D%7CA%7C" alt="[公式]"> ，k是一个数（<strong>注意提取来k有n次方</strong>）</p><p>8、<strong>还有一个定理（这个太特么神奇了）：</strong>矩阵<strong>乘积的行列式</strong>等于<strong>行列式的乘积</strong>，即如果A，B是两个同阶的方阵，那么 <img src="https://www.zhihu.com/equation?tex=%7CAB%7C=%7CA%7C%7CB%7C" alt="[公式]"> 。</p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020考研计算机（408）考试大纲</title>
      <link href="2021/04/23/2020%E8%80%83%E7%A0%94%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%88408%EF%BC%89%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/"/>
      <url>2021/04/23/2020%E8%80%83%E7%A0%94%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%88408%EF%BC%89%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p>I 考试性质</p><p>计算机学科专业基础综合考试是为高等院校和科研院所招收计算机科学与技术学科的硕士研究生而设置的具有选拔性质的联考科目，其目的是科学、公平、有效地测试考生掌握计算机科学与技术学科大学本科阶段专业知识、基本理论、基本方法的水平和分析问题、解决问题的能力，评价的标准是高等院校计算机科学与技术学科优秀本科毕业生所能达到的及格或及格以上水平，以利于各高等院校和科研院所择优选拔，确保硕士研究生的招生质量。</p><p>II 考查目标</p><p>计算机学科专业基础综合考试涵盖数据结构、计算机组成原理、操作系统和计算机网络等学科专业基础课程。要求考生比较系统地掌握上述专业基础课程的基本概念、基本原理和基本方法，能够综合运用所学的基本原理和基本方法分析、判断和解决有关理论问题和实际问题。</p><p>III 考试形式和试卷结构</p><p>一、试卷满分及考试时间</p><p>本试卷满分为150分，考试时间为180分钟。</p><p>二、答题方式</p><p>答题方式为闭卷、笔试。</p><p>三、试卷内容结构</p><p>数据结构 45分</p><p>计算机组成原理 45分</p><p>操作系统 35分</p><p>计算机网络 25分</p><p>四、试卷题型结构</p><p>单项选择题 80分 (40小题，每小题2分)</p><p>综合应用题 70分</p><p>IV 考查内容</p><p>数据结构</p><p>【考查目标】</p><p>1.掌握数据结构的基本概念、基本原理和基本方法。</p><p>2.掌握数据的逻辑结构、存储结构及基本操作的实现，能够对算法进行基本的时间复杂度与空间复杂度的分析。</p><p>3.能够运用数据结构基本原理和方法进行问题的分析与求解，具备采用C或C++语言设计与实现算法的能力。</p><p>一、线性表</p><p>(一)线性表的定义和基本操作</p><p>(二)线性表的实现</p><p>1.顺序存储</p><p>2.链式存储</p><p>3.线性表的应用</p><p>二、栈、队列和数组</p><p>(一)栈和队列的基本概念</p><p>(二)栈和队列的顺序存储结构</p><p>(三)栈和队列的链式存储结构</p><p>(四)栈和队列的应用</p><p>(五)特殊矩阵的压缩存储</p><p>三、树与二叉树</p><p>(一)树的基本概念</p><p>(二)二叉树</p><p>1.二叉树的定义及其主要特征</p><p>2.二叉树的顺序存储结构和链式存储结构</p><p>3.二叉树的遍历</p><p>4.线索二叉树的基本概念和构造</p><p>(三)树、森林</p><p>1.树的存储结构</p><p>2.森林与二叉树的转换</p><p>3.树和森林的遍历</p><p>(四)树与二叉树的应用</p><p>1.二叉排序树</p><p>2.平衡二叉树</p><p>3.哈夫曼(Huffman)树和哈夫曼编码</p><p>四、图</p><p>(一)图的基本概念</p><p>(二)图的存储及基本操作</p><p>1.邻接矩阵法</p><p>2.邻接表法</p><p>3.邻接多重表、十字链表</p><p>(三)图的遍历</p><p>1.深度优先搜索</p><p>2.广度优先搜索</p><p>(四)图的基本应用</p><p>1.最小(代价)生成树</p><p>2.最短路径</p><p>3.拓扑排序</p><p>4.关键路径</p><p>五、查找</p><p>(一)查找的基本概念</p><p>(二)顺序查找法</p><p>(三)分块查找法</p><p>(四)折半查找法</p><p>(五)B树及其基本操作、B+树的基本概念</p><p>(六)散列(Hash)表</p><p>(七)字符串模式匹配</p><p>(八)查找算法的分析及应用</p><p>六、排序</p><p>(一)排序的基本概念</p><p>(二)插入排序</p><p>1.直接插入排序</p><p>2.折半插入排序</p><p>(三)气泡排序(bubble sort)</p><p>(四)简单选择排序</p><p>(五)希尔排序(shell sort)</p><p>(六)快速排序</p><p>(七)堆排序</p><p>(八)二路归并排序(merge sort)</p><p>(九)基数排序</p><p>(十)外部排序</p><p>(十一)各种内部排序算法的比较</p><p>(十二)排序算法的应用</p><p>计算机组成原理</p><p>【考查目标】</p><p>1.理解单处理器计算机系统中各部件的内部工作原理、组成结构以及相互连接方式，具有完整的计算机系统的整机概念。</p><p>2.理解计算机系统层次化结构概念，熟悉硬件与软件之间的界面，掌握指令集体系结构的基本知识和基本实现方法。</p><p>3.能够综合运用计算机组成的基本原理和基本方法，对有关计算机硬件系统中的理论和实际问题进行计算、分析，对一些基本部件进行简单设计;并能对高级程序设计语言(如C语言)中的相关问题进行分析。</p><p>一、计算机系统概述</p><p>(一)计算机发展历程</p><p>(二)计算机系统层次结构</p><p>1.计算机系统的基本组成</p><p>2.计算机硬件的基本组成</p><p>3.计算机软件和硬件的关系</p><p>4.计算机的工作过程</p><p>(三)计算机性能指标</p><p>吞吐量、响应时间;CPU时钟周期、主频、CPI、CPU执行时间;MIPS、MFLOPS 、GFLOPS、TFLOPS、PFLOPS。</p><p>二、数据的表示和运算</p><p>(一)数制与编码</p><p>1.进位计数制及其相互转换</p><p>2.真值和机器数</p><p>3.BCD码</p><p>4.字符与字符串</p><p>5.校验码</p><p>(二)定点数的表示和运算</p><p>1.定点数的表示</p><p>无符号数的表示;有符号整数的表示。</p><p>2.定点数的运算</p><p>定点数的位移运算;原码定点数的加减运算;补码定点数的加/减运算;定点数的乘/除运算;溢出概念和判别方法。</p><p>(三)浮点数的表示和运算</p><p>1.浮点数的表示</p><p>IEEE 754标准</p><p>2.浮点数的加/减运算</p><p>(四)算术逻辑单元ALU</p><p>1.串行加法器和并行加法器</p><p>2.算术逻辑单元ALU的功能和结构</p><p>三、存储器层次结构</p><p>(一)存储器的分类</p><p>(二)存储器的层次化结构</p><p>(三)半导体随机存取存储器</p><p>1.SRAM存储器</p><p>2.DRAM存储器</p><p>3.只读存储器</p><p>4.Flash存储器</p><p>(四)主存储器与CPU的连接</p><p>(五)双口RAM和多模块存储器</p><p>(六)高速缓冲存储器(Cache)</p><p>1.Cache的基本工作原理</p><p>2.Cache和主存之间的映射方式</p><p>3.Cache中主存块的替换算法</p><p>4.Cache写策略</p><p>(七)虚拟存储器</p><p>1.虚拟存储器的基本概念</p><p>2.页式虚拟存储器</p><p>3.段式虚拟存储器</p><p>4.段页式虚拟存储器</p><p>5.TLB(快表)</p><p>四、指令系统</p><p>(一)指令格式</p><p>1.指令的基本格式</p><p>2.定长操作码指令格式</p><p>3.扩展操作码指令格式</p><p>(二)指令的寻址方式</p><p>1.有效地址的概念</p><p>2.数据寻址和指令寻址</p><p>3.常见寻址方式</p><p>(三)CISC和RISC的基本概念</p><p>五、中央处理器(CPU)</p><p>(一)CPU的功能和基本结构</p><p>(二)指令执行过程</p><p>(三)数据通路的功能和基本结构</p><p>(四)控制器的功能和工作原理</p><p>1、硬布线控制器</p><p>2、微程序控制器</p><p>微程序、微指令和微命令;微指令的编码方式;微地址的形式方式。</p><p>(五)指令流水线</p><p>1、指令流水线的基本概念</p><p>2、指令流水线的基本实现</p><p>3、超标量和动态流水线的基本概念</p><p>六、总线</p><p>(一)总线概述</p><p>1、总线的基本概念</p><p>2、总线的分类</p><p>3、总线的组成及性能指标</p><p>(二)总线仲裁</p><p>1、集中仲裁方式</p><p>2、分布仲裁方式</p><p>(三)总线操作和定时</p><p>1、同步定时方式</p><p>2、异步定时方式</p><p>(四)总线标准</p><p>七、输入输出(I/O)系统</p><p>(一)I/O系统基本概念</p><p>(二)外部设备</p><p>1、输入设备：键盘、鼠标</p><p>2、输出设备：显示器、打印机</p><p>3、外存储器：硬盘存储器、磁盘阵列、光盘存储器</p><p>(三)I/O接口(I/O控制器)</p><p>1、I/O接口的功能和基本结构</p><p>2、I/O端口及其编址</p><p>(四)I/O方式</p><p>1、程序查询方式</p><p>2、程序中断方式</p><p>中断的基本概念;中断响应过程;中断处理过程;多重中断和中断屏蔽的概念。</p><p>3、DMA方式</p><p>DMA控制器的组成，DMA传送过程。</p><p>操作系统</p><p>【考查目标】</p><p>1.掌握操作系统的基本概念、基本原理和基本功能，理解操作系统的整体运行过程。</p><p>2.掌握操作系统进程、内存、文件和I/O管理的策略、算法、机制以及相互关系。</p><p>3.能够运用所学的操作系统原理、方法与技术分析问题和解决问题，并能利用C语言描述相关算法。</p><p>一、操作系统概述</p><p>(一)操作系统的概念、特征、功能和提供的服务</p><p>(二)操作系统的发展与分类</p><p>(三)操作系统的运行环境</p><p>1.内核态与用户态</p><p>2.中断、异常</p><p>3.系统调用</p><p>(四)操作系统体系结构</p><p>二、进程管理</p><p>(一)进程与线程</p><p>1.进程概念</p><p>2.进程的状态与转换</p><p>3.进程控制</p><p>4.进程组织</p><p>5.进程通信</p><p>共享存储系统;消息传递系统;管道通信。</p><p>6.线程概念与多线程模型</p><p>(二)处理机调度</p><p>1.调度的基本概念</p><p>2.调度时机、切换与过程</p><p>3.调度的基本准则</p><p>4.调度方式</p><p>5.典型调度算法</p><p>先来先服务调度算法;短作业(短进程、短线程)优先调度算法;时间片轮转调度算法;优先级调度算法;高响应比优先调度算法;多级反馈队列调度算法。</p><p>(三)同步与互斥</p><p>1.进程同步的基本概念</p><p>2.实现临界区互斥的基本方法</p><p>软件实现方法;硬件实现方法。</p><p>3.信号量</p><p>4.管程</p><p>5.经典同步问题</p><p>生产者-消费者问题;读者-写者问题;哲学家进餐问题。</p><p>(四)死锁</p><p>1.死锁的概念</p><p>2.死锁处理策略</p><p>3.死锁预防</p><p>4.死锁避免</p><p>系统安全状态，银行家算法。</p><p>5.死锁检测和解除</p><p>三、内存管理</p><p>(一)内存管理基础</p><p>1.内存管理概念</p><p>程序装入与链接;逻辑地址与物理地址空间;内存保护。</p><p>2.交换与覆盖</p><p>3.连续分配管理方式</p><p>4.非连续分配管理方式</p><p>分页管理方式;分段管理方式;段页式管理方式。</p><p>(二)虚拟内存管理</p><p>1.虚拟内存基本概念</p><p>2.请求分页管理方式</p><p>3.页面置换算法</p><p>最佳置换算法(OPT);先进先出置换算法(FIFO);最近最少使用置换算法(LRU);时钟置换算法(CLOCK)。</p><p>4.页面分配策略</p><p>5.工作集</p><p>6.抖动</p><p>四、文件管理</p><p>(一)文件系统基础</p><p>1.文件概念</p><p>2.文件的逻辑结构</p><p>顺序文件;索引文件;索引顺序文件。</p><p>3.目录结构</p><p>文件控制块和索引节点;单级目录结构和两级目录结构;树形目录结构;图形目录结构。</p><p>4.文件共享</p><p>5.文件保护</p><p>访问类型;访问控制。</p><p>(二)文件系统实现</p><p>1.文件系统层次结构</p><p>2.目录实现</p><p>3.文件实现</p><p>(三)磁盘组织与管理</p><p>1.磁盘的结构</p><p>2.磁盘调度算法</p><p>3.磁盘的管理</p><p>五、输入输出(I/O)管理</p><p>(一)I/O管理概述</p><p>1.I/O控制方式</p><ol start="2"><li>I/O软件层次结构</li></ol><p>(二)I/O核心子系统</p><p>1.I/O调度概念</p><p>2.高速缓存与缓冲区</p><p>3.设备分配与回收</p><p>4.假脱机技术(SPOOLing)</p><p>计算机网络</p><p>【考查目标】</p><p>1.掌握计算机网络的基本概念、基本原理和基本方法。</p><p>2.掌握计算机网络的体系结构和典型网络协议，了解典型网络设备的组成和特点，理解典型网络设备的工作原理。</p><p>3.能够运用计算机网络的基本概念、基本原理和基本方法进行网络系统的分析、设计和应用。</p><p>一、计算机网络体系结构</p><p>(一)计算机网络概述</p><p>1.计算机网络的概念、组成与功能</p><p>2.计算机网络的分类</p><p>3.计算机网络的标准化工作及相关组织</p><p>(二)计算机网络体系结构与参考模型</p><p>1.计算机网络分层结构</p><p>2.计算机网络协议、接口、服务等概念</p><p>3.ISO/OSI参考模型和TCP/IP模型</p><p>二、物理层</p><p>(一)通信基础</p><p>1.信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念</p><p>2.奈奎斯特定理与香农定理</p><p>3.编码与调制</p><p>4.电路交换、报文交换与分组交换</p><p>5.数据报与虚电路</p><p>(二)传输介质</p><p>1.双绞线、同轴电缆、光纤与无线传输介质</p><p>2.物理层接口的特性</p><p>(三)物理层设备</p><p>1.中继器</p><p>2.集线器</p><p>三、数据链路层</p><p>(一)数据链路层的功能</p><p>(二)组帧</p><p>(三)差错控制</p><p>1.检错编码</p><p>2.纠错编码</p><p>(四)流量控制与可靠传输机制</p><p>1.流量控制、可靠传输与滑轮窗口机制</p><p>2.停止-等待协议</p><p>3.后退N帧协议(GBN)</p><p>4.选择重传协议(SR)</p><p>(五)介质访问控制</p><p>1.信道划分</p><p>频分多路复用、时分多路复用、波分多路复用、码分多路复用的概念和基本原理。</p><p>2.随即访问</p><p>ALOHA协议;CSMA协议;CSMA/CD协议;CSMA/CA协议。</p><p>3.轮询访问</p><p>令牌传递协议</p><p>(六)局域网</p><p>1.局域网的基本概念与体系结构</p><p>2.以太网与IEEE 802.3</p><p>3.IEEE 802.11</p><p>4.令牌环网的基本原理</p><p>(七)广域网</p><p>1.广域网的基本概念</p><p>2.PPP协议</p><p>3.HDLC协议</p><p>(八)数据链路层设备</p><p>1.网桥的概念和基本原理</p><p>2.局域网交换机及其工作原理。</p><p>四、网络层</p><p>(一)网络层的功能</p><p>1.异构网络互联</p><p>2.路由与转发</p><p>3.拥塞控制</p><p>(二)路由算法</p><p>1.静态路由与动态路由</p><p>2.距离-向量路由算法</p><p>3.链路状态路由算法</p><p>4.层次路由</p><p>(三)IPv4</p><p>1.IPv4分组</p><p>2.IPv4地址与NAT</p><p>3.子网划分与子网掩码、CIDR</p><p>4.ARP协议、DHCP协议与ICMP协议</p><p>(四)IPv6</p><p>1.IPv6的主要特点</p><p>2.IPv6地址</p><p>(五)路由协议</p><p>1.自治系统</p><p>2.域内路由与域间路由</p><p>3.RIP路由协议</p><p>4.OSPF路由协议</p><p>5.BGP路由协议</p><p>(六)IP组播</p><p>1.组播的概念</p><p>2.IP组播地址</p><p>(七)移动IP</p><p>1.移动IP的概念</p><p>2.移动IP的通信过程</p><p>(八)网络层设备</p><p>1.路由器的组成和功能</p><p>2.路由表与路由转发</p><p>五、传输层</p><p>(一)传输层提供的服务</p><p>1.传输层的功能</p><p>2.传输层寻址与端口</p><p>3.无连接服务与面向连接服务</p><p>(二)UDP协议</p><p>1.UDP数据报</p><p>2.UDP校验</p><p>(三)TCP协议</p><p>1.TCP段</p><p>2.TCP连接管理</p><p>3.TCP可靠传输</p><p>4.TCP流量控制与拥塞控制</p><p>六、应用层</p><p>(一)网络应用模型</p><p>1.客户/服务器模型</p><p>2.P2P模型</p><p>(二)DNS系统</p><p>1.层次域名空间</p><p>2.域名服务器</p><p>3.域名解析过程</p><p>(三)FTP</p><p>1.FTP协议的工作原理</p><p>2.控制连接与数据连接</p><p>(四)电子邮件</p><p>1.电子邮件系统的组成结构</p><p>2.电子邮件格式与MIME</p><p>3.SMTP协议与POP3协议</p><p>(五)WWW</p><p>1.WWW的概念与组成结构</p><p>2.HTTP协议</p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>“幂级数的本质”</title>
      <link href="2021/04/22/%E2%80%9C%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8%E2%80%9D/"/>
      <url>2021/04/22/%E2%80%9C%E5%B9%82%E7%BA%A7%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>此文为转载。</p><h1 id="微积分-8-级数（幂级数）"><a href="#微积分-8-级数（幂级数）" class="headerlink" title="微积分-8.级数（幂级数）"></a>微积分-8.级数（幂级数）</h1><p><a href="https://www.zhihu.com/people/qian-chen-31"><img src="https://pic1.zhimg.com/v2-f3cd01b5d1e0f03071338b2e845ac0d1_xs.jpg?source=172ae18b" alt="钱辰"></a></p><h2 id="回到梦开始的地方"><a href="#回到梦开始的地方" class="headerlink" title="回到梦开始的地方"></a>回到梦开始的地方</h2><p>在一元函数微积分的世界中，我们沿着极限、导数、微分、积分的路已经走出了一段路。</p><p>这时候回头看我们在第一篇《从极限开始》中介绍的芝诺悖论，你是否还记得计算阿喀琉斯追赶上乌龟所需要的时间的表达式：</p><p><img src="https://www.zhihu.com/equation?tex=T=%5Cfrac%7B90%7D%7B10%7D+%5Cfrac%7B9%7D%7B10%7D+%5Cfrac%7B0.9%7D%7B10%7D+..." alt="[公式]"></p><p>显而易见的，这个求和算式中的每一项所组成的，是一个首项为9，公比为0.1的等比数列，其通项可写为：</p><p><img src="https://www.zhihu.com/equation?tex=a_n=9%5Ccdot+(0.1)%5E%7Bn-1%7D" alt="[公式]"></p><p>而所求时间 <img src="https://www.zhihu.com/equation?tex=T" alt="[公式]"> ，则是对这个数列的项数 <img src="https://www.zhihu.com/equation?tex=n%5Cto+%5Cinfty" alt="[公式]"> 时进行求和，即：</p><p><img src="https://www.zhihu.com/equation?tex=T=%5Csum_%7Bn=1%7D%5E%5Cinfty+a_n+" alt="[公式]"></p><p><strong>无穷数列的求和</strong>就是无穷级数，简称<strong>级数</strong>。</p><p>所以，级数，实际上就是再次借助极限的工具，将对数列的有限项求和推广到了无限项求和。因此我们可以说，积分是无限连续项的求和，级数则是无限离散项的求和。</p><p>接下来，有了级数的概念以后，我们就可以用它来解决芝诺没有想明白的地方：即无穷项求和的结果，到底是趋向无穷的不可得还是趋向一个确定的数，即讨论级数的敛散性。</p><hr><h2 id="级数的敛散性"><a href="#级数的敛散性" class="headerlink" title="级数的敛散性"></a>级数的敛散性</h2><p>就让我们先从非常熟悉的等比数列开始说起：</p><p>有等比数列，公比为 <img src="https://www.zhihu.com/equation?tex=q" alt="[公式]"> ，首项为 <img src="https://www.zhihu.com/equation?tex=a_1" alt="[公式]"> ，其中 <img src="https://www.zhihu.com/equation?tex=p,a_1%5Cneq0" alt="[公式]"> 且 <img src="https://www.zhihu.com/equation?tex=q%5Cneq+1" alt="[公式]"> ，则有通项：</p><p><img src="https://www.zhihu.com/equation?tex=a_n=a_1%5Ccdot+p%5E%7Bn-1%7D" alt="[公式]"></p><p>由等比数列的前 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 项求和公式知：</p><p><img src="https://www.zhihu.com/equation?tex=S_n=a_1%5Ccdot+%5Cfrac%7B1-q%5En%7D%7B1-q%7D" alt="[公式]"></p><p>求解级数 <img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7Da_n" alt="[公式]"> ，实际上就是在求：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7DS_n=a_1%5Ccdot+%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cfrac%7B1-q%5En%7D%7B1-q%7D" alt="[公式]"></p><p>可以看到：</p><p>若 <img src="https://www.zhihu.com/equation?tex=-1%3Cq%3C1" alt="[公式]"> ，则 <img src="https://www.zhihu.com/equation?tex=q%5En%5Crightarrow+0" alt="[公式]"> ，故级数： <img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7DS_n=%5Cfrac%7Ba_1%7D%7B1-q%7D" alt="[公式]"> ，则称该级数发散；</p><p>若 <img src="https://www.zhihu.com/equation?tex=q%3E1" alt="[公式]"> 或 <img src="https://www.zhihu.com/equation?tex=q%3C-1" alt="[公式]"> ，则 <img src="https://www.zhihu.com/equation?tex=q%5En%5Crightarrow+%5Cpm%5Cinfty" alt="[公式]"> ，则级数： <img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7DS_n=%5Cpm+%5Cinfty" alt="[公式]"> ，即为一种狭义的不存在，称该级数发散。</p><p>从等比数列的敛散性判别看得出，从定义出发直接对级数的求和表达式进行求极限的运算显然是一种较为直接的方式。</p><p>但是，并非每种数列，都可以像基本数列（如等差，等比）那样通过写出清晰的求和公式来进行讨论，我们还需要更多的方法来帮助我们判别和求解。</p><p>有数列通项 <img src="https://www.zhihu.com/equation?tex=u_n%5Cgeq+0" alt="[公式]"> ，存在三种类型的级数，即：</p><p>正项级数： <img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7Du_n=u_1+u_2+...u_n" alt="[公式]"> ，起所有项数均为正；</p><p>交错级数： <img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7D(-1)%5E%7Bn-1%7Du_n=u_1-u_2+u_3-u_4+...u_n" alt="[公式]"> ，数列项数为正负相间；</p><p>任意项级数：数列各项正负不一。</p><p>对这三类级数，应使用不同的方法判别其敛散性。</p><p>对于正项级数：</p><ol><li>根据 <img src="https://www.zhihu.com/equation?tex=S_n%5Cgeq+S_%7Bn-1%7D" alt="[公式]"> ，即级数恒不增，故可以使用有界性；</li><li>比较判别法：将 <img src="https://www.zhihu.com/equation?tex=u_n" alt="[公式]"> 与另一个已知敛散性的级数项 <img src="https://www.zhihu.com/equation?tex=v_n" alt="[公式]"> 进行比较;</li><li>比值判别法：通过比较 <img src="https://www.zhihu.com/equation?tex=%5Crho+=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cfrac%7Bu_%7Bn+1%7D%7D%7Bu_n%7D" alt="[公式]"> 与1的关系；</li><li>根植判别法：通过比较 <img src="https://www.zhihu.com/equation?tex=%5Crho+=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Csqrt%5Bn%5D%7Bu_n%7D+" alt="[公式]"> 与1的关系。</li></ol><p>对于交错级数，则需使用莱布尼茨判别法，即满足去除正负号的数列 <img src="https://www.zhihu.com/equation?tex=%5C%7Bu_n%5C%7D" alt="[公式]"> 单调不增且 <img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7Du_n=0" alt="[公式]"> ，则该交错级数收敛。</p><p>而对于任意项级数，以目前我们所学的内容，暂时还不能给出通用的判别方式。</p><p>不过如果通过绝对值运算 <img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7D%5Cvert+u_n%5Cvert+" alt="[公式]"> 将任意项级数转换为正项级数，就可以使用正项级数的判别法对其进行研究，这也由此引申除了绝对收敛的概念，即：</p><ul><li>若原级数的绝对值级数收敛，则称该级数绝对收敛；</li><li>若原级数收敛，但该级数的绝对值级数收敛，则称该级数条件收敛。</li></ul><hr><h2 id="以一个新的角度来看待函数"><a href="#以一个新的角度来看待函数" class="headerlink" title="以一个新的角度来看待函数"></a>以一个新的角度来看待函数</h2><p>想象有一根笔直的铁丝，然后我们用手对它进行变形，使它弯曲成一定的角度：</p><p><img src="https://pic2.zhimg.com/v2-7fe91eb75378b692d6f56acbc7fce36d_r.jpg" alt="img">对铁丝进行弯曲</p><p>接着，想象在直角坐标系中的横坐标轴，即为那根比直的铁丝；函数 <img src="https://www.zhihu.com/equation?tex=f(x)=e%5Ex" alt="[公式]"> 的图像则为弯曲后的铁丝：</p><p><img src="https://pic4.zhimg.com/v2-b8548ada14de1056caa386b5295838a3_r.jpg" alt="img">函数的图像变换</p><p>以这个例子为启示，我们是否，可以将函数看作是一种变换图形的模具。</p><p>在机械加工产业的制造车间里，为铸造模具送入一个原型坯料，经过加工后，将为我们返回一个模具形状的产品；若我们将函数 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 也看作是一种加工图形的模具，为它送入初始图形 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 轴，经过模具的加工返回一个新的图形 <img src="https://www.zhihu.com/equation?tex=e%5Ex" alt="[公式]"></p><p>——即<strong>将函数，看作是一种变换图形的工具</strong>。</p><p>在有了这个概念以后，令人兴奋的问题来了：</p><p>如果现在，有一个异常复杂的图案，我们能否使用手里那根初始的铁丝，通过拗的方式，将它坳成复杂的图形？</p><p>换句话说，我们能否使用一些简单的图形，通过函数这个变换工具，将它变形为复杂的图形。</p><p>而此前，微积分的核心知识告诉我们：这，不正是用线性模拟非线性的过程吗？</p><hr><p>假设有一个 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 阶可导的复杂图形 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"></p><p><strong>第一步，从一根直铁丝开始：</strong></p><p>现在，我们手里有一根尚未经过任何加工的铁丝，要想将它逐渐变为一个想要的复杂图形。</p><p>首先，肯定是要将它摆放于图形上的某一点 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处，而它的倾斜角度——微分的只是告诉了我们，导数即函数在一点处切线的斜率——故我们的第一步就是将这根铁丝摆成为 复杂图形在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的切线：</p><p>有函数在某一点处的切线方程 <img src="https://www.zhihu.com/equation?tex=y-y_0=y%5Cprime(x-x_0)" alt="[公式]"></p><p>即： <img src="https://www.zhihu.com/equation?tex=y=f(x_0)+f%5Cprime(x_0)(x-x_0)" alt="[公式]"></p><p><img src="https://pic1.zhimg.com/v2-d6dc7a1c514f24ee629577fe64dce3dc_r.jpg" alt="img">从一根铁丝开始</p><p>但，显而易见的，若这根铁丝只能保持笔直，那么这样的摆放只能使得它在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处这一点是与我们的目标图形相一致的，一旦偏离 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处，哪怕一点点，它们的形态都将不再吻合。</p><p><strong>因此，第二步：将这根铁丝坳弯一点点以使得它也能够贴合</strong> <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> <strong>处附近的图形</strong></p><p>根据连续函数的定义，若有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx+%5Cto+x_0%7Df(x)=f(x_0)=A" alt="[公式]"></p><p>如果把极限符号去掉，即有：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)=A+%5Calpha+(x)" alt="[公式]"></p><p>它的意思是在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 附近（也即它的去心邻域）的一点 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> ，它的函数值与 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的函数值存在一个微小的偏差 <img src="https://www.zhihu.com/equation?tex=%5Calpha(x)" alt="[公式]"></p><p>于是，我们来看这样一个极限，即根据 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的导数定义有：</p><p><img src="https://www.zhihu.com/equation?tex=f%5Cprime(x_0)=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D" alt="[公式]"></p><p>去掉极限符号，即有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D=f%5Cprime(x_0)+%5Calpha(x)" alt="[公式]"></p><p>解出 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 的表达式为：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)=f(x_0)+f%5Cprime(x_0)(x-x_0)+%5Calpha(x)(x-x_0)" alt="[公式]"></p><p>可以看到的是，表达式中前面的这两项构成的恰是第一步中已经摆好的切线 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 。</p><p>因此，本质上，<strong>我们通过“拗铁丝”来使直线更贴合函数图形的过程，就是从 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处出发，通过求解偏差量 <img src="https://www.zhihu.com/equation?tex=%5Calpha(x)" alt="[公式]"> 来向 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 的邻域拓展，从而能够在更广范围内逼近原函数的过程。</strong></p><p>那么，问题来了，该如何求解 <img src="https://www.zhihu.com/equation?tex=%5Calpha(x)" alt="[公式]"> 这一偏差部分呢。</p><p><strong>对偏差的部分，再度使用线性拟合的思想！</strong></p><p>记第一次贴合后的局部偏差为 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)" alt="[公式]"> ，则类比于对函数在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的第一次线性拟合过程：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)=f(x_0)+f%5Cprime(x_0)(x-x_0)+%5Calpha_1(x)(x-x_0)" alt="[公式]"></p><p>将 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)" alt="[公式]"> 视为新的等待逼近的函数，则有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Calpha_1(x_0)+%5Calpha_1%5Cprime(x_0)(x-x_0)+%5Calpha_2(x)(x-x_0)" alt="[公式]"></p><p>其中， <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x_0)" alt="[公式]"> 部分，代表拟合图形在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 处的误差——而这是目前为止我们唯一精确贴合的点，故不存在误差——则有 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x_0)=0" alt="[公式]"></p><p>因此：</p><p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Calpha_1%5Cprime(x_0)(x-x_0)+%5Calpha_2(x)(x-x_0)" alt="[公式]"></p><p>而由前文中的表达式 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D=f%5Cprime(x_0)+%5Calpha_1(x)" alt="[公式]"> 可知：</p><p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Cfrac%7Bf(x)-f(x_0)%7D%7Bx-x_0%7D-f%5Cprime(x_0)" alt="[公式]"></p><p>根据导数的定义：</p><p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1%5Cprime+(x)=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Calpha_1(x)-%5Calpha_1(x_0)%7D%7Bx-x_0%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Calpha_1(x)%7D%7Bx-x_0%7D" alt="[公式]"></p><p>将 <img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)" alt="[公式]"> 代入：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Calpha_1(x)%7D%7Bx-x_0%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7B%5Cfrac%7Bf(x)-f(x_0)-f%5Cprime+(x_0)(x-x_0)%7D%7Bx-x_0%7D%7D%7Bx-x_0%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf(x)-f(x_0)-f%5Cprime+(x_0)(x-x_0)%7D%7B(x-x_0)%5E2%7D" alt="[公式]"></p><p>这是一个 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B0%7D%7B0%7D" alt="[公式]"> 型的未定式极限，可以使用洛必达进行求解：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf(x)-f(x_0)-f%5Cprime+(x_0)(x-x_0)%7D%7B(x-x_0)%5E2%7D=%5Clim_%7Bx+%5Cto+x_0%7D%5Cfrac%7Bf%5Cprime(x)-0-f%5Cprime(x_0)%5Ccdot+1%7D%7B2(x-x_0)%5Ccdot+1%7D=%5Cfrac%7Bf%5Cprime%5Cprime(x)-0%7D%7B2-0%7D=%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2%7D" alt="[公式]"></p><p>因此：</p><p><img src="https://www.zhihu.com/equation?tex=%5Calpha_1(x)=%5Calpha_1%5Cprime(x_0)(x-x_0)+%5Calpha_2(x)(x-x_0)=%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2%7D(x-x_0)+%5Calpha_2(x)(x-x_0)" alt="[公式]"></p><p>然后，将这个结果带过原函数的展开式中得出：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)=f(x_0)+f%5Cprime(x_0)(x-x_0)+%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2%7D(x-x_0)%5E2+%5Calpha_2(x)(x-x_0)%5E2" alt="[公式]"></p><p>这样，我们就实现了将铁丝掰弯一点点的过程：</p><p><img src="https://pic4.zhimg.com/v2-221da1249e652432145f34f02fe2f9fb_r.jpg" alt="img">求解偏差部分的过程，就是对直线进行弯折以使得它再更大范围内贴合图形的过程</p><p><strong>集中一点，登峰造极</strong></p><p>于是，进一步的，通过对 <img src="https://www.zhihu.com/equation?tex=%5Calpha_2(x),%5Calpha_3(x)..." alt="[公式]"> 不断求解，我们也在不断的调整“铁丝”，不断的在越来越广 的 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 邻域上精确毕竟函数。</p><p><img src="https://pic4.zhimg.com/v2-900bcb5e775bba2f0c306465228781ef_r.jpg" alt="img">从一点处出发，越来越精确刻画其邻域内的图形</p><p>最终，我们就得到了这样一个函数展开式：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)=%5Cfrac%7Bf(x_0)%7D%7B0!%7D+%5Cfrac%7Bf%5Cprime(x_0)%7D%7B1!%7D(x-x_0)+%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2!%7D(x-x_0)%5E2+...+%5Cfrac%7Bf%5E%7B(n)%7D(x)%7D%7Bn!%7D(x-x_0)%5En+%5Calpha_%7Bn+1%7D(x)(x-x_0)%5E%7Bn+1%7D" alt="[公式]"></p><p>而在前文我们已经知道，数列的无穷项求和，就是级数。</p><p>当把数列中的通项，由确定的数值，推广至函数，即 <img src="https://www.zhihu.com/equation?tex=u_n=f_n(x)" alt="[公式]"> 。则无穷级数的概念，就从数列的常数项级数拓展到了函数项级数。</p><p>再进一步的，如果在函数项级数中的各项函数，都是属于同一系列(series)的函数，譬如：前文这个展开式所表示的函数项级数，其每一项就都是由 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 的多项式与一个常系数相乘构成的幂函数组成。</p><p>这种由幂函数构成的函数项级数，就是<strong>幂级数</strong>，而上文这个幂级数，就是<strong>泰勒级数</strong>。</p><p>而通过前面这一系列的推导，你应该可以理解，幂级数之所以如此特殊，之所以在分析学中占据如此重要的地位，其本质是因为：</p><p><strong>常义的微分与积分是以区间为整体对函数进行全局的线性拟合；而幂级数是从一点处出发对函数进行局部的线性拟合。</strong></p><p>一个是高屋建瓴，把握整体；一个是集中一点，登峰造极！</p><hr><h2 id="幂级数的收敛域"><a href="#幂级数的收敛域" class="headerlink" title="幂级数的收敛域"></a>幂级数的收敛域</h2><p>有函数项级数：</p><p><img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bn%7D%5E%7B%5Cinfty%7Du_n(x)=u_1(x)+u_2(x)+...u_n(x)" alt="[公式]"></p><p>当 <img src="https://www.zhihu.com/equation?tex=u_n(x)" alt="[公式]"> 为定义域 <img src="https://www.zhihu.com/equation?tex=x%5Cin+I%5C!R" alt="[公式]"> 的幂函数时，则有幂级数：</p><p><img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bn%7D%5E%7B%5Cinfty%7Da_n(x-x_0)%5En=a_0+a_1(x-x_0)+a_2(x-x_0)%5E2+...+a_n(x-x_0)%5En" alt="[公式]"></p><p>幂级数本身是一个任意项级数，由前文得知，可以将它转变为绝对值级数，然后通过判断它是否绝对收敛来判断原级数的敛散性。</p><p>故，可以通过比值判别法，比较：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert%5Cfrac%7Bu_%7Bn+1%7D(x)%7D%7Bu_n(x)%7D%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D(x-x_0)%5E%7Bn+1%7D%7D%7Ba_n(x-x_0)%5En%7D+%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D%7D%7Ba_n%7D(x-x_0)++%5Cvert" alt="[公式]"></p><p>与1的关系来判别绝对值级数的敛散性。</p><p>而其中， <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 为 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 去心邻域内的一点，即：</p><p><img src="https://www.zhihu.com/equation?tex=0%3C%5Cvert+x-x_0%5Cvert%3C%5Csigma,%5Csigma%3E0" alt="[公式]"> ， 我们知道 <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 即该去心邻域的半径；</p><p>同时可记 <img src="https://www.zhihu.com/equation?tex=%5Crho=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D%7D%7Ba_n%7D+%5Cvert" alt="[公式]"> ，因此我们只需讨论 <img src="https://www.zhihu.com/equation?tex=%5Crho%5Ccdot+%5Csigma" alt="[公式]"> 与1之间的关系：</p><ul><li>若满足 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma+%3C+1" alt="[公式]"> ，则绝对值级数收敛，原级数必收敛；</li><li>若满足 <img src="https://www.zhihu.com/equation?tex=%5Crho%5Ccdot+%5Csigma%3E1" alt="[公式]"> ，则绝对值级数发散，原级数必发散；</li><li>若 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma=1" alt="[公式]"> ，则无法通过比值判别法判断敛散性。</li></ul><p>故可据此来讨论 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> 的不同取值：</p><ul><li>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=0" alt="[公式]"> ，则 <img src="https://www.zhihu.com/equation?tex=%5Crho%5Ccdot+%5Csigma+%5Cequiv0+%3C1" alt="[公式]"> ，无论去心邻域的半径 <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 取多大，级数都必然收敛；</li><li>若 <img src="https://www.zhihu.com/equation?tex=0%3C%5Crho%3C+%5Cinfty" alt="[公式]"> ，则为了满足 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma%3C1" alt="[公式]"> ，需要使去心邻域半径 <img src="https://www.zhihu.com/equation?tex=%5Csigma%3C%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> ；</li><li>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=+%5Cinfty" alt="[公式]"> ，则无论去心邻域的半径取多小，都不可能满足 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Ccdot+%5Csigma%3C1" alt="[公式]"></li></ul><p>此外，可以看到，在 <img src="https://www.zhihu.com/equation?tex=0%3C%5Crho%3C+%5Cinfty" alt="[公式]"> 时，若 <img src="https://www.zhihu.com/equation?tex=%5Csigma=%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> ，即恰好处于去心邻域的边界时，我们无法通过比值判别法直接判断这两点的敛散性。</p><p>在这其中，我们将满足幂级数收敛的定义域范围 <img src="https://www.zhihu.com/equation?tex=(x_0-%5Csigma,+x_0+%5Csigma)" alt="[公式]"> 成为幂级数的收敛域，将收敛域的边界点 <img src="https://www.zhihu.com/equation?tex=x_0-%5Csigma" alt="[公式]"> 与 <img src="https://www.zhihu.com/equation?tex=x_0+%5Csigma" alt="[公式]"> 称为收敛点，定义域的半径 <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 称为幂级数的收敛半径。</p><p>因此，对于之前敛散性判别的结论整理后，有：</p><p>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=0" alt="[公式]"> ，则该幂级数在整个定义域上恒收敛，收敛半径为 <img src="https://www.zhihu.com/equation?tex=+%5Cinfty" alt="[公式]"> ;</p><p>若 <img src="https://www.zhihu.com/equation?tex=%5Crho=+%5Cinfty" alt="[公式]"> ，则该幂级数在 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> 以外的所有区域全部发散，收敛半径为 <img src="https://www.zhihu.com/equation?tex=0" alt="[公式]"> ；</p><p>若 <img src="https://www.zhihu.com/equation?tex=0%3C%5Crho%3C+%5Cinfty" alt="[公式]"> ，则该幂级数的收敛半径为 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> ，在收敛半径以内 <img src="https://www.zhihu.com/equation?tex=(x_0-%5Cfrac%7B1%7D%7B%5Crho%7D,x_0+%5Cfrac%7B1%7D%7B%5Crho%7D)" alt="[公式]"> 全部收敛，在收敛半径以外 <img src="https://www.zhihu.com/equation?tex=(-%5Cinfty,+x_0-%5Cfrac%7B1%7D%7B%5Crho%7D),(x_0+%5Cfrac%7B1%7D%7B%5Crho%7D,+%5Cinfty)" alt="[公式]"> 全部发散，在收敛半径处 <img src="https://www.zhihu.com/equation?tex=x_0-%5Cfrac%7B1%7D%7B%5Crho%7D,x_0+%5Cfrac%7B1%7D%7B%5Crho%7D" alt="[公式]"> 需单独判断。而这个结论，也就是幂级数的<strong>阿贝尔收敛定理</strong>。</p><p>更本质的来说，<strong>求解幂级数收敛域的过程，实际上，就是在求我们通过“拗铁丝”方式得到的拟合图像与目标函数实现贴合的范围</strong>。</p><p><img src="https://pic4.zhimg.com/v2-98099080849ac47c3c460fb88847d4d7_r.jpg" alt="img">求解收敛域，就是求取局部贴合的范围</p><hr><p>对于泰勒级数：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)=%5Cfrac%7Bf(x_0)%7D%7B0!%7D+%5Cfrac%7Bf%5Cprime(x_0)%7D%7B1!%7D(x-x_0)+%5Cfrac%7Bf%5Cprime%5Cprime(x)%7D%7B2!%7D(x-x_0)%5E2+...+%5Cfrac%7Bf%5E%7B(n)%7D(x)%7D%7Bn!%7D(x-x_0)%5En+..." alt="[公式]"></p><p>对于特别的当 <img src="https://www.zhihu.com/equation?tex=x_0=0" alt="[公式]"> 时，也就是对函数在零点处展开，其形式变为：</p><p><img src="https://www.zhihu.com/equation?tex=f(0)+f%5Cprime(0)x+%5Cfrac%7Bf%5Cprime%5Cprime(0)%7D%7B2!%7Dx%5E2+...+%5Cfrac%7Bf%5E%7B(n)%7D(0)%7D%7Bn!%7Dx%5En+..." alt="[公式]"></p><p>将这个级数称为<strong>麦克劳林级数</strong>。</p><p>我们在求极限时，用到的等价无穷小，绝大多数都是由麦克劳林公式推导得来，譬如经典的：</p><p><img src="https://www.zhihu.com/equation?tex=%5Csin+x+%5Csim+x,x+%5Cto+0" alt="[公式]"></p><p>即有 <img src="https://www.zhihu.com/equation?tex=%5Csin+x" alt="[公式]"> 的麦克劳林展开式：</p><p><img src="https://www.zhihu.com/equation?tex=%5Csin+x=%5Csin+0+%5Ccos+0%5Ccdot+x+%5Cfrac%7B-%5Csin+0%7D%7B2!%7D+x%5E2+%5Cfrac%7B-%5Ccos+0%7D%7B3!%7Dx%5E3+...=x-%5Cfrac%7Bx%5E3%7D%7B3!%7D+%5Cfrac%7Bx%5E5%7D%7B5!%7D+..." alt="[公式]"></p><p>等价无穷小就是通过忽略麦克劳林的高阶无穷小部分获得的。</p><p>级数的另一个重要作用，是为我们提供高精度的数值计算手段，譬如：</p><p>如何计算 <img src="https://www.zhihu.com/equation?tex=%5Cpi" alt="[公式]"></p><p>在现实世界的各种实际应用中，如计算机、工业制造、导弹的弹道等等领域，往往需要使用诸如 <img src="https://www.zhihu.com/equation?tex=e,%5Cpi" alt="[公式]"> 等等之类的具体数值，且有极高的精度要求。在这些领域，幂级数就能为我们提供有效的计算手段。</p><p>有 <img src="https://www.zhihu.com/equation?tex=%5Carctan+x" alt="[公式]"> 的麦克劳林级数：</p><p><img src="https://www.zhihu.com/equation?tex=%5Carctan+x=x-%5Cfrac%7Bx%5E3%7D%7B3%7D+%5Cfrac%7Bx%5E5%7D%7B5%7D+...+(-1)%5E%7Bn+1%7D%5Cfrac%7Bx%5E%7B2n-1%7D%7D%7B2n-1%7D+..." alt="[公式]"></p><p>通过求：</p><p><img src="https://www.zhihu.com/equation?tex=%5Crho=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7Ba_%7Bn+1%7D%7D%7Ba_n%7D+%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7B(-1)%5E%7B2n-3%7D(2n-3)%7D%7B(-1)%5E%7B2n-1%7D(2n-1)%7D+%5Cvert=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cvert+%5Cfrac%7B2n-3%7D%7B2n-1%7D+%5Cvert=1" alt="[公式]"></p><p>可知，该级数的收敛半径为 <img src="https://www.zhihu.com/equation?tex=r=%5Cfrac%7B1%7D%7B%5Crho%7D=1" alt="[公式]"> ，故在 <img src="https://www.zhihu.com/equation?tex=-1%3C+x%3C1" alt="[公式]"> 上绝对收敛，而在半径处，即 <img src="https://www.zhihu.com/equation?tex=x=-1,x=1" alt="[公式]"> 处，则需要单独讨论：</p><p>由于对绝对值级数的比值判别法失效，则可以改用交错级数的莱布尼茨判别法，当 <img src="https://www.zhihu.com/equation?tex=%5Cvert+x+%5Cvert=1" alt="[公式]"> 时，其去除正负号后的数列 <img src="https://www.zhihu.com/equation?tex=%5C%7Bu_n%5C%7D" alt="[公式]"> ，显然有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7B2n-1%7D%3C%5Cfrac%7B1%7D%7B2n-3%7D%5Cimplies+u_%7Bn-1%7D%3Cu_n" alt="[公式]"></p><p>且：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7Du_n=%5Clim_%7Bn+%5Cto+%5Cinfty%7D%5Cfrac%7B1%7D%7B2n-1%7D=0" alt="[公式]"></p><p>故该级数在半径处也收敛，即 <img src="https://www.zhihu.com/equation?tex=%5Carctan+x" alt="[公式]"> 的麦格劳林级数收敛域为 <img src="https://www.zhihu.com/equation?tex=x%5Cin%5B-1,1%5D" alt="[公式]"></p><p>而由三角函数的取值可知， <img src="https://www.zhihu.com/equation?tex=%5Carctan+1=%5Cfrac%7B%5Cpi%7D%7B4%7D" alt="[公式]"></p><p>利用麦克劳林展开式，有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Carctan+1=%5Cfrac%7B%5Cpi%7D%7B4%7D=1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D+..." alt="[公式]"> ，得出 <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D+...)" alt="[公式]"></p><p>若展开至第二项，有： <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D)=2.%5Cdot%7B6%7D" alt="[公式]"></p><p>展开至第三项：有： <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D)=3.4%5Cdot%7B6%7D" alt="[公式]"></p><p>至第四项，有： <img src="https://www.zhihu.com/equation?tex=%5Cpi=4(1-%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B5%7D-%5Cfrac%7B1%7D%7B7%7D)=2.89523%5Cdot%7B8%7D0952%5Cdot%7B3%7D" alt="[公式]"></p><p>…</p><p>这就是使用麦克劳林级数推导出的一个圆周率计算公式。</p><blockquote><p>值得一提的是，利用 <img src="https://www.zhihu.com/equation?tex=%5Carctan+x" alt="[公式]"> 在的麦克劳林级数计算 <img src="https://www.zhihu.com/equation?tex=%5Cpi" alt="[公式]"> 的过程，其收敛速度相当缓慢，在展开到第100项左右， <img src="https://www.zhihu.com/equation?tex=%5Cpi" alt="[公式]"> 的值也只接近于3.1315929。你能否想出收敛速度更快的级数来帮助我们更快的算出较为精确的圆周率数值~</p></blockquote><hr><p>结束级数的学习之后，我们对一元微积分的热身活动就基本完毕。</p><p>在这一段的历程中，我们建立了：</p><p>原函数 <img src="https://www.zhihu.com/equation?tex=F(x)" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=%5Ciff" alt="[公式]"> 函数 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=%5Ciff" alt="[公式]"> 导函数 <img src="https://www.zhihu.com/equation?tex=f%5Cprime(x)" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=%5Ciff" alt="[公式]"> 高阶导函数 <img src="https://www.zhihu.com/equation?tex=f%5E%7B(2+)%7D(x)" alt="[公式]"></p><p>这数者之间的联系。</p><p>从 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 出发：</p><p>以求导、微分、中值定理连接导函数 <img src="https://www.zhihu.com/equation?tex=f%5Cprime(x)" alt="[公式]"></p><p>以积分、变限积分联系原函数 <img src="https://www.zhihu.com/equation?tex=F(x)" alt="[公式]"></p><p>以幂级数展开联系高阶导函数 <img src="https://www.zhihu.com/equation?tex=f%5Cprime%5Cprime(x),f%5Cprime%5Cprime(x)..." alt="[公式]"></p><p>从下一篇文章开始，在将微积分从一元函数向二元、三元推广之前，我准备先转入线性代数的学习。</p><p>这其中的原因，我也将会在之后学习线性代数的过程中，以及在开始学习多元函数微积分前，予以说明。</p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数第一章节总结</title>
      <link href="2021/04/21/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%8A%82%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/21/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%8A%82%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>一、n阶排列及其逆序数、对换</p><p>1、<strong>n阶排列和自然排列：</strong>由自然数1,2，…n组成的任意一个<strong>n元有序数组</strong> <img src="https://www.zhihu.com/equation?tex=i_%7B1%7Di_%7B2%7D...i_%7Bn%7D" alt="[公式]"> 称为一个n阶排列，其中12…n称为自然排列。</p><p>2、<strong>逆序、顺序和逆序数：</strong>在一个排列中，如果一个<strong>较大</strong>的数字排在一个<strong>较小</strong>的数字之前，则称这两个数字构成一个<strong>逆序</strong>，<strong>否则，</strong>称这两个数字构成一个<strong>顺序，</strong>在一个排列 <img src="https://www.zhihu.com/equation?tex=i_%7B1%7Di_%7B2%7D...i_%7Bn%7D" alt="[公式]"> 中，<strong>逆序</strong>的总数称为这个排列的逆序数，记为 <img src="https://www.zhihu.com/equation?tex=%CF%84(i_%7B1%7Di_%7B2%7D...i_%7Bn%7D)" alt="[公式]"> 。</p><p>计算方法：将数i与排在其前面的数构成的<strong>逆序数记为</strong> <img src="https://www.zhihu.com/equation?tex=%CF%84_%7Bi%7D" alt="[公式]"> ，例如，对于5阶排列35412</p><p>τ1=3（有三个比1大的数在1前面），τ2=3，τ3=0，τ4=1，τ5=0</p><p>所以逆序数=3+3+0+1+0=7,</p><p><strong>3、奇排列：</strong>逆序数为<strong>奇数</strong>的排列称为奇排列</p><p><strong>4、偶排列：</strong>逆序数为<strong>偶数</strong>的排列称为偶排列</p><p>5、<strong>定理1：对换</strong>改变排列的奇偶性。</p><p><strong>推论：</strong>排列经过<strong>奇数次对换</strong>其<strong>奇偶性</strong>发生<strong>改变</strong>，经过<strong>偶数次对换</strong>其<strong>奇偶性不变</strong>。</p><p>推论：当n≥2时，在n阶排列中，<strong>奇偶排列数目相等</strong>，即各有 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bn!%7D%7B2%7D" alt="[公式]"> 个。</p><p>二、<strong>n阶行列式的定义</strong></p><p>1、n阶行列式定义：n阶行列式等于所有来自<strong>不同行不同列</strong>的<strong>n个</strong>元素<strong>乘积的代数和</strong>。由于代数和的项数为n！个，为了表达方便，我们可以将每项中的n个元素按<strong>行</strong>指标<strong>由小到大</strong>的顺序排列，并规定<strong>此时列</strong>指标为<strong>偶排列</strong>时，此项前面带<strong>正号</strong>，<strong>列指标</strong>为<strong>奇</strong>排列时，前面带<strong>负号</strong>（后面举个例子）此时，n阶行列式可以表示为：</p><p><img src="https://pic4.zhimg.com/v2-600fa19bc10c7c316cacc65db2ed20cb_r.jpg" alt="img"></p><p>上述行列式通常记为： <img src="https://www.zhihu.com/equation?tex=D=det(a_%7Bij%7D)%E6%88%96%E8%80%85%7Ca_%7Bij%7D%7C" alt="[公式]"></p><p>（例子：对于<strong>乘积项</strong> <img src="https://www.zhihu.com/equation?tex=a_%7B31%7Da_%7B14%7Da_%7B43%7Da_%7B22%7D" alt="[公式]"> ，先按行指标从小排到大，即 <img src="https://www.zhihu.com/equation?tex=a_%7B14%7Da_%7B22%7Da_%7B31%7Da_%7B43%7D" alt="[公式]"> 然后其列指标的逆序数为τ(4213)=4，是偶数，所以乘积项<img src="https://www.zhihu.com/equation?tex=a_%7B31%7Da_%7B14%7Da_%7B43%7Da_%7B22%7D" alt="[公式]">是偶数）</p><p>（笔算的话一般不用这个方法）</p><p>2、<strong>主对角线：</strong>在行列式中，由<strong>左上角</strong>到<strong>右下角（\）</strong>所形成的斜线称为主对角线。</p><p><strong>副对角线：</strong>由<strong>右上角</strong>到<strong>左下角（/）</strong>所形成的斜线称为副对角线。</p><p><strong>上三角形行列式：</strong>在主对角线<strong>下方</strong>的元素全<strong>为0</strong></p><p><strong>下三角形行列式：</strong>在主对角线<strong>上方</strong>的元素全<strong>为0</strong></p><p><strong>三角形行列式：</strong>上三角形行列式和下三角形行列式<strong>统称三角形行列式</strong>。</p><p><strong>对角行列式：除主对角线之外的元素全为零。</strong></p><p><strong>三、n阶行列式的性质和计算</strong></p><p><strong>1、性质：</strong></p><p><strong>（1）行与列</strong>互换，行列式的<strong>值</strong>不变。</p><p>记 <img src="https://www.zhihu.com/equation?tex=D%5E%7BT%7D" alt="[公式]"> 是行列式D行与列互换后的行列式，称 <img src="https://www.zhihu.com/equation?tex=D%5E%7BT%7D" alt="[公式]"> 是D的<strong>转置行列式</strong></p><p>（2）在行列式中，如果<strong>某一行（列）</strong>元素<strong>全为零</strong>，则该行列式的<strong>值为0</strong></p><p>（用行列式定义的<strong>计算公式</strong>易证）</p><p>（3）交换<strong>任意两行（列）</strong>的位置，行列式的<strong>值变号</strong>。</p><p>（4）如果行列式有<strong>两行（列）完全相同</strong>，则行列式为<strong>0</strong></p><p>（5）行列式具有线性性：</p><p>①可以<strong>整一行</strong>或者<strong>整一列</strong>提一个系数k出来</p><p>②</p><p><img src="https://pic1.zhimg.com/v2-b472bd2b15c9165e0be329058328950c_r.jpg" alt="img"></p><p>（6）推论：如果行列式有两行（列）<strong>成比例</strong>，则行列式为<strong>0</strong>。</p><p>推论：行列式某一行（列）的<strong>k倍加到</strong>另一行（列），行列式的<strong>值不变。</strong></p><p>2、根据性质，引出以下记号：（行的英文：row，列的英文：column）</p><p>（1） <img src="https://www.zhihu.com/equation?tex=r_%7Bi%7D%C3%B7k%EF%BC%88%E6%88%96c_%7Bi%7D%C3%B7k%EF%BC%89" alt="[公式]"> 表示从第i行（列）提取公因子k</p><p>（2） <img src="https://www.zhihu.com/equation?tex=r_%7Bi%7D+kr_%7Bj%7D%EF%BC%88%E6%88%96c_%7Bi%7D+kc_%7Bj%7D%EF%BC%89" alt="[公式]"> 表示将第j行（列）的k倍加到第i行（列）</p><p>（3） <img src="https://www.zhihu.com/equation?tex=r_%7Bi%7D%5Cleftrightarrow+r_%7Bj%7D%EF%BC%88%E6%88%96c_%7Bi%7D%5Cleftrightarrow+c_%7Bj%7D%EF%BC%89" alt="[公式]"> 表示交换第i行（列）与第j行（列）的位置</p><p>四、行列式<strong>按一行展开</strong>及<strong>克拉默法则</strong></p><p>1、按一行（列展开）：在n阶行列式 <img src="https://www.zhihu.com/equation?tex=D=%7Ca_%7Bij%7D%7C" alt="[公式]"> 中，<strong>去掉</strong>元素 <img src="https://www.zhihu.com/equation?tex=a_%7Bij%7D" alt="[公式]"> <strong>所在</strong>的<strong>第i行</strong>、<strong>第j列</strong>所<strong>剩下</strong>的 <img src="https://www.zhihu.com/equation?tex=(n-2)%5E%7B2%7D" alt="[公式]"> 个元素构成的<strong>n-1阶</strong>行列式称为元素 <img src="https://www.zhihu.com/equation?tex=a_%7Bij%7D" alt="[公式]"> 的<strong>余子式</strong>，通常记为<strong>Mij</strong>，余子式与符号项 <img src="https://www.zhihu.com/equation?tex=(-1)%5E%7Bi+j%7D" alt="[公式]"> 的乘积 <img src="https://www.zhihu.com/equation?tex=(-1)%5E%7Bi+j%7DM_%7Bij%7D" alt="[公式]"> 叫做元素<img src="https://www.zhihu.com/equation?tex=a_%7Bij%7D" alt="[公式]"> 的代数余子式，通常记为Aij。规定n=1时，Mij=Aij=1</p><p>（<strong>余子式：</strong>Mij。<strong>代数余子式：</strong> <img src="https://www.zhihu.com/equation?tex=A_%7Bij%7D=M_%7Bij%7D%C2%B7(-1)%5E%7Bi+j%7D" alt="[公式]"> ，）</p><p>2、按一行（列）展开的行列式的定理：n阶行列式 <img src="https://www.zhihu.com/equation?tex=D=%7Ca_%7Bij%7D%7C" alt="[公式]"> 等于它的<strong>任意一行（列）</strong>的所有元素与各自的<strong>代数余子式（Aij）的乘积之和。</strong></p><p><strong>即按行：</strong> <img src="https://www.zhihu.com/equation?tex=D=a_%7Bi1%7DA_%7Bi1%7D+a_%7Bi2%7DA_%7Bi2%7D+...+a_%7Bin%7DA_%7Bin%7D%EF%BC%88i=1,2%EF%BC%8C...n%EF%BC%89" alt="[公式]"></p><p>或者<strong>按列</strong>： <img src="https://www.zhihu.com/equation?tex=D=a_%7B1i%7DA_%7B1i%7D+a_%7B2i%7DA_%7B2i%7D+...+a_%7Bni%7DA_%7Bni%7D%EF%BC%88i=1,2%EF%BC%8C...n%EF%BC%89" alt="[公式]"></p><p>3、n阶范德蒙德行列式（注意行列都有n个）</p><p><img src="https://pic3.zhimg.com/v2-a36a8c214962edbf616a29de85ad051e_r.jpg" alt="img"></p><p>4、在n阶行列式<img src="https://www.zhihu.com/equation?tex=D=%7Ca_%7Bij%7D%7C" alt="[公式]">中，某一行（列）元素与另一行（列）相应元素的代数余子式乘积的和等于零，于是对于 <img src="https://www.zhihu.com/equation?tex=1%E2%89%A4i%E2%89%A4n" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=1%E2%89%A4j%E2%89%A4n" alt="[公式]"> ，下面的等式成立</p><p>某一行的元素与另一行元素的代数余子式： <img src="https://www.zhihu.com/equation?tex=a_%7Bi1%7DA_%7Bj1%7D+a_%7Bi2%7DA_%7Bj2%7D+....+a_%7Bin%7DA_%7Bjn%7D=0%EF%BC%88i%E2%89%A0j%EF%BC%89" alt="[公式]"></p><p>某一列的元素与另一列元素的代数余子式：</p><p><img src="https://www.zhihu.com/equation?tex=a_%7B1i%7DA_%7B1j%7D+a_%7B2i%7DA_%7B2j%7D+....+a_%7Bni%7DA_%7Bnj%7D=0%EF%BC%88i%E2%89%A0j%EF%BC%89" alt="[公式]"></p><p>5、克拉默法则：</p><p><img src="https://pic4.zhimg.com/v2-362c3cbe344e173cac95b8404dc2ef3f_r.jpg" alt="img"></p><p>6、定理：如果齐次线性方程组</p><p><img src="https://pic1.zhimg.com/80/v2-74b0613b7ba3f067b0715e03e4a51d74_1440w.jpg" alt="img"></p><p>的系数行列式<strong>D≠0</strong>，则它只有零解（即x1、x2…全为0）</p><p>（换句话说，如果其次线性方程组有非零解，那么系数行列式D=0）</p><p>7、拉普拉斯展开定理：</p><p><strong>（1）基础知识：</strong>设k是不大于n的正整数，在n阶行列式中，选定k行k列，</p><p><strong>k阶子式M：</strong>位于这k行k列<strong>交点处</strong>的 <img src="https://www.zhihu.com/equation?tex=k%5E%7B2%7D" alt="[公式]"> 个元素<strong>按原来的次序</strong>组成一个<strong>k阶行列式M。</strong></p><p><strong>M的余子式N：</strong>若把<strong>选定</strong>的k行k列<strong>划去</strong>，则<strong>余下的</strong> <img src="https://www.zhihu.com/equation?tex=(n-k)%5E%7B2%7D" alt="[公式]"> 个元素按<strong>原来的次序</strong>组成一个<strong>n-k阶</strong>行列式N。</p><p><strong>M的代数余子式A：设选定的k行为第</strong> <img src="https://www.zhihu.com/equation?tex=i_%7B1%7D,i_%7B2%7D...i_%7Bk%7D" alt="[公式]"> 行，选定的k列为第 <img src="https://www.zhihu.com/equation?tex=j_%7B1%7D,j_%7B2%7D...j_%7Bk%7D" alt="[公式]"> 列，此时称 <img src="https://www.zhihu.com/equation?tex=(-1)%5E%7Bi_%7B1%7D+i_%7B2%7D+...i_%7Bk%7D+j_%7B1%7D+i_%7B2%7D+...j_%7Bk%7D%7D%C2%B7N" alt="[公式]"> <strong>为M 的代数余子式。</strong></p><p><strong>（2）拉普拉斯展开定理：</strong></p><p>设k是小于n的正整数，在n阶行列式D中<strong>选定K行k列</strong>（<strong>注意！！此时有</strong> <img src="https://www.zhihu.com/equation?tex=t=C_%7Bn%7D%5E%7Bk%7D" alt="[公式]"> 种<strong>取法</strong>），然后把<strong>每一种取法</strong>的<strong>k阶子式M</strong>和他们<strong>各自的代数余子式</strong>的<strong>乘积之和</strong>等于行列式D。</p><p>即 <img src="https://www.zhihu.com/equation?tex=D=M_%7B1%7DA_%7B1%7D+M_%7B2%7DA_%7B2%7D+...M_%7Bt%7DA_%7Bt%7D" alt="[公式]"> （这里是有<strong>t个数</strong>相加！，因为有<strong>t种取法</strong>）</p><h1 id="证明：行列式D的某一行-列-与另一行-列-对应元素的代数余子式乘积之和等于0"><a href="#证明：行列式D的某一行-列-与另一行-列-对应元素的代数余子式乘积之和等于0" class="headerlink" title="证明：行列式D的某一行(列)与另一行(列)对应元素的代数余子式乘积之和等于0"></a>证明：行列式D的某一行(列)与另一行(列)对应元素的代数余子式乘积之和等于0</h1><p>证明如下</p><p><a href="https://iknow-pic.cdn.bcebos.com/e850352ac65c10386ae4dbc1ba119313b07e891e"><img src="https://iknow-pic.cdn.bcebos.com/e850352ac65c10386ae4dbc1ba119313b07e891e?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="img"></a></p><p>例题如下</p><p>题中元素自己可以随便取值</p><p><a href="https://iknow-pic.cdn.bcebos.com/730e0cf3d7ca7bcb1377d32cb6096b63f624a8a0"><img src="https://iknow-pic.cdn.bcebos.com/730e0cf3d7ca7bcb1377d32cb6096b63f624a8a0?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="img"></a></p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微分中值处理之常数k值法</title>
      <link href="2021/04/20/%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%A4%84%E7%90%86%E4%B9%8B%E5%B8%B8%E6%95%B0k%E5%80%BC%E6%B3%95/"/>
      <url>2021/04/20/%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%A4%84%E7%90%86%E4%B9%8B%E5%B8%B8%E6%95%B0k%E5%80%BC%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>此文章为转载</p><p>微分中值定理的题，往往作为难题来压轴。事实上，微分中值定理的题也是千变万化，搞得人心惶惶。并且，微分中值定理的题不像求极限那样可以用Taylor公式暴力求解。那么，今天，我来介绍一种（部分微分中值定理题的）暴力求法。</p><h2 id="常数K值法"><a href="#常数K值法" class="headerlink" title="常数K值法"></a><strong>常数K值法</strong></h2><p>首先，我们来回忆一下拉格朗日中值定理的一个证法：</p><p>（这个证法可能和大部分书上的不太一样）</p><p>已知：</p><p><img src="https://www.zhihu.com/equation?tex=f(x)%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D_%7B(a,b)%7D" alt="[公式]"></p><p>求证：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(a,b),s.t.f%27(x_0)=%5Cfrac%7Bf(b)-f(a)%7D%7Bb-a%7D" alt="[公式]"></p><p>证明：</p><p>设 <img src="https://www.zhihu.com/equation?tex=K=%5Cfrac%7Bf(b)-f(a)%7D%7Bb-a%7D" alt="[公式]">为常数 ,记 <img src="https://www.zhihu.com/equation?tex=g(x)=K(x-a)-%5Cleft(+f(x)-f(a)%5Cright)" alt="[公式]"> ,</p><p>那么 <img src="https://www.zhihu.com/equation?tex=g(a)=g(b)=0" alt="[公式]"> ，且 <img src="https://www.zhihu.com/equation?tex=g(x)%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D_%7B(a,b)%7D" alt="[公式]"></p><p>所以由Rolle定理，得：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(a,b),s.t.g%27(x_0)=0" alt="[公式]"></p><p>即：</p><p><img src="https://www.zhihu.com/equation?tex=K-f%27(x_0)=0" alt="[公式]"></p><p>定理得证</p><p>这是用常数K值法解题的标准步骤，最后一步大家可能觉得有些费解。事实上，最后一步将我们一开始设的K代入，就是在说， <img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(a,b),s.t.+f%27(x_0)=%5Cfrac%7Bf(b)-f(a)%7D%7Bb-a%7D" alt="[公式]"></p><h2 id="那么，下面我们介绍常数K值法的一般步骤："><a href="#那么，下面我们介绍常数K值法的一般步骤：" class="headerlink" title="那么，下面我们介绍常数K值法的一般步骤："></a>那么，下面我们介绍<strong>常数K值法的一般步骤</strong>：</h2><p>(这个 厌恶形式化的人 就可以略过啦)</p><p>首先，我们要知道，常数K值法适用的证明题中，我们要证的式子，长成什么样。</p><p>我们已知的常数，得是 <img src="https://www.zhihu.com/equation?tex=a_0,a_1,...,a_n" alt="[公式]"> 这 <img src="https://www.zhihu.com/equation?tex=n+1" alt="[公式]"> 个数，其中 <img src="https://www.zhihu.com/equation?tex=n+%5Cgeq+1" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=a_0+%5Cleq+a_1+%5Cleq...%5Cleq+a_n" alt="[公式]"></p><p>我们最常见的证明题，是两个数，a和b作为区间的端点，但也有可能和区间[a,b]和其中的一点c有关,所以我们这里介绍的是多元的情况</p><p>我们要证的那个中值 <img src="https://www.zhihu.com/equation?tex=x_0" alt="[公式]"> ,是介于 <img src="https://www.zhihu.com/equation?tex=(a_0,a_n)" alt="[公式]"> 之间的一个数。</p><p>我们要证的式子，可以化成左边仅与 <img src="https://www.zhihu.com/equation?tex=f%5E%7B(n)%7D(x_0)" alt="[公式]"> 有关的式子 <img src="https://www.zhihu.com/equation?tex=G(f%27(x_0))" alt="[公式]"> ，右边仅与 <img src="https://www.zhihu.com/equation?tex=f(a_0),f(a_1),...,f(a_n)" alt="[公式]"> 及 <img src="https://www.zhihu.com/equation?tex=a_0,a_1,...,a_n" alt="[公式]"> 有关的式子 <img src="https://www.zhihu.com/equation?tex=F(f(a_0),f(a_1),...,f(a_n),a_1,a_2,...,a_n)" alt="[公式]"> ,（即不能出现 <img src="https://www.zhihu.com/equation?tex=f(%5Cfrac%7Ba+b%7D%7B2%7D)" alt="[公式]"> 这样的式子），且要求 <img src="https://www.zhihu.com/equation?tex=%5Cforall+0+%5Cleq+i%5Cleq+n" alt="[公式]"> ,有 对于<img src="https://www.zhihu.com/equation?tex=F(f(a_0),f(a_1),...,f(a_i),...,f(a_n),a_1,a_2,...,i,...,a_n)" alt="[公式]"> ，将第n项换成第i项得到的式子</p><p><img src="https://www.zhihu.com/equation?tex=F(f(a_0),f(a_1),...,f(a_i),...,f(a_i),...,f(a_i),a_1,a_2,...,a_i,...,a_i)" alt="[公式]"> ,将其化为整式形式（一般是把分母乘到等号另一边去）后，变成 <img src="https://www.zhihu.com/equation?tex=F_1(f(a_0),f(a_1),...f(a_i),...,f(a_i),a_1,a_2,...,a_i...,a_i)G(f%27(x_0))=F_2(f(a_0),f(a_1),...,f(a_i)...,f(a_i),a_1,a_2,...,a_i...,a_i)" alt="[公式]"></p><p>可以化成 <img src="https://www.zhihu.com/equation?tex=0=0" alt="[公式]"> 型</p><p>那么就可以使用常数K值法。</p><p>步骤是：</p><p>设 <img src="https://www.zhihu.com/equation?tex=G(K)=F(f(a_0),f(a_1),...,f(a_n),a_1,a_2,...,a_n)" alt="[公式]"> 为常数，设函数</p><p><img src="https://www.zhihu.com/equation?tex=g(x)=F_1(f(a_0),f(a_1),...,f(x),a_1,a_2,...,x)G(K)-F_2(f(a_0),f(a_1),...,f(x),a_1,a_2,...,x)" alt="[公式]"></p><p>注意到这里把 <img src="https://www.zhihu.com/equation?tex=a_n" alt="[公式]"> 都换成了x</p><p>那么经过代入计算可以得到， <img src="https://www.zhihu.com/equation?tex=g(a_0)=g(a_1)=...=g(a_n)=0" alt="[公式]"></p><p>所以由Rolle中值定理可以得到，存在n个数 <img src="https://www.zhihu.com/equation?tex=b_i+%5Cin+(a_i,a_%7Bi+1%7D)" alt="[公式]"> ，使得 <img src="https://www.zhihu.com/equation?tex=g%27(b_i)=0" alt="[公式]"></p><p>再运用n-1次Rolle定理，可以得到 <img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(a,b)" alt="[公式]"> ,<img src="https://www.zhihu.com/equation?tex=s.t.g%5E%7B(n)%7D(x_0)=0" alt="[公式]"></p><p>此时我们可以发现， <img src="https://www.zhihu.com/equation?tex=g%5E%7B(n)%7D(x_0)=A(K-f%5E%7B(n)%7D(x_0))=0" alt="[公式]"> ,消去A，定理得证。</p><p>常数K值法的普适性的验证比较麻烦，这里我也不再证明。</p><h2 id="给出几个运用常数K值法的例子"><a href="#给出几个运用常数K值法的例子" class="headerlink" title="给出几个运用常数K值法的例子"></a><strong>给出几个运用常数K值法的例子</strong></h2><p><strong>其实还是这个比较直观，嗯。</strong></p><p>最开头我们给了二元的常数K值法的例子，即拉格朗日中值定理的证明。下面我们给一个三元的形式：</p><p>已知：</p><p><img src="https://www.zhihu.com/equation?tex=f%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D%5E2_%7B(a,b)%7D" alt="[公式]"></p><p>求证：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cforall+c+%5Cin+(a,b),%5Cexists+x_0+%5Cin+(a,b),s.t." alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf%27%27(x_0)%7D%7B2%7D=%5Cfrac%7Bf(a)%7D%7B(a-b)(a-c)%7D+%5Cfrac%7Bf(b)%7D%7B(b-a)(b-c)%7D+%5Cfrac%7Bf(c)%7D%7B(c-a)(c-b)%7D" alt="[公式]"></p><p>证明：</p><p>记</p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7BK%7D%7B2%7D=%5Cfrac%7Bf(a)%7D%7B(a-b)(a-c)%7D+%5Cfrac%7Bf(b)%7D%7B(b-a)(b-c)%7D+%5Cfrac%7Bf(c)%7D%7B(c-a)(c-b)%7D" alt="[公式]"></p><p>设</p><p><img src="https://www.zhihu.com/equation?tex=g(x)=%5Cfrac%7BK%7D%7B2%7D%5Cleft(+(a-x)(x-c)(c-a)+%5Cright)++f(a)(x-c)+f(x)(c-a)+f(c)(a-x)" alt="[公式]"></p><p>那么 <img src="https://www.zhihu.com/equation?tex=g(a)=g(c)=g(b)=0" alt="[公式]"></p><p>又 <img src="https://www.zhihu.com/equation?tex=g%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D_%7B(a,b)%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=%5Cexists+x_1%5Cin(a,c),x_2%5Cin(c,b),s.t.g%27(x_1)=g%27(x_2)=0" alt="[公式]"></p><p>又 <img src="https://www.zhihu.com/equation?tex=g%27%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D_%7B(a,b)%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(x_1,x_2)%5Csubset(a,b),s.t.g%27%27(x_0)=0" alt="[公式]"></p><p>而 <img src="https://www.zhihu.com/equation?tex=g%27%27(x_0)=%5Cfrac%7BK%7D%7B2%7D%5Ccdot2(a-c)+f%27%27(x_0)(c-a)" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=K=f%27%27(x_0)" alt="[公式]"></p><p>定理得证</p><p>由此可见，检验要证的式子符不符合常数K值法的条件，我们一般只需要目测就好。</p><p>再给一道常数K值法拓展的题，也就是出现了 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Ba+b%7D%7B2%7D" alt="[公式]"> 的式子。这时，我们也就不能只用Rolle定理了，我们还需要用Lagrange中值定理，甚至Cauchy中值定理。</p><p>已知：</p><p><img src="https://www.zhihu.com/equation?tex=f%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D%5E2_%7B(a,b)%7D" alt="[公式]"></p><p>求证：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(a,b),s.t.f(a)-2f(%5Cfrac%7Ba+b%7D%7B2%7D)+f(b)=%5Cfrac%7B(b-a)%5E2%7D%7B4%7Df%27%27(x_0)" alt="[公式]"></p><p>证明：</p><p>记</p><p><img src="https://www.zhihu.com/equation?tex=f(a)-2f(%5Cfrac%7Ba+b%7D%7B2%7D)+f(b)=%5Cfrac%7B(b-a)%5E2%7D%7B4%7DK" alt="[公式]"></p><p>设</p><p><img src="https://www.zhihu.com/equation?tex=g(x)=%5Cfrac%7B(x-a)%5E2%7D%7B4%7DK-%5Cleft(+f(a)-2f(%5Cfrac%7Ba+x%7D%7B2%7D)+f(x)%5Cright)" alt="[公式]"></p><p>那么 <img src="https://www.zhihu.com/equation?tex=g(a)=g(b)=0" alt="[公式]"></p><p>又 <img src="https://www.zhihu.com/equation?tex=g%5Cin+C_%7B%5Ba,b%5D%7D%5Ccap+D_%7B(a,b)%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=%5Cexists+x_1%5Cin+(a,b),s.t.g%27(x_1)=0" alt="[公式]"></p><p>而 <img src="https://www.zhihu.com/equation?tex=g%27(x_1)=%5Cfrac%7Bx_1-a%7D%7B2%7DK-%5Cleft(-f%27(%5Cfrac%7Ba+x_1%7D%7B2%7D)+f%27(x_1)%5Cright)=0" alt="[公式]"></p><p>故</p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf%27(x_1)-f%27(%5Cfrac%7Ba+x_1%7D%7B2%7D)%7D%7B%5Cfrac%7Bx_1-a%7D%7B2%7D%7D=K" alt="[公式]"></p><p>而 <img src="https://www.zhihu.com/equation?tex=f%27%5Cin+C_%7B%5B%5Cfrac%7Bx_1+a%7D%7B2%7D,x_1%5D%7D%5Ccap+D_%7B(%5Cfrac%7Bx_1+a%7D%7B2%7D,x_1)%7D" alt="[公式]"></p><p>故由Lagrange中值定理：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cexists+x_0+%5Cin+(%5Cfrac%7Bx_1+a%7D%7B2%7D,x_1)+%5Csubset+(a,b)" alt="[公式]"> ,s.t. <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bf%27(x_1)-f%27(%5Cfrac%7Ba+x_1%7D%7B2%7D)%7D%7B%5Cfrac%7Bx_1-a%7D%7B2%7D%7D=f%27%27(x_0)" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=K=f%27%27(x_0)" alt="[公式]"></p><p>定理得证</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>总的来说，常数K值法还是比较暴力的一种方法，所以除非无计可施的情况下，才用这种方法。而且，许多含有中值的不等式并不能用常数K值法解出来。所以常数K值法也是有局限的。</p><p>最后说一句，Taylor大法好，Lagrange余项赛高！</p><p>由于我水平并不高，文章中必然存在着种种错误，希望各位对我文章中的错误不吝斧正！</p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Github、Travis-CI和Coding.net自动部署博客［三］</title>
      <link href="2021/04/19/2017-06-22-blog-with-github-travis-ci-and-coding-net-3/"/>
      <url>2021/04/19/2017-06-22-blog-with-github-travis-ci-and-coding-net-3/</url>
      
        <content type="html"><![CDATA[<p>迟迟到来的第三篇，也就是最后一篇。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">script</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">sh</span> <span class="string">.travis/deploy.sh</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这是 Travis CI 的部署步骤的配置，“部署” 是整个工作流的最后一步，这里只注意 <strong>branch: master</strong>，道理和上一个说明一样，其他照抄；</p><h3 id="编写部署脚本"><a href="#编写部署脚本" class="headerlink" title="编写部署脚本"></a>编写部署脚本</h3><p><strong>Travis CI</strong> 的工作流最后一步是<strong>部署</strong>的功能，我们利用它本身的配置需求进行配置，并且编写相关脚本，这样就可以达到部署博客的需求了。</p><p>在博客根目录下添加 <strong>.travis</strong> 文件夹，文件目录结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blogroot &#x2F;&#x2F; 博客根目录</span><br><span class="line">└── .travis</span><br><span class="line">    ├── deploy.sh</span><br><span class="line">    ├── private_key.enc</span><br><span class="line">    └── ssh_config</span><br></pre></td></tr></table></figure><ul><li>deploy.sh 是执行脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Decrypt the private key</span></span><br><span class="line">openssl aes-256-cbc -K $encrypted_adc0b7f2dba9_key -iv $encrypted_adc0b7f2dba9_iv -in .travis/private_key.enc -out ~/.ssh/id_rsa -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the permission of the key</span></span><br><span class="line">chmod 600 ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start SSH agent</span></span><br><span class="line">eval $(ssh-agent)</span><br><span class="line"><span class="meta">#</span><span class="bash"> Add the private key to the system</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line"><span class="meta">#</span><span class="bash"> Copy SSH config</span></span><br><span class="line">cp .travis/ssh_config ~/.ssh/config</span><br><span class="line"><span class="meta">#</span><span class="bash"> Set Git config</span></span><br><span class="line">git config --global user.name &quot;henryhuang&quot;</span><br><span class="line">git config --global user.email h1886@outlook.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deploy to GitHub</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这个脚本的功能就是执行 <strong>hexo deploy</strong>，有人说那直接执行不就完了吗？</p><p>非也！我们要部署代码，就是要执行 <strong>git push</strong> 的操作，而这一步是需要 <strong>ssh key</strong> 的，否则你是没有权限给一个 git repository push 代码的，而这个脚本除了最后一步，其他所有的代码都是在构建这个带 ssh key 的上下文环境。</p><p>什么都不用管，照抄就行，只用管以下两个配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Decrypt the private key</span></span><br><span class="line">openssl aes-256-cbc -K $encrypted_adc0b7f2dba9_key -iv $encrypted_adc0b7f2dba9_iv -in .travis/private_key.enc -out </span><br></pre></td></tr></table></figure><p>这行代码的作用就是获取你的key，毕竟私钥是不能放到代码里了，要是被别人看到了怎么办？所以Travis让你在本地用Travis知道的key对你的私钥进行加密，得到这个 <strong>private_key.enc</strong>，而这个key是由你自己配置到Travis上的，而这个key的名字是什么呢？就是上面的 $encrypted_adc0b7f2dba9_key 和 $encrypted_adc0b7f2dba9_iv，具体怎么配置，可以查看官网的说明 <a href="https://docs.travis-ci.com/user/encrypting-files/#Automated-Encryption">https://docs.travis-ci.com/user/encrypting-files/#Automated-Encryption</a>.</p><p>最后编写完成脚本后，上传代码到GitHub就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> travis </tag>
            
            <tag> coding.net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx使用SSL证书配置https</title>
      <link href="2021/04/18/qcloud-nginx-ssl/"/>
      <url>2021/04/18/qcloud-nginx-ssl/</url>
      
        <content type="html"><![CDATA[<h2 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><p>首先申请SSL证书，这里以腾讯云的免费DVSSL证书为例，前往 <a href="https://console.cloud.tencent.com/ssl/apply">https://console.cloud.tencent.com/ssl/apply</a></p><ul><li>填入通用名称，比如 <a href="http://www.wxio.club/">www.wxio.club</a></li><li>最好不要密码</li><li>填好其他信息</li><li>点击下一步，如果域名在腾讯云解析，就选择 <em>自动DNS验证</em>，否则按照选项进行配置</li><li>点击确认申请</li></ul><h2 id="下载和上传证书"><a href="#下载和上传证书" class="headerlink" title="下载和上传证书"></a>下载和上传证书</h2><p>前往 <a href="https://console.cloud.tencent.com/ssl">https://console.cloud.tencent.com/ssl</a> 下载刚申请的证书，以 <a href="http://www.wxio.club/">www.wxio.club</a> 为例，解压后有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Apache</span><br><span class="line">│   ├── 1_root_bundle.crt</span><br><span class="line">│   ├── 2_www.wxio.club.crt</span><br><span class="line">│   └── 3_www.wxio.club.key</span><br><span class="line">├── IIS</span><br><span class="line">│   ├── keystorePass.txt</span><br><span class="line">│   └── www.wxio.club.pfx</span><br><span class="line">├── Nginx</span><br><span class="line">│   ├── 1_www.wxio.club_bundle.crt</span><br><span class="line">│   └── 2_www.wxio.club.key</span><br><span class="line">├── Tomcat</span><br><span class="line">│   ├── keystorePass.txt</span><br><span class="line">│   └── www.wxio.club.jks</span><br><span class="line">└── www.wxio.club.csr</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复制Nginx里的 1_<a href="http://www.wxio.club_bundle.crt/">www.wxio.club_bundle.crt</a> 和 2_<a href="http://www.wxio.club.key/">www.wxio.club.key</a> 到服务器的 /etc/nginx （其实那都可以）</p><h2 id="配置-nginx-conf"><a href="#配置-nginx-conf" class="headerlink" title="配置 nginx.conf"></a>配置 nginx.conf</h2><p>编辑器打开 /etc/nginx/nginx.conf, 在 http 下面，添加或者修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.wxio.club wxio.club;</span><br><span class="line">        rewrite ^(.*)$ https:&#x2F;&#x2F;$&#123;server_name&#125;$1 permanent; # 这里是使 http 跳转到 https</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.wxio.club wxio.club;</span><br><span class="line"></span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate 1_www.wxio.club_bundle.crt; # 这里可以写 .crt 的全路径</span><br><span class="line">        ssl_certificate_key 2_www.wxio.club.key; # 这里可以写 .key 的全路径</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                root &#x2F;home&#x2F;git&#x2F;www&#x2F;public;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重启-nginx-服务"><a href="#重启-nginx-服务" class="headerlink" title="重启 nginx 服务"></a>重启 nginx 服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> qcloud </tag>
            
            <tag> ssl </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数思维导图</title>
      <link href="2021/04/17/port/"/>
      <url>2021/04/17/port/</url>
      
        <content type="html"><![CDATA[<p><a href="https://pic2.zhimg.com/80/v2-2ba42f10d321d175890b24d6addda96d_1440w.jpg">https://pic2.zhimg.com/80/v2-2ba42f10d321d175890b24d6addda96d_1440w.jpg</a></p><p><img src="https://pic2.zhimg.com/80/v2-2ba42f10d321d175890b24d6addda96d_1440w.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数——微分方程的通解和特解</title>
      <link href="2021/04/17/port%E9%AB%98%E6%95%B0%E2%80%94%E2%80%94%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E9%80%9A%E8%A7%A3%E5%92%8C%E7%89%B9%E8%A7%A3/"/>
      <url>2021/04/17/port%E9%AB%98%E6%95%B0%E2%80%94%E2%80%94%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E9%80%9A%E8%A7%A3%E5%92%8C%E7%89%B9%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>微分方程中通解与特解的定义：</p><p>y’’+py’+qy=0，等式右边为零，为二阶常系数齐次线性方程；</p><p>y’’+py’+qy=f（x），等式右边为一个函数式，为二阶常系数非齐次线性方程。</p><p>可见，后一个方程可以看为前一个方程添加了一个约束条件。</p><p>对于第一个微分方程，目标为求出y的表达式。由此得到的解，称为【通解】，通解代表着这是解的集合。</p><p>因为M个变量，需要M个个约束条件才能全部解出。由此，在变量相同的条件下，多一个约束条件f（y），就可以多确定一个解，此解就称为【特解】。</p><p>求微分方程通解的方法：</p><blockquote><p>方程<br><img src="https://www.zhihu.com/equation?tex=+%5Cfrac%7Bdy%7D%7Bdx%7D+P(x)y=Q(x)%5C+%5C+%5C+%5C+%5C+%5C+%5C+%5C+(1)+%5C%5C" alt="[公式]"> 叫做<strong>一阶线性微分方程</strong>，因为它对于未知函数<img src="https://www.zhihu.com/equation?tex=y" alt="[公式]">及其导数是一次方程. 如果<img src="https://www.zhihu.com/equation?tex=Q(x)%5Cequiv0" alt="[公式]">，则方程（1）称为<strong>齐次的</strong>；如果<img src="https://www.zhihu.com/equation?tex=Q(x)%5Cnot%5Cequiv0" alt="[公式]">，则方程（1）称为<strong>非齐次的</strong>.</p></blockquote><ul><li>为了求出非齐次线性方程（1）的解，我们先把<img src="https://www.zhihu.com/equation?tex=Q(x)" alt="[公式]"> 换成零而写成方程</li></ul><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7Bdx%7D+P(x)y=0%5C+%5C+%5C+%5C+%5C+%5C+%5C+%5C+(2).+%5C%5C" alt="[公式]"></p><p>方程（2）叫做<strong>对应于非齐次线性方程（1）的齐次线性方程</strong>.</p><ul><li>齐次方程（2）<strong>分离变量</strong>后，得</li></ul><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7By%7D=-P(x)dx,+%5C%5C" alt="[公式]"></p><p>两端积分，得</p><p><img src="https://www.zhihu.com/equation?tex=++%5Cln%7Cy%7C=-%5Cint+P(x)dx+C_1,+%5C%5C" alt="[公式]"></p><p>或</p><p><img src="https://www.zhihu.com/equation?tex=y=Ce%5E%7B-%5Cint+P(x)dx%7D,~~%5Ctext%7B%E5%85%B6%E4%B8%AD%7DC=%5Cpm+e%5E%7BC_1%7D.+%5C%5C" alt="[公式]"></p><p>这便是对应的齐次线性方程（2）的通解.</p><ul><li><strong>常数变易法</strong>：把（2）的通解中的<img src="https://www.zhihu.com/equation?tex=C" alt="[公式]">换成<img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 的未知函数<img src="https://www.zhihu.com/equation?tex=u(x)" alt="[公式]">，作变换</li></ul><p><img src="https://www.zhihu.com/equation?tex=++y=ue%5E%7B-%5Cint+P(x)dx%7D%5C+%5C+%5C+%5C+%5C+%5C+%5C+%5C+(3).+%5C%5C" alt="[公式]"></p><p>于是</p><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7Bdx%7D=u%27e%5E%7B-%5Cint+P(x)dx%7D-uP(x)e%5E%7B-%5Cint+P(x)dx%7D%5C+%5C+%5C+%5C+%5C+%5C+%5C+%5C+(4).+%5C%5C" alt="[公式]"></p><p>将（3）和（4）代入方程（1），得</p><p><img src="https://www.zhihu.com/equation?tex=++u%27e%5E%7B-%5Cint+P(x)dx%7D-uP(x)e%5E%7B-%5Cint+P(x)dx%7D+P(x)ue%5E%7B-%5Cint+P(x)dx%7D=Q(x),+%5C%5C" alt="[公式]"></p><p>等号左边中间两项抵消掉，得</p><p><img src="https://www.zhihu.com/equation?tex=++u%27e%5E%7B-%5Cint+P(x)dx%7D=Q(x),u%27=Q(x)e%5E%7B%5Cint+P(x)dx%7D.+%5C%5C" alt="[公式]"></p><p>两端积分，得</p><p><img src="https://www.zhihu.com/equation?tex=++u=%5Cint+Q(x)e%5E%7B%5Cint+P(x)dx%7Ddx+C.+%5C%5C" alt="[公式]"></p><ul><li>把上式代入（3），便得非齐次线性方程（1）的通解</li></ul><p><img src="https://www.zhihu.com/equation?tex=++y=e%5E%7B-%5Cint+P(x)dx%7D(%5Cint+Q(x)e%5E%7B%5Cint+P(x)dx%7Ddx+C)%5C+%5C+%5C+%5C+%5C+%5C+%5C+%5C+(5).+%5C%5C" alt="[公式]"></p><ul><li>将（5）式改写成两项之和</li></ul><p><img src="https://www.zhihu.com/equation?tex=++y=Ce%5E%7B-%5Cint+P(x)dx%7D+e%5E%7B-%5Cint+P(x)dx%7D%5Cint+Q(x)e%5E%7B%5Cint+P(x)dx%7Ddx.+%5C%5C" alt="[公式]"></p><ul><li>第一项是对应的齐次线性方程（2）的<strong>通解</strong>，</li><li>第二项是非齐次线性方程（1）的一个<strong>特解</strong>（在通解（5）中取<img src="https://www.zhihu.com/equation?tex=C=0" alt="[公式]">便得到这个特解）.</li></ul><blockquote><p><strong>一阶非齐次线性方程的通解等于对应的齐次方程的通解与非齐次方程的一个特解之和.</strong></p></blockquote><ul><li>求方程</li></ul><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7Bdx%7D-%5Cfrac%7B2y%7D%7Bx+1%7D=(x+1)%5E%7B%5Cfrac%7B5%7D%7B2%7D%7D+%5C%5C" alt="[公式]"></p><p>的通解.</p><ul><li>先用<strong>分离变量法</strong>求对应的齐次方程</li></ul><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7Bdx%7D-%5Cfrac%7B2%7D%7Bx+1%7Dy=0,+%5C%5C" alt="[公式]"></p><p>的通解.</p><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7By%7D=%5Cfrac%7B2dx%7D%7Bx+1%7D,+%5C%5C" alt="[公式]"></p><p>两边求不定积分，得</p><p><img src="https://www.zhihu.com/equation?tex=++%5Cln%7Cy%7C=2%5Cln%7Cx+1%7C+%5Cln%7CC_1%7C,+%5C%5C" alt="[公式]"></p><p>也即</p><p><img src="https://www.zhihu.com/equation?tex=++y=C_1(x+1)%5E2.+%5C%5C" alt="[公式]"></p><ul><li>用<strong>常数变易法</strong>，把<img src="https://www.zhihu.com/equation?tex=C_1" alt="[公式]">换成<img src="https://www.zhihu.com/equation?tex=u" alt="[公式]">，即令</li></ul><p><img src="https://www.zhihu.com/equation?tex=++y=u(x+1)%5E2%5C+%5C+%5C+%5C+%5C+%5C+%5C+%5C+(6),+%5C%5C" alt="[公式]"></p><p>则</p><p><img src="https://www.zhihu.com/equation?tex=++%5Cfrac%7Bdy%7D%7Bdx%7D=u%27(x+1)%5E2+2u(x+1).+%5C%5C" alt="[公式]"></p><p>代入所给非齐次方程，得</p><p><img src="https://www.zhihu.com/equation?tex=++u%27=(x+1)%5E%7B%5Cfrac%7B1%7D%7B2%7D%7D.+%5C%5C" alt="[公式]"></p><p>两端积分，得</p><p><img src="https://www.zhihu.com/equation?tex=u=%5Cfrac%7B2%7D%7B3%7D(x+1)%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D+C.+%5C%5C" alt="[公式]"></p><ul><li>再把上式代入(6)式，即得所求方程的通解为</li></ul><p><img src="https://www.zhihu.com/equation?tex=y=(x+1)%5E2%5B%5Cfrac%7B2%7D%7B3%7D(x+1)%5E%7B%5Cfrac%7B3%7D%7B2%7D%7D+C%5D.+%5C%5C" alt="[公式]"></p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坂本龙一先生对我的影响</title>
      <link href="2021/04/16/port%E5%9D%82%E6%9C%AC%E9%BE%99%E4%B8%80%E5%85%88%E7%94%9F%E5%AF%B9%E6%88%91%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>2021/04/16/port%E5%9D%82%E6%9C%AC%E9%BE%99%E4%B8%80%E5%85%88%E7%94%9F%E5%AF%B9%E6%88%91%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p>硬要说影响几乎没有，自然流露的就是最好的，他的通透就是我繁琐俗常生活的一面自我之象吧。</p><p>不忘记看每天的月亮，直至生命燃尽：坂本龙一68岁了</p><iframe frameborder="0" allowfullscreen src="https://www.zhihu.com/video/1200375282907267072?autoplay=false&amp;useMSE="></iframe><p>《坂本龙一：终曲》正在中国上映，</p><p>导演史蒂芬从2012年到2017年，</p><p>5年跟拍制作，</p><p>完成这部关于坂本龙一的纪录片。</p><p>豆瓣上3万5千人看过，打出8.8的高分。</p><p><img src="https://pic1.zhimg.com/50/v2-2998f7738c6c2ad054171d8d233a67a8_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-2998f7738c6c2ad054171d8d233a67a8_r.jpg?source=1940ef5c" alt="img"></p><p>1989年 摄影：Albert Watson</p><p>坂本龙一，被大家昵称“教授”，</p><p>世界级音乐家、电影配乐大师，</p><p>是亚洲年轻人的共同偶像。</p><p><img src="https://pic4.zhimg.com/50/v2-73fc99cb5f0cb5e514466b958694c73c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-73fc99cb5f0cb5e514466b958694c73c_r.jpg?source=1940ef5c" alt="img"></p><p>坂本年轻时组乐队YMO，在欧美和日本走红，</p><p>对后世的电子乐、hip-hop有开创性影响，</p><p>35岁因《末代皇帝》获得奥斯卡最佳原创配乐。</p><p>38岁定居纽约后，</p><p>常以环保、反战为题材进行创作。</p><p>粉丝对他的喜爱，早就不限音乐，</p><p>而是把他当做一种文化ICON、</p><p>一个精神领袖，去崇敬。</p><p><img src="https://pic2.zhimg.com/50/v2-2a4c1ea7a78d4bf6a6bbfa87e38e276f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-2a4c1ea7a78d4bf6a6bbfa87e38e276f_r.jpg?source=1940ef5c" alt="img">一条专访斯蒂芬导演</p><p>再过一周，就是坂本龙一的68岁生日。</p><p>我们在《坂本龙一：终曲》上映之际，</p><p>专访了来到北京的史蒂芬导演，</p><p>“我希望这部电影，能让大家感受到</p><p>坂本龙一是如何听到这个世界的。”  <strong>编辑 倪蒹葭</strong></p><p><img src="https://pic4.zhimg.com/50/v2-116078311a84bf9a10d737634c4c304a_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-116078311a84bf9a10d737634c4c304a_r.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic4.zhimg.com/50/v2-b1311b063acbda54cfd48a388b61ff95_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-b1311b063acbda54cfd48a388b61ff95_r.jpg?source=1940ef5c" alt="img"></p><p>2017年9月，威尼斯电影节，纪录片《坂本龙一：终曲》世界首映，现场观众起立鼓掌，长时间不息。</p><p>前排的坂本龙一有些害羞，他略有尴尬地对身边的纪录片导演说：斯蒂芬，我们离开这里吧。</p><p>《坂本龙一：终曲》记录了这位音乐家，在日本福岛核泄露、及亲历咽喉癌之后，如何用艺术回应灾难，重新开始创作音乐。</p><p>2019年12月，电影终于在中国上映。乐迷、影迷等各路粉丝，纷纷前往膜拜。</p><p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/dc7bf35c-23c4-11eb-b41f-86c835170013.mp4?disable_local_cache=1&amp;auth_key=1618591333-0-0-7e822bfcbe0f42ae907c128a310e315f&amp;f=mp4&amp;bu=pico&amp;expiration=1618591333&amp;v=hw" data-thumbnail="https://pic1.zhimg.com/50/v2-ef62e3c5be230f0e204aa7369698778f_hd.jpg?source=1940ef5c" poster="https://pic1.zhimg.com/50/v2-ef62e3c5be230f0e204aa7369698778f_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p><p><img src="https://pic1.zhimg.com/50/v2-ef62e3c5be230f0e204aa7369698778f_hd.jpg?source=1940ef5c" alt="img"></p><p>坂本龙一在格陵兰岛，为当地自然声着迷</p><p><img src="https://pic3.zhimg.com/50/v2-f5711a8d22e374061c44db6aa0b6f28b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-f5711a8d22e374061c44db6aa0b6f28b_r.jpg?source=1940ef5c" alt="img">《坂本龙一：终曲》截图《终曲》</p><p>从2012年开拍，2017年完成。</p><p>起初，导演史蒂芬想要拍摄一部演奏会电影，然而在2014年，坂本龙一被诊断出了癌症，纪录片的方向也随之改为传记纪录片，我们也得以了解坂本龙一不为人知的人生经历。</p><p><img src="https://pic2.zhimg.com/50/v2-b04a3556bfc5c40b8e62baea43b79454_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-b04a3556bfc5c40b8e62baea43b79454_r.jpg?source=1940ef5c" alt="img">YMO成军时期</p><p> <strong>古典乐出身，却成为日本当代音乐的革新者</strong> </p><p>坂本龙一1952年出生在东京，3岁开始学钢琴，年少时觉得自己是德彪西转世。</p><p>但坂本龙一从未刻意要成为音乐人，因为不想被任何固定职业限制，他在填写志愿的时候写了“没有志愿”，直到细野晴臣推了他一把。</p><p>1978年，细野晴臣邀请坂本龙一和高桥幸宏，一起组个乐队，就是后来赫赫有名的YMO（Yellow Magic Orchestra）。坂本当时刚从东京艺术大学作曲系研究生毕业，高桥幸宏打趣他，在搞音乐的人中算学历高的了，问他以后会不会成为教授。“教授”的昵称由此而来。</p><p><img src="https://pic2.zhimg.com/50/v2-829e24b20a7d0468fd7cf3c2eb04d5be_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-829e24b20a7d0468fd7cf3c2eb04d5be_r.jpg?source=1940ef5c" alt="img">YMO乐队，左起：细野晴臣、坂本龙一、高桥幸宏</p><p><img src="https://pic2.zhimg.com/50/v2-be11d83e55482d27c6b8d686f125a678_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-be11d83e55482d27c6b8d686f125a678_r.jpg?source=1940ef5c" alt="img">YMO专辑封面</p><p>坂本龙一惊讶于细野和高桥没受过正统音乐教育，却掌握了音乐的核心。与受系统古典音乐训练、热爱实验性现代音乐的坂本不同，细野和高桥的音乐源头中有爵士乐和流行音乐的元素。</p><p>YMO的音乐在欧美走红之后，开始在日本被接纳，80年代初的东京街头，随处可以听见YMO乐队前卫、高科技感的电子音乐。对后世的电子乐、hip-hop有开创性影响。</p><p>坂本说，“加入YMO之前，我不过是半瓶醋，在乐队中经历了争执和纠葛后，才一点一点成长。”</p><p>1983年，YMO在巅峰时解散，成为传奇；坂本龙一单飞，也开始在电影配乐领域大放异彩。</p><p><img src="https://pic1.zhimg.com/50/v2-ebb0560f7c46cf04f14927a4658c06c4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-ebb0560f7c46cf04f14927a4658c06c4_r.jpg?source=1940ef5c" alt="img">《战场上的快乐圣诞》</p><p> <strong>电影配乐大师</strong> </p><p>1982年，电影导演大岛渚邀请坂本龙一主演《战场上的快乐圣诞》，饰演一名日本军官。坂本是大岛渚的影迷，看过他几乎所有电影，但傲娇的年轻人附加了一个要求：那请把配乐也交给我来做吧。大岛渚说好。当时日本电影通常是在上映前一周匆忙配上音乐，但是坂本向大岛渚要求了3个月时间，大岛渚再次同意，而且没有任何指示，给他100%创作自由。结果，主题曲《圣诞快乐，劳伦斯》的影响力，甚至超过了电影本身。</p><p><img src="https://pic4.zhimg.com/50/v2-659e0062a9f50399a8c1a05dd6dc8e7f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/v2-659e0062a9f50399a8c1a05dd6dc8e7f_r.jpg?source=1940ef5c" alt="img">《战场上的快乐圣诞》</p><p>メリー・クリスマス ミスターローレンス坂本龙一 - 戦場のメリー・クリスマス</p><p> 关于这首神曲的创作，坂本龙一本人是这样阐述的：“因为是圣诞，所以想用铃声。而电影故事发生在南太平洋的小岛，不能用欧洲的铃声，所以想到用巴厘岛甘美兰的声音。”</p><p>由此，坂本龙一开始了和多位国际名导合作电影配乐的生涯。</p><p><img src="https://pic1.zhimg.com/50/v2-428def30e5390c45307bf84c62b54434_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-428def30e5390c45307bf84c62b54434_r.jpg?source=1940ef5c" alt="img">《末代皇帝》剧照</p><p><img src="https://pic1.zhimg.com/50/v2-79577b71aaf6d3e39d68301b944d7a66_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-79577b71aaf6d3e39d68301b944d7a66_r.jpg?source=1940ef5c" alt="img">坂本龙一和陈冲，拍摄《末代皇帝》时</p><p>1986年，贝托鲁奇的《末代皇帝》在北京紫禁城开拍，邀请坂本龙一饰演日本军官甘粕正彦。拍摄结束后，他被紧急任命为影片作曲。</p><p>2个星期后，坂本交出了44首曲子。</p><p>皇妃文绣在雨中离开了溥仪的家，扔下雨伞出走，他为文绣写了一首《Rain》。第一次给意大利的工作人员听的时候，所有人互相拥抱，喊着，“bellissimo（太美了）、bellissimo（太美了）。</p><p>Rain坂本龙一 - The Last Emperor (Original Motion Picture Soundtrack)</p><p><img src="https://pic2.zhimg.com/50/v2-9187faa199c3be71edf4cfc788ea2273_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-9187faa199c3be71edf4cfc788ea2273_r.jpg?source=1940ef5c" alt="img">《末代皇帝》还获得了金球奖最佳原创配乐</p><p>其实坂本没有学习过中国音乐，他接到任务马上买来20多张中国音乐精选集，花了一天时间全部听完，2周赶出44首，完工之后就累得住院。</p><p>他说做电影配乐，是因为这些电影创作者吸引着他，“我好像继承了父亲的性格，很容易被人或事吸引，而且入迷。”</p><p><img src="https://pic1.zhimg.com/50/v2-8fa80867fa3fae0f4687f1537b588e22_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-8fa80867fa3fae0f4687f1537b588e22_r.jpg?source=1940ef5c" alt="img"></p><p>坂本龙一在纽约的私人工作室2014年，在自己癌症治疗的关键时期，坂本不顾家人反对，接受了电影《荒野猎人》的配乐邀请，因为没有办法对亚利桑德罗导演说不。</p><p>2017年，台湾导演蔡明亮把新片《你的脸》寄给他请他看看，他便回信说想要做这部电影的配乐。一个月后，坂本龙一把音乐发给了蔡明亮，附了一封短讯：您想用多少，用在哪里，都可以。</p><p>音乐放进电影中，非常贴合，后来获得台北电影节最佳原创配乐。</p><p> <strong>“万物皆音乐”</strong> </p><p>纪录片《终曲》中，坂本龙一随时随地都在收集、记录声音：</p><p><img src="https://pic2.zhimg.com/50/v2-7c81e2e48d9e3cf45047f6fbd0a5d915_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-7c81e2e48d9e3cf45047f6fbd0a5d915_r.jpg?source=1940ef5c" alt="img"></p><p>穿着蓝T的坂本龙一，头上套着个蓝色塑料桶，站在雨中感受雨滴敲击的声音。</p><p><img src="https://pic3.zhimg.com/50/v2-d8407c10bdee52b59ed31afed2b8f6c7_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-d8407c10bdee52b59ed31afed2b8f6c7_r.jpg?source=1940ef5c" alt="img"></p><p>潜入森林，收集踩在枯叶上的脚步声。</p><p><img src="https://pic2.zhimg.com/50/v2-2df0ecdee82cfa912a07f20b05db095c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-2df0ecdee82cfa912a07f20b05db095c_r.jpg?source=1940ef5c" alt="img"></p><p>去非洲记录原始部落的歌声，在肯尼亚的湖泊上采集自然声。</p><p>少年时代，受到约翰·凯奇（John Cage）等现代音乐家影响，坂本龙一认为万物皆是音乐。80年代的巴厘岛旅行，他看到当地人在鸽子脚上系上鸽哨，放飞的时候，鸽哨发出忽远忽近的声响，和悠悠的风声、森林的声音混在一起，他念念难忘。</p><p>所以担任2014年札幌艺术节总监时，他设计的开幕式并不奏乐，而是让一群系上鸽哨的鸽子飞翔。</p><p><img src="https://pic2.zhimg.com/50/v2-081935cb5b8718fd3b889e9fcebd6b14_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-081935cb5b8718fd3b889e9fcebd6b14_r.jpg?source=1940ef5c" alt="img"></p><p>坂本龙一录屋顶上的雨声坂本龙一感兴趣的不仅是音乐本身，还有整个环境的声音景观。</p><p>“每次下雨的时候，我都打开窗户，然后把录音器放出去。”他会在任何地方敲打看到的东西，了解它们的声音。在巴塞罗那，一辆巡逻车响着汽笛驶过，他赶紧掏出手机录音，为没有错过这个声音开心。</p><p><img src="https://pic4.zhimg.com/50/v2-6b7403723688ba05c113700e51da835c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-6b7403723688ba05c113700e51da835c_r.jpg?source=1940ef5c" alt="img"></p><p>2011年日本海啸和福岛核泄漏后，坂本龙一发现了一架被海啸吞噬过的钢琴，钢琴完全走音了，他却被这个声音迷住了，“海浪一瞬间涌上来，让钢琴回复到自然状态，经过自然调音的钢琴声，我觉得特别美。”</p><p>他把这架钢琴的声音，放进了新专辑《异步》中。</p><p><img src="https://pic4.zhimg.com/50/v2-0fcb5566e480df56a64ebd3e88e90491_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/v2-0fcb5566e480df56a64ebd3e88e90491_r.jpg?source=1940ef5c" alt="img">《坂本龙一：终曲》截图纪录片</p><p>《终曲》的拍摄过程，刚好也是坂本龙一新专辑《异步》的创作阶段。他十分喜欢这张专辑，甚至有把它藏起来、不给别人听的想法。</p><p>这张专辑里的音乐与以往十分不同：</p><p>几乎没有旋律，而是由踩在落叶上的脚步声、被海啸损坏的钢琴发出的声音、测量核污染仪器的哀嚎声、日本传统的三味线等等声音，奇妙地组合着。</p><p>这是福岛事故和经历癌症之后，更加感受生命脆弱的坂本龙一，最想要做的音乐。</p><p><img src="https://pic1.zhimg.com/50/v2-efbe91cc188b6c49b3198d034fe0ec85_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-efbe91cc188b6c49b3198d034fe0ec85_r.jpg?source=1940ef5c" alt="img">2017年NHK专访坂本龙一</p><p>2017年《异步》发行之时，他在NHK电视台被访问道，想以怎样的方式燃烧至尽，坂本想了一会回答，“确实有一个强烈的想法，就是不对自己说谎，想做真实的音乐，真实地活下去，还有不忘记看每天的月亮。”</p><p>虽然早在80年代就成为欧美和日本的音乐偶像，但坂本龙一从未停止对音乐边界的探索。在现代音乐、古典乐、流行乐、电子乐、民族乐等等之间来回跳跃，也在地球的各个地方，北极、非洲、南洋小岛汲取声音灵感，越来越不受到限制。</p><p><img src="https://pic1.zhimg.com/50/v2-c37c1820fc76f3259c0bbc2d465d4193_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-c37c1820fc76f3259c0bbc2d465d4193_r.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic2.zhimg.com/50/v2-2c93b8f87a25cf2e2efbc0a1081455e5_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-2c93b8f87a25cf2e2efbc0a1081455e5_r.jpg?source=1940ef5c" alt="img"></p><p>“总觉得无论我们说什么，上头的人都听不见。最终又回归沉默，日本人已经沉默四十多年了。”</p><p>纪录片《终曲》中，坂本龙一参加了反对重启核电站的大型集会，他说：“不管是核电站事故，还是灾后日本的政治状况、社会情况，全都每况愈下……如果不把自己的想法说出来，我会感到非常压抑。我做不到视而不见。”</p><p>一直以来，坂本龙一有自己鲜明的政治立场，是积极的社会活动推动者。</p><p><img src="https://pic4.zhimg.com/50/v2-15d8972cab1f4136e4d001f23bfa13e4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-15d8972cab1f4136e4d001f23bfa13e4_r.jpg?source=1940ef5c" alt="img">大学时的坂本龙一</p><p>坂本龙一的父亲是出版社编辑，母亲是帽子设计师。70年代，左翼思潮在日本非常流行。出身有闲阶级的坂本龙一，从高中就是一枚左翼热血青年，积极参加左翼运动。</p><p>“仿效中国的精神，我们也要用音乐为工农服务！”“一起解放被资本主义操控的音乐”。反对学校统一的制服，统一的考试制度，在他们高中的罢课运动中，校服、校帽和考试，真的因此被取消了。</p><p>虽然坂本龙一最后还是参加大学入学考试，但他认为自己带着“瓦解大学制度”的想法进入了东京艺术大学。</p><p><img src="https://pic2.zhimg.com/50/v2-bde677543068ef21115c2ab7bafc9cc2_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-bde677543068ef21115c2ab7bafc9cc2_r.jpg?source=1940ef5c" alt="img">高中时的坂本龙一</p><p><img src="https://pic4.zhimg.com/50/v2-53da80c701221fd4bb00affeefd6c36e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-53da80c701221fd4bb00affeefd6c36e_r.jpg?source=1940ef5c" alt="img">1969年，在新宿高中校舍前发表激情演说</p><p>在自传《音乐即自由》中，坂本龙一回忆当年积极参加运动的自己，“当时有个传言，在被封锁的新宿高中校园里，坂本带着安全帽在弹奏德彪西的乐曲。不过我已经不记得这些事了，如果我真的做过，毫无疑问就是想出风头。”</p><p>如果说少年时代的积极运动，带着“中二”气息，38岁搬到纽约居住之后，他越来越深刻感受到存在于世界上的断层。</p><p><img src="https://pic2.zhimg.com/50/v2-b47273c547a0e2802b7635cc56d1252d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-b47273c547a0e2802b7635cc56d1252d_r.jpg?source=1940ef5c" alt="img">摄于南青山的个人录音室</p><p>1997年，写下《Discord》（意为不调和、争端）这首曲子是因为，他看到电视正在报道卢旺达内战难民的新闻，当天夜里，梦到自己想要写一首关于这起事件的管弦乐曲，于是立刻起身，冲到位于地下室的工作室内，赶紧动笔写下了。</p><p>“当时我有一种无法沉默下去的心情。对我来说，这应该是一个很大的转机。”</p><p><img src="https://pic4.zhimg.com/50/v2-bc98924943d9ecad0e7dc53ed6a30e35_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-bc98924943d9ecad0e7dc53ed6a30e35_r.jpg?source=1940ef5c" alt="img">《LIFE》中原子弹之父奥本海默的头像</p><p>1999年，世纪之交，坂本龙一写了一出歌剧《LIFE》（生活），蕴藏了许多与环境问题、社会问题相关的信息，比如核武器原子弹之父奥本海默的头像投影在巨大屏幕上。坂本期待经过20世纪的战争和灾难，数以亿计的人因此死去，到了新世纪，人类也会变得更明智一些。</p><p><img src="https://pic1.zhimg.com/50/v2-e5dde5b547df358728e3f2f458e86c50_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-e5dde5b547df358728e3f2f458e86c50_1440w.jpg?source=1940ef5c" alt="img">坂本龙一拍摄于911事件</p><p>可是21世纪的头一年，他在纽约亲历911事件，生活陷入恐慌之中。很多人担心恐怖分子会用核武器发动第二波攻击，为此坂本龙一买了一辆越野车，里面储备了一个月的水和粮食，打算随时逃难，还买了很多防毒面具，分送别人，也送了前妻一个。</p><p>12月，他和村上龙等好友一起出版了一本评论集《反战》。</p><p><img src="https://pic4.zhimg.com/50/v2-64b5387c9c2001a6b0483f0c91d08a9b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-64b5387c9c2001a6b0483f0c91d08a9b_r.jpg?source=1940ef5c" alt="img">《Chasm》专辑封面</p><p>21世纪，他发行的第一张专辑就是《Chasm》（意为裂痕、断层），专辑发行于2004年，这前一年美军进攻伊拉克。专辑充满着被愤怒驱使的心情，比如第一首歌就是说唱，由韩国说唱歌手MC Sniper联合演绎，歌词写着“搬运因为饥饿呻吟的老人，被恐怖中的不安和危险拽着的你和我……”</p><p>“虽然一般大众走上了全球各地的街头，质疑美军进攻的动机并不单纯，但那些媒体或专业人士，却对此一声不吭。我真的看不下去，每天都很痛心，想着这是开什么玩笑。”</p><p><img src="https://pic1.zhimg.com/50/v2-d90d7d6a2ba3733ef7413c857d2ddb01_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-d90d7d6a2ba3733ef7413c857d2ddb01_r.jpg?source=1940ef5c" alt="img">2008年格陵兰岛之旅</p><p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/9cf3250e-239f-11eb-93b5-a2d9c4dc5e08.mp4?disable_local_cache=1&amp;auth_key=1618591340-0-0-d3cacd64854417005b644b885f73f3db&amp;f=mp4&amp;bu=pico&amp;expiration=1618591340&amp;v=hw" data-thumbnail="https://pic2.zhimg.com/50/v2-bd9c5c6acbc371a2fa7cd5ee2e16fc94_hd.jpg?source=1940ef5c" poster="https://pic2.zhimg.com/50/v2-bd9c5c6acbc371a2fa7cd5ee2e16fc94_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p><p><img src="https://pic2.zhimg.com/50/v2-bd9c5c6acbc371a2fa7cd5ee2e16fc94_hd.jpg?source=1940ef5c" alt="img"></p><p>坂本龙一把录音机放进冰川，“我在把声音钓上来”</p><p>坂本龙一对人为灾难和环境问题的思考，在2008年的格陵兰之旅中，得到了某种解答。</p><p>当时是一个艺术项目，邀请艺术家去格陵兰岛，直观地看全球暖化的后果。见到数量惊人的海水和冰山，坂本内心受到很大冲击。</p><p>“当人类加诸大自然的负担一超出大自然容许的范围，受害的是人类，大自然不会感到任何困扰。生活在冰山和海水的世界的那期间，我不断感到人类是多么微不足道。”</p><p>格陵兰之旅也深刻改变了他正在创作的专辑《Out of Noise》（2009），使用了北极冰雪融化声、流水声，他让这些原始声音直接排列，崭新的音乐也逐渐成形。</p><p><img src="https://pic1.zhimg.com/50/v2-bc0919f122ef6477e2304423f9e72413_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-bc0919f122ef6477e2304423f9e72413_r.jpg?source=1940ef5c" alt="img">坂本龙一和东北青少年管弦乐团</p><p>2011年的日本大地震以及核泄漏事件，对坂本龙一影响深远，他招募受灾地区的孩子，组建了一支东北青少年管弦乐团，亲自教授，把他们带进音乐世界。</p><p>直到2019年的采访中，他仍然说“事件带给我的震动至今还在。那种震动究竟是什么，我应该怎么做？我还没能找到答案，它们也影响着我的创作”。</p><p>《坂本龙一：终曲》也记录了他寻找答案的过程。</p><p><strong>以下是纪录片导演史蒂芬的自述。</strong></p><p><img src="https://pic2.zhimg.com/50/v2-3077963a6dd802013f81ee8e57a903e6_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-3077963a6dd802013f81ee8e57a903e6_r.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic2.zhimg.com/50/v2-930f2137031b6be5bec2747f3aaa7d5d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-930f2137031b6be5bec2747f3aaa7d5d_r.jpg?source=1940ef5c" alt="img"></p><p><strong>自述  史蒂芬·野村·斯奇博</strong></p><p> <strong>福岛核泄露事故后，</strong></p><p> <strong>我见到了不一样的坂本龙一</strong> </p><p>1990年前后，我和坂本龙一，几乎在同一时间从东京搬到了纽约。</p><p>我是1970年出生在东京，妈妈是日本人，爸爸是美国人。我还是孩子的时候，整个东京，我感觉YMO的音乐无处不在。我一直是坂本龙一的粉丝。</p><p>2011年，日本东太平洋发生9级地震，继而发生海啸，福岛核电站放射性物质泄漏，它在当时是世界上最大的在役核电站。家乡的一切发生了翻天覆地的变化。</p><p>2012年5月，我在纽约的一次有关福岛核灾难的活动中见到了坂本龙一，当时是一位京都大学的核物理学家，来做核污染的演讲。眼前的坂本龙一，和我印象中的完全不一样了 。</p><p><img src="https://pic2.zhimg.com/50/v2-0a6dd64af290bdbe7cb4019f7055f417_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-0a6dd64af290bdbe7cb4019f7055f417_r.jpg?source=1940ef5c" alt="img">YMO时期，坂本龙一做出机械感的电子音乐</p><p>在我的印象中，他是YMO乐队最英俊的成员。80年代，日本经济腾飞，科技迅速发展，从战后阴影中走出来，大家对未来有一种梦幻的向往，YMO的音乐带着时髦的机械感，他就像一个时代典型，代表着科技能带来的希望和幸福。</p><p>而眼前的坂本龙一，年纪大了，他显得有些懊悔，意识到技术也会给我们带来很多麻烦。</p><p><img src="https://pic4.zhimg.com/50/v2-8e472d9a609550608f33f5093e621131_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-8e472d9a609550608f33f5093e621131_r.jpg?source=1940ef5c" alt="img">坂本龙一在反对重启核电站的活动现场</p><p>在这个活动上，我第一次知道坂本龙一对环境问题、核问题有自己的立场。我也得知他计划于2012年7月在东京举办一场名为“无核”的音乐节。日本主流媒体对于他反对核污染的立场感到不安，因为他太有名了。</p><p>这些媒体不跟进报道、保持沉默，而我是一个住在纽约的独立电影制作人，我觉得我应该去记录它。</p><p>我真的不知道坂本龙一为什么会答应。他后来告诉我，看过我的另一部音乐纪录片，关于埃里克·克莱普顿（Eric Clapton），他很喜欢。</p><p>而且我猜测他的确希望有人能在福岛核事故之后，帮他讲述自己的故事。也许他认为我能以国际化的视角去讲述。</p><p><img src="https://pic1.zhimg.com/50/v2-846a16e4582b9d11b9314188f3e56595_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-846a16e4582b9d11b9314188f3e56595_r.jpg?source=1940ef5c" alt="img"></p><p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/29d41184-232a-11eb-9a60-c6446caf7a05.mp4?disable_local_cache=1&amp;auth_key=1618591342-0-0-22d3ebcfd6d98f26c03931998e1bb07e&amp;f=mp4&amp;bu=pico&amp;expiration=1618591342&amp;v=hw" data-thumbnail="https://pic4.zhimg.com/50/v2-1f4dc93ea8a82fff2b4b30096702291e_hd.jpg?source=1940ef5c" poster="https://pic4.zhimg.com/50/v2-1f4dc93ea8a82fff2b4b30096702291e_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p><p><img src="https://pic4.zhimg.com/50/v2-1f4dc93ea8a82fff2b4b30096702291e_hd.jpg?source=1940ef5c" alt="img"></p><p>坂本龙一为灾区人们演奏</p><p> <strong>灾难之后，我们能做些什么</strong> </p><p>面对灾难，我们无能为力，只能试着找出自己能做什么。坂本龙一成为了一个积极活动的音乐家，而我为他拍了一部纪录片。</p><p>在岩手县一个叫陆前高田的小镇，很多人在海啸中丧生，是一个重灾区。2012年12月，坂本龙一去那里为当地人表演。</p><p>地震发生在2011年3月，此时是在一年零9个月后，但一些人告诉我们，在坂本龙一演出的时候，他们终于可以真正入睡了。</p><p>当时那个情境很打动教授，但是他努力让自己冷静下来，为了使人们从音乐中感到放松，演奏者不能够太情绪化。福岛核事故之后，我们已知的世界似乎要走到尽头，好像进入了一个时代尾声。</p><p>我想展现坂本龙一是如何用艺术回应灾难。</p><p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/342fdca8-2357-11eb-9ba8-86b142f84435.mp4?disable_local_cache=1&amp;auth_key=1618591342-0-0-4dcb39c0fe4f6fa4a4c51491cae18e27&amp;f=mp4&amp;bu=pico&amp;expiration=1618591342&amp;v=hw" data-thumbnail="https://pic4.zhimg.com/50/v2-59b1d24267355075e5bd337817c1a68b_hd.jpg?source=1940ef5c" poster="https://pic4.zhimg.com/50/v2-59b1d24267355075e5bd337817c1a68b_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p><p><img src="https://pic4.zhimg.com/50/v2-59b1d24267355075e5bd337817c1a68b_hd.jpg?source=1940ef5c" alt="img"></p><p>这部电影的第一个场景，是坂本龙一在弹奏一架被海啸损坏的钢琴，他觉得走音的钢琴声很美。</p><p>这个场景基本囊括了所有这部电影在探索的主题：关于一个人克服困难、并开始创造新的美妙音乐的故事；他最终拥抱了生活，但同时，他对世界上所有正在分崩离析的事物有着非常敏锐的意识。</p><p><img src="https://pic4.zhimg.com/50/v2-7e71918c6299c5e834566d795b826a56_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-7e71918c6299c5e834566d795b826a56_r.jpg?source=1940ef5c" alt="img"></p><p> <strong>患癌症后，他鼓励我继续拍下去</strong> </p><p>拍摄期间，2014年，他患上癌症。</p><p>得知他的病情后不久，他允许我去采访他。我不忍心继续打扰，但他说你应该拍下来。这是整个拍摄中最痛苦的部分。我采访了他很多内容，因为癌在他的咽喉，我们担心他以后不能说话。当时坂本龙一先生和他家人，不希望除了我以外的任何人来他们家拍摄。</p><p>当时他的儿子刚刚大学毕业，是个很有天赋的电影制作人，我一个人在他们家拍摄时，他就帮我打灯、收音。我就跟他说，你为什么不直接自己拍呢？</p><p>我很快就发现，他拍的镜头非常好，有一种非常温柔的关系在里面。后来他一听见父亲弹琴的声音，就像消防员一样，拿着相机冲过去拍。家里面的很多镜头是坂本先生的儿子拍的。后来坂本先生的身体恢复了一些，我会带一个小小的团队来，他的儿子也会成为团队一员。</p><p><img src="https://pic3.zhimg.com/50/v2-614651f5fa52ef1e3567f9b3307c7351_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-614651f5fa52ef1e3567f9b3307c7351_r.jpg?source=1940ef5c" alt="img">坂本龙一纽约家附近的街区</p><p>solari坂本龙一 - async</p><p>我曾经尝试导演坂本龙一，但是从来行不通。他太聪明了，一意识到我在做些安排，他就会毁了它。他相信自然流露是最好的，你就是在诚实地表达。</p><p>也的确如此，我之前一直想以新的音乐的诞生作为电影的尾声，事情就自然发生了。</p><p>那天我们已经完成拍摄，只想从坂本龙一身后补拍一个在弹琴的镜头，他说，那我就随便弹了。他开始弹《Solari》，这是他写的一首新歌，他第一次在别人面前演奏这首曲子。</p><p>那其实是我等待了5年的时刻。</p><p><img src="https://pic4.zhimg.com/50/v2-e0cc88e00dc5b21f2feb1c03b68a2557_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-e0cc88e00dc5b21f2feb1c03b68a2557_r.jpg?source=1940ef5c" alt="img"></p><p>拍摄过程中，有很多回忆，最美好的就是和坂本龙一待在一个小房间，他在一架钢琴前作曲。</p><p>那整个夏天他都投入在《异步》这张新专辑的创作中。我们每个周末去拜访他，会谈论他的想法、他的生活，最妙的是，有时他有了灵感就会突然开始弹奏。</p><p>音乐太美了，而且他就坐在那儿。</p><p><img src="https://pic4.zhimg.com/50/v2-7ac5889920fbcf1e722c31228e38955e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-7ac5889920fbcf1e722c31228e38955e_r.jpg?source=1940ef5c" alt="img"></p><p> <strong>“我想让观众感受</strong> </p><p> <strong>坂本龙一是如何听到这个世界”</strong> </p><p>我们都叫坂本龙一“教授”，我想把他的理念，也融入到纪录片的制作中。</p><p>坂本龙一是一个极简主义者，他总是说少即是多。所以电影中有很多沉默的时刻，有时沉默是最有力的。</p><p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/95acbe4c-237f-11eb-a25a-ea37c03d7100.mp4?disable_local_cache=1&amp;auth_key=1618591343-0-0-c53a02208d600bf05e1bcdb622ad155d&amp;f=mp4&amp;bu=pico&amp;expiration=1618591343&amp;v=hw" data-thumbnail="https://pic1.zhimg.com/50/v2-8cd6ed58fda9a68145d74c8b82dd76e9_hd.jpg?source=1940ef5c" poster="https://pic1.zhimg.com/50/v2-8cd6ed58fda9a68145d74c8b82dd76e9_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p><p><img src="https://pic1.zhimg.com/50/v2-8cd6ed58fda9a68145d74c8b82dd76e9_hd.jpg?source=1940ef5c" alt="img"></p><p>《东京旋律》中坂本龙一弹奏《圣诞快乐劳伦斯》</p><p>这部电影有许多片段，在过去和现在来回穿梭，剪辑上还会从世界一个地方跳到另一个地方，因为我觉得这是坂本龙一的思想特点之一。</p><p>电影中我穿插使用了一些1985年，法国摄影师Elizabeth拍摄的坂本龙一纪录片《东京旋律》，那就像一个时间胶囊，当时他弹奏《圣诞快乐劳伦斯》的速度更快，钢琴音调也调得更高，他说话也更快。当时和现在的对比很有趣，也很美。</p><p>1987年，坂本龙一就出过一张专辑《Neo Geo》（新地理），其中有巴厘岛的音乐，有日本冲绳的，也有来源于非洲的音乐，对他来说，这是一整个平坦的世界。电影中也是如此，上一刻在非洲，下一个场景就到了格陵兰岛。</p><p><video class="ztext-gif GifPlayer-gif2mp4" src="https://vdn1.vzuu.com/SD/4ab36892-2329-11eb-8fc6-ba04eef90046.mp4?disable_local_cache=1&amp;auth_key=1618591343-0-0-8b3ae62a2ead7d09311707bd391cf0ee&amp;f=mp4&amp;bu=pico&amp;expiration=1618591343&amp;v=hw" data-thumbnail="https://pic4.zhimg.com/50/v2-1e1a9583a71a47436a6555586a559a25_hd.jpg?source=1940ef5c" poster="https://pic4.zhimg.com/50/v2-1e1a9583a71a47436a6555586a559a25_hd.jpg?source=1940ef5c" data-size="normal" preload="metadata" loop playsinline></video></p><p><img src="https://pic4.zhimg.com/50/v2-1e1a9583a71a47436a6555586a559a25_hd.jpg?source=1940ef5c" alt="img"></p><p>坂本龙一在福岛核事故后的灾区，电影中此处可听见测量放射污染仪器的鸣叫</p><p>我把电影的整体节奏放慢，让声音能够停留，被感觉到。这种方式也跟我和坂本龙一一起去福岛核污染区的经验有关。</p><p>那儿实际上非常平静，有鸟类，但没有人烟，我感到最恐怖的是，我一点也感觉不到危险。人的五感是没法感知到核污染的，只能通过科技的东西探测，无色无味，我们人类制造出来了一种危险，我们自己无法感知。</p><p>我希望通过这部电影，让观众感受到坂本龙一是如何听到这个世界的。</p><p><img src="https://pic1.zhimg.com/50/v2-2130bcf1c637f00973b67efaff2868dd_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/v2-2130bcf1c637f00973b67efaff2868dd_r.jpg?source=1940ef5c" alt="img">坂本龙一在新专辑《异步》的演奏会上</p><p><img src="https://pic2.zhimg.com/50/v2-072846e4a0b0db42ccab7f40ff91cbdf_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/v2-072846e4a0b0db42ccab7f40ff91cbdf_r.jpg?source=1940ef5c" alt="img"></p><p>龙一相信所有的声音都是音乐性的——即使是环境声。他收录各种声音，把它们带入专辑。比如，把麦克风挂在家里的墙上，让他的房子变成像一件乐器。这个理念启发了他最新的作品，以及我们的剪辑方式。</p><p>破碎的钢琴声、测定放射能量仪器的哀嚎声、北极冰层融化的声音，以及坂本龙一弹奏美妙的旋律——所有这些，像乐句一样被组合。我们根据声音来剪辑电影，希望它就像一首很长的乐曲。</p><p>电影的结尾，他创作出了美妙的新音乐，然后又回到生活中，天气很冷，他说要动动手指，保持温暖，继续创作。</p><p>所以平和无味的日常隐藏你我的爆裂无声也是浪漫主义的复生吧，枯燥无聊的我收拾欲望成为一个通透的人还任重而道远啊，也是无力的自嘲罢了，好在我还能意识到这点，没有妄自尊大。</p><p>最后在文章末尾附上龙一先生的经典作品，不求有所悟，但求有所慰藉，毕竟生活给予各人的体悟没必要再在一首简单却悠长的作品里了。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4899152&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 艺术家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一顿午饭</title>
      <link href="2021/04/16/2015-04-15-a-lunch/"/>
      <url>2021/04/16/2015-04-15-a-lunch/</url>
      
        <content type="html"><![CDATA[<p>中午，兴致勃勃地下楼吃饭，端着满是饭菜的盘子坐下。</p><p>一位美女端着盘子做到我面前，也不知道是为什么，旁边有个座位，她就是不坐，或许她有同伴吧。看到她优雅地拿起勺子，舀了一勺鸡蛋羹，似乎感觉到哪里不舒服，接着就喷了出来。</p><p>我迅速地观察了路径，两条直线沿着我的盘子边擦过去。我观察到了这两条直线，是因为它们是我想要看到的，事后想想，我是不是太关注那两条直线而漏了其他的？这就像生活中，人们太关注自己乐意看到的事物，而忽略了其他对自己不利的。又或者说这种乐意看到的和对自己不利的事物，其实根本就不会对自己产生什么影响，假如我当时刚好去拿卫生纸，这一幕我没看到，而她又假装不知道，不就是这种结果嘛。</p><p>可是现在想想，不免觉得恶心至极。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只是最近</title>
      <link href="2021/04/16/2013-04-28-recent/"/>
      <url>2021/04/16/2013-04-28-recent/</url>
      
        <content type="html"><![CDATA[<p>  唯一不变的就是变化本身，浮萍一样的你我她真是动容，好在我没有遗憾，大家的友谊天长地久已经弥足珍贵了</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
            <tag> 假期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论数据库连接池</title>
      <link href="2021/04/15/port%E8%AE%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>2021/04/15/port%E8%AE%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>数据库连接是一种关键的有限的昂贵的资源，这一点企业级应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。</p><p>  数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而再不是重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p><p>具体工作机制如下：</p><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p><p>数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：</p><ol><li><p>最小连接数是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费；</p></li><li><p>最大连接数是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</p></li><li><p>如果最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。</p></li></ol><p>===================================================================</p><p>J2EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。</p><p>  调用：客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其表记为 忙。如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量有配置参数决定。</p><p>释放：当使用的池连接调用完成后，池驱动程序将此连接表记为空闲， 其他调用就可以使用这个连接。</p><p>最大维持连接数：没有任何请求时在连接池中可以存在的连接数</p><p>最大连接数：连接池中最多可以存在的连接个数。</p><p>最大等待时间：当断开连接时，超过最大维持连接数的连接不会马上销毁，最大等待时间过后它才会销毁。</p><p>连接池是将已经创建好的连接保存在池中，当有请求来时，直接使用已经创建好的连接对数据库进行访问。这样省略了创建连接和销毁连接的过程。</p><p>现在假设：最大维持连接数是10，最大连接数是20，最大等待时间是10000（毫秒）</p><p>其过程：最开始在连接池中有10个连接（最大连接数），当有用户申请连接时，其将一个连接分配用户，直到连接池中的10个连接全都分配出去，当第11个用户申请连接时，它将创建第11个连接并分配给该用户，直到把第20个连接（最大连接数）分配给第20个用户，当第21个用户申请连接时，它需要等待，直到前面的20个用户中某一个断开了连接，才会把那个连接分配给第21个用户，当用户断开连接时（第11至20个连接），该连接不会立刻被释放而是需要等待10000毫秒（最大等待时间），才被释放，当没有用户连接时，连接池内还保持10个连接。</p><p>在开发中，使用连接池时若没有关闭连接（调用连接的close方法）会出现“连接池疲劳的错误”。</p><p>数据连接池的主要作用是什么?</p><p>数据连接池是把数据库连接放到中间服务器上,比如tomcat上,那么相当于每次你操作数据库的时候就不需要再”连接”到数据库再进行相关操作,而是直接操作服务器上的”连接池”,你可以根据字面意思进行理解,把数据库当做一条小溪,那么”连接池”就是一个”水池”,这个水池里面的水是由事先架好的通向”小溪”的水管引进来的,所以,你想喝水的时候不必大老远地跑到小溪边上,而只要到这个水池就可以.这样的话就可以提高”效率”.但是数据池一般是用在数据量比较大的项目,这样可以提高程序的效率,想一想这样的话是不是就把相关的负荷加在了服务器上,因为这个”池”是在服务器上的,对于小数据量处理的项目不推荐使用,应为过于频繁的请求会使得服务器负载加重</p><p>关系:</p><p> 你 –&gt;”水池”–&gt;小溪(快速喝水)</p><p> 程序–&gt;”数据池”–&gt;数据库(快速存取)</p><p>就是这样,也不用把它想神秘了,我是这样理解的,也就这样说了,希望对你有帮助</p><p>数据连接池怎么设置？</p><p>在数据库连接字段的时候可以设置</p><p>比如：“DataSource=Server;Initial;Catalog=db;UserID=test;Password=test;</p><p> MaxPoolSize = 100;MinPoolSize= 15”</p><p>这样 连接池 最大为100，最小为15</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“二重积分之累次积分法”</title>
      <link href="2021/04/14/port%E2%80%9C%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E4%B9%8B%E7%B4%AF%E6%AC%A1%E7%A7%AF%E5%88%86%E6%B3%95%E2%80%9D/"/>
      <url>2021/04/14/port%E2%80%9C%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E4%B9%8B%E7%B4%AF%E6%AC%A1%E7%A7%AF%E5%88%86%E6%B3%95%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-caec6aa470729eb27390abffefc7b433_1440w.jpg?source=172ae18b" alt="【高等数学】二重积分化累次积分方法"></p><h1 id="【高等数学】二重积分化累次积分方法"><a href="#【高等数学】二重积分化累次积分方法" class="headerlink" title="【高等数学】二重积分化累次积分方法"></a>【高等数学】二重积分化累次积分方法</h1><h2 id="一、二重积分的理解"><a href="#一、二重积分的理解" class="headerlink" title="一、二重积分的理解"></a>一、<strong>二重积分的理解</strong></h2><p>二重积分的一般表示如下：</p><p><img src="https://www.zhihu.com/equation?tex=I+=+%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma" alt="[公式]"></p><p>它最佳的理解方式是——平面薄片的质量，即平面薄片占据平面区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> , 在点 <img src="https://www.zhihu.com/equation?tex=(x,y)" alt="[公式]"> 处的面密度为 <img src="https://www.zhihu.com/equation?tex=f(x,y)" alt="[公式]"> ，整个平面薄片的总质量就是将 <img src="https://www.zhihu.com/equation?tex=f(x,+y)" alt="[公式]"> 累积遍整个平面区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> <em>.</em></p><p>当然，二重积分也是一个“分割、近似、求和、取极限”的过程，将该过程压缩成一步到位，就是“二重积分”运算：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim%5Climits_%7B%5Clambda+%5Cto+0%7D+%5Csum%5Climits_%7Bi=1%7D%5En+f(%5Cxi_i,+%5Ceta_i)+%5CDelta+%5Csigma_i+%5Ctriangleq+%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma" alt="[公式]"></p><p><strong>注1</strong>： <img src="https://www.zhihu.com/equation?tex=%5Clambda" alt="[公式]"> 取所有 <img src="https://www.zhihu.com/equation?tex=%5CDelta+%5Csigma_i" alt="[公式]"> 直径的最大值，该极限比一般极限要复杂的多（多了对任意分割）；</p><p><strong>注2</strong>：经过该过程，二重积分已经是一个精确值（不均匀平面薄片的精确质量）了；</p><p><strong>注3</strong>：既然是任意分割，在直角坐标系下，按水平竖直分割，则微元面积<img src="https://www.zhihu.com/equation?tex=%5Cmathrm%7Bd%7D+%5Csigma+=+%5Cmathrm%7Bd%7D+x+%5Cmathrm%7Bd%7D+y" alt="[公式]"> :</p><p><img src="https://pic1.zhimg.com/80/v2-d68ed46ec23da8306c2d108acd21cbcc_1440w.jpg" alt="img"></p><p>所以，二重积分也写为：</p><p><img src="https://www.zhihu.com/equation?tex=+%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma+=+%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+x+%5Cmathrm%7Bd%7D+y" alt="[公式]"></p><h2 id="二、计算二重积分的基本原理"><a href="#二、计算二重积分的基本原理" class="headerlink" title="二、计算二重积分的基本原理"></a>二、<strong>计算二重积分的基本原理</strong></h2><ol><li><strong>直角坐标下的二重积分</strong></li></ol><p>二重积分是 <img src="https://www.zhihu.com/equation?tex=f(x,+y)" alt="[公式]"> 在区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 上累积而得，而且与累积路径无关（二重积分定义保证），也就是说怎么累积遍下图中的小原点都是可以的：</p><p><img src="https://pic2.zhimg.com/80/v2-56fa53eceda300d10801822bc47425e9_1440w.jpg" alt="img"></p><p>那就选择一种规则的累积法：先竖着累积“小细带”，对每个 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> ，把所有的 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 累积起来，记为</p><p><img src="https://www.zhihu.com/equation?tex=A(x)+=+%5Cint_%7By_1(x)%7D%5E%7By_2(x)%7D+f(x,y)+%5Cmathrm%7Bd%7D+y" alt="[公式]"></p><p>再把所有“小细带”横着累积起来，得到</p><p><img src="https://www.zhihu.com/equation?tex=I+=+%5Cint_a%5Eb+A(x)%5Cmathrm%7Bd%7Dx" alt="[公式]"></p><p><img src="https://pic2.zhimg.com/v2-e5a3814a27acc067dc7619e4f6e8d235_r.jpg" alt="img"></p><p>于是，</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Beqnarray*%7D+I+=+%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma+&=&+%5Cint_a%5Eb+%5CBig%5B+%5Cint_%7By_1(x)%7D%5E%7By_2(x)%7D+f(x,y)+%5Cmathrm%7Bd%7D+y+%5CBig%5D+%5Cmathrm%7Bd%7D+x+%5C%5C+&%5Cxrightarrow%7B%E6%8D%A2%E4%B8%AA%E5%86%99%E6%B3%95%7D&+%5Cint_a%5Eb+%5Cmathrm%7Bd%7D+x+%5Cint_%7By_1(x)%7D%5E%7By_2(x)%7D+f(x,y)+%5Cmathrm%7Bd%7D+y+%5Cend%7Beqnarray*%7D" alt="[公式]"></p><p>当然换个方向考虑（先横着累积，再竖着累积）也是可以的，就得到：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Beqnarray*%7D+I+=+%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma+&=&+%5Cint_c%5Ed+%5CBig%5B+%5Cint_%7Bx_1(y)%7D%5E%7Bx_2(y)%7D+f(x,y)+%5Cmathrm%7Bd%7D+x+%5CBig%5D+%5Cmathrm%7Bd%7D+y+%5C%5C+&%5Cxrightarrow%7B%E6%8D%A2%E4%B8%AA%E5%86%99%E6%B3%95%7D&+%5Cint_c%5Ed+%5Cmathrm%7Bd%7D+y+%5Cint_%7Bx_1(y)%7D%5E%7Bx_2(y)%7D+f(x,y)+%5Cmathrm%7Bd%7D+x+%5Cend%7Beqnarray*%7D" alt="[公式]"></p><p>综上，二重积分转化为累次积分，是将不方便直接计算的二重积分转化成方便计算的做两次定积分。</p><p><strong>2. 极坐标下的二重积分</strong></p><p>注意，影响上述计算的只有被积函数和积分区域的表达式。那么，若积分区域或被积函数在直角坐标系下，仍不方便计算呢？比如带 <img src="https://www.zhihu.com/equation?tex=x%5E2+y%5E2" alt="[公式]"> 项。那就再转化为极坐标系下就方便计算了。</p><p>比如，这样一个区域：</p><p><img src="https://pic1.zhimg.com/80/v2-4d4bb024f5d052ee7aae1bc662742520_1440w.jpg" alt="img"></p><p>用直角坐标 <img src="https://www.zhihu.com/equation?tex=x,+y" alt="[公式]"> 表示很困难，但换成极坐标则是非常简单的“矩形”：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta+%5Cin+%5B%5Calpha,%5Cbeta%5D,+%5Cquad+%5Crho+%5Cin+%5Ba,b%5D" alt="[公式]"></p><p><img src="https://pic2.zhimg.com/80/v2-150ce7f1057a0640bdb65dcc59213aa1_1440w.jpg" alt="img"></p><p>所以，在极坐标系下，既然积分区域可以任意分割，那就按原点射线、圆环方向分割。此时，微元面积 <img src="https://www.zhihu.com/equation?tex=%5Cmathrm%7Bd%7D+%5Csigma" alt="[公式]"> 怎么计算？</p><p><img src="https://pic1.zhimg.com/80/v2-50621f00b56f41dc9de85b5397862a2c_1440w.jpg" alt="img"></p><p>注意到，微元 <img src="https://www.zhihu.com/equation?tex=%5Cmathrm%7Bd%7D+%5Csigma" alt="[公式]"> 很小，则圆弧边可近似看成直线，该面积可近似按“长×宽”来算：</p><p><img src="https://www.zhihu.com/equation?tex=%5Crm%7Bd%7D+%5Csigma+%5Capprox+%5Crho+%5Crm%7Bd%7D+%5Ctheta+%5Ccdot+%5Crm%7Bd%7D+%5Crho+" alt="[公式]"></p><p>其中， <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Crm%7Bd%7D+%5Ctheta+" alt="[公式]"> 就是那段弧长，这里虽然是 <img src="https://www.zhihu.com/equation?tex=%5Capprox" alt="[公式]"> ，但二重积分过程（分割、取极限）就能变成 <img src="https://www.zhihu.com/equation?tex==" alt="[公式]"> .</p><p>因此，就有了二重积分化极坐标公式：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma+=+%5Ciint%5Climits_%7BD%27%7D+f(%5Crho+%5Ccos+%5Ctheta,+%5Crho+%5Csin+%5Ctheta)+%5Ccdot+%5Crho+%5Crm%7Bd%7D+%5Crho+%5Crm%7Bd%7D+%5Ctheta" alt="[公式]"></p><p>其中， <img src="https://www.zhihu.com/equation?tex=D%27" alt="[公式]"> 是 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 的极坐标表示。</p><p><strong>注</strong>：实际上从直角坐标系到极坐标系的转化，是做了一种变换：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cleft%5C%7B+%5C!+%5Cbegin%7Barray%7D%7Bl%7D+x+=+%5Crho+%5Ccos+%5Ctheta+%5C%5C+y+=+%5Crho+%5Csin+%5Ctheta+%5Cend%7Barray%7D+%5Cright." alt="[公式]"></p><p>则</p><p><img src="https://www.zhihu.com/equation?tex=%5Ciint%5Climits_D+f(x,y)+%5Cmathrm%7Bd%7D+%5Csigma+=+%5Ciint%5Climits_%7BD%27%7D+f(%5Crho+%5Ccos+%5Ctheta,+%5Crho+%5Csin+%5Ctheta)+%5Ccdot+%5Cfrac%7B%5Cpartial(x,y)%7D%7B%5Cpartial(%5Crho,+%5Ctheta)%7D+%5Ccdot+%5Crm%7Bd%7D+%5Crho+%5Crm%7Bd%7D+%5Ctheta" alt="[公式]"></p><p>其中，该变换的雅可比行列式恰好等于 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> 而已：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+(x,y)%7D%7B%5Cpartial+(%5Crho+,%5Ctheta+)%7D+=+%5Cbegin%7Bvmatrix%7D+%5Cfrac%7B%5Cpartial+x%7D%7B%5Cpartial+%5Crho%7D+&+%5Cfrac%7B%5Cpartial+x%7D%7B%5Cpartial+%5Ctheta%7D+%5C%5C+%5Cfrac%7B%5Cpartial+y%7D%7B%5Cpartial+%5Crho%7D+&+%5Cfrac%7B%5Cpartial+y%7D%7B%5Cpartial+%5Ctheta%7D+%5Cend%7Bvmatrix%7D+=+%5Crho" alt="[公式]"></p><h2 id="三、二重积分化累次积分的通用方法"><a href="#三、二重积分化累次积分的通用方法" class="headerlink" title="三、二重积分化累次积分的通用方法"></a><strong>三、二重积分化累次积分的通用方法</strong></h2><p>根据前文原理：二重积分是在一块二维的积分区域上，对被积函数做累积；无论采用哪种二重积分化累次积分的方式，关键是要<strong>把积分区域用两个积分变量的范围“精确”的表示出来。</strong></p><p>一旦表示出来，顺手就能写成累次积分，二重积分的计算就只剩下计算两次定积分。</p><p>两个积分变量的积分区域，一定可以用这两个变量的范围“精确”表示出来，谁在先谁在后都行，这样就必有两种表示法：以直角坐标为例，就是</p><p>• 先 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"></p><p>• 先 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"></p><p>这两种表示也保证了，二重积分必能按两种方式转化为累次积分。</p><p>这两种表示的规则也很统一和简单，找到两个变量的变化范围即可：</p><p><strong>先看变量的范围是数值范围是： [最小值，最大值]；</strong></p><p><strong>后看变量的范围是： [小的一侧曲线，大的一侧曲线]；</strong></p><p><strong>若某一侧曲线不能统一写为一个表达式，则对“先看变量”分段处理</strong>。</p><p>这个规则同样适用于极坐标，当然极坐标下的变量的“大和小”需要专门学会区分。</p><p>极坐标下，积分区域也用直角坐标来画，从极坐标的角度来看即可。</p><p>角度 <img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> ，从 <img src="https://www.zhihu.com/equation?tex=0" alt="[公式]"> 度（ <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 轴正向）逆时针到 <img src="https://www.zhihu.com/equation?tex=2+%5Cpi" alt="[公式]"> ，来看从小到大（用过原点的射线，角的终边衡量）；</p><p>极径 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> ，代表的是点到原点的距离，所以是从原点（最小极径 <img src="https://www.zhihu.com/equation?tex==0" alt="[公式]"> ），到外侧圆环来看从小到大。具体操作在角度 <img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 的两条射线（终边）辅助下，从小的一侧曲线到大的一侧曲线，就是从内圈曲线，到外圈曲线。</p><p>以上原理非常简单，你只需要记住上述原则（已加粗），会正确地区分积分变量的大和小。</p><h2 id="四、例题演示"><a href="#四、例题演示" class="headerlink" title="四、例题演示"></a>四、例题演示</h2><p>下面用两道例题，帮你学会该方法。为了清楚，我写了很啰嗦的解释，上手之后只写每步结果就很简洁了。</p><p><strong>例1</strong> 计算 <img src="https://www.zhihu.com/equation?tex=%5Ciint%5Climits_D+xy+%5C,%5Crm%7Bd%7D+%5Csigma" alt="[公式]"> , 其中 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 为抛物线 <img src="https://www.zhihu.com/equation?tex=y%5E2=x" alt="[公式]"> 与直线 <img src="https://www.zhihu.com/equation?tex=y=x-2" alt="[公式]"> 所围成的区域。</p><p><strong>解</strong>：(1) 先画出积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"></p><p><img src="https://pic1.zhimg.com/v2-0931561e7a995939bea6952101523ee4_r.jpg" alt="img"></p><p>(2) “精确”表示区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"></p><p><strong>方法一</strong>：先 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"></p><p>“先看变量” <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 是数值范围：[最小值, 最大值],<img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 是下边小上边大，最小值在 <img src="https://www.zhihu.com/equation?tex=A" alt="[公式]"> 点 <img src="https://www.zhihu.com/equation?tex=(1,-1)" alt="[公式]"> 处取到，最大值在 <img src="https://www.zhihu.com/equation?tex=B" alt="[公式]"> 点 <img src="https://www.zhihu.com/equation?tex=(4,2)" alt="[公式]"> 处取到，故 <img src="https://www.zhihu.com/equation?tex=y+%5Cin+%5B-1,2%5D" alt="[公式]"></p><p>看一下所确定的范围：</p><p><img src="https://pic2.zhimg.com/v2-72087ced47ccf742e3f886bfe56e356d_r.jpg" alt="img"></p><p>可见，从 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 轴方向来看，积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 落在这两条横线中间。</p><p>“后看变量” <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 范围是：[小的一侧曲线，大的一侧曲线]， <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 是左侧小右侧大，所以是从左侧曲线 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BAOB%7D" alt="[公式]"> 到右侧曲线 <img src="https://www.zhihu.com/equation?tex=%5Coverline%7BAB%7D" alt="[公式]"></p><p>左侧曲线 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BAOB%7D" alt="[公式]"> 的表达式为： <img src="https://www.zhihu.com/equation?tex=y%5E2=x+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+x+=+y%5E2" alt="[公式]"></p><p>右侧曲线 <img src="https://www.zhihu.com/equation?tex=%5Coverline%7BAB%7D" alt="[公式]"> 的表达式为： <img src="https://www.zhihu.com/equation?tex=y=x-2+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+x+=+y+2" alt="[公式]"></p><p>于是， <img src="https://www.zhihu.com/equation?tex=x+%5Cin+%5By%5E2,+y+2%5D" alt="[公式]"></p><p><strong>注意：下方直线 <img src="https://www.zhihu.com/equation?tex=y=-1" alt="[公式]"> ，上方直线 <img src="https://www.zhihu.com/equation?tex=y=2" alt="[公式]"> , 左侧曲线 <img src="https://www.zhihu.com/equation?tex=x=y%5E2" alt="[公式]"> , 右侧曲线 <img src="https://www.zhihu.com/equation?tex=x=y+2" alt="[公式]"> , 恰好确定积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> , 即所谓的积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> “精确”表示。</strong></p><p>因此，二重积分可化为如下的累次积分：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ciint%5Climits_D+xy+%5C,%5Crm%7Bd%7D+%5Csigma+=%5Cint_%7B-1%7D+%5E2+%5Crm%7Bd%7D+y+%5Cint_%7By%5E2%7D%5E%7By+2%7D+x+y+%5Crm%7Bd%7D+x" alt="[公式]"></p><p><strong>方法二</strong>：先 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"></p><p>“先看变量” <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 是数值范围：[最小值, 最大值],<img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 是左边小右边大，最小值在原点 <img src="https://www.zhihu.com/equation?tex=(0,0)" alt="[公式]"> 处取到，最大值在 <img src="https://www.zhihu.com/equation?tex=B" alt="[公式]"> 点 <img src="https://www.zhihu.com/equation?tex=(4,2)" alt="[公式]"> 处取到，故 <img src="https://www.zhihu.com/equation?tex=x+%5Cin+%5B0,4%5D" alt="[公式]"><br>看一下所确定的范围：</p><p><img src="https://pic2.zhimg.com/v2-76f6ee5a8f5f991f33b5184303e9b095_r.jpg" alt="img"></p><p>可见，从 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 轴方向来看，积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 落在这两条竖线中间。</p><p>“后看变量” <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 范围是：[小的一侧曲线，大的一侧曲线]， <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 是下方小上方大，所以是从下方曲线 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOA%7D+%5Coverline%7BAB%7D" alt="[公式]"> 到上方曲线 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOB%7D" alt="[公式]"> 。</p><p>显然，下方曲线 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOA%7D+%5Coverline%7BAB%7D" alt="[公式]"> 不能统一用一个表达式表示，所以必须对 <img src="https://www.zhihu.com/equation?tex=x+%5Cin+%5B0,4%5D" alt="[公式]"> 分段，要以 <img src="https://www.zhihu.com/equation?tex=A" alt="[公式]"> 点作为分界点，注意到 <img src="https://www.zhihu.com/equation?tex=A" alt="[公式]"> 点坐标为 <img src="https://www.zhihu.com/equation?tex=(1,-1)" alt="[公式]"> , 故</p><p><img src="https://www.zhihu.com/equation?tex=x+%5Cin+%5B0,4%5D+=+%5B0,1%5D+%5Ccup+%5B1,4%5D" alt="[公式]"></p><p>再给图形增加 <img src="https://www.zhihu.com/equation?tex=x=1" alt="[公式]"> 辅助线，积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 也被分为 <img src="https://www.zhihu.com/equation?tex=D_1" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=D_2" alt="[公式]"> :</p><p><img src="https://pic3.zhimg.com/v2-901f71eb16ecfa7f943eb0ea43ebe272_r.jpg" alt="img"></p><p>(i) 对 <img src="https://www.zhihu.com/equation?tex=D_1" alt="[公式]"> 区域， <img src="https://www.zhihu.com/equation?tex=x+%5Cin+%5B0,1%5D" alt="[公式]"> :</p><p><img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 小的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOA%7D" alt="[公式]"> , 其表示为 <img src="https://www.zhihu.com/equation?tex=y%5E2=x+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+y+=+-%5Csqrt%7Bx%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 大的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOC%7D" alt="[公式]"> , 其表示为 <img src="https://www.zhihu.com/equation?tex=y%5E2=x+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+y+=+%5Csqrt%7Bx%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=y+%5Cin+%5B-+%5Csqrt%7Bx%7D,+%5Csqrt%7Bx%7D%5D" alt="[公式]"> .</p><p>(ii) 对 <img src="https://www.zhihu.com/equation?tex=D_2" alt="[公式]"> 区域， <img src="https://www.zhihu.com/equation?tex=x+%5Cin+%5B1,4%5D" alt="[公式]"> :</p><p><img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 小的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Coverline%7BAB%7D" alt="[公式]"> , 其表示为 <img src="https://www.zhihu.com/equation?tex=y=x-2" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 大的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BCB%7D" alt="[公式]"> , 其表示为 <img src="https://www.zhihu.com/equation?tex=y%5E2=x+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+y+=+%5Csqrt%7Bx%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=y+%5Cin+%5Bx-2,+%5Csqrt%7Bx%7D%5D" alt="[公式]"> .</p><p>因此，二重积分可化为如下累次积分：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ciint%5Climits_D+xy+%5C,%5Crm%7Bd%7D+%5Csigma+=%5Cint_0+%5E1+%5Crm%7Bd%7D+x+%5Cint_%7B-%5Csqrt%7Bx%7D%7D%5E%7B%5Csqrt%7Bx%7D%7D+x+y+%5Crm%7Bd%7D+y+++%5Cint_1+%5E4+%5Crm%7Bd%7D+x+%5Cint_%7Bx-2%7D%5E%7B%5Csqrt%7Bx%7D%7D+x+y+%5Crm%7Bd%7D+y" alt="[公式]"></p><p>(3) 计算（略）。</p><p><strong>注</strong>：实际中不用特意区分，直接“先 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> ”，若不好算（需要分段或求积分困难），再“先 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> ”即可。</p><p><strong>例2</strong> 在极坐标下交换积分次序：</p><p><img src="https://www.zhihu.com/equation?tex=I+=+%5Cint_%7B+-+%5Cfrac%7B%5Cpi+%7D%7B4%7D%7D%5E%7B%5Cfrac%7B%5Cpi+%7D%7B2%7D%7D+%7B%5Crm%7Bd%7D%7D+%5Ctheta+%5Cint_0%5E%7B2%5Ccos+%5Ctheta+%7D+f(%5Crho+%5Ccos+%5Ctheta+,%5Crho+%5Csin+%5Ctheta+)%5Crho+%7B%5Crm%7Bd%7D%7D%5Crho+" alt="[公式]"></p><p><strong>解</strong>：(1) 积分区域为“先 <img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> ”表示：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta+%5Cin+%5Cbig%5B+-%5Cfrac%7B%5Cpi%7D%7B4%7D,+%5Cfrac%7B%5Cpi%7D%7B2%7D+%5Cbig%5D,+%5Cquad+%5Crho+%5Cin+%5B0,+2+%5Ccos+%5Ctheta%5D" alt="[公式]"></p><p>(2) 在直角坐标系画出积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"></p><p>先处理边界曲线：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Beqnarray*%7D+%5Crho=2%5Ccos+%5Ctheta+&%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D&+%5Crho%5E2=2+%5Crho+%5Ccos+%5Ctheta+%5C%5C+&%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D&+x%5E2+y%5E2+=+2x+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+%EF%BC%88x-1)%5E2+y%5E2=1+%5Cend%7Beqnarray*%7D" alt="[公式]"></p><p>再结合 <img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 的范围，得到积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> ：</p><p><img src="https://pic2.zhimg.com/v2-1323f28edc20fb76154427a32a5bc8d1_r.jpg" alt="img"></p><p>(3) 改用“先 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> 后 <img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> ”表示</p><p><img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> 最小值是 <img src="https://www.zhihu.com/equation?tex=0" alt="[公式]"> （原点），最大值在点 <img src="https://www.zhihu.com/equation?tex=(2,0)" alt="[公式]"> 处为 <img src="https://www.zhihu.com/equation?tex=2" alt="[公式]"> ，故 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Cin+%5B0,2%5D" alt="[公式]"> .</p><p>添加 <img src="https://www.zhihu.com/equation?tex=%5Crho=0" alt="[公式]"> （原点）和 <img src="https://www.zhihu.com/equation?tex=%5Crho=2" alt="[公式]"> 辅助线，并标记若干点：</p><p><img src="https://pic3.zhimg.com/v2-75a120ab4acb3b01502ca799bdcb830e_r.jpg" alt="img"></p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 要从小的一侧曲线（负角度一侧，是 <img src="https://www.zhihu.com/equation?tex=%5Coverline%7BOB%7D+%5Cwidehat%7BBA%7D" alt="[公式]"> ）, 到大的一侧曲线（是 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOA%7D" alt="[公式]"> ）.</p><p>显然， <img src="https://www.zhihu.com/equation?tex=%5Coverline%7BOB%7D+%5Cwidehat%7BBA%7D" alt="[公式]"> 不能统一用一个表达式 <img src="https://www.zhihu.com/equation?tex=%5Ctheta+=+%5Ctheta_1(%5Crho)" alt="[公式]"> 表示，所以，必须对 <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Cin+%5B0,2%5D" alt="[公式]"> 进行分段。要以<img src="https://www.zhihu.com/equation?tex=B" alt="[公式]"> 点对应的 <img src="https://www.zhihu.com/equation?tex=%5Crho" alt="[公式]"> 值作为分界点，注意到 <img src="https://www.zhihu.com/equation?tex=B" alt="[公式]"> 点坐标为 <img src="https://www.zhihu.com/equation?tex=(1,-1)" alt="[公式]"> , 故</p><p><img src="https://www.zhihu.com/equation?tex=%5Crho+%5Cin+%5B0,2%5D+=+%5B0,+%5Csqrt%7B2%7D%5D+%5Ccup+%5B%5Csqrt%7B2%7D,+2%5D" alt="[公式]"></p><p>再给图形加上 <img src="https://www.zhihu.com/equation?tex=%5Crho+=+%5Csqrt%7B2%7D" alt="[公式]"> 辅助线，该辅助线也将积分区域 <img src="https://www.zhihu.com/equation?tex=D" alt="[公式]"> 分为 <img src="https://www.zhihu.com/equation?tex=D_1" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=D_2" alt="[公式]"> ：</p><p><img src="https://pic1.zhimg.com/v2-b4f1c8de2c862c5a2889cd22b37cdac8_r.jpg" alt="img"></p><p>(i) 对 <img src="https://www.zhihu.com/equation?tex=D_1" alt="[公式]"> 区域， <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Cin+%5B0,+%5Csqrt%7B2%7D%5D" alt="[公式]"> ：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 小的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Coverline%7BOB%7D" alt="[公式]"> , 其表示为： <img src="https://www.zhihu.com/equation?tex=%5Ctheta+=+-+%5Cfrac%7B%5Cpi%7D%7B4%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 大的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BOC%7D" alt="[公式]"> , 其表示为： <img src="https://www.zhihu.com/equation?tex=%5Crho=2+%5Ccos+%5Ctheta+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+%5Ctheta+=+%5Carccos+%5Cfrac%7B%5Crho%7D%7B2%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=%5Ctheta+%5Cin+%5Cbig%5B-+%5Cfrac%7B%5Cpi%7D%7B4%7D,+%5Carccos+%5Cfrac%7B%5Crho%7D%7B2%7D+%5Cbig%5D" alt="[公式]"> .</p><p>(ii) 对 <img src="https://www.zhihu.com/equation?tex=D_2" alt="[公式]"> 区域， <img src="https://www.zhihu.com/equation?tex=%5Crho+%5Cin+%5B%5Csqrt%7B2%7D,+2%5D" alt="[公式]"> ：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 小的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BBA%7D" alt="[公式]"> ，其表示为： <img src="https://www.zhihu.com/equation?tex=%5Crho=2+%5Ccos+%5Ctheta+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+%5Ctheta+=+-%5Carccos+%5Cfrac%7B%5Crho%7D%7B2%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Ctheta" alt="[公式]"> 大的一侧曲线为 <img src="https://www.zhihu.com/equation?tex=%5Cwidehat%7BCA%7D" alt="[公式]"> ，其表示为： <img src="https://www.zhihu.com/equation?tex=%5Crho=2+%5Ccos+%5Ctheta+%5Cxrightarrow%7B%E5%8F%98%E5%BD%A2%7D+%5Ctheta+=+%5Carccos+%5Cfrac%7B%5Crho%7D%7B2%7D" alt="[公式]"></p><p>故 <img src="https://www.zhihu.com/equation?tex=%5Ctheta+%5Cin+%5Cbig%5B-+%5Carccos+%5Cfrac%7B%5Crho%7D%7B2%7D+,+%5Carccos+%5Cfrac%7B%5Crho%7D%7B2%7D+%5Cbig%5D" alt="[公式]"></p><p>因此，原二重积分可化为如下累次积分：</p><p><img src="https://www.zhihu.com/equation?tex=I+=+%5Cint_0%5E%7B%5Csqrt+2+%7D+%7B%5Crm%7Bd%7D%7D%5Crho+%5Cint_%7B+-+%5Cfrac%7B%5Cpi+%7D%7B4%7D%7D%5E%7B%5Carccos+%5Cfrac%7B%5Crho+%7D%7B2%7D%7D+f(%5Crho+%5Ccos+%5Ctheta+,%5Crho+%5Csin+%5Ctheta+)%5Crho+%7B%5Crm%7Bd%7D%7D%5Ctheta+++%5Cint_%7B%5Csqrt+2+%7D%5E2+%7B%7B%5Crm%7Bd%7D%7D%5Crho+%7D+%5Cint_%7B+-+%5Carccos+%5Cfrac%7B%5Crho+%7D%7B2%7D%7D%5E%7B%5Carccos+%5Cfrac%7B%5Crho+%7D%7B2%7D%7D+f(%5Crho+%5Ccos+%5Ctheta+,%5Crho+%5Csin+%5Ctheta+)%5Crho+%7B%5Crm%7Bd%7D%7D%5Ctheta+" alt="[公式]"></p><p><strong>参考文献：</strong></p><p>《高等数学》，同济版</p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“mac虚拟机解决方案第二弹”</title>
      <link href="2021/04/14/port%E2%80%9Cmac%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%AC%AC%E4%BA%8C%E5%BC%B9%E2%80%9D/"/>
      <url>2021/04/14/port%E2%80%9Cmac%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%AC%AC%E4%BA%8C%E5%BC%B9%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>对于完全小白请先看一下鄙人的上一篇文章，brew的安装在进行后续操作。</p><p>最容易的请直接看3.</p><p>mac安装window虚拟机的三种方式，双系统硬盘安装，Parallels，virtaubox</p><p>Mac下安装Windows虚拟机有几种方式可以考虑<br>1.双系统硬盘安装的方式，启动时选择不同的操作系统进去，相当于在苹果Mac笔记本硬件上安装了个Windows系统，不能直接切换，进去后操作Windows的体验比较好。<br>需要下载安装特定的win10镜像，应用程序–&gt;实用工具–&gt;启动转换助理 然后按提示安装就可以了。<br>图文介绍可以看这篇文章：<a href="https://zhuanlan.zhihu.com/p/34435136">https://zhuanlan.zhihu.com/p/34435136</a></p><p>2.使用收费虚拟机软件（Parallels 498元起），可以一键滑过去切换系统，体验也比较好，但开机启动会占Mac的内存资源，相当于启动了一个后台进程的软件。<br><a href="https://www.parallels.cn/">https://www.parallels.cn/</a><br>Parallels Desktop 是功能最强大灵活度最高的虚拟化方案，无需重启即可在同一台电脑上随时访问Windows和Mac两个系统上的众多应用程序。从仅限于PC的游戏到生产力软件，Parallels Desktop都能帮您实现便捷使用。<br>可以同时运行Windows和MacOS应用程序，直接从Mac dock启动Windows应用程序，无需重启。<br>双系统文件随意拖动<br>在Mac与Windows应用程序之间随意拖放文件快捷使用，无需本地拷贝文件即可存储，深度整合，手势共用，云端共享。<br>操作简单 无缝对接<br>安全便捷的新建向导自动查找操作系统，融合模式(Coherence)不使用Windows界面也可轻松切换各个应用程序，无缝对接。<br>Parallels Toolbox 是Mac平台上的一款PD虚拟机快捷的实用工具集合工具</p><p>3.使用免费虚拟机软件virtualbox虚拟机，在虚拟机软件里面打开，功能比较弱，体检比较差，也不太稳定，经常出现需要重新安装系统的问题，只能当测试用或者临时用一下。</p><p>使用免费虚拟机软件virtualbox虚拟机安装方法：<br>1.安装完成brew后可以使用命令安装免费的virtualbox虚拟机<br>PS:由于源在国外问题，brew下载的速度很慢经常会导致下载超时失败，建议改成国内镜像或者fq后执行<br>brew cask install virtualbox<br>brew cask install virtualbox-extension-pack</p><p><img src="https://img2020.cnblogs.com/blog/47685/202008/47685-20200804115343878-1055090597.png" alt="img"></p><p>2.安装完成虚拟机后下载一个ISO镜像，本人测试用迅雷下载了几个都不能用，到微软官方上下载了一个才安装成功了</p><p>3.下载完ISO镜像后打开virtualbox创建虚拟机就可以了</p><p><img src="https://img2020.cnblogs.com/blog/47685/202008/47685-20200804115536641-1378936559.png" alt="img"></p><p> <img src="https://img2020.cnblogs.com/blog/47685/202008/47685-20200804115639877-1786579440.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac的brew安装快捷方式</title>
      <link href="2021/04/14/portmac%E7%9A%84brew%E5%AE%89%E8%A3%85%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
      <url>2021/04/14/portmac%E7%9A%84brew%E5%AE%89%E8%A3%85%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>介于网上误人子弟，及其不负责任的brew安装方式讲解</p><p>最离谱的看到一个老哥安装brew写了洋洋洒洒的2000多字。</p><p>所以为了各位刚使用的朋友谋福利，这里只需要一行代码，在terminal执行即可</p><p>一键解君愁。</p><p>在网上搜了很多brew安装方式，包括使用官网的方式都安装报错<br>Failed to connect to raw.githubusercontent.com port 443: Connection refused</p><p>然后找了好久终于找到一个安装成功。</p><p>安装方式</p><p>/bin/zsh -c “$(curl -fsSL <a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;">https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</a></p><p>你没有看错，把这行代码执行就可。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论微分方程</title>
      <link href="2021/04/13/%E8%AE%BA%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
      <url>2021/04/13/%E8%AE%BA%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本文列举了微分方程的公式，当做一个笔记，如果后面有地方用得上就回来翻翻。<br>当然本文是为了求解模型中用得上的微分方程而书写的，并非是为了考研或者本科课程应试，所以不会有例题，只会有对应的解法。同时公式和解法不一定是完全的，后面如果还遇到了到时候再进行补充。</p><p>微分方程这一章的知识点很细碎，都是独立的知识块（主要是学的少)。下面是知识总结：</p><hr><p><strong>齐次方程</strong></p><p>1.形如</p><p><img src="https://pic3.zhimg.com/v2-c90c47b3f62b86f6d2adb4970f9943ea_r.jpg" alt="img"></p><p>的方程：<strong>分离参数法</strong>。</p><p>分离参数后对两边积分。</p><p>（通解不是全部解：在解微分方程时，每一步不一定是同解变形，因此可能会增、减解）</p><p><strong>技巧</strong>：当积分后含 的两项均为<strong>ln</strong>型函数时，C也写成<strong>ln C。</strong></p><p><img src="https://pic4.zhimg.com/v2-72f663dab34c0aece6e9e5789a3df7af_r.jpg" alt="img"></p><p>\2. 形如</p><p><img src="https://pic1.zhimg.com/80/v2-711efb93789f43e5d5c1e712e76637e4_1440w.jpg" alt="img"></p><p>的方程：<strong>换元法</strong>。</p><p><img src="https://pic4.zhimg.com/v2-546b574e5a06a14da5a0ee13cf031aa7_r.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/v2-aadae0539fd91ecdf224b0f32490f62a_r.jpg" alt="img"></p><hr><p><strong>一阶线性微分方程</strong></p><p><img src="https://pic1.zhimg.com/v2-7010361827a22d7c3734a63f1ff2f8b4_r.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-f5a06be6c0c05cee22e34dcd9add4839_r.jpg" alt="img"></p><hr><p><strong>可降阶的高阶微分方程</strong></p><p><img src="https://pic1.zhimg.com/v2-680b3f80635ddf60268fceea299bc8b8_r.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-d903712ba6c9e679a2d9f2e98431520d_r.jpg" alt="img"></p><hr><p><strong>高阶线性微分方程</strong></p><p><img src="https://pic4.zhimg.com/v2-dc647909f7b7b6de161161c2b5bdc1ff_r.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/v2-809364dce895e58a60e04cb2c087d7be_r.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/v2-cc46f65b70fd3a0afa75bb093e600253_r.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/v2-bc819af5ce9c0253ad99c407bab52496_r.jpg" alt="img"></p><hr><p><strong>常系数齐次线性微分方程</strong></p><p><img src="https://pic4.zhimg.com/v2-c1ae3b8da228f237a0dd87a38653d51f_r.jpg" alt="img"></p><hr><p><strong>常系数非齐次线性微分方程</strong></p><p><strong>15.两类可解方程：</strong></p><p><strong>1）</strong></p><p><img src="https://pic4.zhimg.com/80/v2-4afe0a69dbe3c729ecc19dfcf258d06f_1440w.png" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-6a6507bb3de0109c6aed6cd4b592ea09_r.jpg" alt="img"></p><p><strong>2）</strong></p><p><img src="https://pic2.zhimg.com/80/v2-41586e05acba98e18b7f38f5fa55a50d_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/v2-7c443decb17c1b05b3a62fde883b5a1a_r.jpg" alt="img"></p><h2 id="本文总结了微分方程中的一些基础知识"><a href="#本文总结了微分方程中的一些基础知识" class="headerlink" title="本文总结了微分方程中的一些基础知识"></a>本文总结了微分方程中的一些基础知识</h2><h2 id="第一节——微分方程的基本概念"><a href="#第一节——微分方程的基本概念" class="headerlink" title="第一节——微分方程的基本概念"></a>第一节——微分方程的基本概念</h2><p>第一节主要给出了基本概念——微分方程的定义；阶；解；通解；特解；初值条件；初值问题</p><p>着重理解的是两个——阶和通解</p><p>微分方程中所出现的未知函数的最高阶导数的阶数，叫做微分方程的阶</p><p>举例： <img src="https://www.zhihu.com/equation?tex=x%5E%7B3%7Dy%5E%7B%27%27%27%7D+x%5E%7B2%7Dy%5E%7B%27%27%7D-4xy%5E%7B%27%7D=3x%5E%7B2%7D" alt="[公式]"> 为三阶微分方程</p><p>如果微分方程的解中含有任意常数，且任意常数的个数与微分方程的阶数相同，这样的解叫做微分方程的通解（任意常数互相独立，不能合并，★★★★★，详见第六节线性相关性）</p><h2 id="第二节——可分离变量的微分方程"><a href="#第二节——可分离变量的微分方程" class="headerlink" title="第二节——可分离变量的微分方程"></a>第二节——可分离变量的微分方程</h2><p>可分离变量的微分方程的一般解法——</p><p>①将所给方程写成一端只含有 y 的函数和 dy ，另一端只含 x 的函数和 dx</p><p>②两端分别积分后化简</p><p>举例：求微分方程 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=2xy" alt="[公式]"> 的通解</p><p>解： ①<img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7By%7D=2xdx" alt="[公式]"></p><p>② <img src="https://www.zhihu.com/equation?tex=%5Cint_%7B%7D%5E%7B%7D%5Cfrac%7Bdy%7D%7By%7D=%5Cint_%7B%7D%5E%7B%7D2xdx" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=ln%7Cy%7C=x%5E%7B2%7D+C_%7B1%7D%5E%7B%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=y=%5Cpm+e%5E%7Bx%5E%7B2%7D+C_%7B1%7D%5E%7B%7D%7D=%5Cpm+e_%7B%7D%5E%7BC_%7B1%7D%5E%7B%7D%7De_%7B%7D%5E%7Bx%5E%7B2%7D%7D=Ce_%7B%7D%5E%7Bx%5E%7B2%7D%7D%EF%BC%88C=%5Cpm+e_%7B%7D%5E%7BC_%7B1%7D%5E%7B%7D%7D%EF%BC%89" alt="[公式]"></p><h2 id="第三节——齐次方程"><a href="#第三节——齐次方程" class="headerlink" title="第三节——齐次方程"></a>第三节——齐次方程</h2><p>如果一阶微分方程可以化为 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=%5Cvarphi%EF%BC%88%5Cfrac%7By%7D%7Bx%7D%EF%BC%89" alt="[公式]"> ，那么可采取齐次方程的一般解法——</p><p>①设 <img src="https://www.zhihu.com/equation?tex=u=%5Cfrac%7By%7D%7Bx%7D" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=y=ux" alt="[公式]"> 则 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=u+x%5Cfrac%7Bdu%7D%7Bdx%7D" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdu%7D%7B%5Cvarphi%EF%BC%88u%EF%BC%89-u%7D=%5Cfrac%7Bdx%7D%7Bx%7D" alt="[公式]"></p><p>②两边积分后以 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7By%7D%7Bx%7D" alt="[公式]"> 代替 <img src="https://www.zhihu.com/equation?tex=u" alt="[公式]"> ，便可得所给齐次方程的通解</p><p>举例：解方程 <img src="https://www.zhihu.com/equation?tex=y%5E%7B2%7D+x%5E%7B2%7D%5Cfrac%7Bdy%7D%7Bdx%7D=xy%5Cfrac%7Bdy%7D%7Bdx%7D" alt="[公式]"></p><p>解：⑴化简 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=%5Cfrac%7B(%5Cfrac%7By%7D%7Bx%7D)%5E%7B2%7D%7D%7B%5Cfrac%7By%7D%7Bx%7D-1%7D" alt="[公式]"></p><p>⑵令 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7By%7D%7Bx%7D=u" alt="[公式]"> , <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=u+x%5Cfrac%7Bdu%7D%7Bdx%7D" alt="[公式]"> , <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bu%5E%7B2%7D%7D%7Bu-1%7D=u+x%5Cfrac%7Bdu%7D%7Bdx%7D" alt="[公式]"></p><p>⑶分离变量并且两端积分得 <img src="https://www.zhihu.com/equation?tex=u-ln%7Cu%7C+C_%7B1%7D%5E%7B%7D=ln%7Cx%7C" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=ln%7Cxu%7C=u+C+_%7B1%7D%5E%7B%7D" alt="[公式]"></p><p>⑷带入 <img src="https://www.zhihu.com/equation?tex=u=%5Cfrac%7By%7D%7Bx%7D" alt="[公式]"> 得 <img src="https://www.zhihu.com/equation?tex=ln%7Cy%7C=%5Cfrac%7By%7D%7Bx%7D+C_%7B1%7D%5E%7B%7D" alt="[公式]"> 或 <img src="https://www.zhihu.com/equation?tex=y=Cx_%7B%7D%5E%7B%5Cfrac%7By%7D%7Bx%7D%7D%EF%BC%88C=%5Cpm+e_%7B%7D%5E%7BC_%7B1%7D%5E%7B%7D%7D%EF%BC%89" alt="[公式]"></p><h2 id="第四节——一阶线性微分方程"><a href="#第四节——一阶线性微分方程" class="headerlink" title="第四节——一阶线性微分方程"></a>第四节——一阶线性微分方程</h2><p>此节阅读书上推导过程后（看不懂可私信问我哦）记住两个公式即可</p><p>一阶线性齐次微分方程 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D+P%EF%BC%88x%EF%BC%89y=0" alt="[公式]"> 的通解</p><p><img src="https://www.zhihu.com/equation?tex=y=Ce_%7B%7D%5E%7B-%5Cint_%7B%7D%5E%7B%7DP(x)dx%7D++" alt="[公式]"></p><p>一阶线性非齐次微分方程 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D+P%EF%BC%88x%EF%BC%89y=Q%EF%BC%88x%EF%BC%89" alt="[公式]"> 的通解</p><p><img src="https://www.zhihu.com/equation?tex=y=e_%7B%7D%5E%7B-%5Cint_%7B%7D%5E%7B%7DP%EF%BC%88x%EF%BC%89dx%7D%E3%80%94%5Cint_%7B%7D%5E%7B%7DQ%EF%BC%88x%EF%BC%89e_%7B%7D%5E%7B%5Cint_%7B%7D%5E%7B%7DP%EF%BC%88x%EF%BC%89dx%7Ddx+C%E3%80%95" alt="[公式]"></p><p>此种题目一般解法都是带公式，但要注意 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 的灵活变换</p><p>举例： 解方程 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=%5Cfrac%7By%7D%7Bx+y%5E%7B3%7D%7D" alt="[公式]"></p><p>这一题初看小伙们就想用齐次方程的解法，试了试绝望……为啥配不好……</p><p>这么写的本质原因还是你没有理解 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 的地位相同</p><p>解：⑴上下颠倒 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdx%7D%7Bdy%7D=%5Cfrac%7Bx%7D%7By%7D+y%5E%7B2%7D" alt="[公式]"></p><p>⑵移项配成一阶线性非齐次微分方程标准形式 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdx%7D%7Bdy%7D-%5Cfrac%7B1%7D%7By%7D%5Ctimes+x=y%5E%7B2%7D" alt="[公式]"></p><p>此时的 <img src="https://www.zhihu.com/equation?tex=P%EF%BC%88y%EF%BC%89=%5Cfrac%7B1%7D%7By%7D" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=Q%EF%BC%88y%EF%BC%89=y%5E%7B2%7D" alt="[公式]"></p><p>再代入公式即可求得通解</p><h2 id="第五节——可降阶的高阶微分方程"><a href="#第五节——可降阶的高阶微分方程" class="headerlink" title="第五节——可降阶的高阶微分方程"></a>第五节——可降阶的高阶微分方程</h2><p>一. <img src="https://www.zhihu.com/equation?tex=y%5E%7B(n)%7D=f(x)" alt="[公式]"> 型的微分方程</p><p>解法：两边同时求 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 次积分即可，此种题目较为简单，基本遇不到</p><p>二. <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D=f(x,y%5E%7B%27%7D)" alt="[公式]"> 型的微分方程</p><p>解法：设 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%7D=p" alt="[公式]"> 则 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D=%5Cfrac%7Bdp%7D%7Bdx%7D" alt="[公式]"> ,这样可将原方程化为可分离变量的方程，再对其求积分即可</p><p>举例： <img src="https://www.zhihu.com/equation?tex=%EF%BC%881+x%5E%7B2%7D%EF%BC%89y%5E%7B%27%27%7D=2xy%5E%7B%27%7D" alt="[公式]"></p><p>解：设 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%7D=p" alt="[公式]"> ,代入方程并分离变量后有 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdp%7D%7Bp%7D=%5Cfrac%7B2x%7D%7B1+x%5E%7B2%7D%7Ddx" alt="[公式]"></p><p>两端积分得 <img src="https://www.zhihu.com/equation?tex=ln%7Cp%7C=ln%EF%BC%881+x%5E%7B2%7D%EF%BC%89+C" alt="[公式]"> 即 <img src="https://www.zhihu.com/equation?tex=p=y%5E%7B%27%7D=C_%7B1%7D%5E%7B%7D(1+x%5E%7B2%7D)" alt="[公式]"> {<img src="https://www.zhihu.com/equation?tex=C_%7B1%7D%5E%7B%7D=%5Cpm+e%5E%7BC%7D" alt="[公式]"> }</p><p>再次积分即可</p><p>三. <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D=f(y,y%5E%7B%27%7D)" alt="[公式]"> 型的微分方程</p><p>解法：令 <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B%27%7D=p" alt="[公式]"> 则 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D=%5Cfrac%7Bdp%7D%7Bdx%7D=%5Cfrac%7Bdp%7D%7Bdy%7D%5Ccdot%5Cfrac%7Bdy%7D%7Bdx%7D=p%5Cfrac%7Bdp%7D%7Bdy%7D" alt="[公式]"> 代入原方程后分离变量求两次积分即可</p><p>举例：求微分方程 <img src="https://www.zhihu.com/equation?tex=y_%7B%7Dy_%7B%7D%5E%7B%27%27%7D-y%5E%7B%272%7D=0" alt="[公式]"> 通解</p><p>解：设 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%7D=p" alt="[公式]"> 则 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D=p%5Cfrac%7Bdp%7D%7Bdy%7D" alt="[公式]"> 代入原方程，得 <img src="https://www.zhihu.com/equation?tex=yp%5Cfrac%7Bdp%7D%7Bdy%7D-p%5E%7B2%7D=0" alt="[公式]"></p><p>在 <img src="https://www.zhihu.com/equation?tex=y%5Cne0%EF%BC%8Cp%5Cne0" alt="[公式]"> 时约去 <img src="https://www.zhihu.com/equation?tex=p" alt="[公式]"> 并分离变量得 <img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdp%7D%7Bp%7D=%5Cfrac%7Bdy%7D%7By%7D" alt="[公式]"></p><p>两端积分后得 <img src="https://www.zhihu.com/equation?tex=ln%7Cp%7C=ln%7Cy%7C+C" alt="[公式]"> 即 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%7D=C_%7B1%7D%5E%7B%7Dy+(C_%7B1%7D%5E%7B%7D=%5Cpm+e_%7B%7D%5E%7BC%7D)" alt="[公式]"></p><p>再分离变量并两端积分得 <img src="https://www.zhihu.com/equation?tex=ln%7Cy%7C=C_%7B1%7D%5E%7B%7Dx+C_%7B2%7D%5E%7B%27%7D" alt="[公式]"> 或 <img src="https://www.zhihu.com/equation?tex=y=C_%7B2%7D%5E%7B%7De_%7B%7D%5E%7BC_%7B1%7D%5E%7B%7Dx%7D%EF%BC%88C_%7B2%7D%5E%7B%7D=%5Cpm+e_%7B%7D%5E%7BC_%7B2%7D%5E%7B%E2%80%99%7D%7D%EF%BC%89" alt="[公式]"></p><h2 id="第六节——高阶线性微分方程"><a href="#第六节——高阶线性微分方程" class="headerlink" title="第六节——高阶线性微分方程"></a>第六节——高阶线性微分方程</h2><p>此节主要掌握4个定理和线性相关与无关即可（证明自己阅读书籍），为下面几节的学习做知识上的准备</p><p>二阶齐次线性微分方程： <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B%27%27%7D+P(x)y%5E%7B%27%7D+Q(x)y=0" alt="[公式]"> (1）</p><p>定理一：如果函数 <img src="https://www.zhihu.com/equation?tex=y_%7B1%7D%5E%7B%7D(x)%E4%B8%8Ey_%7B2%7D%5E%7B%7D(x)" alt="[公式]"> 是方程（1）的两个解，那么 <img src="https://www.zhihu.com/equation?tex=y=C_%7B1%7D%5E%7B%7Dy_%7B1%7D%5E%7B%7D(x)+C_%7B2%7D%5E%7B%7Dy_%7B2%7D%5E%7B%7D(x)" alt="[公式]"> 也是方程（1）的解，其中 <img src="https://www.zhihu.com/equation?tex=C_%7B1%7D%5E%7B%7D%EF%BC%8CC_%7B2%7D%5E%7B%7D" alt="[公式]"> 是任意常数</p><p>概念：设 <img src="https://www.zhihu.com/equation?tex=y_%7B1%7D%5E%7B%7D(x),y_%7B2%7D%5E%7B%7D(x),%E2%80%A6,y_%7Bn%7D%5E%7B%7D(x)" alt="[公式]"> 为定义在区间 <em><strong>I*</strong> 上的 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 个函数，如果存在 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 个不全为0的常数 <img src="https://www.zhihu.com/equation?tex=k_%7B1%7D%5E%7B%7D%EF%BC%8Ck_%7B2%7D%5E%7B%7D%EF%BC%8C%E2%80%A6%EF%BC%8Ck_%7Bn%7D%5E%7B%7D%EF%BC%8C" alt="[公式]"> 使得当 <img src="https://www.zhihu.com/equation?tex=x_%7B%7D%5Cin" alt="[公式]"> <em><strong>I*</strong> 时有恒等式 <img src="https://www.zhihu.com/equation?tex=k_%7B1%7Dy_%7B1%7D+k_%7B2%7Dy_%7B2%7D+%E2%80%A6+k_%7Bn%7Dy_%7Bn%7D=0" alt="[公式]"> 成立，那么称这 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 个函数在区间</em>*</em>I*** 上线性相关；否则称线性无关</p><p>举例：1， <img src="https://www.zhihu.com/equation?tex=cos%5E%7B2%7Dx%EF%BC%8Csin%5E%7B2%7Dx" alt="[公式]"> 线性相关，可取 <img src="https://www.zhihu.com/equation?tex=k_%7B1%7D=1%EF%BC%8Ck_%7B2%7D=k_%7B3%7D=-1" alt="[公式]"> ；1， <img src="https://www.zhihu.com/equation?tex=x%5E%7B2%7D%EF%BC%8Cx" alt="[公式]"> 线性无关</p><p>定理二：如果 <img src="https://www.zhihu.com/equation?tex=y_%7B1%7D%5E%7B%7D(x)%E4%B8%8Ey_%7B2%7D%5E%7B%7D(x)" alt="[公式]"> 是方程（1）的两个线性无关的特解，那么 <img src="https://www.zhihu.com/equation?tex=y=C_%7B1%7D%5E%7B%7Dy_%7B1%7D%5E%7B%7D(x)+C_%7B2%7D%5E%7B%7Dy_%7B2%7D%5E%7B%7D(x)" alt="[公式]"> 就是方程（1）的通解，其中 <img src="https://www.zhihu.com/equation?tex=C_%7B1%7D%5E%7B%7D%EF%BC%8CC_%7B2%7D%5E%7B%7D" alt="[公式]"> 为任意常数</p><p>定理三：设 <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B*%7D(x)" alt="[公式]"> 是二阶非齐次线性方程 <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B%27%27%7D+P(x)y%5E%7B%27%7D+Q(x)y=f(x)" alt="[公式]"> （2）的一个特解， <img src="https://www.zhihu.com/equation?tex=Y(x)" alt="[公式]"> 是与方程 2 对应的齐次方程 1 的通解，则 <img src="https://www.zhihu.com/equation?tex=y=Y(x)+y_%7B%7D%5E%7B*%7D(x)" alt="[公式]"> 是二阶非齐次线性微分方程 （2）的通解</p><p>定理四：设非齐次线性方程 （2）的右端 <img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 是两个函数之和，即 <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B%27%27%7D+P(x)y%5E%7B%27%7D+Q(x)y=f_%7B1%7D(x)+f_%7B2%7D(x)" alt="[公式]"> ,而 <img src="https://www.zhihu.com/equation?tex=y_%7B1%7D%5E%7B*%7D(x)%E4%B8%8Ey_%7B2%7D%5E%7B*%7D(x)" alt="[公式]"> 分别是方程 <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B%27%27%7D+P(x)y%5E%7B%27%7D+Q(x)y=f_%7B1%7D(x)" alt="[公式]"> 与 <img src="https://www.zhihu.com/equation?tex=y_%7B%7D%5E%7B%27%27%7D+P(x)y%5E%7B%27%7D+Q(x)y=f_%7B2%7D(x)" alt="[公式]"> 的特解，则 <img src="https://www.zhihu.com/equation?tex=y_%7B1%7D%5E%7B*%7D(x)+y_%7B2%7D%5E%7B*%7D(x)" alt="[公式]"> 就是原方程的特解</p><h2 id="第七节：常系数齐次线性微分方程"><a href="#第七节：常系数齐次线性微分方程" class="headerlink" title="第七节：常系数齐次线性微分方程"></a>第七节：常系数齐次线性微分方程</h2><p><img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D+py%5E%7B%27%7D+qy=0" alt="[公式]"> （1）其中 <img src="https://www.zhihu.com/equation?tex=p%EF%BC%8Cq" alt="[公式]"> 是常数 ，则称方程（1）为二阶常系数齐次线性微分方程</p><p>解法：看特征方程根的分类，直接代入公式即可</p><p><img src="https://pic2.zhimg.com/v2-d6df4e1d2a855815f520732b9214fa6d_r.jpg" alt="img"></p><h2 id="第八节：常系数非齐次线性微分方程"><a href="#第八节：常系数非齐次线性微分方程" class="headerlink" title="第八节：常系数非齐次线性微分方程"></a>第八节：常系数非齐次线性微分方程</h2><p>本节主要掌握 <img src="https://www.zhihu.com/equation?tex=f(x)=e%5E%7B%5Clambda+x%7DP_%7Bm%7D%5E%7B%7D(x)" alt="[公式]"> 型即可，另一类型请自行阅读</p><p>二阶常系数非齐次线性微分方程的一般形式： <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D+py%5E%7B%27%7D+qy=f(x)" alt="[公式]"> 其中 <img src="https://www.zhihu.com/equation?tex=p%EF%BC%8Cq" alt="[公式]"> 是常数</p><p>解法:写出所给方程中 <img src="https://www.zhihu.com/equation?tex=%5Clambda" alt="[公式]"> 的值，代入特征方程中判断设出特解，而后求出未定系数即可</p><ol><li><img src="https://www.zhihu.com/equation?tex=%5Clambda%5E%7B2%7D+p%5Clambda+q%5Cne0" alt="[公式]"> 设特解为 <img src="https://www.zhihu.com/equation?tex=y%5E%7B*%7D=ax+b" alt="[公式]"></li><li><img src="https://www.zhihu.com/equation?tex=%5Clambda%5E%7B2%7D+p%5Clambda+q=0%E4%BD%86%E6%98%AF2%5Clambda+p%5Cne0" alt="[公式]"> 设特解为 <img src="https://www.zhihu.com/equation?tex=y%5E%7B*%7D=x(ax+b)e%5E%7B%5Clambda+x%7D" alt="[公式]"></li><li><img src="https://www.zhihu.com/equation?tex=%5Clambda%5E%7B2%7D+p%5Clambda+q=0%E4%B8%942%5Clambda+p=0" alt="[公式]"> 设特解为 <img src="https://www.zhihu.com/equation?tex=y%5E%7B*%7D=x%5E%7B2%7D(ax+b)e%5E%7B%5Clambda+x%7D" alt="[公式]"></li></ol><p>(★★★★★此三种皆针对 <img src="https://www.zhihu.com/equation?tex=P_%7Bm%7D%5E%7B%7D(x)" alt="[公式]"> 为一次多项式而设，若 <img src="https://www.zhihu.com/equation?tex=P_%7Bm%7D%5E%7B%7D(x)" alt="[公式]"> 为二次，则将 <img src="https://www.zhihu.com/equation?tex=ax+b" alt="[公式]"> 换成 <img src="https://www.zhihu.com/equation?tex=ax%5E%7B2%7D+bx+c" alt="[公式]"> 即可，依次类推……)</p><p>举例：求微分方程 <img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D-2y%5E%7B%27%7D-3y=3x+1" alt="[公式]"> 的一个特解</p><p>解：①先写出已知条件 <img src="https://www.zhihu.com/equation?tex=p=-2" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=q=-3" alt="[公式]"> ， <img src="https://www.zhihu.com/equation?tex=%5Clambda=0" alt="[公式]"><img src="https://www.zhihu.com/equation?tex=%5C" alt="[公式]"> ，<img src="https://www.zhihu.com/equation?tex=P_%7Bm%7D%5E%7B%7D(x)" alt="[公式]"> 为一次多项式</p><p>②计算出 <img src="https://www.zhihu.com/equation?tex=%5Clambda=0" alt="[公式]"> 不是特征方程 <img src="https://www.zhihu.com/equation?tex=r%5E%7B2%7D-2r-3=0" alt="[公式]"> 的根，所以设特解 <img src="https://www.zhihu.com/equation?tex=y%5E%7B*%7D=ax+b" alt="[公式]"></p><p>③代入方程得 <img src="https://www.zhihu.com/equation?tex=-3ax-2a-3b=3x+1" alt="[公式]"> 求得 <img src="https://www.zhihu.com/equation?tex=a,b" alt="[公式]"> 即可</p><p>(考虑到一些实际情况本文中有一些点并没有涉及，例如可化为齐次的方程；伯努力方程……感兴趣的小伙伴可私聊我)</p><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><ol><li><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7Bdy%7D%7Bdx%7D=%5Cfrac%7B1%7D%7Bx+y%7D" alt="[公式]"> (尝试用两种解法）</li><li><img src="https://www.zhihu.com/equation?tex=yy%5E%7B%27%27%7D+(y%5E%7B%27%7D)%5E%7B2%7D=y%5E%7B%27%7D" alt="[公式]"></li><li><img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D+2y%5E%7B%27%7D+y=xe%5E%7Bx%7D" alt="[公式]"></li><li><img src="https://www.zhihu.com/equation?tex=y%5E%7B%27%27%7D=%5Cfrac%7B1%7D%7B1+x%5E%7B2%7D%7D" alt="[公式]"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac上安装虚拟机</title>
      <link href="2021/04/13/mac%E4%B8%8A%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>2021/04/13/mac%E4%B8%8A%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>应某位学弟的要求，鄙人今晚与图书馆写了此篇博文。</p><p>软件选择<br>目前我知道的Mac虚拟机：</p><p>Parallels Desktop：收费，基本无序列号资源；但据说好用、强大，对Win系统多了很多优化。<br>VMWare Fusion：老牌虚拟机软件，Mac上也做的非常不错。<br>VirtualBox：开源，免费，但好像不够强大。<br>在找了很久 Parallels Desktop 的资源，而又无功而返后，最终决定使用 VMWare Fusion。</p><p>开门见山地说，附上破解版本链接 <a href="https://www.xxmac.com/mac/xuniji">https://www.xxmac.com/mac/xuniji</a></p><p><img src="https://pic4.zhimg.com/v2-5d402f6263fbeee3ba25db11eb037ecf_r.jpg" alt="img"></p><p><strong>运行效果</strong></p><p>· 运行速度不稳定</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这里的不稳定是每次之间，不是时快时慢。</span><br><span class="line">&gt; 刚开机时较慢，运行一段时间后速度较快。</span><br></pre></td></tr></table></figure><ul><li>u1s1比便宜的商务本流畅多了 （4000¥以下的）</li><li>系统之间文件转换方便</li><li>适用情况很广，我的wtg就是使用虚拟机安装的</li><li>总体体验感觉不错</li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p><em>安装过程非常简单，几乎全部傻瓜式操作</em> 1. 下载虚拟机软件 推荐：Parallels Desktop</p><p>链接： <a href="https://link.zhihu.com/?target=https://www.isofts.org/">mac志</a></p><ol><li>下载镜像</li></ol><p><img src="https://pic4.zhimg.com/v2-9ad52302f776073bf385b07acb2d62cf_r.jpg" alt="img"></p><ol><li>获得方式同上，注意要下载可以用于虚拟机的版本</li><li>如果使用上面推荐的这款软件会自带镜像</li><li>安装虚拟机软件</li></ol><p><img src="https://pic4.zhimg.com/v2-7e38d4a464f697fc0527dfe07b68f7ef_r.jpg" alt="img"></p><ol><li>下载好之后应该得到中间这个，运行即可，里面全部中文界面，自带win10和unbuntu等等虚拟机镜像，按照提示操作即可</li><li>完成后就能看到上面另外的两个图标了。做什么用的？就是字面意思。</li></ol><p><img src="https://pic3.zhimg.com/v2-6df8754267330863470a0cb98f2c452a_r.jpg" alt="img"></p><p><em>双红杠就是这款虚拟机应用的标志</em></p><p>\4. 节约空间 虚拟机支持在移动硬盘里运行，如果在安装时可以选择位置，直接设置到外部介质即可。如果没有机会选择，就要自己下载好镜像存储在移动硬盘中，安装时倒入虚拟机。（好像直接安装到内置硬盘中然后把系统文件直接拖到外部介质再重启虚拟机导入系统也可以，我可能就是这么操作的）</p><h2 id="为什么今年我放弃虚拟机"><a href="#为什么今年我放弃虚拟机" class="headerlink" title="为什么今年我放弃虚拟机"></a>为什么今年我放弃虚拟机</h2><p>不是因为不好用，而是因为移动的业务效能过高了。</p><p>以上不行则使用方案二</p><p>大部分Mac用户大部分都是通过Parallels Desktop或者VMware Fusion Pro安装虚拟机，可两款虚拟机价值不菲，但是今天小编为大家带来VMware虚拟机免费获取教程，仅限个人或者非商业用途使用！</p><p><img src="https://pic1.zhimg.com/v2-b9f0f6b19ced37c6066b7f27f927d2d8_r.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/v2-4da477ba3b612ea02286c9cf10047a3f_r.jpg" alt="img"></p><p><em><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/120.html">Macv.com</a></em><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/120.html">VMware Fusion Pro 12 Mac(vm虚拟机) 支持11.0 Big Sur</a><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/120.html">614.88 MB2020.11.20简体中文</a><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/120.html">VMware Fusion 12最新推出的最新版本虚拟机，VMware Fusion 11Mac版可以完整支持 Windows 10、OS X El Capitan 和最新的 Retina Mac 产品，当然还支持微软的 Cortana！</a><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/120.html">下载</a></p><p><img src="https://pic1.zhimg.com/v2-019d3220d711f123977d3b82c825ee70_r.jpg" alt="img"></p><p><em><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/2471.html">Macv.com</a></em><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/2471.html">Parallels Desktop 16 for mac(最好用的虚拟机软件)支持big sur</a><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/2471.html">280.8 MB2020.12.16简体中文</a><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/2471.html">Parallels Desktop 16被称为 macOS 上最强大的虚拟机软件。可以在 Mac 下同时模拟运行 Win、Linux、Android 等多种操作系统及软件而不必重启电脑，并能在不同系统间随意切换。</a><br><a href="https://link.zhihu.com/?target=https://www.macv.com/mac/2471.html">下载</a></p><p>VMware虚拟机免费获取教程</p><p>先用谷歌浏览器打开 <a href="https://link.zhihu.com/?target=https://www.vmware.com/">https://www.vmware.com/</a> 进入VMware虚拟机的官网，点击<code>Downloads</code>—<code>Fusion</code></p><p><img src="https://pic1.zhimg.com/v2-12d6872647e76518765c24b9a4709c60_r.jpg" alt="img"></p><p>转至虚拟机下载页面，点击<code>GO TO DOWNLOADS</code></p><p><img src="https://pic4.zhimg.com/v2-45e4433f4575cc1273ec99631ed2cc8f_r.jpg" alt="img"></p><p>点击<code>DOWNLOAD NOW</code></p><p><img src="https://pic4.zhimg.com/v2-6e6c564595292e1cc927be762f6599db_r.jpg" alt="img"></p><p>需要登陆VMware的账户，可以自己申请一个。</p><p><img src="https://pic2.zhimg.com/v2-5c2f4537ec14b8c19d763fc589bf8acd_r.jpg" alt="img"></p><p>注册完成之后登陆就可以完成下载软件。软件下载完成后打开，双击<code>VMware Fusion.app</code>进行安装</p><p><img src="https://pic1.zhimg.com/v2-5dfa0397f124f2c12218a22316941e10_r.jpg" alt="img"></p><p>输入电脑密码，点击<code>OK</code></p><p><img src="https://pic1.zhimg.com/v2-b87c7d50da8aefdc2e8daeb1ce27180c_r.jpg" alt="img"></p><p>来到VMware注册页面，点击<code>获取免费的许可证密钥</code></p><p><img src="https://pic3.zhimg.com/v2-80f51eaa565885e5e54013c0cd190bbe_r.jpg" alt="img"></p><p>跳转到以下界面</p><p><img src="https://pic4.zhimg.com/v2-af66a3baf9e0342df77e1c050d245f27_r.jpg" alt="img"></p><p>如果跳转的是中文版的VMware官网页面，请将地区更改为美国再重新点击获取免费的许可证密钥</p><p><img src="https://pic4.zhimg.com/v2-b0546f7998def906a1e8ef9cd1aeb99b_r.jpg" alt="img"></p><p>登陆上自己刚注册的账户，然后选择<code>License &amp; Download</code>就可以查看自己的注册密钥了</p><p><img src="https://pic2.zhimg.com/v2-e96d0fdafb1d2ace70769897213425b5_r.jpg" alt="img"></p><p>将获取的注册密钥复制到指定位置点击<code>继续</code>，VM虚拟机就可以免费使用了！</p><p><img src="https://pic1.zhimg.com/v2-7ec934f7d4d2ac56c057a1f12aedc920_r.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分与导数的区别</title>
      <link href="2021/04/13/%E5%BE%AE%E5%88%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2021/04/13/%E5%BE%AE%E5%88%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>说来惭愧，学到现在，我才真正的慢慢意会到这个最基础的定义</p><p>微分是 [公式]</p><p>微商是 [公式]</p><p>导数是微商在某一点 [公式] 的值 [公式]</p><p>微分是说一个函数在自变量做无穷小变化时函数值的变化。如果我们给定x的变化dx，将它对应到f（x）的变化df，df就等于f的导数乘以dx。但是dx是一个不严谨的概念（无穷小变化是变化多少？），因此严谨的表述是：df是一个把一个数（自变量的变化 delta x）映射成 f’ delta x的映射，映射的值能近似表达函数值的变化delta f。从这个意义上说，df是一个将数轴上的一个矢量（delta x）映射成实数的线性映射，在微分几何中这种映射称为1-form，又叫协变矢量或对偶矢量。补充：可以形象化理解，微分就是曲线的切线。给定一个横坐标，我们可以在切线上找到纵坐标。df就是这样一个映射。而f的导数就是这条切线的斜率。</p><p>数学复习第一遍的理解是，导数是曲线在那个点的切线斜率，而微分是那个切线的一元线性方程。<br>微分的几何意义是用局部切线段近似代替曲线段，即非线性函数局部线性化。</p><p>我来讲个历史课。</p><p>历史上，莱布尼茨想到d这个微分表示符号时， <img src="https://www.zhihu.com/equation?tex=%5Cdfrac%7Bdy%7D%7Bdx%7D" alt="[公式]"> 本是商，它是y的无穷小变化量与x的无穷小变化量的商。</p><p>然而，这个公式放在实际情况中，应用到实数上，导致了一系列问题，这里主要讲两个：</p><p>1、其中一个是，“无穷小”这个定义不能存在于实数的应用中！因为实数必须满足阿基米德性质：</p><p> 给定任意两个正实数 <img src="https://www.zhihu.com/equation?tex=%5Cepsilon%3E0%EF%BC%8CM%3E0" alt="[公式]"> ，无论 <img src="https://www.zhihu.com/equation?tex=%5Cepsilon" alt="[公式]"> 多小，M多大，总存在一个自然数n，使得 <img src="https://www.zhihu.com/equation?tex=n%5Cepsilon+%3E+M" alt="[公式]">          （1）</p><p>无穷小的通俗定义：我们通常认识的实数，是属于实数空间R的，这是一个可以进行加减乘除运算的空间，是不包括无穷小和无穷大的。在实数空间中，任何两个数a,b,一定存在<img src="https://www.zhihu.com/equation?tex=a%3Cb%E6%88%96a%3Eb%E6%88%96a=b" alt="[公式]">。将正无穷小 <img src="https://www.zhihu.com/equation?tex=%5Cepsilon" alt="[公式]"> 加到实数空间中，存在 <img src="https://www.zhihu.com/equation?tex=%5Cforall+n+%5Cin+N+,+%5Cepsilon+%3C+%5Cdfrac%7B1%7D%7Bn%7D,+%E5%8D%B3+n%5Cepsilon+%3C+1" alt="[公式]"> 。这与（1）矛盾</p><p>2、莱布尼茨对于函数y=f(x)在x=a切线定义为：</p><p>有一个点 <img src="https://www.zhihu.com/equation?tex=(a,f(a))" alt="[公式]"> ;给a加一个无穷小量 a+dx，得到另一个点 <img src="https://www.zhihu.com/equation?tex=(a+dx,f(a+dx))" alt="[公式]"> ,这两个点的连线即为切线。(2)</p><p>但是无穷小并不属于实数空间，无法与实数a进行加减运算。所以如果实数加一个无穷小dx，并不能得到一个实数， <img src="https://www.zhihu.com/equation?tex=(a+dx,f(a+dx))" alt="[公式]"> 也就不能成为另一个点。我们也就不能通过这样的定义得到切线。</p><p>所以为了防止这样的矛盾，在接下来的200年间，微分本质上被重新定义了，极限这个定义实际上就是在这种情况下产生的。</p><p>导数不再是商，而变成了极限：</p><p><img src="https://www.zhihu.com/equation?tex=%5Clim_%7Bh+%5Crightarrow+0%7D+%5Cdfrac%7Bf(x+h)-f(x)%7D%7Bh%7D+" alt="[公式]"> </p><p>而且因为我们不能将商的极限表达为极限的商（极限中分子分母都趋近于0）,所以导数不是商。</p><p>然而，莱布尼茨定的符号“d”很有启发性，很有用；及时导数不是真正的商，很多情况下，他们表现的就像商一样。例如链式法则：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cdfrac%7Bdy%7D%7Bdx%7D+=+%5Cdfrac%7Bdy%7D%7Bdu%7D+%5Cdfrac%7Bdu%7D%7Bdx%7D+" alt="[公式]"> </p><p>如果你看作是分数，也很自然~还有逆函数定理</p><p><img src="https://www.zhihu.com/equation?tex=+%5Cdfrac%7Bdx%7D%7Bdy%7D+=+%5Cdfrac%7B1%7D%7B%5Cdfrac%7Bdy%7D%7Bdx%7D%7D" alt="[公式]"> </p><p>如果你将导数看作分数，也很明显。所以，因为这种符号很好，很有启发性，即使该符号不再代表实际商，我们仍然保留该符号，现在它代表一个极限。</p><p>很久以前，dy和dx确实与他们在 <img src="https://www.zhihu.com/equation?tex=%5Cdfrac%7Bdy%7D%7Bdx%7D" alt="[公式]"> 中代表的符号含义相同，但是这会导致各种逻辑问题，所以他们不再代表这些含义了，即使他们表现的像。</p><p>所以，即使我们将 <img src="https://www.zhihu.com/equation?tex=%5Cdfrac%7Bdy%7D%7Bdx%7D" alt="[公式]"> 写作分数，并且很多计算法则跟分数很像，它仍然不是真正的“分数”。</p><hr><p>回到问题，微分和导数的区别</p><p>微分d，代表一个无穷小变化量。在<img src="https://www.zhihu.com/equation?tex=%5Cdfrac%7Bdy%7D%7Bdx%7D" alt="[公式]">中，dy(or df)代表y的无穷小变化量，dx代表x的无穷小变化量。</p><p>导数，是建立在一个映射关系之上的，即映射前的变化量很小的情况下，引起映射后的变化量的大小。也就是比例<img src="https://www.zhihu.com/equation?tex=%5Cdfrac%7Bdy%7D%7Bdx%7D" alt="[公式]">。</p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分到底是什么</title>
      <link href="2021/04/13/%E5%BE%AE%E5%88%86%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>2021/04/13/%E5%BE%AE%E5%88%86%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-1796b656d29ddebd0093f828f59b66f2_1440w.jpg?source=172ae18b" alt="微分是什么？"></p><p>单变量微积分、线性代数的概念很多，我们的“带你学”系列：</p><ul><li>“单变量微积分”（主要覆盖《高等数学同济版上》的内容）</li><li>“线性代数”（主要覆盖《线性代数同济版》的内容）</li></ul><p>通过通俗易懂的方式进行讲解，感兴趣可以加微信公众号“马同学图解数学”，然后在菜单“付费课程”中点击购买。</p><p>本文是付费课程“单变量微积分”中的一课，目前还在连载中，如果想了解更多的前置内容，可以先看下另外两篇前面章节的免费内容：</p><ul><li><a href="https://link.zhihu.com/?target=https://www.matongxue.com/madocs/845">微积分是什么？</a></li><li><a href="https://link.zhihu.com/?target=https://www.matongxue.com/madocs/851">柯西的数列极限</a></li></ul><p>最开始我们就提到了，曲线下微小的矩形是“微分”：</p><p><img src="https://pic4.zhimg.com/v2-8a18b6f11f4d3fe637fe67ff89d6386b_r.jpg" alt="img"></p><p>把这些“微分”加起来就是“积分”，就可以得到曲线下的面积：</p><p><img src="https://pic3.zhimg.com/v2-275f27678e8133040ceb372b2d1ffbe2_r.jpg" alt="img"></p><p>上一章定义了极限，解决了微积分中的第一个问题，什么是“<img src="https://www.zhihu.com/equation?tex=%5CDelta+x" alt="[公式]"> 无限接近0”：</p><p><img src="https://pic1.zhimg.com/v2-a3563c54cb05529fa15ec97f18fd84c0_r.jpg" alt="img"></p><p>下面我们开始研究数学上什么是“微分”，怎么把“微分”加起来完成“积分”。</p><p><strong>1 积分</strong></p><p>比如要求<img src="https://www.zhihu.com/equation?tex=f(x)=x%5E2" alt="[公式]"> ，在<img src="https://www.zhihu.com/equation?tex=%5B0,a%5D,a+%3E+0" alt="[公式]"> 下的面积：</p><p><img src="https://pic2.zhimg.com/v2-4b9ba3ea8946d68ceeaafcf6754d0a01_r.jpg" alt="img"></p><p>把<img src="https://www.zhihu.com/equation?tex=%5B0,a%5D" alt="[公式]"> 平均分成<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 份，每份长为<img src="https://www.zhihu.com/equation?tex=%5CDelta+x=%5Cfrac%7Ba-0%7D%7Bn%7D=%5Cfrac%7Ba%7D%7Bn%7D" alt="[公式]"> ：</p><p><img src="https://pic4.zhimg.com/v2-59a05ca213271957837a3942894152af_r.jpg" alt="img"></p><p>这些点的坐标是这么一个数列（把<img src="https://www.zhihu.com/equation?tex=0" alt="[公式]"> 点去掉）：</p><p><img src="https://www.zhihu.com/equation?tex=%5C%7Ba_i%5C%7D=%5Cleft%5C%7B%5Cfrac%7Ba%7D%7Bn%7D,+%5Cfrac%7B2a%7D%7Bn%7D,%5Ccdots,+%5Cfrac%7B(n-1)a%7D%7Bn%7D,+%5Cfrac%7Bna%7D%7Bn%7D%5Cright%5C%7D,i=1,2,%5Ccdots,n%5C%5C" alt="[公式]"></p><p>点之间的间隔为<img src="https://www.zhihu.com/equation?tex=%5CDelta+x=%5Cfrac%7Ba%7D%7Bn%7D" alt="[公式]"> ，所以上述数列可以简写为：</p><p><img src="https://www.zhihu.com/equation?tex=%5C%7Ba_i%5C%7D=%5Cleft%5C%7B%5CDelta+x,+2%5CDelta+x,+%5Ccdots,+(n-1)%5CDelta+x,+n%5CDelta+x%5Cright%5C%7D%5C%5C" alt="[公式]"></p><p>以这些坐标为终点，宽为<img src="https://www.zhihu.com/equation?tex=%5CDelta+x" alt="[公式]"> ，高为<img src="https://www.zhihu.com/equation?tex=f(a_i)" alt="[公式]"> 作矩形：</p><p><img src="https://pic3.zhimg.com/v2-ed17e20d61a14f75444f6dfbc7da9282_r.jpg" alt="img"></p><p>每个矩形面积为<img src="https://www.zhihu.com/equation?tex=f(a_i)%5CDelta+x" alt="[公式]"> ，它们的面积和为：</p><p><img src="https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+++++S_n+++++++++&=%5Csum_%7Bi=1%7D%5En+f(a_i)%5CDelta+x%5C%5C+++++++++%5C%5C+++++++++&=(%5CDelta+x)%5E2%5CDelta+x+(2%5CDelta+x)%5E2%5CDelta+x+%5Ccdots+%5B(n-1)%5CDelta+x%5D%5E2%5CDelta+x+(n%5CDelta+x)%5E2%5CDelta+x%5C%5C+++++++++%5C%5C+++++++++&=%5B1+2%5E2+%5Ccdots+(n-1)%5E2+n%5E2%5D(%5CDelta+x)%5E3+%5Cend%7Baligned%7D+%5C%5C" alt="[公式]"></p><p>已知其中的级数：</p><p><img src="https://www.zhihu.com/equation?tex=1+2%5E2+%5Ccdots+(n-1)%5E2+n%5E2=%5Cfrac%7Bn(n+1)(2n+1)%7D%7B6%7D%5C%5C" alt="[公式]"></p><p>所以上面的式子继续算下去：</p><p><img src="https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+++++S_n+++++++++&=%5Cfrac%7Bn(n+1)(2n+1)%7D%7B6%7D(%5CDelta+x)%5E3%5C%5C+++++++++%5C%5C+++++++++&=%5Cleft(%5Cfrac%7B2n%5E3+3n%5E2+n%7D%7B6%7D%5Cright)(%5CDelta+x)%5E3+%5Cend%7Baligned%7D+%5C%5C" alt="[公式]"></p><p>因为<img src="https://www.zhihu.com/equation?tex=%5CDelta+x=%5Cfrac%7Ba%7D%7Bn%7D" alt="[公式]"> ，代入上式可得：</p><p><img src="https://www.zhihu.com/equation?tex=S_n=%5Csum_%7Bi=1%7D%5En+f(a_i)%5CDelta+x=a%5E3%5Cleft(%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B2n%7D+%5Cfrac%7B1%7D%7B6n%5E2%7D%5Cright)%5C%5C" alt="[公式]"></p><p>当<img src="https://www.zhihu.com/equation?tex=n%5Cto%5Cinfty" alt="[公式]"> 的时候，矩形面积和就是曲面下的面积：</p><p><img src="https://pic3.zhimg.com/v2-2d74728e927833d859a0c0bc02b0e84e_b.jpg" alt="img"></p><p>从数学上就是，曲面下面积<img src="https://www.zhihu.com/equation?tex=S" alt="[公式]"> 为：</p><p><img src="https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+++++S=%5Clim_%7Bn%5Cto%5Cinfty%7DS_n+++++++++&=%5Clim_%7Bn%5Cto%5Cinfty%7D%5Cleft%5Ba%5E3%5Cleft(%5Cfrac%7B1%7D%7B3%7D+%5Cfrac%7B1%7D%7B2n%7D+%5Cfrac%7B1%7D%7B6n%5E2%7D%5Cright)%5Cright%5D%5C%5C+++++++++%5C%5C+++++++++&=%5Cfrac%7B1%7D%7B3%7Da%5E3+%5Cend%7Baligned%7D%5C%5C" alt="[公式]"></p><p>在极限的帮助下，算出了曲面下的面积。</p><p><strong>2 新的开始</strong></p><p>既然得到了曲面下的面积了，是不是微积分课程完了？并没有，实际上刚刚开始。</p><p><strong>2.1 计算复杂</strong></p><p>上述计算方法早在微积分这门学科正式成立之前就有了。</p><p><img src="https://pic2.zhimg.com/80/v2-ba0c809545852173f0cb0f30f28c010d_1440w.jpg" alt="img"></p><p>博纳文图拉·弗兰切斯科·卡瓦列里（1598 －1647），意大利几何学家。在他的著作中就提到了上面这个求解方法，那时候还没有极限，他是直觉地认为当<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 足够大时：</p><p><img src="https://www.zhihu.com/equation?tex=a%5E3%5Cleft(%5Cfrac%7B1%7D%7B3%7D-%5Cunderbrace%7B%5Cfrac%7B1%7D%7B2n%7D+%5Cfrac%7B1%7D%7B6n%5E2%7D%7D_%7B%E5%8F%AF%E4%BB%A5%E5%BF%BD%E7%95%A5%7D%5Cright)=%5Cfrac%7B1%7D%7B3%7Da%5E3%5C%5C" alt="[公式]"></p><p>这种计算方法简单粗暴，比如，想求正弦函数曲线下<img src="https://www.zhihu.com/equation?tex=%5B0,%5Cpi%5D" alt="[公式]"> 之间的面积，也可以通过矩形和来计算，但是计算起来并不简单（详细计算步骤可以查看<a href="https://link.zhihu.com/?target=https://www.matongxue.com/madocs/847/">这里</a>）：</p><p><img src="https://pic3.zhimg.com/v2-b747c520f8b5a72ba532e2892c898042_r.jpg" alt="img"></p><p>把矩形面积加起来就需要计算级数（级数就是数列的和），但级数的计算往往很复杂。</p><p>欧拉就是一个级数计算大师，当时很多数学家求“积分”时，算不出级数就向欧拉求救，所以有句话是这么说的：“欧拉，他是所有人的老师”（出自另外一位数学家拉普拉斯之口）。</p><p><strong>2.2 不够抽象</strong></p><p>之前说了，可以用内接多边形来逼近圆的面积：</p><p><img src="https://pic2.zhimg.com/v2-dc83d49413813be31e4caedacc161e8d_b.jpg" alt="img"></p><p>也可以换个思路，用小三角形的和来逼近圆的面积：</p><p><img src="https://pic1.zhimg.com/v2-2cb5cb466a531a06d95c250ca3ca9ef8_b.jpg" alt="img"></p><p>“圆内小三角形的和”与“曲线下的矩形和”看起来异曲同工，但毕竟三角形和矩形还是不一样，能否把这两者统一起来？</p><p>还有，能不能用微积分来计算一段曲线的长度（马上就可以看到如何去做）：</p><p><img src="https://pic1.zhimg.com/v2-1dd2d92a6e159627d25200d6597cc514_r.jpg" alt="img"></p><p>例子可能举得还不够好、不够多，但可以看出目前所学的微积分还不够抽象，不足以解决更多问题。</p><p><strong>2.3 小结</strong></p><p>不管是为了计算更加简便，还是为了扩大微积分的应用范围，我们都需要开始新的学习。</p><p><strong>3 微分</strong></p><p>不管为了计算的便利性，还是覆盖更多的应用场景，都需要把“微分”这个概念抽象出来。</p><p><strong>3.1 矩形微分</strong></p><p>比如，想求<img src="https://www.zhihu.com/equation?tex=%5Ba,b%5D" alt="[公式]"> 区间内<img src="https://www.zhihu.com/equation?tex=f(x)" alt="[公式]"> 曲线下的面积<img src="https://www.zhihu.com/equation?tex=S" alt="[公式]"> ：</p><p><img src="https://pic4.zhimg.com/v2-7e0317973fca0c3ed23ac6579ed43c7f_r.jpg" alt="img"></p><p>把<img src="https://www.zhihu.com/equation?tex=%5Ba,b%5D" alt="[公式]"> 平均分成<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 份，每份长为<img src="https://www.zhihu.com/equation?tex=%5CDelta+x=%5Cfrac%7Ba-b%7D%7Bn%7D" alt="[公式]"> ，每个<img src="https://www.zhihu.com/equation?tex=%5CDelta+x" alt="[公式]"> 对应一个<img src="https://www.zhihu.com/equation?tex=%5CDelta+S_i" alt="[公式]"> ：</p><p><img src="https://pic4.zhimg.com/v2-908bf0755b3b888f45beadefbbd0f973_r.jpg" alt="img"></p><p>很显然：</p><p><img src="https://www.zhihu.com/equation?tex=S=%5Csum_%7Bi=1%7D%5En+%5CDelta+S_i%5C%5C" alt="[公式]"></p><p>从里面随便选一份，为了表示一般性，其面积记为<img src="https://www.zhihu.com/equation?tex=%5CDelta+S" alt="[公式]"> ：</p><p><img src="https://pic3.zhimg.com/v2-5bd694ab4694b7ae5149e127a77ac77a_r.jpg" alt="img"></p><p>在同样的位置，以<img src="https://www.zhihu.com/equation?tex=%5CDelta+x" alt="[公式]"> 为底、<img src="https://www.zhihu.com/equation?tex=f(x_0)" alt="[公式]"> 为高作矩形，其面积记为<img src="https://www.zhihu.com/equation?tex=%5Ctextrm%7Bd%7DS" alt="[公式]"> ：</p><p><img src="https://pic3.zhimg.com/v2-fcc65f80a6db3fe158d03c6cee502bc2_r.jpg" alt="img"></p><p>很显然，随着<img src="https://www.zhihu.com/equation?tex=%5CDelta+x%5Cto+0" alt="[公式]"> ，<img src="https://www.zhihu.com/equation?tex=%5CDelta+S" alt="[公式]"> 与<img src="https://www.zhihu.com/equation?tex=%5Ctextrm%7Bd%7DS" alt="[公式]"> 会无限接近：</p><p><img src="https://pic1.zhimg.com/v2-50cc14e4f9b03cf887e9ea0ed8dfd46c_r.jpg" alt="img"></p><p>实际上两者都是无穷小：</p><p><img src="https://www.zhihu.com/equation?tex=+%5Clim_%7B%5CDelta+x%5Cto+0%7D%5CDelta+S=0=%5Clim_%7B%5CDelta+x%5Cto+0%7D%5Ctextrm%7Bd%7DS+%5C%5C" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5CDelta+S" alt="[公式]"> 与<img src="https://www.zhihu.com/equation?tex=%5Ctextrm%7Bd%7DS" alt="[公式]"> 有各自的名字（命名的来由可以查看<a href="https://link.zhihu.com/?target=https://www.matongxue.com/madocs/847/">这里</a>）：</p><p><img src="https://pic2.zhimg.com/v2-2480480a27db5c145c840c61990cefe5_r.jpg" alt="img"></p><p>“微分”是对“差分”的近似，以“直”代“曲”（“微分”就是“直”，“差分”就是“曲”），也叫做线性近似：</p><p><img src="https://www.zhihu.com/equation?tex=%E5%BE%AE%E5%88%86%5Capprox+%E5%B7%AE%E5%88%86%5C%5C" alt="[公式]"></p><p>在极限下有（因为<img src="https://www.zhihu.com/equation?tex=%5CDelta+x=%5Cfrac%7Ba-b%7D%7Bn%7D" alt="[公式]"> ，所以<img src="https://www.zhihu.com/equation?tex=%5CDelta+x%5Cto+0" alt="[公式]"> 相当于<img src="https://www.zhihu.com/equation?tex=n%5Cto%5Cinfty" alt="[公式]"> ）：</p><p><img src="https://www.zhihu.com/equation?tex=S=%5Clim_%7B%5CDelta+x%5Cto+0%7D%5Csum_%7Bi=1%7D%5En+%5Ctextrm%7Bd%7DS_i%5C%5C" alt="[公式]"></p><p>其中，<img src="https://www.zhihu.com/equation?tex=%5Ctextrm%7Bd%7DS_i" alt="[公式]"> 对应之前的<img src="https://www.zhihu.com/equation?tex=%5CDelta+S_i" alt="[公式]"> 。</p><p>稍微总结下：</p><p><img src="https://www.zhihu.com/equation?tex=+%5Cbegin%7Barray%7D%7Bc%7Cc%7D+++++%5Chline+++++%5Cquad%5Cquad&%5Cquad%5Ccolor%7Bblue%7D%7B%E5%B7%AE%E5%88%86%7D%5Cquad&%5Cquad%5Ccolor%7Borange%7D%7B%E5%BE%AE%E5%88%86%7D%5Cquad+%5C%5C+++++%5Chline+%5C%5C+++++%5Cquad%E7%AC%A6%E5%8F%B7+%5Cquad&%5Cquad+%5CDelta+S+%5Cquad&%5Cquad+%5Ctextrm%7Bd%7DS%5Cquad%5C%5C++++++%5Cquad%E6%B1%82%E5%92%8C+%5Cquad&%5Cquad+%5Cdisplaystyle+S=%5Csum_%7Bi=1%7D%5En+%5CDelta+S_i+%5Cquad&%5Cquad+%5Cdisplaystyle++S=%5Clim_%7B%5CDelta+x%5Cto+0%7D%5Csum_%7Bi=1%7D%5En+%5Ctextrm%7Bd%7DS_i%5Cquad%5C%5C+++++%5C%5C%5Chline+%5Cend%7Barray%7D+%5C%5C" alt="[公式]"></p><p><strong>3.2 三角形微分</strong></p><p>要求圆的面积<img src="https://www.zhihu.com/equation?tex=S" alt="[公式]"> ：</p><p><img src="https://pic3.zhimg.com/v2-4d871334cb29946b1748136448c5794e_r.jpg" alt="img"></p><p>同样的可以把它均分为<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 个扇形：</p><p><img src="https://pic3.zhimg.com/v2-981eea345692069b0a67ed787663d442_r.jpg" alt="img"></p><p>很显然，也可以用三角形去近似这些扇形：</p><p><img src="https://pic2.zhimg.com/v2-86c903f72b50af1f07012bfb8f325405_r.jpg" alt="img"></p><p>这里，小扇形就是“差分”，小三角形就是“微分”，以三角形的“直”去代替扇形的“曲”。</p><p><strong>3.3 切线微分</strong></p><p>要求这条曲线的长度：</p><p><img src="https://pic1.zhimg.com/v2-d6cb661250d8b04d649fa082c7651588_r.jpg" alt="img"></p><p>可以把它均分为<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 个曲线段：</p><p><img src="https://pic1.zhimg.com/v2-5ec44b658b088cd55e65509f92675ea0_r.jpg" alt="img"></p><p>也可以用切线段（切线之后就会介绍）来近似这些曲线段：</p><p><img src="https://pic2.zhimg.com/v2-60af822987419816cfb37e1d54a7da91_r.jpg" alt="img"></p><p>划分细点的话，更容易看出两者的相似性：</p><p><img src="https://pic1.zhimg.com/v2-0620c1efc29be818af69edcab853f708_b.jpg" alt="img"></p><p>这里，曲线段就是“差分”，切线段就是“微分”，以切线段的“直”去代替曲线段的“曲”。</p><p><strong>3.4 小结</strong></p><p>“微分”是“差分”的线性近似，是对“以直代曲”思想的数学表达。</p><p>有了“微分”之后，上述几种“积分”（包括面积、曲线长度等）就可以统一表示为：</p><p><img src="https://www.zhihu.com/equation?tex=+%E7%A7%AF%E5%88%86=%5Clim%5Csum+%E5%BE%AE%E5%88%86%5C%5C" alt="[公式]"></p><p>上述几种“微分”的严格定义不尽相同，这里暂不给出，后面不断完善。</p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睡前牢骚</title>
      <link href="2021/04/11/2013-05-09-one-night/"/>
      <url>2021/04/11/2013-05-09-one-night/</url>
      
        <content type="html"><![CDATA[<p>这段话是我一个尊敬的老大哥的闲言碎语罢了</p><p>这么一睡，又要开始一天看似忙碌的生活。总觉得时间很快，不管是从大的还是小的。和一个高中同学聊天，使得今天晚上想到好多小时候在西安的事，时间真的很快，从小学，初中，高中，甚至是大学，都在西安度过，住址从刚到西安的白鹭湾，再到双仁府，到后来的火药局巷，而现在处在从来没想到过的上海。时间过得真的很快，有种想哭的感觉，最重要的时光在西安，但是现在仔细想都想不出以后有什么理由再回到西安，觉得很伤感。</p><p>我好想哭，最近好累，每天忙碌着，我会尽一切力量去干我愿意干的事情。只是有时候停下来想想，这样做的回报是什么？得到的真正是自己想要的吗？独自一人来到离家这么远的地方，是图的什么？但有时候又想想，我的目标是学习，学习，再学习，使自己真正有力量。只是我好想回家后能吃上可口的饭菜，上学的时候，每次回家后就能吃到我妈做的饭，自从上大学后就再也没享受过了，上大学也是很仓促得就去学校了，没想到那一刻开始，生活方式就变了，而且是再也回不去。现在好想回去，真是体验到了小时候大人说的“还是小时候好”。</p><p>此时此刻，听着《一个人生活》，或许更适合这一秒的气息。</p><p>全世界，晚安。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好文用户接口（UI）设计的 20 条原则</title>
      <link href="2021/04/08/2013-05-08-ui-design-principles/"/>
      <url>2021/04/08/2013-05-08-ui-design-principles/</url>
      
        <content type="html"><![CDATA[<p><img src="http://githubimg.wxio.club/pics/ui_design_principles.png" alt="用户接口（UI）设计的 20 条原则" title="用户接口（UI）设计的 20 条原则"></p><p>世界级图形设计大师Paul Rand（保罗.兰德）曾经说过：“设计绝不是简单的排列组合与简单地再编辑，它应当充满着价值和意义，去说明道理，去删繁就简，去阐明演绎，去修饰美 化，去赞美褒扬，使其有戏剧意味，让人们信服你所言……”，由此可见，设计绝非轻而易举之事，优秀的设计更是难上加难，今日小编偶然发现一篇界面设计师 Joshua Porter博客当中的一篇文章——《Principles of User Interface Design》，文章中列举了20大UI设计原则，看完之后，觉得挺受启发，于是试着将其编译，希望能够给广大设计师——特别是刚入门的初级设计师，提供 较好的学习机会。全文编译如下：</p><h2 id="1-清晰度是首要工作"><a href="#1-清晰度是首要工作" class="headerlink" title="1.清晰度是首要工作"></a>1.清晰度是首要工作</h2><p>清晰度是界面设计中，第一步也是最重要的工作。要想你设计的界面有效并被人喜欢，首先必须让用户能够识别出它？让用户知道为什么会使用它？比如当用户使用 时，能够预料到发生什么，并成功的与它交互。有的界面设计得不是太清晰，虽然能够满足用户一时的需求，但并非长久之计，而清晰的界面能够吸引用户不断地重 复使用。</p><h2 id="2-界面是为促进交互而存在的"><a href="#2-界面是为促进交互而存在的" class="headerlink" title="2.界面是为促进交互而存在的"></a>2.界面是为促进交互而存在的</h2><p>界面的存在，促进了用户和我们的世界之间的互动。优秀的界面不但能够让我们做事有效率，还能够激发、唤起和加强我们与这个世界的联系。</p><h2 id="3-保护和尊重用户的注意力"><a href="#3-保护和尊重用户的注意力" class="headerlink" title="3.保护和尊重用户的注意力"></a>3.保护和尊重用户的注意力</h2><p>我们在阅读的时候，总是会有许多事物分散我们的注意力，使得我们很难集中注意力安静地阅读。因此，在进行界面设计的时候，能够吸引用户的注意力是很关键 的，所以千万不要将你应用的周围设计得乱七八糟分散人的注意力，谨记屏幕整洁能够吸引注意力的重要性。如果你非要显示广告，那么请在用户阅读完毕之后再显 示。尊重用户的注意力，不仅让用户更快乐，而且你的广告效果也会更佳。因此要想设计好的界面，保护和尊重用户的注意力是先决条件。</p><span id="more"></span><h2 id="4-让界面处在用户的掌控之中"><a href="#4-让界面处在用户的掌控之中" class="headerlink" title="4.让界面处在用户的掌控之中"></a>4.让界面处在用户的掌控之中</h2><p>人类往往对能够掌控自己和周围的环境感到很舒心。不考虑用户感受的软件往往会让这种舒适感消失，迫使用户不得不进入计划外的交互，这会让用户很不舒服。保证界面处在用户的掌控之中，让用户自己决定系统状态，稍加引导，我想你会达到你希望的目标。</p><h2 id="5-直接操作的感觉是最好的"><a href="#5-直接操作的感觉是最好的" class="headerlink" title="5.直接操作的感觉是最好的"></a>5.直接操作的感觉是最好的</h2><p>当我们能够直接操作物体时，用户的感觉是最棒的，但这并不太容易实现，因为在界面设计时，我们增加的图标往往并不是必须的，比如我们过多的使用按钮、图 形、选项、附件等等其他繁琐的东西以便我们最终操纵UI元素而不是重要的事情。而最初的目标呢？就是希望简化而能够直接操纵……因此在进行界面设计时，我 们要尽可能多的了解一些人类自然手势。理想情况下，界面设计要简洁，让用户有一个直接操作的感觉。</p><h2 id="6-每个屏幕需要一个主题"><a href="#6-每个屏幕需要一个主题" class="headerlink" title="6.每个屏幕需要一个主题"></a>6.每个屏幕需要一个主题</h2><p>我们设计的每一个画面都应该有单一的主题，这样不仅能够让用户使用到它真正的价值，也使得上手容易，使用起来也更方便，在必要的时候更容易进行修改。如果 一个屏幕支持两个或两个以上的主题，立马会让整个界面看起来混乱不堪。正如文章应该有一个单一的主题以及强有力的论点，我们的界面设计也应该如此，这也是 界面存在的理由。</p><h2 id="7-勿让次要动作喧宾夺主"><a href="#7-勿让次要动作喧宾夺主" class="headerlink" title="7.勿让次要动作喧宾夺主"></a>7.勿让次要动作喧宾夺主</h2><p>每个屏幕包含一个主要动作的同时，可以有多个次要动作，但尽量不要让它们喧宾夺主！文章的存在是为了让人们去阅读它，并不是让人们在Twitter上面分享它。所以在设计界面的时候，尽量减弱次要动作的视觉冲击力，或者在主要动作完成之后再显示出来。</p><h2 id="8-自然过渡"><a href="#8-自然过渡" class="headerlink" title="8.自然过渡"></a>8.自然过渡</h2><p>界面的交互都是环环相扣的，所以设计时，要深思熟虑地考虑到交互的下一步。考虑到下一步的交互是怎样的，并且通过设计将其实现。这就好比我们的日常谈话，要为深入交谈提供话由。当用户已经完成该做的步骤，不要让他们不知所措，给他们自然而然继续下去的方法，以达成目标。</p><h2 id="9-外观追随功能（类似于形式追随功能）"><a href="#9-外观追随功能（类似于形式追随功能）" class="headerlink" title="9.外观追随功能（类似于形式追随功能）"></a>9.外观追随功能（类似于形式追随功能）</h2><p>人总是对符合期望的行为最感舒适。当其他人、动物、事物或者软件的行为始终符合我们的期望时，我们会感到与之关系良好。这也是与人打交道的设计应该做到 的。在实践中，这意味着用户只要看一眼就可以知道接下来将会有什么的动作发生，如果它看上去像个按钮，那么它就应该具备按钮的功能。设计师不应该在基本的 交互问题上耍小聪明，要在更高层次的问题上发挥创造力。</p><h2 id="10-区分重点"><a href="#10-区分重点" class="headerlink" title="10.区分重点"></a>10.区分重点</h2><p>如果屏幕元素各自的功能不同，那么它们的外观也理应不同。反之，如果功能相同或相近，那么它们看起来就应该是一样的。为了保持一致性，初级设计师往往对应该加以区分的元素采用相同的视觉处理效果，其实采用不同的视觉效果才是合适的。</p><h2 id="11-强烈的视觉层次感"><a href="#11-强烈的视觉层次感" class="headerlink" title="11.强烈的视觉层次感"></a>11.强烈的视觉层次感</h2><p>如果要让屏幕的视觉元素具有清晰的浏览次序，那么应该通过强烈的视觉层次感来实现。也就是说，如果用户每次都按照相同的顺序浏览同样的东西，视觉层次感不 明显的话，用户不知道哪里才是目光应当停留的重点，最终只会让用户感到一团糟。在不断变更设计的情况下，很难保持明确的层次关系，因为所有的元素层次关系 都是相对的：如果所有的元素都突出显示，最后就相当于没有重点可言。如果要添加一个需要特别突出的元素，为了再次实现明确的视觉层级，设计师可能需要重新 考虑每一个元素的视觉重量。虽然多数人不会察觉到视觉层次，但这是增强设计的最简单的方法。</p><h2 id="12-恰当的组织视觉元素，减轻用户的认知负荷"><a href="#12-恰当的组织视觉元素，减轻用户的认知负荷" class="headerlink" title="12.恰当的组织视觉元素，减轻用户的认知负荷"></a>12.恰当的组织视觉元素，减轻用户的认知负荷</h2><p>正如注明设计师John Maeda在其著作《Simplicity》中所言，恰当地组织视觉元素能够化繁为简，帮助他人更加快速简单地理解你的表达，比如内容上的包含关系。用方 位和方向上的组织可以自然地表现元素间的关系。恰如其分地组织内容可以减轻用户的认知负荷，他们不必再琢磨元素间的关系，因为你已经表现出来了。不要迫使 用户做出分辨，而是设计者用组织表现出来。</p><h2 id="13-色彩不是决定性的因素"><a href="#13-色彩不是决定性的因素" class="headerlink" title="13.色彩不是决定性的因素"></a>13.色彩不是决定性的因素</h2><p>物体的色彩会随光线改变而改变。艳阳高照与夕阳西沉时，我们看到的景物会有很大反差。换句话说，色彩很容易被环境改变，因此，设计的时候不要将色彩视为决 定性因素。色彩可以醒目，作为引导，但不应该是做区别的唯一元素。在长篇阅读或者长时间面对电脑屏幕的情况下，除了要强调的内容，应采用相对暗淡或柔和的 背景色。当然，视读者而定，也可采用明亮的背景色。</p><h2 id="14-循序展现"><a href="#14-循序展现" class="headerlink" title="14.循序展现"></a>14.循序展现</h2><p>每个屏幕只展现必需的内容。如果用户需要作出决定，则展现足够的信息供其选择，他们会到在下一屏找到所需细节。避免过度阐释或把所有一次展现，如果可能，将选择放在下一屏以有步骤地展示信息。这会使你的界面交互更加清晰。</p><h2 id="15-内嵌“帮助”选项"><a href="#15-内嵌“帮助”选项" class="headerlink" title="15.内嵌“帮助”选项"></a>15.内嵌“帮助”选项</h2><p>在理想的用户界面，“帮助”选项是不必要出现的，因为用户界面能够有效地指引用户学习。类似“下一步”实际上就是在上下文情境中内嵌的“帮助”，并且只在用户需要的时候出现在适当的位置，其他时候都是隐藏的。</p><p>设计者的任务不是在用户有需要的地方建立一个帮助系统，把发现用户需要的义务推诿给用户，让用户去在帮助系统中寻找他们问题的答案。而是应该确保用户知道如何使用你提供的界面，让用户在界面中得到指导并学习。</p><h2 id="16-关键时刻：零状态"><a href="#16-关键时刻：零状态" class="headerlink" title="16.关键时刻：零状态"></a>16.关键时刻：零状态</h2><p>用户对一个界面的首次体验是非常重要的，而这常常被设计师忽略。为了更好的帮助用户快速适应我们的设计，设计应该处于零状态，也就是什么都没有发生的状 态。但这个状态不是一块空白的画布，它应该能够为用户提供方向和指导，以此来帮助用户快速适应设计。在初始状态下的互动过程中会存在一些摩擦，一旦用户了 解了各种规则，那将会有很高的机会获得成功。</p><h2 id="17-针对现有问题去完善界面"><a href="#17-针对现有问题去完善界面" class="headerlink" title="17.针对现有问题去完善界面"></a>17.针对现有问题去完善界面</h2><p>人们总是寻求各种方案去解决已经存在的问题，而不是潜在的或者未来的问题。所以，不要为假设的问题设计界面，我们应该观察现有的行为和设计，解决现存的问 题。这确实不是件能够让人兴奋的事情，但却是最有价值的事情，因为一旦你的用户界面愈加完善，会有更多的用户愿意使用你的界面。</p><h2 id="18-优秀的设计是无形的"><a href="#18-优秀的设计是无形的" class="headerlink" title="18.优秀的设计是无形的"></a>18.优秀的设计是无形的</h2><p>优秀的设计有个古怪的属性，它通常会被它的用户所忽略。其中的一个原因是这个设计非常成功，以至于它的用户专注于完成自己的目标而忽略了自己面对的界面， 用户顺利达成自己的目标后，他们会很满意地退出界面。但是作为设计师，这可能会有点不公平，当我们的设计很优秀的时候，我们不会受到很多阿谀奉承。当然， 优秀的设计师不会去介意这些，因为他们心里明白，满意的用户往往都是沉默的。</p><h2 id="19-多领域学习，借鉴其他学科"><a href="#19-多领域学习，借鉴其他学科" class="headerlink" title="19.多领域学习，借鉴其他学科"></a>19.多领域学习，借鉴其他学科</h2><p>视觉、平面设计、排版、文案、信息结构以及可视化，所有的这些知识领域都应该是界面设计应该包含的内容，设计师对这些知识都应该有所涉猎或者比较专长。不 要看不起这些知识：要从中获取许多值得学习的东西，以此来提高你的工作能力。设计师的眼光要长远，要能从看似无关的学科中学习，比如出版、编程、装订、滑 板、消防甚至空手道。</p><h2 id="20-界面的存在必须有所用途"><a href="#20-界面的存在必须有所用途" class="headerlink" title="20.界面的存在必须有所用途"></a>20.界面的存在必须有所用途</h2><p>在大多数设计领域，界面设计成功的要素就是有用户使用它。打个比方，一把漂亮的椅子，虽然精美但坐着不舒服，那么用户不会选择使用它，它也就是失败的设 计。因此，界面设计不仅仅是设计一个使用环境，还需要是创造一个值得使用的艺术品。界面设计仅仅能够满足其设计者的虚荣心是不够的：它必须要有用！</p><p>原文地址：<a href="http://bbs.blueidea.com/thread-3090584-1-1.html">iveodesign</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
            <tag> 舶来品 </tag>
            
            <tag> 好文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS、macOS系统应用管理机制</title>
      <link href="2021/04/02/iOS%E3%80%81macOS%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>2021/04/02/iOS%E3%80%81macOS%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><em><strong>*iOS、macOS系统应用管理机制*</strong></em></p><p>　　苹果系统包括：iOS、macOS、watchOS、tvOS。应用软件的生命周期为：开发、上线、安装、使用、卸载。这篇文档将从应用生命周期的各个环节介绍苹果系统对应用的管理机制，主要详细介绍iOS和macOS，watchOS与tvOS由于用户数量少，以及流程与iOS相似度较高，只作了简单介绍。</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h3 id="一、开发"><a href="#一、开发" class="headerlink" title="一、开发"></a>一、开发</h3><p><strong>注册账号：</strong></p><p>　　单纯开发是不用付费的，使用模拟器就可以。如果要真机调试，或者提交appstore，需要申请开发者帐号。</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219133730047-695216427.png" alt="img"> </p><p>　　需要提交：1、注册一个苹果账号作为开发者账号。2、个人或企业的姓名、地址、联系方式等相应资料。3、能够做美金结算的信用卡账。4、支付99美金给苹果公司。</p><p>　　另外，申请企业账号需要提供DUNS（邓白氏编码）以及税务等相应资料。D-U-N-S Number 是一组唯一的九位数字，用于检查所在组织的身份和法人实体状态。如果未拥有此识别码，需要将信息提交给 Dun &amp; Bradstreet，以获取一个免费的 D-U-N-S Number。</p><p>　　Apple 开发者到期 App 是会下架，但是已经安装 App 的用户，手机仍能使用App，App Store里面搜索不到。续费 Apple 开发者后，App 会在当天上线App Store。Apple开发者到期时不能转让App。</p><p><strong>开发工具：</strong></p><p>　　苹果应用开发需要使用mac系统下的Xcode，使用Objective-C和Swift语言。Xcode由苹果公司开发的集成开发环境，免费对用户使用，可以开发iOS、macOS、watchOS、tvOS四个系统应用。</p><h3 id="二、上线"><a href="#二、上线" class="headerlink" title="二、上线"></a>二、上线</h3><p>应用开发完成后，如要发布上架App store，大致经过以下8个步骤。</p><p>　　1. 登录Apple开发者中心网站，选择certificates，Identifiers and profiles，在APP IDs选项里注册一个APP ID，用于标识一个或一组APP，需要填写APP的描述和需要注册的服务功能。</p><p>　　2.创建开发证书，证书分为iOS Development（开发证书）和iOS Distribution（发布证书），开发证书用于真机调试，有一年使用期限。发布证书用于APP的发布。</p><p>　　3.配置iOS Provisoning Profiles（debug）描述文件，Provisoning Profiles是苹果签名认证的Plist文件，列举了开发证书、APP ID、以及授权运行设备的UDID（为一个设备的唯一标识）。</p><p>　　4.在Xcode中进行应用证书注册并打包APP。在工程里将Provisoning Profiles配置导入，完成后就可以打包APP了，导出APP包。</p><p>　　5.真机调试。可以在授权的设备上进行真机调试，将打包导出的APP包安装于设备上，安装时系统会对开发证书进行认证，成功后app会安装在设备上，可以在设备上对app进行测试。</p><p>　　6.真机测试没问题后，可以对APP进行上架发布。这里需要进入开发者中心创建发布证书，并配置Provisoning Profiles 描述文件。</p><p>　　7.需要在itunes connect 上创建本应用的项目。在开发者中心的itunes connect管理界面创建一个新APP项目，填写APP的相关信息包括描述、销售范围、版本信息、关键词等。</p><p>　　8.提交审核。需要提供一个测试账号用于审核人员进行测试。应用提交之后审核人员对应用进行审核。审核针对安全、性能、业务、设计、法律五个层面。</p><p>　　　　安全：不包含不良内容，不造成人身安全隐患、数据安全、不得在指定容器范围外读写数据、不具有特殊权限</p><p>　　　　性能：APP完成度、硬件兼容性、能耗、占用系统资源量、网络性能</p><p>　　　　业务：付款、广告合乎标准</p><p>　　　　设计：不涉抄袭、有价值、</p><p>　　　　法律：隐私、知识产权</p><p>　　苹果官方要求，开发和上线应用必须通过Xcode这一集成开发工具，也就是只能在mac电脑下完成。但如果想在windows环境下完成开发，也可以通过一些其它途径。借助LBuilder、HBuilder、APICLoud、APPCan等工具，可以把网站打包成APP，之后通过上架辅助软件Appuploader进行windows下APP的上架。Appuploader是ios上架辅助工具，可以直接得到.p12和.mobileprovision证书文件，上传ipa到App store，打破了上架ios只能在苹果电脑用Xcode的限制，使用费用100元/年。</p><h3 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h3><p>　　在 iOS 出来之前，在主流操作系统(Mac/Windows/Linux)上开发和运行软件是不需要签名的，软件随便从哪里下载都能运行，导致平台对第三方软件难以控制，盗版流行。苹果希望解决这样的问题，在 iOS 平台对第三方 APP 有绝对的控制权，一定要保证每一个安装到 iOS 上的 APP 都是经过苹果官方允许的，怎样保证呢？就是通过签名机制。</p><p><strong>ios****正规的应用安装方式分为三种：</strong></p><p>1.通过APP store安装</p><p>　　对于通过APP store安装的应用，iOS为了确保所有的应用程序没有被修改，要求必须使用苹果颁发的证书对可执行代码进行签名。开发者使用苹果颁发的发布证书签名后，将应用题叫道APPstore审核，审核成功后，苹果使用其私钥对程序进行签名。用户从APPstore下载安装应用，iOS调用系统进程获取provisioning profile文件，对应用程序进行证书校验。</p><p>2.开发 App 时直接把开发中的应用安装进手机进行调试，即在上线时的真机调试</p><p>　　开发时安装APP，它有两个需求，1）安装包不需要传到苹果服务器，可以直接安装到手机上。2）苹果必须对这里的安装有控制权，包括a.经过苹果允许才可以这样安装。b.不能被滥用导致非开发app也能被安装。苹果使用双层签名的机制，</p><p>　　1）在你 Mac 开发机器生成一对公私钥，这里称为公钥L，私钥L。</p><p>　　2）苹果自己有固定的一对公私钥，跟上面 AppStore 例子一样，私钥在苹果后台，公钥在每个 iOS 设备上。这里称为公钥A，私钥A。</p><p>　　3）把公钥 L 传到苹果后台，用苹果后台里的私钥 A 去签名公钥 L。得到一份数据包含了公钥 L 以及其签名，把这份数据称为证书。</p><p>　　4）在苹果后台申请 AppID，配置好设备 ID 列表和 APP 可使用的权限，再加上第③步的证书，组成的数据用私钥 A 签名，把数据和签名一起组成一个 Provisioning Profile 文件，下载到本地 Mac 开发机。</p><p>　　5）在开发时，编译完一个 APP 后，用本地的私钥 L 对这个 APP 进行签名，同时把第④步得到的 Provisioning Profile 文件打包进 APP 里，文件名为embedded.mobileprovision，把 APP 安装到手机上。</p><p>　　6）在安装时，iOS 系统取得证书，通过系统内置的公钥 A，去验证embedded.mobileprovision的数字签名是否正确，里面的证书签名也会再验一遍。</p><p>　　7）确保了embedded.mobileprovision里的数据都是苹果授权以后，就可以取出里面的数据，做各种验证，包括用公钥 L 验证APP签名，验证设备 ID 是否在 ID 列表上，AppID 是否对应得上，权限开关是否跟 APP 里的 Entitlements 对应等。</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134045464-265946927.png" alt="img"></p><p>3.企业内部分发，可以直接安装企业证书签名后的 APP</p><p>　　企业内部应用，即只在企业部门和员工内部使用、不对外公开的应用。苹果提供了专门的In-House证书用来发布这种应用，可以分发给任意的手机，只要通过一个URL即可下载安装，不用上传到App Store审核。In-House应用，有时需要根据部门需求进行版本的快速迭代，因为不需要App Store审核，所以可以做到随时修改，随时发布，节省了大量的时间。</p><p>　　在打包安装时同样需要创建证书，证书类型为In-House型，之后创建配置文件(Distribution Provisioning Profiles)，过程和其他证书创建过程类似。在Xcode中导入配置文件，打包程序，可以导出ipa和plist文件。Plist文件中包含ipa的URL、安装时显示的 icon 的url、bundle id、版本号、安装前的提示信息。将plist文件上传至服务器，企业员工在safari浏览器中输入链接即可安装。Safari操作的具体流程是：</p><p>　　1）Safari解析输入的字符串，找到plist文件</p><p>　　2）根据plist文件里面提供的信息下载并安装ipa包，还会访问大小图标，大小图标在ipa包正在下载时显示，当下载完毕后显示程序自带的图标</p><p>　　3）下载安装后，如果想打开程序还需要在手机 设置-&gt;通用-&gt;描述文件与设备管理，在“企业级应用”分组下，点击 信任 开发者的证书里面选择相应的证书信任后，方可打开程序。</p><p>　　综上，3种安装方式归根结底，都是通过验证安装程序的provisioning profile文件。安装应用程序时，Provisioning Profile 文件被拷贝到 iOS 设备中，运行该 iOS App 的设备通过它来认证安装的程序。Provisioning Profile 把AppID、签名证书、设备授权这些信息全部打包在一起，方便我们在调试和发布程序打包时使用。这样，只要在不同的情况下选择不同的 Provisioning Profile 文件就可以了。</p><p>　　除了在正规途径下安装应用以外，通过“打破”原有权限，获取更高权限，可以实现脱离官方平台，自由安装第三方的应用，即我们口中的“越狱”。</p><p>　　iOS系统具有封闭性，通过代码签名机制限制未经签名的代码在iOS系统中执行。用户不能访问系统资源，也无权修改，只能使用苹果颁发证书的正规途径的应用或程序接口完成系统允许的操作。越狱后，用户可以获得权限访问与修改系统文件，继而获得更多的权限，完成之前未被iOS允许的功能。越狱的原理是通过漏洞。至少需要2个漏洞，第一个漏洞用来完成专有代码执行，第二个漏洞用来使内核的安全措施失效，提升权限。</p><p>　　越狱之后安装应用可不通过APP store，有一些越狱者制作的类似APP store的应用安装商店，APP store默认安装位置为/var/mobile/Applications目录里，越狱后可安装在根目录下，所以墙纸、主题、铃声等一些个性化应用在越狱后可以得到安装。</p><h3 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h3><p><strong>iOS<strong><strong>程序</strong></strong>5****种状态：</strong></p><p>\1. Not running：</p><p>　　应用还没有启动，或者应用正在运行但是途中被系统停止</p><p>2.Inactive:</p><p>　　当前应用正在前台运行，但是并不接收事件（当前或许正在执行其它代码）。一般每当应用要从一个状态切换到另一个不同的状态时，中途过渡会短暂停留在此状态。唯一在此状态停留时间比较长的情况是：当用户锁屏时，或者系统提示用户去响应某些（诸如电话来电、有未读短信等）事件的时候。</p><p>3.Active:</p><p>　　当前应用正在前台运行，并且接收事件。这是应用正在前台运行时所处的正常状态。</p><p>4.Background:</p><p>　　应用处在后台，并且还在执行代码。大多数将 要进入Suspended状态的应用，会先短暂进入此状态。然而，对于请求需要额外的执行时间的应用，会在此状态保持更长一段时间。另外，如果一个应用要求启动时直接进入后台运行，这样的应用会直接从Notrunning状态进入Background状态，中途不会经过Inactive状态。比如没有界面的应用。注此处并不特指没有界面的应用，其实也可以是有界面的应用，只是如果要直接进入background状态的话，该应用界面不会被显示。</p><p>5.Suspended:</p><p>　　应用处在后台，并且已停止执行代码。系统自动的将应用移入此状态，且在此举之前不会对应用做任何通知。当处在此状态时，应用依然驻留内存但不执行任何程序代码。当系统发生低内存告警时，系统将会将处 于Suspended状态的应用清除出内存以为正在前台运行的应用提供足够的内存。</p><p><strong>应用启动过程：</strong></p><p>1、执行main函数</p><p>2、在此方法中调用UIApplicationMain</p><p>2.1 创建UIApplication对象（UIApplication对象是应用程序的象征，一个UIApplication对象就代表一个应用程序。每一个应用都有自己的UIApplication对象，而且是单例的，如果试图在程序中新建一个UIApplication对象，那么将报错提示。一个iOS程序启动后创建的第一个对象就是UIApplication对象，且只有一个。利用UIApplication对象，能进行一些应用级别的操作。）</p><p>2.2 创建UIApplication的delegate对象。（UIApplication Delegate的作用是当应用程序发出一系列系统事件如来电或锁屏等，做出相应的反应。新建完项目，都有个带有“AppDelegate”字眼的类，它就是UIApplication的代理,AppDelegate默认已经遵守了UIApplicationDelegate协议，已经是UIApplication的代理。系统事件如程序降将要启动、程序启动完成、程序进入后台、程序进入前台、程序退出等。）</p><p>2.3 开启消息循环</p><p>3、delegate对象开始监听系统事件</p><p>3.1 app启动完成后会调用delegate对象的程序加载完成的方法</p><p>3.2 如果app的plist设置了main storyboard 会创建UIWindow对象(如 果没有设置则不创建)</p><p>3.3 创建main storyboard中绑定的controller对象(stroyboard中箭 头指向的控制器)</p><p>3.4 设置给window对象的rootViewController</p><p>3.5 设置window对象可见</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134137096-1924649162.png" alt="img"></p><p><strong>屏幕响应顺序</strong></p><p>　　iOS和安卓系统具有不同的屏幕响应顺序，IOS对屏幕的响应顺序是：触摸→媒体→服务→架构，而安卓是：程序→框架→屏幕显示资源→架构。所以在视觉效果上，iOS会有更流畅的感觉。</p><p><strong>后台管理机制</strong></p><p>　　从iOS 3开始，苹 果为iPhone引进了push notification，不启动应用也 能收到推送消息，原理是 消息由APNS(Apple Push Notification Service， Apple Push服务器)统一管 理，随着iOS 4的发布，iOS也开始有了 多任务功能，当你点击H o m e键后，当前 程序转入后台(iOS 4之前按Home键就 直接干掉应用了)，后台应用以墓碑的形 式(退出前的状态)保存在内存中，用户 可以快速恢复。但是苹果对后台的限制非 常严格，只有一些特殊应用可以在后台 真正运行，比如音频播放类、VoIP类、 newsstand、位置服务等。</p><p>　　如果不做任何配置的话，你的应用最 多只能在后台运行5秒，之后就会被挂起 (存于内存但不运行)，如果你配置了后 台运行(如需下载)，大概在594秒(9.9 分钟)时进程停止，程序同样也会被挂 起，一旦系统需要内存了，最早的后台进 程就会被杀掉以释放内存。</p><p>　　从 iOS 7 开始， 一旦手机锁屏， 后台应用将会很快被暂停， 之后当系统被唤醒时，那些暂停的后台应用会一起继续运行。现在的iOS后台管理很智能， 他会记忆你每天什么时段打开什么应用， 经过一段时间后， 他会在适当时间唤醒相应的应用。iOS7新增三种后台模式：</p><p><strong>Baxkground Fetch 后台应用刷新</strong></p><p>　　iOS 7 之前的应用必须在打开时才能联网获取数据， 而它可以让应用在后台直接获取数据。</p><p><strong>Silent Remote Notifications 静默推送唤醒</strong></p><p>　　iOS 7 之前当收到消息后， 只有打开应用才能从APNS获取推送的具体消息， 现在在收到消息后， 会自动唤醒相应的APP ， 让该APP在后台获取消息， 再通知用户。</p><p><strong>Background Transfer Servce 后台传输</strong></p><p>　　以前一旦下载被转移到后台最多只能持续运行549秒（9.9分钟）， 现在所有的下载任务会交给系统独立的进程去完成， 不管APP在前台、挂起还是被杀掉， 下载都在继续进行。</p><p><strong>自动清理机制</strong></p><p>　　iOS系统在安装应用或者使用过程中存储空间不足时，会自动清理一些应用的缓存以释放空间。</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134247771-1247696105.png" alt="img"></p><p><strong>APP****更新推送</strong></p><p>　　当app有新版本时，可以在APP store里更新应用。APP在安装的时候，会在数据库里appid对应的列表下新增版本号的关键字。用户在【更新】界面刷新操作后，发送请求查询用户表，并关联APP信息表获取到用户安装过的每一款APP的最新版本号列表。然后把最新版本号列表中的app版本号，与本地的app版本进行比对，如果最新版本号列表中的版本号大于本地版本号，则会有更新提示。</p><h3 id="五、卸载"><a href="#五、卸载" class="headerlink" title="五、卸载"></a>五、卸载</h3><p><strong>iOS****文件目录结构：</strong></p><p>/：为根目录</p><p>Applications： 存放所有的系统 APP 和来自 Cydia 的 APP,不包括从 App Store 下载的APP</p><p>Developer： 供开发者使用</p><p>Library：系统资源，用户设置</p><p>System：系统的重要组成部分</p><p>User：用户目录，实际指向 /var/mobile</p><p>bin：存放用户级可执行文件，如 ls、mv 等</p><p>dev：设备文件</p><p>etc：存放系统脚本、hosts 配置、SSH 配置文件等</p><p>sbin：存放系统二进制文件</p><p>usr：用户工具和程序</p><p>var：变量文件，在正常运行的系统中其内容不断变化的文件</p><p>　　应用都是安装在/var/mobile/Applications目录下，且应用沙盒机制，每一个应用分配自身的存储空间，不能越界访问。应用程序沙盒目录下有三个文件夹Documents、Library（下面有Caches和Preferences目录）、tmp。Documents：保存应用运行时生成的需要持久化的数据iTunes会自动备份该目录。Library/Caches：一般存储的是缓存文件，例如图片视频等，此目录下的文件不会再应用程序退出时删除，在手机备份的时候，iTunes不会备份该目录。Library/Preferences：保存应用程序的所有偏好设置iOS的Settings(设置)，iTunes会自动备份该文件目录下的内容。tmp：临时文件目录，在程序重新运行的时候，和开机的时候，会清空tmp文件夹。</p><p>　　iOS 中 app 对本地存储只能访问到自己的根目录，再往上就没有权限了。在删除应用时，app自身的存储空间的根目录会直接删除，在机制内不会留下残留文件。</p><h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><p>　　Mac OS是基于Unix内核的图形化操作系统；由苹果自行开发，不对外销售，一般情况下在普通PC上无法安装，只安装于苹果的设备中。mac OS虽然也对应用有较严格的管理机制，但与手机端iOS系统相比，用户具有更多的权限。</p><h3 id="一、开发-1"><a href="#一、开发-1" class="headerlink" title="一、开发"></a>一、开发</h3><p>　　mac OS应用的开发过程与iOS的开发类似，需要付费注册开发者账号，同样使用Xcode作为开发工具。</p><h3 id="二、发布"><a href="#二、发布" class="headerlink" title="二、发布"></a>二、发布</h3><p>　　应用开发完成后，发布方式与iOS下有所不同。除了在app store线上发布，还可以在平台以外发布。mac开发下的证书有5种：</p><p>开发证书：</p><p>（1）Mac Development：用于开发和测试的证书，跟iOS development证书一样；运行在指定设备上需要把设备的UUID添加到devices里面去。</p><p>发布证书：</p><p>Mac App Store</p><p>（2）Mac App Distribution：这个用于 Xcode 自己把.app 文件上传到 Mac App Store，具体的上线过程与iOS应用类似。</p><p>（3）Mac Installer Distribution：这是用于开发者自己把.app 文件打包成 .pkg 文件，再用 Xcode 自带的 App Application Loader 上传到 Mac App Store ，可用于上传到store前模拟真实的store环境。</p><p>Developer ID</p><p>（4）Developer ID Application：这个用于开发者使用开发者帐号签名，导出一个线下发布版本的 .app 文件，但是由于脱离了苹果的 Mac App Store，还是加上许可协议打包成 .pkg 文件再发布比较好，给用户一个决定是否安装的机会。这就要用到第5个证书。</p><p>（5）Developer ID Installer：用于开发者打包，同时加上开发者帐号签名，打包生成一个.pkg的安装包，可以装到任意一台Mac电脑上执行安装过程。</p><p>　　5种证书，开发证书用于开发和测试，发布证书就对应着app store和线下两种发布形式。根据需要的发布形式创建对应的证书，证书的创建过程可参考iOS应用的证书创建，发布的具体过程可以按照官方文档和Xcode的提示一步步来。当然如果不想用证书也不担心用户拒绝来源不明的应用的话，也可以不用任何证书签名打包应用，用默认的签名方式就可以。</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134320743-1455512401.png" alt="img"></p><h3 id="三、安装-1"><a href="#三、安装-1" class="headerlink" title="三、安装"></a>三、安装</h3><p>mac OS上对于应用的不同发布形式，也有不同的安装方法，可以分为三种。</p><p>　　1.对于app store上的应用，即上一部分的（2）（3）发布方式，用户可以直接登录自己的苹果账户，进行购买或者获取资源下载，对软件的购买在平台完成，苹果会抽取一部分分成。app store上的应用经过苹果内部人员的审核和测试，本身会具有更高的完整度、质量和运行稳定性。但是国内应用的很多软件app store都没有，需要线下的方式进行安装。</p><p>　　2.第二种安装方式是线下的.app格式的应用的安装，即上一部分的（4）发布方式。这种用户可以自行从网上搜索下载源，一般下下来的安装文件是一个.dmg格式的磁盘映像，dmg 是苹果的压缩镜像文件，类似于 Windows 下的 ISO，双击打开后会给系统挂上一个类似移动硬盘的虚拟磁盘，安装完后可以右键弹出。它是 macOS 应用软件通用的打包格式，里面一般包含“应用程序名.app”的图标和一个应用程序文件夹（/Applications）快捷方式。直接将图标拖曳至应用程序文件夹，即可完成安装，非常快捷。</p><p>　　3.第三种是.pkg安装包的安装，即上一部分的（5）发布方式。.pkg属于系统级软件的安装程序，类似于windows中的.exe安装程序，会阅读许可协议并选择安装位置、安装内容，一般会修改系统配置，权限较高，需要sudo授权。</p><p>　　对于一些来源不明或没有证书的应用，在打开安装程序时有时会出现“文件已损坏，打不开”。这是由于系统的安全机制对来源不明的软件的限制。可以通过在命令行里修改权限，在系统偏好设置的安全性与隐私设置里，改成允许任何来源的应用。</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134354012-1699646313.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134418488-779634983.png" alt="img"></p><p>　　有时还会提示“来自身份不明的开发者”，这时同样在偏好设置的安全性与隐私设置里，可以看到要打开的应用被阻止的提示，点击“仍要打开”即可。</p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134442501-741311560.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/common/1946378/202002/1946378-20200219134500003-1198084874.png" alt="img"></p><p>　　苹果的应用为.app的格式，既是一个包，包含应用的全部内容，可以右键显示包内容，对里面的文件或配置进行修改（具有比iOS更高的权限），同时也是一个可执行文件，安装在Applications文件夹后会自动出现在系统的Launchpad（启动台）里。</p><h3 id="四、卸载"><a href="#四、卸载" class="headerlink" title="四、卸载"></a>四、卸载</h3><p>　　mac上对于应用的卸载，由于安装方式不同，卸载方式也不同。app store里安装的应用，类似于iOS，在Launchpad（启动台）里长按图标，点叉号即可卸载。线下的app store平台外自己安装的应用极少数会自带卸载程序，多数直接在Applications文件夹里右键删除即可。只是对于.pkg安装包安装的应用，由于有时具有较高权限，可能会修改系统配置，所以删除应用后有时可能会有卸载残留，可以通过第三方卸载软件或手动删除。</p><h2 id="watchOS"><a href="#watchOS" class="headerlink" title="watchOS"></a>watchOS</h2><p>　　watchOS是苹果公司基于iOS 系统开发的一套使用于Apple watch的手表操作系统。它的应用的开发与上线与iOS相同，用户只能通过App store来安装应用。在2019年6月之前，对应用程序的安装不能在apple watch上直接进行，只能结合iphone使用。连接之后在iPhone上打开Apple Watch应用程序，来安装需要的表上应用。安装完成后，会首先在iPhone上面显示。需要说明的是，Apple Watch APP应用程序都是必须要配合iPhone使用的，因此所有安装到Apple Watch上面的应用程序，都会同时安装到iPhone上。2019年6月之后发布的新的watchOS系统，自带app store，不用再连接iphone来安装应用，可以直接在app store里获取安装。</p><p>　　卸载应用也是两种方式，既可以在apple watch内直接卸载，也可以与iPhone配对，通过iPhone里的apple watch应用来管理手表应用。</p><h2 id="tvOS"><a href="#tvOS" class="headerlink" title="tvOS"></a>tvOS</h2><p>　　tvOS是苹果公司专门为Apple TV设计的操作系统，基于 iOS。2016年3月发布了 tvOS 9.2 操作系统。Apple TV是苹果公司推出的一款高清电视机顶盒产品，用户可以通过Apple TV在线收看电视节目，也可以通过Airplay功能，将iPad、iPhone、iPod和PC中的照片、视频和音乐传输到电视上进行播放。tvOS也可以安装一些应用，具有独立的应用生态，通过自带的app store进行搜索和安装。</p><p>　　tvOS应用的开发与发布也与iOS类似，需要注册成为开发者，使用官方的开发工具xcode进行开发，开发与发布同样需要创建证书。具体过程均与iOS相同。</p><p>　　在国内目前用户不多，不能直接收看国内的有线卫视节目，需要联网安装app来收看电视台。</p><h2 id="苹果系统与其他系统比较"><a href="#苹果系统与其他系统比较" class="headerlink" title="苹果系统与其他系统比较"></a>苹果系统与其他系统比较</h2><h3 id="iOS与macOS对比"><a href="#iOS与macOS对比" class="headerlink" title="iOS与macOS对比"></a>iOS与macOS对比</h3><p>　　两个系统都是苹果自主研发的系统，但我们也可以看出，macOS的用户比起iOS拥有更广的权限，可以访问系统资源，读写系统目录、系统文件，也可以访问应用内部目录，对其配置文件进行修改，还可以下载安装来自任何来源的应用。相比之下，iOS的系统生态就更加封闭，使用者无法查看系统文件资源，也不能访问应用内部，只能通过应用的接口来使用和管理应用。而对于广大苹果手机用户而言，他们所使用的唯一的应用安装方式就是通过官方的APP store。</p><h3 id="iOS系统应用与安卓对比"><a href="#iOS系统应用与安卓对比" class="headerlink" title="iOS系统应用与安卓对比"></a>iOS系统应用与安卓对比</h3><p>　　具有安装来源不同、用户权限不同、运行机制不同、后台机制不同、响应处理指令权限不同几大区别。相比之下优点：1）所有上线应用经过审核，具有更高的稳定性、流畅度、安全指数、优化性，且可以保护版权，安卓应用开发者随意开发，参差不齐。2）应用具有较低的权限，可以更好的保护用户隐私，相比之下，安卓许多应用如不开放权限则不让用户使用。3）通过优先响应屏幕和独特的对内存管理的方式使其具有更流畅的运行效果。4）iOS软硬件垂直整合，只运行在苹果设备上，安卓可以运行在多种设备上，所以iOS上的应用有更好的兼容性。</p><p>　　缺点：1）安卓系统开放，且开发门槛低，所以资源多，开发者多，创新也多。2）安卓系统用户权限大，所以操作更灵活，也更加个性化。</p><h3 id="windows与macOS应用对比"><a href="#windows与macOS应用对比" class="headerlink" title="windows与macOS应用对比"></a>windows与macOS应用对比</h3><p>　　开发门槛不同：mac应用开发成本大，windows程序任意开发者均可以免费开发。</p><p>　　安装来源不同：windows可以随意安装程序，mac的可以通过app平台或平台之外，均会验证证书，质量更高。</p><p>　　安装方法不同：windows安装包进行安装，mac可以应用商店直接获取，或者直接复制app到应用程序，或者安装包安装。</p><p>　　应用文件结构不同，windows除了安装根目录，还会写入注册表信息，通过exe执行文件启动。mac的app文件既是整个应用包，同时是启动入口。</p><p>　　卸载方式不同：windows通过卸载程序，mac直接删除。</p><h2 id="苹果系统中的安全机制"><a href="#苹果系统中的安全机制" class="headerlink" title="苹果系统中的安全机制"></a>苹果系统中的安全机制</h2><h3 id="Apple-ID双重认证"><a href="#Apple-ID双重认证" class="headerlink" title="Apple ID双重认证"></a>Apple ID双重认证</h3><p>　　首次登录一台新设备时，除输入密码外，还需要在信任设备上的授权才可以登录。输入验证码后，即确认信任这台新设备。由于只输入密码不再能够访问帐户，因此双重认证显著增强了 Apple ID 以及所有通过 Apple 储存的个人信息的安全性。登录成功后，系统将不会再次要求信任设备的验证，除非完全退出登录帐户、抹掉设备数据或出于安全原因而需要更改密码。受信任设备是已使用双重认证登录的设备，可以是装有 iOS 9 及更高版本的 iPhone、iPad 或 iPod touch 或者装有 OS X El Capitan 及更高版本的 Mac。受信任电话号码是指可通过短信或自动语音电话接收验证码的号码。您必须至少验证一个受信任电话号码才能注册双重认证。</p><h3 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h3><p>　　苹果也是通过代码签名来保证每一个安装到iOS上的APP都是经过苹果官方允许的，防止盗版软件、病毒入侵、静默安装等。苹果也是通过代码签名来保证每一个安装到iOS上的APP都是经过苹果官方允许的，防止盗版软件、病毒入侵、静默安装等。</p><h3 id="可信引导"><a href="#可信引导" class="headerlink" title="可信引导"></a>可信引导</h3><p>　　iOS设备开机后采用一种称为可信引导的方式进入系统。引导过程中，安全只读内存 (SecureROM) 是首先被引导的部分，其中嵌入了根证书 (Root Certificate)用以检查下一步所加载组件的RSA签名。 在随后的每个步骤中，系统校验下一步骤所要加载组件的 RSA 签名。这一信任链 (Chain of Trust) 保证了系统启动过 程中的所有组件没有被破坏和修改。</p><h3 id="沙盒机制"><a href="#沙盒机制" class="headerlink" title="沙盒机制"></a>沙盒机制</h3><p>　　沙盒也叫沙箱，英文standbox，其原理是通过重定向技术，把程序生成和修改的文件定向到自身文件夹中。在沙盒机制下，每个应用程序都有自己的存储空间，程序之间的文件夹不能互相访问。iOS系统为了保证系统安全，采用了这种机制。iOS 应用程序在安装时，会创建属于自己的沙盒文件，应用程序不能直接访问其他应用程序的沙盒文件，当应用程序需要向外部请求或接收数据时，都需要经过权限认证，否则，无法获取到数据。应用程序中所有的非代码文件都保存在沙盒中，比如图片、声音、属性列表，sqlite数据库和文本文件等。</p><h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3><p>　　iOS4 及以后的系统使用数据加密机制来保护文件系 统中的系统和数据分区。系统和数据分区中的数据将由一 个基于硬件设备的密钥进行加密。在 iPhone3GS 以后的设 备上，该密钥存储于一个AES加密加速硬件上。这个基 于硬件的密钥不能被 CPU 所访问，只有在加解密时才能 由该加速器获取。通过这种机制，直接从硬盘上被取走的 原始数据就无法被正确解密。同时，数据加密机制还提供 了多种加密策略供应用程序选择。应用程序可以选择对一 些敏感文件使用NSFileProtectionComplete 策略而不是默认 的 NSFileProtectionNone 策略加密数据。</p><p>　　疯狂肆虐的电脑病毒几乎都是针对Windows的，由于MAC的架构与Windows不同，沙盒机制、使用人数少、研究成本大、对应用安装的管控力度，所以很少受到病毒的袭击。</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【1】Bucicoiu M, Davi L, Deaconescu R, et al. XiOS: Extended application sandboxing on iOS[C]//Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security. ACM, 2015: 43-54.</p><p>【2】Mohamed I, Patel D. Android vs iOS security: A comparative study[C]//2015 12th International Conference on Information Technology-New Generations. IEEE, 2015: 725-730.</p><p>【3】Ahmad M S, Musa N E, Nadarajah R, et al. Comparison between android and iOS Operating System in terms of security[C]//2013 8th International Conference on Information Technology in Asia (CITA). IEEE, 2013: 1-4.</p><p>【4】安迪. iOS真的是“伪后台”吗?[J]. 个人电脑, 2016(2):86-88.</p><p>【5】刘乐廷, 李敬兆, LIULe-ting, et al. IOS内存开发管理机制的研究[J]. 计算机与现代化, 2013(3):196-199.</p><p>【6】陈佳霖, 王轶骏, 薛质. iOS系统数据安全研究[J]. 信息安全与通信保密, 2012(8):100-102.</p><p>【7】Apple官方开发者账户帮助<a href="https://help.apple.com/developer-account/?lang=zh-cn#/dev7a05c5ce1">https://help.apple.com/developer-account/?lang=zh-cn#/dev7a05c5ce1</a></p><p>【8】iOS最新应用上架App Store流程<a href="https://www.jianshu.com/p/e5ac7b05750a">https://www.jianshu.com/p/e5ac7b05750a</a></p><p>【9】Apple Developer-App Store 审核指南<a href="https://developer.apple.com/cn/app-store/review/guidelines/#in-app-purchase">https://developer.apple.com/cn/app-store/review/guidelines/#in-app-purchase</a></p><p>【10】windows使用Appuploader上架应用<a href="https://www.jianshu.com/p/6f50130b6950">https://www.jianshu.com/p/6f50130b6950</a></p><p>【11】苹果企业账号发布APP详解<a href="https://www.jianshu.com/p/0418f5051185">https://www.jianshu.com/p/0418f5051185</a></p><p>【12】Provisioning Profile <a href="https://www.jianshu.com/p/0affef7cef69">https://www.jianshu.com/p/0affef7cef69</a></p><p>【13】iOS包签名原理<a href="https://www.jianshu.com/p/b7416aef5f5c">https://www.jianshu.com/p/b7416aef5f5c</a></p><p>【14】Mac App 发布的最后 1km <a href="https://sspai.com/post/40269">https://sspai.com/post/40269</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分布式模型</title>
      <link href="2021/03/26/2016-03-26-distributed-data-model/"/>
      <url>2021/03/26/2016-03-26-distributed-data-model/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>数据的分布有两种途径：</p><ul><li><p>复制（replication）：</p><p>  将同一份数据拷贝至多个节点；复制又分为：<strong>主从式</strong>（master-slave）和<strong>对等式</strong>（peer-to-peer）。</p></li><li><p>分片（sharding）：</p><p>  将不同数据存放在不同节点。</p></li></ul><span id="more"></span><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>将数据复制到多个服务器上，每份数据都能在多个节点中找到，复制方式又分为<strong>主从复制</strong>和<strong>对等复制</strong>。</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>我们把数据复制到多个节点中，其中有个节点叫做<strong>主节点</strong>，其余节点叫做<strong>从节点</strong>。主节点存放权威数据，通常负责处理数据更新操作；从节点一般提供数据读取的功能。复制操作让从节点与主节点同步。</p><p>主从复制有这么些好处是：</p><ul><li>在需要频繁读取数据的情况下，主从复制有助于提升数据访问性能</li><li>主从复制可以增强<strong>读取操作</strong>的故障恢复能力</li></ul><p>但是，主从复制最大的缺陷就是<strong>数据的一致性</strong>问题。如果数据更新没有通知全部从节点，那么不同的客户端就可能从节点中读取到不同的值，这个问题之后再做补充。</p><h3 id="对等复制"><a href="#对等复制" class="headerlink" title="对等复制"></a>对等复制</h3><p>对等复制和主从复制的区别就是前者没有<strong>主节点</strong>这个概念。所有的节点地位相同，都可以接受写入请求，而且丢失其中一个副本，不影响整个数据库的访问。</p><p>它的优点是很从容处理出错的节点，因为所有的节点数据都一致，不必担心数据请求会丢失，而且只需增加节点，就可以轻易提升性能。</p><p>但是，对等复制的最大问题还是<strong>数据的一致性</strong>问题。有可能出现两个用户在同一时间试图更新同一条记录，导致<strong>写入冲突</strong>。主从复制也有数据一致性的问题，不过数据读取的不一致性至少持续时间相对比较短（待主节点通知到所有的从节点，数据就一致了），而写入操作导致的不一致数据却总是存在。</p><h2 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h2><p>将不同部分的数据分片存放在独立的节点上，每个节点负责自身数据的读取和写入操作，不同的服务器节点服务于不同的用户。为了获取理想效果，必须保证需要同时访问的那些数据存放在同一节点上，并且节点必须排布好这些数据块，使访问速度最优。</p><p>在存放<strong>同时访问的数据</strong>的选择上，可以把<strong>聚合</strong>作为分布数据的单元，因为聚合就是把需要同时访问的数据放在一起。</p><p>在<strong>节点排布</strong>的问题上，首先考虑把数据放得离访问者近一些，然后是<strong>保持负责均衡</strong>（把聚合数据均匀地分布在各个节点中，让它们需要处理的负载量相等）。</p><p>分片可以同时提升读取与写入效率，提升性能。但是，它的<strong>故障恢复能力</strong>却不强，它只能保证访问此数据的用户才会受影响，其他用户则能正常访问。</p><h2 id="结合"><a href="#结合" class="headerlink" title="结合"></a>结合</h2><p>主从复制和分片的结合所达到的效果是整个系统有多个主节点，对每项数据来说，负责它的主节点只有一个；对等复制和分片的结合，就是把每片数据存放在多个节点上，这样一旦一个节点出错，可以保证其他节点重建数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数据分布分为两种方式，<strong>分片</strong>和<strong>复制</strong>，其中复制又分为<strong>主从</strong>和<strong>对等</strong>。主从复制减少了更新数据时的冲突几率，但是主节点的写入操作是瓶颈，而对等复制却相反。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> it </tag>
            
            <tag> 分布式 </tag>
            
            <tag> NoSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又一次来到了北京</title>
      <link href="2021/03/18/2013-04-06-beijing-again/"/>
      <url>2021/03/18/2013-04-06-beijing-again/</url>
      
        <content type="html"><![CDATA[<p>又一次来到了北京，不过似乎这次的天气比上次来的时候好一点，希望这次的差事快点干完，毕竟在上海做事还是有效率点。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运行时内存结构</title>
      <link href="2021/03/09/2016-03-09-java-memory-area-structure/"/>
      <url>2021/03/09/2016-03-09-java-memory-area-structure/</url>
      
        <content type="html"><![CDATA[<p><img src="http://77fkdd.com1.z0.glb.clouddn.com/it%2Fjava%2Fjava-memory-stracture.png" alt="Java内存结构图"></p><p>由图所示，Java运行时内存区域分为：<strong>虚拟机栈</strong>、<strong>方法区</strong>、<strong>本地方法栈</strong>、<strong>程序计数器</strong>和<strong>堆</strong>。</p><span id="more"></span><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器可以看作是<strong>当前线程</strong>所执行的字节码的行号指示器，它只了很小的内存。程序的基础功能（循环、跳转、异常处理、线程恢复等）都需要依赖这个计数器来完成。程序计数器是属于<strong>线程私有</strong>的。</p><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>虚拟机栈描述的是Java方法之行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，用于存储局部变量表、操作数栈、动态链表、方法出口等信息。</p><p>每一个方法被调用直至执行完成的过程，就是对应一个栈帧在虚拟机从<strong>入栈道出栈</strong>的过程。</p><p>我们平时所关心的栈，可以说是虚拟机栈中的<strong>局部变量表</strong>，局部变量表存放了编译期可知的<strong>基本数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>和<strong>returnAddress</strong>类型。</p><p>JVM规范规定了这个区域的两种异常：</p><ul><li><p><strong>StackOverflowError</strong></p><p>如果线程请求的<strong>栈深度</strong>大于虚拟机所允许的深度时会抛出；</p></li><li><p><strong>OutOfMemoryError</strong></p><p>如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出。</p></li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，虚拟机栈执行<strong>Java方法（字节码）服务</strong>，而本地方法栈则是<strong>Native方法服务</strong>。</p><p>本区域会抛出 <strong>StackOverflowError</strong> 和 <strong>OutOfMemoryError</strong>异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区存储<strong>已经</strong>被虚拟机加载的<strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后<br>的代码</strong>。</p><p>有些资料说方法区为“<strong>永久代（Permanent Generation）</strong>”（其实只有HotSpot虚拟机）。</p><p>在垃圾回收方面，这个区域很少出现垃圾回收行为，但是不是说没有垃圾回收。这个区域的垃圾回收主要目标是<strong>常量池</strong>的回收和对<strong>类型</strong>的卸载。</p><p>JVM规范规定，这个区域会抛出 <strong>OutOfMemoryError</strong> 异常：当方法区无法满足内存分配需求时抛出。        </p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>  <strong>运行时常量池</strong> 是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放<strong>编译期</strong>生成的各种<strong>字面量</strong>和<strong>符号引用</strong>，这部分内容将在类加载后存放到方法区的运行时常量池中。</p><p>  运行时常量池的另一个重要特征是具备动态性，除了Class文件中常量池的内容进入方法区常量池外，运行期间也可能将新的常量放入池中，比如String类的intern()。</p><p>  这部分会抛出 OutOfMemoryError 异常：当常量池无法再申请到内存时会抛出。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Java堆是被<strong>所有线程共享</strong>的一块内存区域，在虚拟机启动的时候创建。大多数应用中，堆事JVM内存中<strong>最大</strong>的一块。按照JVM规范，<strong>所有的对象实例以及数组都要在堆上分配</strong>，但是随着技术的发展，这已经不是绝对的了。</p><p>Java堆是垃圾收集器管理的主要区域，被称为<strong>GC堆</strong>，按照<strong>分带收集算法</strong>（现在基本是），堆分为<strong>新生代</strong>和<strong>老年代</strong>。从内存非配的角度，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区。</p><p>这里存放的都是<strong>对象实例</strong>。</p><p>堆的大小可通过 <strong>-Xmx</strong> 和 <strong>-Xms</strong> 控制。</p><p>这里会抛出 <strong>OutOfMemoryError</strong>：堆中没有内存完成<strong>实例分配</strong>，并且堆也<strong>无法再扩展</strong>时。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单的归类，Java运行时内存区域中：</p><p>属于<strong>线程私有</strong>的区域是：程序计数器、虚拟机栈、本地方法栈；</p><p>属于<strong>线程共享</strong>的区域是：堆、方法区（包括运行时常量池）。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> it </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="2021/02/05/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>2021/02/05/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="本人计算机网络笔记总目录"><a href="#本人计算机网络笔记总目录" class="headerlink" title="本人计算机网络笔记总目录"></a>本人计算机网络笔记总目录</h1><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记Part1 概述</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106974965">计算机网络笔记Part2 物理层（Physical Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106993253">计算机网络笔记Part4 网络层（Network Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107034202">计算机网络笔记Part5 传输层（Transport Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107053479">计算机网络笔记Part6 应用层（Application Layer）</a></p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>因为不同的网络应用之间需要有一个确定的通信规则<br><img src="https://img-blog.csdnimg.cn/20200702215803534.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-两种常用的网络应用模型"><a href="#1-1-两种常用的网络应用模型" class="headerlink" title="1.1 两种常用的网络应用模型"></a>1.1 两种常用的网络应用模型</h2><h3 id="1-1-1-客户-服务器模型（Client-Server）"><a href="#1-1-1-客户-服务器模型（Client-Server）" class="headerlink" title="1.1.1 客户/服务器模型（Client/Server）"></a>1.1.1 客户/服务器模型（Client/Server）</h3><p><img src="https://img-blog.csdnimg.cn/20200702220439646.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-1-2-P2P模型（Peer-to-Peer）"><a href="#1-1-2-P2P模型（Peer-to-Peer）" class="headerlink" title="1.1.2 P2P模型（Peer-to-Peer）"></a>1.1.2 P2P模型（Peer-to-Peer）</h3><p>网络健壮性指的是P2P模型不容易坏掉，即使一个节点坏了也没问题，可以有其他节点代替<br><img src="https://img-blog.csdnimg.cn/20200702220544850.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-域名系统协议（DNS）"><a href="#2-域名系统协议（DNS）" class="headerlink" title="2. 域名系统协议（DNS）"></a>2. 域名系统协议（DNS）</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>DNS就是将打在地址栏的域名转化为IP地址的东西<br><img src="https://img-blog.csdnimg.cn/20200702220920296.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-1-域名"><a href="#2-1-1-域名" class="headerlink" title="2.1.1 域名"></a>2.1.1 域名</h3><p>域名就是<a href="http://www.xxx.com,当然这是最简单的一种/">www.xxx.com，当然这是最简单的一种</a><br>.com之后还可以有东西，称之为根<br>域名从左向右，级别逐渐增高<br><img src="https://img-blog.csdnimg.cn/20200702221601437.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200702221626114.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-域名服务器（DNS服务器）"><a href="#2-2-域名服务器（DNS服务器）" class="headerlink" title="2.2 域名服务器（DNS服务器）"></a>2.2 域名服务器（DNS服务器）</h2><p>DNS服务器有很多台，根据层次结构分为三层，根域名服务器，顶级域名服务器，权限域名服务器<br>本地域名服务器不算层次结构，特点是里主机比较近，当主机和另一台比较近的主机通信时，就不用走哪些更高级的服务器了<br>根域名服务器并不是一个域名只有一台，而是一个域名对应多台域名服务器，全世界一共有13个这样的域名，分别是a.rootservers.net，b.rootservers.net，c.rootservers.net，~m.rootservers.net<br>在权限域名服务器中，虽然看似abc.com比y.abc.com少了一位，但是他们的<strong>地位仍是对等的</strong>，对应的两台权限域名服务器<br><img src="https://img-blog.csdnimg.cn/20200702222254726.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3-域名解析过程"><a href="#2-3-域名解析过程" class="headerlink" title="2.3 域名解析过程"></a>2.3 域名解析过程</h2><p><img src="https://img-blog.csdnimg.cn/20200702223128655.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200702223220720.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-3-1-递归查询"><a href="#2-3-1-递归查询" class="headerlink" title="2.3.1 递归查询"></a>2.3.1 递归查询</h3><p>在上图中<br>主机先是想本地域名服务器发送请求，如果查不到的话，<br><strong>本地域名服务器</strong>向根域名服务器发送请求（找别人），如果还是查不到的话，<br><strong>根域名域名服务器</strong>向顶级域名服务器发送请求（找别人），如果还是查不到的话，<br><strong>顶级域名服务器</strong>向权限域名服务器发送请求（找别人）<br>可以看到每一次向下一个查询的服务器都变了，不是主机一个个去问，而是<strong>服务器自己一个个问下去</strong></p><h3 id="2-3-2-迭代查询"><a href="#2-3-2-迭代查询" class="headerlink" title="2.3.2 迭代查询"></a>2.3.2 迭代查询</h3><p>在上图中<br>主机先是想本地域名服务器发送请求，如果查不到的话，<br>本地域名服务器就让<strong>主机</strong>去向根域名服务器发送请求（主机去找，本地域名给目标根域名服务器的IP地址），如果还是查不到的话，<br>根域名域名服务器让<strong>主机</strong>去向对应的顶级域名服务器发送请求（主机去找，根域名给目标顶级域名服务器的IP地址），如果还是查不到的话，<br>顶级域名服务器让<strong>主机</strong>去向权限域名服务器发送请求（主机去找，顶级域名给目标权限域名服务器的IP地址）<br>可以看到这里是<strong>主机</strong>一个个挨个问的地址</p><h3 id="2-3-3-高速缓存"><a href="#2-3-3-高速缓存" class="headerlink" title="2.3.3 高速缓存"></a>2.3.3 高速缓存</h3><p>为了减少多次查询同一个域名的资源浪费，<strong>本地域名服务器</strong>会存储最近使用的ip地址解析，下次再访问同一个域名就不需要这么多查询步骤了。同时这个高速缓存<strong>主机本身也有存储</strong><br>同时本地域名服务器还可以对顶级域名服务器，权限域名服务器的地址进行缓存，下一次即使是不知道的ip地址，查询也可以更快<br>高速缓存为了保持正确性，需要定时更新</p><h1 id="3-文件传输协议（FTP，TFTP）"><a href="#3-文件传输协议（FTP，TFTP）" class="headerlink" title="3. 文件传输协议（FTP，TFTP）"></a>3. 文件传输协议（FTP，TFTP）</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>TFTP是一个轻量的，比较容易实现的，面对小文件的，UDP的文件传输协议<br>这里我们重点是FTP协议<br><img src="https://img-blog.csdnimg.cn/20200702224616787.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-FTP的服务端和客户端"><a href="#3-2-FTP的服务端和客户端" class="headerlink" title="3.2 FTP的服务端和客户端"></a>3.2 FTP的服务端和客户端</h2><p><img src="https://img-blog.csdnimg.cn/20200702224816512.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-3-FTP的工作原理"><a href="#3-3-FTP的工作原理" class="headerlink" title="3.3 FTP的工作原理"></a>3.3 FTP的工作原理</h2><p>为什么有匿名登陆：对于一些公共服务器来说，增加验证阶段就是增加资源开销，减少验证阶段就可以节省资源来更好地服务<br>主进程和从属进程的区别：主进程是打开端口，让外部发送的数据可以进来，并且将这些数据逐个分配各从属进程。从属进程则是单独为这些数据服务<br><img src="https://img-blog.csdnimg.cn/20200702225039138.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200703000333330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先注释一下这里的主进程被忽略掉了，只是没标在上面，不是没有啊<br>这里客户端和服务器端先建立TCP连接，端口是21，称为控制连接<br>然后看情况是主动建立连接还是被动建立连接<br>主动建立连接是指服务器端主动发送请求和客户端进行连接，此时端口号固定是20<br>被动连接是指客户端发送请求和服务器端建立数据传送连接，此时端口号是不确定，有两者协商得到<br>数据传输完成之后，数据连接断开，控制连接继续保持，直至两边发送断开请求</p><p><img src="https://img-blog.csdnimg.cn/20200703000401174.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>FTP的两种传输模式了解即可<br><img src="https://img-blog.csdnimg.cn/20200703000905460.png" alt="在这里插入图片描述"></p><h1 id="4-电子邮件"><a href="#4-电子邮件" class="headerlink" title="4. 电子邮件"></a>4. 电子邮件</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><h3 id="4-1-1-电子邮件的格式"><a href="#4-1-1-电子邮件的格式" class="headerlink" title="4.1.1 电子邮件的格式"></a>4.1.1 电子邮件的格式</h3><p><img src="https://img-blog.csdnimg.cn/20200703001117831.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-1-2-电子邮件系统的组成结构"><a href="#4-1-2-电子邮件系统的组成结构" class="headerlink" title="4.1.2 电子邮件系统的组成结构"></a>4.1.2 电子邮件系统的组成结构</h3><p>注释：<br>用户代理的四个功能解释：<br>撰写就是给用户编辑信件的环境<br>显示就是可以看到自己写的和自己收的信件内容<br>处理就是对信件进行操作，包括删除，打印，转发等等<br>通信就是可以将邮件发送到<strong>邮件服务器当中</strong>，同时可以<strong>从邮件服务器当中</strong>读取邮件</p><p>邮件服务器的功能注释<br>邮件服务器端的发送和接受是指从自己的<strong>用户代理处接收邮件</strong>，之后<strong>向对面的邮件服务器发送邮件</strong><br>邮件服务器的报告邮件发送结果就是投递是否成功这种情况<br>邮件服务器既可以作为客户端又可以作为服务器端，使用的是C/S方式</p><p>协议的功能注释<br>发邮件用的是SMTP<br>收邮件的是POP3或者IMAP</p><p><img src="https://img-blog.csdnimg.cn/20200703001436566.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200703002119799.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-2-几个邮件协议"><a href="#4-2-几个邮件协议" class="headerlink" title="4.2 几个邮件协议"></a>4.2 几个邮件协议</h2><h3 id="4-2-1-简单邮件传送协议SMTP"><a href="#4-2-1-简单邮件传送协议SMTP" class="headerlink" title="4.2.1 简单邮件传送协议SMTP"></a>4.2.1 简单邮件传送协议SMTP</h3><p>注意一下，这里STMP客户和服务器不是固定死的，可以也可以成为服务器，服务器也可以成为用户，由发送方和接收方决定，发送方就是客户，接收方就是服务器<br><img src="https://img-blog.csdnimg.cn/20200703002319315.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注释<br>可以看见这里比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">220 service ready</span><br><span class="line">250 OK</span><br><span class="line">421 service not available</span><br><span class="line">550 xxx</span><br><span class="line">354 xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>都是应答信息</p><p>这里RCPT能有多条命令的原因是，电子邮件可以有多个收件人，就是群发，所以允许多个RCPT</p><p><strong>再强调一下，这里服务器和客户端可以互换，视具体情况而定，发送方是客户端，接收方是服务器端</strong><br><img src="https://img-blog.csdnimg.cn/20200703002844133.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-2-2-改进SMTP缺点的MIME协议"><a href="#4-2-2-改进SMTP缺点的MIME协议" class="headerlink" title="4.2.2 改进SMTP缺点的MIME协议"></a>4.2.2 改进SMTP缺点的MIME协议</h3><p>MIME改善SMTP发送数据的缺点，是SMTP的功能性扩展<br>MIME协议已经逐渐开始应用到浏览器当中，通过对不同文件类型用不同的标识符标识，来让浏览器读取通过MIME的相关文件<br><img src="https://img-blog.csdnimg.cn/20200703003639358.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-2-3-邮局协议POP3"><a href="#4-2-3-邮局协议POP3" class="headerlink" title="4.2.3 邮局协议POP3"></a>4.2.3 邮局协议POP3</h3><p>这里接收方是客户端，邮件服务器是服务器端<br>POP3确实很简单，但是有不少缺点，比较难受的就是邮件一旦下载就自动删除了<br><img src="https://img-blog.csdnimg.cn/20200703003942969.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-2-4-比较复杂的读取邮件的协议——IMAP协议"><a href="#4-2-4-比较复杂的读取邮件的协议——IMAP协议" class="headerlink" title="4.2.4 比较复杂的读取邮件的协议——IMAP协议"></a>4.2.4 比较复杂的读取邮件的协议——IMAP协议</h3><p><img src="https://img-blog.csdnimg.cn/20200703004334235.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-3-基于万维网的电子邮件"><a href="#4-3-基于万维网的电子邮件" class="headerlink" title="4.3 基于万维网的电子邮件"></a>4.3 基于万维网的电子邮件</h2><p>与之前的不同的地方就是，基于万维网的电子邮件的<strong>邮件服务器端可以不同</strong></p><p>同时，发送邮件使用的SMTP/MIME和收邮件时的POP3/IMAP协议都<strong>换成了HTTP协议</strong></p><p><img src="https://img-blog.csdnimg.cn/2020070300482031.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="5-万维网和HTTP协议"><a href="#5-万维网和HTTP协议" class="headerlink" title="5. 万维网和HTTP协议"></a>5. 万维网和HTTP协议</h1><h2 id="5-1-万维网概述"><a href="#5-1-万维网概述" class="headerlink" title="5.1 万维网概述"></a>5.1 万维网概述</h2><p>URL用来标识整个互联网当中的某一个资源（文字，视屏，音频等）的位置</p><p>HTTP用来将这些资源传送给用户</p><p>HTML帮助设计者来设计页面，让不同设计者设计的页面都可以在界面上显示<br><img src="https://img-blog.csdnimg.cn/20200703005114701.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-2-HTTP协议"><a href="#5-2-HTTP协议" class="headerlink" title="5.2 HTTP协议"></a>5.2 HTTP协议</h2><h3 id="5-2-1-HTTP协议的过程"><a href="#5-2-1-HTTP协议的过程" class="headerlink" title="5.2.1 HTTP协议的过程"></a>5.2.1 HTTP协议的过程</h3><p>这张图里讲了HTTP的具体过程</p><p>服务器通过TCP 80端口来监听HTTP请求</p><p>注意HTTP可以不一次性下载完页面的所有资源，可以只下载文本部分，其他音频视频等待用户下一步请求之后再传输<br><img src="https://img-blog.csdnimg.cn/20200703005650472.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-2-HTTP协议的特点"><a href="#5-2-2-HTTP协议的特点" class="headerlink" title="5.2.2 HTTP协议的特点"></a>5.2.2 HTTP协议的特点</h3><p><img src="https://img-blog.csdnimg.cn/20200703010043691.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-3-HTTP的连接方式——持久连接和非持久连接"><a href="#5-2-3-HTTP的连接方式——持久连接和非持久连接" class="headerlink" title="5.2.3 HTTP的连接方式——持久连接和非持久连接"></a>5.2.3 HTTP的连接方式——持久连接和非持久连接</h3><p>非持久连接在TCP三次握手的<strong>第三次握手时发生</strong>，将HTTP请求作为第三次握手的数据部分发给服务器，服务器收到请求之后将HTTP相应报文传输给客户。耗时就是RTT*2+文档传输时间。<br>缺点就是这样如果再想传输，那么就需要重新建立TCP连接从头开始</p><p>持久连接和非持久连接类似，都是在第三次握手时发生，将HTTP请求作为第三次握手的数据部分发给服务器，服务器收到请求之后将HTTP相应报文传输给客户。但是持久连接再需要请资源的时候就不需要建立新的TCP连接了</p><p><img src="https://img-blog.csdnimg.cn/2020070301065437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="持久连接的两种方式——非流水线和流水线"><a href="#持久连接的两种方式——非流水线和流水线" class="headerlink" title="持久连接的两种方式——非流水线和流水线"></a>持久连接的两种方式——非流水线和流水线</h4><p>非流水线就是发一个，确认一个，才能再发下一个<br>流水线就是一个个连着发，然后多个确认<br>和之前说过的停止等待协议，后退N帧协议和选择重传协议很像，忘了的话可以去复习一下<br>开个传送门<a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a></p><h3 id="5-2-4-HTTP的报文结构"><a href="#5-2-4-HTTP的报文结构" class="headerlink" title="5.2.4 HTTP的报文结构"></a>5.2.4 HTTP的报文结构</h3><p>开始行用于区别请求报文和响应报文。可以明显的看到两者第一行的东西都不一样</p><p>请求报文的方法是指命令，就是对所请求的对象进行什么操作，如获取/删除等等<br>URL就是之间说的资源标识符<br>版本是指使用的是什么版本的HTTP协议</p><p>CRLF相当于我们程序里面的<code>；</code>，标识一行的结束。同时，在整个首部行结束时，为了区别首部行和实体主体还会有一行单独的CRLF<br><img src="https://img-blog.csdnimg.cn/20200703011608294.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里举了请求报文的例子，和一些常用的状态码</p><p><img src="https://img-blog.csdnimg.cn/20200703012144697.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="6-本章思维导图"><a href="#6-本章思维导图" class="headerlink" title="6. 本章思维导图"></a>6. 本章思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20200703012244338.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="本章常用中英文对照"><a href="#本章常用中英文对照" class="headerlink" title="本章常用中英文对照"></a>本章常用中英文对照</h1><p>Server farm 服务器集群<br>Infrastructure 基础设施，或基础架构<br>Self-scalability 自扩展性<br>Timing 实时性<br>Connection-oriented service 面向连接的服务<br>Base HTML file 基本HTML文件<br>Stateless protocol 无状态协议<br>RTT (round-trip time ) 往返时间<br>User agents 用户代理<br>Mail servers 邮件服务器<br>Top-level domain (TLD) servers 顶级域名服务器<br>Authoritative DNS servers P161 权威域名服务器<br>Iterative queries 迭代查询<br>Resource records (RRs) 资源记录<br>Nonpersistent HTTP 非持久HTTP，或非坚持HTTP<br>Persistent HTTP 持久性HTTP，或坚持的HTTP<br>Peer-to-Peer (P2P) Network 对等网络<br>Socket programming 套接字编程</p><p>参考资料<br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">2019 王道考研 计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层</title>
      <link href="2021/02/05/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
      <url>2021/02/05/%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="本人计算机网络笔记总目录"><a href="#本人计算机网络笔记总目录" class="headerlink" title="本人计算机网络笔记总目录"></a>本人计算机网络笔记总目录</h1><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记Part1 概述</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106974965">计算机网络笔记Part2 物理层（Physical Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106993253">计算机网络笔记Part4 网络层（Network Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107034202">计算机网络笔记Part5 传输层（Transport Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107053479">计算机网络笔记Part6 应用层（Application Layer）</a></p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-传输层的意义"><a href="#1-1-传输层的意义" class="headerlink" title="1.1 传输层的意义"></a>1.1 传输层的意义</h2><p>网络层可以把数据从一个主机传送到另一个主机，但是没有和进程建立联系。<br>传输层就是讲进程和收到的数据联系到一起，使数据能够为应用服务<br>所以说传输层是主机才有的层次<br><img src="https://img-blog.csdnimg.cn/20200630094441510.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-2-传输层的两个协议"><a href="#1-2-传输层的两个协议" class="headerlink" title="1.2 传输层的两个协议"></a>1.2 传输层的两个协议</h2><p><img src="https://img-blog.csdnimg.cn/20200630094727731.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-3-传输层的寻址和端口"><a href="#1-3-传输层的寻址和端口" class="headerlink" title="1.3 传输层的寻址和端口"></a>1.3 传输层的寻址和端口</h2><p>端口号只用于计算机分辨本地进程，总共有2^16=65536种端口号，端口号有很多种，不能随便使用<br><img src="https://img-blog.csdnimg.cn/20200630095024127.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-3-1-常见的应用程序端口号"><a href="#1-3-1-常见的应用程序端口号" class="headerlink" title="1.3.1 常见的应用程序端口号"></a>1.3.1 常见的应用程序端口号</h3><p><img src="https://img-blog.csdnimg.cn/20200630095258962.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-UDP协议"><a href="#2-UDP协议" class="headerlink" title="2. UDP协议"></a>2. UDP协议</h1><h2 id="2-1-UDP概述"><a href="#2-1-UDP概述" class="headerlink" title="2.1 UDP概述"></a>2.1 UDP概述</h2><p>注释：<br>因为UDP一次发送一个完整报文不会分片，所以需要应用层传输过来的数据不要太大，否则网络层分片任务就很重，但是也不能太小，不然效率较低<br>UDP适合一些实时应用，因为实时应用延迟要求高，需要立即响应<br><img src="https://img-blog.csdnimg.cn/20200630095616466.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-UDP首部格式"><a href="#2-2-UDP首部格式" class="headerlink" title="2.2 UDP首部格式"></a>2.2 UDP首部格式</h2><p><img src="https://img-blog.csdnimg.cn/2020063010003161.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-2-1-UDP的校验位构成"><a href="#2-2-1-UDP的校验位构成" class="headerlink" title="2.2.1 UDP的校验位构成"></a>2.2.1 UDP的校验位构成</h3><p>这里的伪首部只是用来计算检验和的，计算完了就丢弃，可以见下UDP的校验方式<br><img src="https://img-blog.csdnimg.cn/20200630105441329.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-2-2-UDP校验方式"><a href="#2-2-2-UDP校验方式" class="headerlink" title="2.2.2 UDP校验方式"></a>2.2.2 UDP校验方式</h3><h4 id="总结一下步骤："><a href="#总结一下步骤：" class="headerlink" title="总结一下步骤："></a>总结一下步骤：</h4><h5 id="在发送端的时候："><a href="#在发送端的时候：" class="headerlink" title="在发送端的时候："></a>在发送端的时候：</h5><p>1.就是将每一行（4字节）拆成两部分，左右平均2字节大小，将这两字节数据写成二进制，那么2字节一共就需要2*8=16位。此时检验和没有计算，默认填充0，同时如果数据字段不整齐，则用0补齐，这样就可以写出几十行二进制数，如图中方所示<br>2.计算着几十行二进制数按<strong>二进制反码运算求和</strong>，二进制反码运算可以参考<br><a href="https://www.cnblogs.com/jcchan/p/10400504.html">二进制反码求和运算</a><br>得到的最后简介再反码，之后将<strong>反码之后的</strong>放入原来的检验和字段</p><h5 id="在接收端的时候"><a href="#在接收端的时候" class="headerlink" title="在接收端的时候"></a>在<strong>接收端</strong>的时候</h5><p><strong>与发送端的时候不同的是，此时检验和字段不是0了</strong><br>按照发送端的步骤再将所有数据写成二进制进行二进制反码运算求和<br>如果最后得到结果全1就是没问题，否则丢弃<br><img src="https://img-blog.csdnimg.cn/20200630105526400.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-TCP协议"><a href="#3-TCP协议" class="headerlink" title="3. TCP协议"></a>3. TCP协议</h1><h2 id="3-1-TCP协议的特点"><a href="#3-1-TCP协议的特点" class="headerlink" title="3.1 TCP协议的特点"></a>3.1 TCP协议的特点</h2><p>TCP必须要建立连接之后才可以进行数据交换，所以TCP是面向连接的<br><img src="https://img-blog.csdnimg.cn/20200630194247441.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>TCP传输数据是随机切割数据的<img src="https://img-blog.csdnimg.cn/2020063020421472.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-TCP报文段的首部"><a href="#3-2-TCP报文段的首部" class="headerlink" title="3.2 TCP报文段的首部"></a>3.2 TCP报文段的首部</h2><p>注释：<br>见上图，可以看到TCP是将数据随机分割后加上TCP头传输的，所以<br>序号就是为了标记这些随机分割之后的数据，这里把第一个字节的编号当成序号<br>确认号就是收到之后做一下标记，代表这之前的都收到了，希望收到的下一个编号的数据就是确认号打头的那个数据<br>偏移量就是为了标记一下距离TCP开始多少字节是数据，这里的单位是4B，这个偏移量就是TCP首部长度<br><img src="https://img-blog.csdnimg.cn/20200630210441410.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>窗口就是接收方告诉发送方，还有多少地方（缓存）可以放数据<br>紧急指针就是告诉TCP从哪里到哪里是紧急数据<br><img src="https://img-blog.csdnimg.cn/20200630212601599.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-1-TCP的六个控制位"><a href="#3-2-1-TCP的六个控制位" class="headerlink" title="3.2.1 TCP的六个控制位"></a>3.2.1 TCP的六个控制位</h3><h4 id="紧急位URG"><a href="#紧急位URG" class="headerlink" title="紧急位URG"></a>紧急位URG</h4><p>URG的特点就是让数据<strong>插队</strong>，URG=1的就会在缓存中被提前到第一个传输<br><img src="https://img-blog.csdnimg.cn/20200630211126589.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200630211151331.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="确认位ACK"><a href="#确认位ACK" class="headerlink" title="确认位ACK"></a>确认位ACK</h4><p><img src="https://img-blog.csdnimg.cn/20200630211354251.png" alt="在这里插入图片描述"></p><h4 id="推送为PSH"><a href="#推送为PSH" class="headerlink" title="推送为PSH"></a>推送为PSH</h4><p>就是接收端的URG，将PSH=1的数据尽快接收<br>注意一下，如果没有PSH，一般都是接收方缓存满了之后再将数据发送到主机<br><img src="https://img-blog.csdnimg.cn/20200630212045298.png" alt="在这里插入图片描述"></p><h4 id="复位RST"><a href="#复位RST" class="headerlink" title="复位RST"></a>复位RST</h4><p><img src="https://img-blog.csdnimg.cn/20200630212049447.png" alt="在这里插入图片描述"></p><h4 id="同步位SYN"><a href="#同步位SYN" class="headerlink" title="同步位SYN"></a>同步位SYN</h4><p>A和B主机要建立连接，就A先发一个报文，其中SYN=1<br>B收到之后也回复一个SYN=1的报文，代表接受连接<br><img src="https://img-blog.csdnimg.cn/20200630212152221.png" alt="在这里插入图片描述"></p><h4 id="终止位FIN"><a href="#终止位FIN" class="headerlink" title="终止位FIN"></a>终止位FIN</h4><p><img src="https://img-blog.csdnimg.cn/20200630212056958.png" alt="在这里插入图片描述"></p><h2 id="3-3-TCP连接管理"><a href="#3-3-TCP连接管理" class="headerlink" title="3.3 TCP连接管理"></a>3.3 TCP连接管理</h2><h3 id="3-3-1-TCP三次握手（建立连接）"><a href="#3-3-1-TCP三次握手（建立连接）" class="headerlink" title="3.3.1 TCP三次握手（建立连接）"></a>3.3.1 TCP三次握手（建立连接）</h3><p>注释：<br>第一段的意思是<br>SYN=1：(A)要建立连接了！<br>seq=x（随机）：因为还没有数据，所以写什么都无所谓</p><p>第二段的意思是<br>SYN=1：我(B)同意你(A)建立连接！<br>ACK=1：连接建立了，之后的ACK必须都置为1<br>seq=y（随机）：因为还没有数据，所以写什么都无所谓<br>ack=x+1：之前发送方(A)说发送的是第x位数据（虽然发送方是瞎说的），所以我(B)要的是x+1位数据</p><p>第三段的意思是<br>SYN=0：SYN只有在建立连接时才为1，其他时候均设为0<br>ACK=1：连接建立了，之后的ACK必须都置为1<br>seq=x+1：我(A)发送的报文段的第一个字节就是x+1<br>ack=y+1：之前接收方(B)说发送的是第y位数据（虽然接收方是瞎说的），所以我(A)要的是y+1位数据</p><p>注意一下，TCP是双向的，所以不存在绝对不变的发送方接收方，这里的两台主机都同时是发送方和接收方<br><img src="https://img-blog.csdnimg.cn/20200630213814996.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="TCP三次握手特定导致的SYN洪泛攻击"><a href="#TCP三次握手特定导致的SYN洪泛攻击" class="headerlink" title="TCP三次握手特定导致的SYN洪泛攻击"></a>TCP三次握手特定导致的SYN洪泛攻击</h4><p><img src="https://img-blog.csdnimg.cn/20200630214925395.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-2-TCP四次挥手（连接释放）"><a href="#3-3-2-TCP四次挥手（连接释放）" class="headerlink" title="3.3.2 TCP四次挥手（连接释放）"></a>3.3.2 TCP四次挥手（连接释放）</h3><p>注释：<br>第一段的意思是<br>FIN=1：(A)要释放连接了！<br>seq=u：发了好多数据，这里只是用u指代一下，这里u是有确定值的</p><p>第二段的意思是<br>ACK=1：连接建立了，之后的ACK必须都置为1<br>seq=v：发了好多数据，这里只是用v指代一下，这里v是有确定值的<br>ack=u+1：之前发送方(A)说发送的是第u位数据，所以我(B)要的是u+1位数据（尽管此时A已经决定释放连接了）</p><p>第三段的意思是<br>FIN=1：(B)要释放连接了！<br>ACK=1：连接建立了，之后的ACK必须都置为1<br>seq=w：发了好多数据，这里只是用w指代一下，这里w是有确定值的<br>ack=u+1：之前发送方(A)说发送的是第u位数据，所以我(B)要的是u+1位数据（因为A直接不发数据了，所以第二段第三段的ack都是u+1）</p><p>第四段的意思是<br>ACK=1：连接建立了，之后的ACK必须都置为1<br>seq=u+1：之前发的数据时第u位数据，B也要第u+1位数据，所以我发第u+1位数据<br>ack=w+1：之前发送方(B)说发送的是第w位数据，所以我(A)要的是w+1位数据</p><p>为什么需要等待计时2MSL？<br>因为这样可以保证B可以收到A的终止报文段进而进入关闭状态<br>比如说如果A的第四段报文丢失，那么等待一个MSL之后B就会重传第三段报文，花费小于1MSL之后A就会再收到第三段报文，之后就可以再次向B发送第四段报文提示B关闭连接<br><img src="https://img-blog.csdnimg.cn/20200630215522825.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-4-TCP可靠传输"><a href="#3-4-TCP可靠传输" class="headerlink" title="3.4 TCP可靠传输"></a>3.4 TCP可靠传输</h2><p>TCP是提供可靠传输，UDP这种本身还是不可靠传输的就再靠应用层解决了<br><img src="https://img-blog.csdnimg.cn/20200630220542461.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-4-1-序号"><a href="#3-4-1-序号" class="headerlink" title="3.4.1 序号"></a>3.4.1 序号</h3><p>就是TCP根据下方数据链路层的MTU（最大传输单元）来随即将数据切割成好几端并且进行编号<br><img src="https://img-blog.csdnimg.cn/20200630221424853.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-4-2-确认"><a href="#3-4-2-确认" class="headerlink" title="3.4.2 确认"></a>3.4.2 确认</h3><p>发送方每一次发送数据之后都需要接收方进行确认。<br>TCP使用的是累计确认机制，就是从第一个丢失的字节开始请求丢失的报文段。如图中456丢失，78到达，但仍然请求发送的数据序号是4<br><img src="https://img-blog.csdnimg.cn/20200630221636424.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-4-3-重传"><a href="#3-4-3-重传" class="headerlink" title="3.4.3 重传"></a>3.4.3 重传</h3><p>为什么要使用自适应算法？网络环境太复杂，路径又长又短，RTT设置短了照顾不了距离远的，RTT设置长了又导致网络利用率降低，所以使用RTTs</p><p><img src="https://img-blog.csdnimg.cn/20200630222205619.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-5-TCP流量控制"><a href="#3-5-TCP流量控制" class="headerlink" title="3.5 TCP流量控制"></a>3.5 TCP流量控制</h2><p>简单来说就是接收方可以动态的发送信息告诉发送方发送窗口的大小。<br>接收方接受不过来了就让发送方发送窗口小点，这样发送方发送的速率就慢下来了，接收方就有时间处理它的数据了<br>接受方处理完了也可以发送请求让发送方发送窗口大点，这样发送方发送的速率就快起来了，接收方就可以处理更多数据而不是空闲等着收数据了<br><img src="https://img-blog.csdnimg.cn/202006302226272.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-5-1-计时器"><a href="#3-5-1-计时器" class="headerlink" title="3.5.1 计时器"></a>3.5.1 计时器</h3><p>在本例子中，使用的累计确认机制（一次回复收到ack=201）和三次流量控制机制。<br>但是有一个情况就是，如果最后B不允许A再发送数据了，B在处理完数据之后想要恢复窗口大小时发送的有rwnd大小的数据报丢了怎么办？此时A有B的指令在前，发送窗口为0无法发送数据，B也在等待A回复，造成了类似死锁的现象<br>解决方法：使用计时器<br><img src="https://img-blog.csdnimg.cn/20200630223616929.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-6-TCP拥塞控制"><a href="#3-6-TCP拥塞控制" class="headerlink" title="3.6 TCP拥塞控制"></a>3.6 TCP拥塞控制</h2><p>流量控制是对单独一个来说的，拥塞控制是一群<br><img src="https://img-blog.csdnimg.cn/20200630224242515.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-6-1-拥塞控制四种算法"><a href="#3-6-1-拥塞控制四种算法" class="headerlink" title="3.6.1 拥塞控制四种算法"></a>3.6.1 拥塞控制四种算法</h3><p>这里虽然是四种算法，但是通常是两两结合进行使用<br><img src="https://img-blog.csdnimg.cn/20200630232411944.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-6-2-慢开始和拥塞避免"><a href="#3-6-2-慢开始和拥塞避免" class="headerlink" title="3.6.2 慢开始和拥塞避免"></a>3.6.2 慢开始和拥塞避免</h3><p>这里开始时以<strong>指数形式增长</strong>，ssthresh的意思是慢开始门限，代表从这个地方注入的报文段就比较多了，需要开始慢速增加了。<br>之后一段都是<strong>线性增长</strong>，每次增加1，直至达到网络拥塞状态<br>瞬间将cwnd设置为1，同时调整原来的ssthresh的值到之前达到网络拥塞状态的1/2,（这里是24降到12）<br>重复以上步骤，但是注意此时ssthresh变了之后线性增长的转折点也变了<br><img src="https://img-blog.csdnimg.cn/20200630232910475.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-6-3-快重传和快恢复"><a href="#3-6-3-快重传和快恢复" class="headerlink" title="3.6.3 快重传和快恢复"></a>3.6.3 快重传和快恢复</h3><p>这里和上面的慢开始和拥塞避免的一开始步骤差不多，都是先指数增长再转变为线性增长。<br>不同的点是快重传和快恢复算法是在收到连续的ack确认之后执行，这里的ack就是冗余ack，冗余ack的特点是如果多次对某一段请求的数据没有被收到，达到一定数目之后就会立即执行重传。但是此时只是降到现在cwnd的一半，再重新线性增长。而不是像慢开始和拥塞避免的从头开始<br><img src="https://img-blog.csdnimg.cn/20200630233701386.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-本章思维导图"><a href="#4-本章思维导图" class="headerlink" title="4. 本章思维导图"></a>4. 本章思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20200630234217765.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="本文常用名词中英文对照"><a href="#本文常用名词中英文对照" class="headerlink" title="本文常用名词中英文对照"></a>本文常用名词中英文对照</h1><p>Multiplexing and demultiplexing 复用与分用<br>Positive acknowledgments 肯定确认<br>Negative acknowledgments 否定确认<br>Countdown timer （倒数）计时器<br>Cumulative acknowledgment 累积确认<br>Receive buffer 接收缓冲区，或接收缓存<br>Resource-management cells 资源管理单元<br>Source (port number) 源端口号<br>Destination (port number) 目的端口号<br>Checksum 校验和<br>Pipelined protocols 流水线（型）协议<br>Go-back-N 回退N<br>Selective Repeat 选择重传<br>Timeout （定时器）超时<br>Fast Retransmit 快速重传<br>Flow Control 流量控制<br>Three way handshake 三次握手<br>sequence number 序列号（简写为seq）<br>acknowledgement number 确认号（简写为ack；注意与大小的ACK不同）<br>Congestion Control 拥塞控制<br>additive increase, multiplicative decrease 加性增乘性减<br>Slow Start 慢启动<br>congestion-avoidance 拥塞避免<br>fast recovery 快速恢复<br>duplicate (ACK) 冗余（ACK）<br>Random Early Detection 随机早期检测</p><p>参考资料<br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">2019 王道考研 计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="2021/02/05/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>2021/02/05/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="本人计算机网络笔记总目录"><a href="#本人计算机网络笔记总目录" class="headerlink" title="本人计算机网络笔记总目录"></a>本人计算机网络笔记总目录</h1><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记Part1 概述</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106974965">计算机网络笔记Part2 物理层（Physical Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106993253">计算机网络笔记Part4 网络层（Network Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107034202">计算机网络笔记Part5 传输层（Transport Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107053479">计算机网络笔记Part6 应用层（Application Layer）</a></p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>注释：<br>数据报和分组的关系：分组是一段比较长的数据，将它进行切割成一段段之后就得到数据报<br>功能一就是让数据在路由器之间走最佳的路径<br>功能二就是让不同的设备（手机，电脑，平板等）都能正常连接<br>功能三见图中解释<br>开环控制就是在拥塞之前就提前设计解决<br>闭环控制就是在拥塞时自动调整解决问题<br><img src="https://img-blog.csdnimg.cn/20200628100232914.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>OSI参考模型</p><p>各层次的传输单元</p><p>应用层</p><p>报文</p><p>传输层</p><p>报文段</p><p>网络层</p><p>IP数据报，分组（如果IP数据报太大就切割成分组）</p><p>数据链路层</p><p>帧</p><p>物理层</p><p>比特流</p><h1 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2. 数据交换方式"></a>2. 数据交换方式</h1><p>为什么要进行数据交换？因为每个节点之间都拉网线太麻烦了也不实际，所以通过大量交换设备互联进行数据交换<br><img src="https://img-blog.csdnimg.cn/20200628101240749.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-1-电路交换"><a href="#2-1-电路交换" class="headerlink" title="2.1 电路交换"></a>2.1 电路交换</h2><p>常见的例子：打电话<br>注释：<br>链路支持多路复用（可参考数据链路层的TDM等）<br>特点是独占资源，因为两者建立了连接<br><img src="https://img-blog.csdnimg.cn/20200628134105730.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-报文交换"><a href="#2-2-报文交换" class="headerlink" title="2.2 报文交换"></a>2.2 报文交换</h2><p>注释：报文发送的过程<br>1.源先根据报文加上ip地址，物理地址等，通过物理层发送<br>2.交换机收到报文之后，先进行存储，等待链路空闲之后进行转发，但是转发的路径不是固定的，是比较随机的<br>3.最后通过许多交换机最终到达目的地<br><img src="https://img-blog.csdnimg.cn/20200628134558218.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3-分组交换"><a href="#2-3-分组交换" class="headerlink" title="2.3 分组交换"></a>2.3 分组交换</h2><p>分组交换和报文交换基本相同，就是将报文切割之后再进行发送<br><img src="https://img-blog.csdnimg.cn/20200628135456570.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-分组交换和报文交换的具体计算对比"><a href="#2-4-分组交换和报文交换的具体计算对比" class="headerlink" title="2.4 分组交换和报文交换的具体计算对比"></a>2.4 分组交换和报文交换的具体计算对比</h2><p>注释：是怎么计算的？<br>报文交换：一共三段，每段都需要10000bit/1000bps=10s，三段就是3x10=30s<br>分组交换：可以分为两段，一个是第一个数据开始发到最后一个数据从源发出，一段是最后一个数据到达目的地。第一段总时间是10000bit/1000bps=10s，第二段总时间是（10/1000）*2=0.02s，所以总时间是10.02s。<br>理解一下，这里就是报文交换的时候，由于报文没有分割，所以即使先到的数据也不能先发走，只能等到最后一段报文全部到了之后才能一起走，相对于分组交换明显拖慢了前面数据的速度，所以导致报文交换明显慢于分组交换<br>可以看到分组交换明显快于报文交换，所以我们通常使用分组交换<br><img src="https://img-blog.csdnimg.cn/20200628140059520.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-4-1-分组传输的两种传输方式-数据报与虚电路"><a href="#2-4-1-分组传输的两种传输方式-数据报与虚电路" class="headerlink" title="2.4.1 分组传输的两种传输方式-数据报与虚电路"></a>2.4.1 分组传输的两种传输方式-数据报与虚电路</h3><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><p><img src="https://img-blog.csdnimg.cn/20200628141302754.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628151011994.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="数据报"><a href="#数据报" class="headerlink" title="数据报"></a>数据报</h4><p><img src="https://img-blog.csdnimg.cn/20200628150810177.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h4><p><img src="https://img-blog.csdnimg.cn/20200628150941414.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-路由算法和路由协议概述"><a href="#3-路由算法和路由协议概述" class="headerlink" title="3. 路由算法和路由协议概述"></a>3. 路由算法和路由协议概述</h1><p>路由算法就是让路由知道收到报文之后下一步怎么走<br><img src="https://img-blog.csdnimg.cn/2020062815165630.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>AS就是多个路由器之间构成的单独的小圈子，圈子内使用自己的协议，圈子和圈子之间用的是BGP协议<br><img src="https://img-blog.csdnimg.cn/2020062815185760.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-1-RIP协议和距离向量算法"><a href="#3-1-RIP协议和距离向量算法" class="headerlink" title="3.1 RIP协议和距离向量算法"></a>3.1 RIP协议和距离向量算法</h2><h3 id="3-1-1-RIP协议概述"><a href="#3-1-1-RIP协议概述" class="headerlink" title="3.1.1 RIP协议概述"></a>3.1.1 RIP协议概述</h3><p>通过交换信息构建路由表<br><img src="https://img-blog.csdnimg.cn/20200629105637285.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-1-2-如何建立路由表"><a href="#3-1-2-如何建立路由表" class="headerlink" title="3.1.2 如何建立路由表"></a>3.1.2 如何建立路由表</h3><p><img src="https://img-blog.csdnimg.cn/20200629105916914.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-1-3-RIP协议报文格式"><a href="#3-1-3-RIP协议报文格式" class="headerlink" title="3.1.3 RIP协议报文格式"></a>3.1.3 RIP协议报文格式</h3><p><img src="https://img-blog.csdnimg.cn/20200629111259211.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-1-4-RIP协议特点"><a href="#3-1-4-RIP协议特点" class="headerlink" title="3.1.4 RIP协议特点"></a>3.1.4 RIP协议特点</h3><p>就是来回更新路由表，错误信息被覆盖，导致直至达到距离上限强制错误时才可以得知出错<br><img src="https://img-blog.csdnimg.cn/20200629111526974.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629111637786.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629111700886.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629111718198.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-1-5-距离向量算法"><a href="#3-1-5-距离向量算法" class="headerlink" title="3.1.5 距离向量算法"></a>3.1.5 距离向量算法</h3><p>注释：<br>为什么改地址？因为图中是从x得到的信息<br>为什么距离固定+1？因为路由器只从相邻路由器之间获取RIP报文，举例只会是1<br>为什么下一跳是x就要替换？因为网络环境不断变化，可能这次某个节点挂掉，所以保持最新的<br>为什么下一跳不是x时有更新和不处理两种手段？因为这样可以提高效率，比原来快就换，比原来慢就保留原来的，也可以理解<br><img src="https://img-blog.csdnimg.cn/20200629110232985.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020062911085927.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629111155473.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-OSPF协议和链路状态算法"><a href="#3-2-OSPF协议和链路状态算法" class="headerlink" title="3.2 OSPF协议和链路状态算法"></a>3.2 OSPF协议和链路状态算法</h2><h3 id="3-2-1-OSPF协议概述"><a href="#3-2-1-OSPF协议概述" class="headerlink" title="3.2.1 OSPF协议概述"></a>3.2.1 OSPF协议概述</h3><p><img src="https://img-blog.csdnimg.cn/20200629111933218.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-2-OSPF的其他特点"><a href="#3-2-2-OSPF的其他特点" class="headerlink" title="3.2.2 OSPF的其他特点"></a>3.2.2 OSPF的其他特点</h3><p>为什么OSPF收敛速度快？因为它只是刷新一下链路状态，得知其是否连通，不需要和RIP一样进行对照，而是直接通过Dijilstra算法来自己算出路径<br><img src="https://img-blog.csdnimg.cn/20200629115353647.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-3-链路状态路由算法"><a href="#3-2-3-链路状态路由算法" class="headerlink" title="3.2.3 链路状态路由算法"></a>3.2.3 链路状态路由算法</h3><p>了解即可<br><img src="https://img-blog.csdnimg.cn/20200629115012290.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-4-OSPF区域"><a href="#3-2-4-OSPF区域" class="headerlink" title="3.2.4 OSPF区域"></a>3.2.4 OSPF区域</h3><p>了解即可<br><img src="https://img-blog.csdnimg.cn/20200629115212801.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-5-OSPF分组"><a href="#3-2-5-OSPF分组" class="headerlink" title="3.2.5 OSPF分组"></a>3.2.5 OSPF分组</h3><p>了解即可<br><img src="https://img-blog.csdnimg.cn/20200629115305114.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-3-BGP协议"><a href="#3-3-BGP协议" class="headerlink" title="3.3 BGP协议"></a>3.3 BGP协议</h2><h3 id="3-3-1-BGP协议简介"><a href="#3-3-1-BGP协议简介" class="headerlink" title="3.3.1 BGP协议简介"></a>3.3.1 BGP协议简介</h3><p><img src="https://img-blog.csdnimg.cn/20200629202605883.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-2-BGP协议交换信息的过程"><a href="#3-3-2-BGP协议交换信息的过程" class="headerlink" title="3.3.2 BGP协议交换信息的过程"></a>3.3.2 BGP协议交换信息的过程</h3><p>了解即可，只需要知道BGP交换协议里面交换的是一组路径向量<br><img src="https://img-blog.csdnimg.cn/20200629203846439.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629202751648.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629202816442.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-3-BGP协议报文格式"><a href="#3-3-3-BGP协议报文格式" class="headerlink" title="3.3.3 BGP协议报文格式"></a>3.3.3 BGP协议报文格式</h3><p>BGP是应用层协议<br><img src="https://img-blog.csdnimg.cn/2020062920290996.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-4-BGP协议特点"><a href="#3-3-4-BGP协议特点" class="headerlink" title="3.3.4 BGP协议特点"></a>3.3.4 BGP协议特点</h3><p><img src="https://img-blog.csdnimg.cn/20200629203255760.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-5-BGP的四种报文"><a href="#3-3-5-BGP的四种报文" class="headerlink" title="3.3.5 BGP的四种报文"></a>3.3.5 BGP的四种报文</h3><p><img src="https://img-blog.csdnimg.cn/20200629203720460.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-4-三种路由协议的比较"><a href="#3-4-三种路由协议的比较" class="headerlink" title="3.4 三种路由协议的比较"></a>3.4 三种路由协议的比较</h2><p><img src="https://img-blog.csdnimg.cn/20200629204214191.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629204241177.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-IP数据报"><a href="#4-IP数据报" class="headerlink" title="4. IP数据报"></a>4. IP数据报</h1><h2 id="4-1-IP数据报格式"><a href="#4-1-IP数据报格式" class="headerlink" title="4.1 IP数据报格式"></a>4.1 IP数据报格式</h2><p>注释：</p><p>名称</p><p>注释</p><p>大小</p><p>版本 Version</p><p>ipv4或者ipv6</p><p>4位</p><p>首部长度 IHL</p><p>此处数值再乘以4才是真正大小，同时因为IP数据报固定长度为20字节，所以此处最小值为5，即二进制的0101</p><p>4位</p><p>区分服务 DSCP + ECN</p><p>希望获得哪种服务，用的比较少</p><p>8位</p><p>总长度 Total Length</p><p>首部+数据的长度，最大为2^16-1=65535</p><p>16位</p><p>标识 Identification</p><p>用来表示是哪一个数据报的分片，不同的分片标识各不相同</p><p>8位</p><p>标志 Flags</p><p>用来表示是否分片和分片是否结束</p><p>3位，但实际有用的只有后两位</p><p>片偏移 Fragment Offset</p><p>用来标记分片之后，该分片在原来的数据报的位置，以8字节为单位</p><p>13位</p><p>生存时间 Time To Live</p><p>即TTL，没经过一个路由器TTL-1,0时自动放弃，根据系统不同默认的TTL不同</p><p>8位</p><p>协议 Protocol</p><p>用来标记协议名的字段值，如TCP,UDP,ICMP等等</p><p>8位</p><p>首部检验和 Header Checksum</p><p>检验首部的字段是否出错，出错就丢弃此数据报</p><p>源地址 Source IP Address</p><p>发送方ip地址</p><p>32位</p><p>目的地址 Destination IP Address</p><p>接收方ip地址</p><p>32位</p><p>可选字段 Options</p><p>用来排错等安全检测</p><p>未知，可在0-40位之间</p><p>填充</p><p>将数据报对齐成4字节的整数倍，数值全部为0</p><p>未知，根据可选字段来定</p><p><img src="https://img-blog.csdnimg.cn/20200628163753975.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200628163922707.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>计算偏移量时记住是以0开始的就行，以每一篇最开始的除以8得到的数值就是偏移量<br>MF和DF的定义见上图<br><img src="https://img-blog.csdnimg.cn/20200628164237523.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="5-IP"><a href="#5-IP" class="headerlink" title="5. IP"></a>5. IP</h1><h2 id="5-1-ipv4地址"><a href="#5-1-ipv4地址" class="headerlink" title="5.1 ipv4地址"></a>5.1 ipv4地址</h2><p><strong>全球唯一的</strong>表示某一个主机或者路由器接口的编码</p><h3 id="5-1-1-ip地址分类"><a href="#5-1-1-ip地址分类" class="headerlink" title="5.1.1 ip地址分类"></a>5.1.1 ip地址分类</h3><p><img src="https://img-blog.csdnimg.cn/20200628165300355.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-1-2-特殊ip地址"><a href="#5-1-2-特殊ip地址" class="headerlink" title="5.1.2 特殊ip地址"></a>5.1.2 特殊ip地址</h3><p><img src="https://img-blog.csdnimg.cn/2020062816534040.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-1-3-私有ip地址"><a href="#5-1-3-私有ip地址" class="headerlink" title="5.1.3 私有ip地址"></a>5.1.3 私有ip地址</h3><p><img src="https://img-blog.csdnimg.cn/20200628165703918.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解释一下<br>为什么A类最大是126.xxx.xxx.xxx？<br>因为网络号最开始第一位是0，一共八位，所以二进制表示位0xxxxxxx，最大就是2^7-1=127，但是因为127.xxx.xxx.xxx是特殊ip地址，所以将其去掉<br>为什么B类最大是191.255.xxx.xxx？<br>因为网络号最开始第一位是10，一共八位，所以二进制表示位10xxxxxx，最大就是10111111=191，最小就是10000000=128，无特殊ip地址<br>为什么C类最大是223.255.xxx.xxx？<br>因为网络号最开始第一位是110，一共八位，所以二进制表示位110xxxxx，最大就是11011111=223，最小就是10000000=192，无特殊ip地址</p><p><img src="https://img-blog.csdnimg.cn/20200628173140760.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-2-网络地址转换NAT"><a href="#5-2-网络地址转换NAT" class="headerlink" title="5.2 网络地址转换NAT"></a>5.2 网络地址转换NAT</h2><p>注释：连接内网和外网，就是找个代理的用它的ip地址与外面收发数据<br>NAT需要构建NAT转换表，既要存广域网（WAN，外网）也要存局域网（LAN，内网）的ip地址和端口号<br><img src="https://img-blog.csdnimg.cn/20200628203040212.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-3-子网划分和子网掩码"><a href="#5-3-子网划分和子网掩码" class="headerlink" title="5.3 子网划分和子网掩码"></a>5.3 子网划分和子网掩码</h2><h3 id="5-3-1-为什么需要子网划分"><a href="#5-3-1-为什么需要子网划分" class="headerlink" title="5.3.1 为什么需要子网划分"></a>5.3.1 为什么需要子网划分</h3><p>总结一下，就是ip不够用，所以需要额外整个子网扩展ip<br><img src="https://img-blog.csdnimg.cn/20200628203445257.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注释：<br>为什么子网好能全0或者全1：因为CIDR编址（可见下一段）<br>为什么主机号不能全0或者全1：因为全0代表本网络，全1代表广播分组<br><img src="https://img-blog.csdnimg.cn/20200628203628674.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-3-2-子网掩码"><a href="#5-3-2-子网掩码" class="headerlink" title="5.3.2 子网掩码"></a>5.3.2 子网掩码</h3><p>子网掩码就是用来和ip地址一起计算子网的地址的<br>方法就是讲子网掩码逐位写成二进制然后而原来ip地址进行与运算，就可以得到子网ip地址<br>因为255是11111111，所以如果写着255的话，ip地址和子网ip地址对应的地方的数值就相同<br><img src="https://img-blog.csdnimg.cn/20200628204154511.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这道题可以看出来，即使子网掩码不同，相同ip地址对应的子网ip地址也可能相同<br>但是子网掩码不同，划分的<strong>子网数目不同</strong><br>为什么划分的子网数目不同？或者说怎么算划分的子网位数目？<br>以255.255.192.0为例，255是11111111即八个1,192是11000000即2个1，一共是8_2+2=18个1，一共有32位地址，所以剩余有32-18=14位<br>以255.255.224.0为例，255是11111111即八个1,224是11100000即3个1，一共是8_2+3=19个1，一共有32位地址，所以剩余有32-19=13位<br><img src="https://img-blog.csdnimg.cn/20200628204442714.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这道题先将255.255.252.0计算出一共有8+8+6=22位网络号位<br>所以就有32-22=10位主机号位<br>将180.80.77.55解析，可以知道在77部分某部分开始会用来表示主机号位<br>77的二进制是0100 1101，因为一共有22位网络号位，所以010011 （此处分开） 01，从这个01开始是主机号位。<br>所以用来表示子网ip地址的应该是180.80.76（010011 00）.xxx PS注意76括号内后两位二进制00<br>但是本体是发布广播地址，所以主机号全部都要是1<br>所以应该是180.80.79（010011 11）.255（11111111）注意79括号内后两位二进制11<br><img src="https://img-blog.csdnimg.cn/2020062821061359.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注释：<br>1.这里特定主机路由就是指找特定的处理这里这个ip地址的路由<br>2.默认路由会将这个数据报发给另一个路由，直至找到对应的路由，或者TTL耗尽被丢弃<br><img src="https://img-blog.csdnimg.cn/20200628212251576.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-4-无分类编制CIDR"><a href="#5-4-无分类编制CIDR" class="headerlink" title="5.4 无分类编制CIDR"></a>5.4 无分类编制CIDR</h2><p><img src="https://img-blog.csdnimg.cn/20200628213057516.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用CIDR可以聚合网络<br>如图，通过缩短前缀，R1和R2就可以合并在206.1.0.0/16的子网下<br>但是这样转发表之中就会有多个匹配结果，所以我们使用<strong>最长前缀匹配</strong><br><img src="https://img-blog.csdnimg.cn/20200628214310460.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最长前缀匹配就是在计算后符合同一子网的时候，选前缀越长的<br>这道题选B<br><img src="https://img-blog.csdnimg.cn/20200628214654941.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为本网络是192.168.5.0/24，就是192.168.5.（0000 0000）/24，将248写成二进制是11111 000，有五个1，所以前五位都可以作为子网的编号，剩下的三位就是用来分配子网内剩余的地址了，因为不能全0或者全1，所以还要减2<br><img src="https://img-blog.csdnimg.cn/20200628220204999.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-5-ARP协议"><a href="#5-5-ARP协议" class="headerlink" title="5.5 ARP协议"></a>5.5 ARP协议</h2><p><img src="https://img-blog.csdnimg.cn/2020062822274549.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628222947367.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-6-DHCP协议"><a href="#5-6-DHCP协议" class="headerlink" title="5.6 DHCP协议"></a>5.6 DHCP协议</h2><p><img src="https://img-blog.csdnimg.cn/20200628223418552.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-7-ICMP协议"><a href="#5-7-ICMP协议" class="headerlink" title="5.7 ICMP协议"></a>5.7 ICMP协议</h2><h3 id="5-7-1-ICMP协议概述"><a href="#5-7-1-ICMP协议概述" class="headerlink" title="5.7.1 ICMP协议概述"></a>5.7.1 ICMP协议概述</h3><p>ICMP，IGMP处于网络层和传输层之间，就是为了更好地转发ip数据报和提高交互成功的几率<br><img src="https://img-blog.csdnimg.cn/20200628223751853.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-7-2-ICMP差错报告报文"><a href="#5-7-2-ICMP差错报告报文" class="headerlink" title="5.7.2 ICMP差错报告报文"></a>5.7.2 ICMP差错报告报文</h3><h4 id="ICMP差错报告报文如何与IP数据报结合"><a href="#ICMP差错报告报文如何与IP数据报结合" class="headerlink" title="ICMP差错报告报文如何与IP数据报结合"></a>ICMP差错报告报文如何与IP数据报结合</h4><p><img src="https://img-blog.csdnimg.cn/20200629094024680.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="五种ICMP差错报文"><a href="#五种ICMP差错报文" class="headerlink" title="五种ICMP差错报文"></a>五种ICMP差错报文</h4><p>其中源点抑制已废弃不用<br><img src="https://img-blog.csdnimg.cn/20200629083834897.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="四种不发送ICMP差错报文的情况"><a href="#四种不发送ICMP差错报文的情况" class="headerlink" title="四种不发送ICMP差错报文的情况"></a>四种不发送ICMP差错报文的情况</h4><p>注释：组播是指由一点到多点，但不是无脑发到所有点，无脑发到所有点的是广播，组播有筛选条件</p><p><img src="https://img-blog.csdnimg.cn/20200629094235772.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-7-3-ICMP询问报文"><a href="#5-7-3-ICMP询问报文" class="headerlink" title="5.7.3 ICMP询问报文"></a>5.7.3 ICMP询问报文</h3><h4 id="四种ICMP询问报文"><a href="#四种ICMP询问报文" class="headerlink" title="四种ICMP询问报文"></a>四种ICMP询问报文</h4><p>后两种是掩码地址请求和回答报文，路由器询问和通告报文，这两个已经废弃不再使用<br><img src="https://img-blog.csdnimg.cn/20200629094521489.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-7-4-ICMP的应用"><a href="#5-7-4-ICMP的应用" class="headerlink" title="5.7.4 ICMP的应用"></a>5.7.4 ICMP的应用</h3><p>1.ping命令：测试两个主机之间连通性，使用了<strong>ICMP回送请求和回答报文</strong><br>2.traceroute命令：跟踪一个分组从原点到终点的路径，使用了<strong>ICMP时间超过差错报告报文</strong><br><a href="https://blog.csdn.net/llq_200/article/details/81034345">traceroute命令讲解</a></p><h1 id="6-IPV6"><a href="#6-IPV6" class="headerlink" title="6. IPV6"></a>6. IPV6</h1><h2 id="6-1-为什么会有IPV6"><a href="#6-1-为什么会有IPV6" class="headerlink" title="6.1 为什么会有IPV6"></a>6.1 为什么会有IPV6</h2><p>就是IPV4地址用完了，从根本上增加ip地址数目，之前讲的NAT和CIDR也只是在IPV4的基础上扩展了IPV4地址数目，治标不治本<br><img src="https://img-blog.csdnimg.cn/20200629095311686.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-2-IPV6地址表示形式"><a href="#6-2-IPV6地址表示形式" class="headerlink" title="6.2 IPV6地址表示形式"></a>6.2 IPV6地址表示形式</h2><p><img src="https://img-blog.csdnimg.cn/20200629102621942.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-3-IPV6数据报格式"><a href="#6-3-IPV6数据报格式" class="headerlink" title="6.3 IPV6数据报格式"></a>6.3 IPV6数据报格式</h2><p>名称</p><p>作用</p><p>位数</p><p>版本 Version</p><p>知名协议版本，此处因为是ipv6所以总是6</p><p>4位</p><p>优先级 Traffic Class</p><p>又来区分数据报的类型和优先级</p><p>8位</p><p>流标签 Flow Label</p><p>和ipv4标识某个数据报分片不同，这是对于一整个数据报流的标记</p><p>19位</p><p>有效载荷长度 Payload Length</p><p>指的是扩展首部+数据部分的大小，和ipv4的总长度和首部长度都不同，ipv6的首部长度是固定的40字节</p><p>16位</p><p>下一个首部 Next Header</p><p>基本首部的下一个首部指的是有效载荷里标记的的扩展首部，有效载荷里的扩展首部再指向有效载荷里标记的的扩展首部，直至最后指向数据</p><p>8位</p><p>跳数限制 Hop Limit</p><p>基本相当于ipv4当中的TTL，每到一个路由器-1.减到0时丢弃</p><p>7位</p><p>源地址 Source Address</p><p>发送方ipv6地址</p><p>128位</p><p>目标地址 Destination Address</p><p>接收方ipv6地址</p><p>128位</p><p><img src="https://img-blog.csdnimg.cn/20200629095626140.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-4-IPV4和IPV6的区别"><a href="#6-4-IPV4和IPV6的区别" class="headerlink" title="6.4 IPV4和IPV6的区别"></a>6.4 IPV4和IPV6的区别</h2><p><img src="https://img-blog.csdnimg.cn/20200629102457217.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-5-IPV6基本地址类型"><a href="#6-5-IPV6基本地址类型" class="headerlink" title="6.5 IPV6基本地址类型"></a>6.5 IPV6基本地址类型</h2><p>名称</p><p>作用</p><p>要求</p><p>单播</p><p>一对一通信</p><p>可做源地址，目的地址</p><p>多播</p><p>一对多通信，以前的广播地址当做覆盖所有主机的多播</p><p>可做目的地址</p><p>任播</p><p>一对多当中的一个通信，看似一对多，实则一对一</p><p>可做目的地址</p><h2 id="6-6-IPV4和IPV6之间的过渡"><a href="#6-6-IPV4和IPV6之间的过渡" class="headerlink" title="6.6 IPV4和IPV6之间的过渡"></a>6.6 IPV4和IPV6之间的过渡</h2><p>如果是ipv6的数据报到了ipv4，就用ipv4重新封装，把ipv6数据报前面加上ipv4伪装成ipv4数据报继续传输，直至到了ipv6路由再解开ipv4伪装<br><img src="https://img-blog.csdnimg.cn/20200629103250467.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="7-IP组播（多播）"><a href="#7-IP组播（多播）" class="headerlink" title="7. IP组播（多播）"></a>7. IP组播（多播）</h1><h2 id="7-1-什么是组播"><a href="#7-1-什么是组播" class="headerlink" title="7.1 什么是组播"></a>7.1 什么是组播</h2><p>单播只能一对一，广播必须一对全部，组播就可以是一对全部中的一部分<br><img src="https://img-blog.csdnimg.cn/20200629205037734.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>辅助理解：单播所占资源多<br><img src="https://img-blog.csdnimg.cn/20200629210027661.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>组播明显减轻了压力<br><img src="https://img-blog.csdnimg.cn/20200629210108353.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-2-IP组播地址"><a href="#7-2-IP组播地址" class="headerlink" title="7.2 IP组播地址"></a>7.2 IP组播地址</h2><p><img src="https://img-blog.csdnimg.cn/20200629210330405.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-3-硬件组播"><a href="#7-3-硬件组播" class="headerlink" title="7.3 硬件组播"></a>7.3 硬件组播</h2><p>就像全F的mac地址代表广播一样，00-10-5E打头的MAC地址就代表组播<br>7为什么最大是00-10-5E-7F-FF-FF？因为只有最后23位决定</p><p><img src="https://img-blog.csdnimg.cn/20200629210827844.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-4-IGMP协议与组播路由选择协议"><a href="#7-4-IGMP协议与组播路由选择协议" class="headerlink" title="7.4 IGMP协议与组播路由选择协议"></a>7.4 IGMP协议与组播路由选择协议</h2><h3 id="7-4-1-IGMP协议"><a href="#7-4-1-IGMP协议" class="headerlink" title="7.4.1 IGMP协议"></a>7.4.1 IGMP协议</h3><p>注释：IGMP只能知道有没有组播组成员，对有几个组播组成员，成员在哪个地方都不知道<br><img src="https://img-blog.csdnimg.cn/20200629211352630.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200629211613284.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-4-2-组播路由选择协议"><a href="#7-4-2-组播路由选择协议" class="headerlink" title="7.4.2 组播路由选择协议"></a>7.4.2 组播路由选择协议</h3><p>有了这个，成员可以自行找到转发组，自行决定参加哪个组播（就像电视机选台一样）<br><img src="https://img-blog.csdnimg.cn/20200629211740525.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629211913501.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="8-移动IP"><a href="#8-移动IP" class="headerlink" title="8. 移动IP"></a>8. 移动IP</h1><p>移动IP<strong>不等于</strong>动态IP（DHCP获得的）<br>移动IP的可以让用户因为地理原因等等，即使不在内网也可以访问内网的东西</p><h2 id="8-1-移动IP的相关术语"><a href="#8-1-移动IP的相关术语" class="headerlink" title="8.1 移动IP的相关术语"></a>8.1 移动IP的相关术语</h2><p><img src="https://img-blog.csdnimg.cn/20200629212218336.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-2-移动IP通信过程"><a href="#8-2-移动IP通信过程" class="headerlink" title="8.2 移动IP通信过程"></a>8.2 移动IP通信过程</h2><p><img src="https://img-blog.csdnimg.cn/20200629212604875.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629220550874.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="9-网络层设备"><a href="#9-网络层设备" class="headerlink" title="9. 网络层设备"></a>9. 网络层设备</h1><h2 id="9-1-路由器"><a href="#9-1-路由器" class="headerlink" title="9.1 路由器"></a>9.1 路由器</h2><h3 id="9-1-1-路由器的构造"><a href="#9-1-1-路由器的构造" class="headerlink" title="9.1.1 路由器的构造"></a>9.1.1 路由器的构造</h3><p><img src="https://img-blog.csdnimg.cn/20200629220712123.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="9-1-2-路由器的输入输出端口构造"><a href="#9-1-2-路由器的输入输出端口构造" class="headerlink" title="9.1.2 路由器的输入输出端口构造"></a>9.1.2 路由器的输入输出端口构造</h3><p><img src="https://img-blog.csdnimg.cn/20200629221015438.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629221022561.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="9-1-3-集线器，网桥，路由表几层设备比较"><a href="#9-1-3-集线器，网桥，路由表几层设备比较" class="headerlink" title="9.1.3 集线器，网桥，路由表几层设备比较"></a>9.1.3 集线器，网桥，路由表几层设备比较</h3><p><img src="https://img-blog.csdnimg.cn/20200629221130818.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="9-1-4-路由器的路由表和转发表"><a href="#9-1-4-路由器的路由表和转发表" class="headerlink" title="9.1.4 路由器的路由表和转发表"></a>9.1.4 路由器的路由表和转发表</h3><p>这里实际上就是对前面知识的复习了<br><img src="https://img-blog.csdnimg.cn/20200629221253590.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="10-本章思维导图"><a href="#10-本章思维导图" class="headerlink" title="10. 本章思维导图"></a>10. 本章思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20200629221414448.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="本章常用名词中英文对照"><a href="#本章常用名词中英文对照" class="headerlink" title="本章常用名词中英文对照"></a>本章常用名词中英文对照</h1><p>Forwarding table 转发表<br>Virtual-circuit networks 虚电路网络<br>Datagram networks 数据报网络<br>Signaling message 信令报文<br>Active queue management 主动队列管理<br>Head-of-the-line 队头<br>Classless interdomain routing (CIDR) 无类域间路由<br>Plug-and-play 即插即用<br>Anycast 任播<br>Interior gateway protocols 内部网关协议<br>Routing information Protocol 路由信息协议（RIP）<br>Open shortest Path First OSPF 开放最短路径优先<br>Area border routers 区域边界路由器<br>Circuit Switching 电路转换<br>Packet Switching 分组交换</p><p>参考资料<br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">2019 王道考研 计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="2021/02/05/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>2021/02/05/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="本人计算机网络笔记总目录"><a href="#本人计算机网络笔记总目录" class="headerlink" title="本人计算机网络笔记总目录"></a>本人计算机网络笔记总目录</h1><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记Part1 概述</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106974965">计算机网络笔记Part2 物理层（Physical Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106993253">计算机网络笔记Part4 网络层（Network Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107034202">计算机网络笔记Part5 传输层（Transport Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107053479">计算机网络笔记Part6 应用层（Application Layer）</a></p><h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><p><img src="https://img-blog.csdnimg.cn/20200627112630722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-封装成帧与透明传输"><a href="#2-封装成帧与透明传输" class="headerlink" title="2. 封装成帧与透明传输"></a>2. 封装成帧与透明传输</h1><p><strong>封装成帧</strong>就是加将数据加头加尾，相当于将数据打包<br><strong>透明传输</strong>就是为了防止<strong>特殊的数据无法正常传输</strong>的的情况的发生，比如说在封装成帧的过程中出现数据中的某些标记符与开始/结束标记符恰巧重复等等情况<br><img src="https://img-blog.csdnimg.cn/20200627121353485.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200627121943191.png" alt="在这里插入图片描述"></p><h2 id="2-1-透明传输的应用"><a href="#2-1-透明传输的应用" class="headerlink" title="2.1 透明传输的应用"></a>2.1 透明传输的应用</h2><h3 id="2-1-1-字符计数法"><a href="#2-1-1-字符计数法" class="headerlink" title="2.1.1 字符计数法"></a>2.1.1 字符计数法</h3><p>就是在帧的首部做<strong>计数</strong>，看看数据是否错误<br>缺点：如果在某一个帧内，标记位后面的某个字节的数据丢失，那么会影响后面的帧<br>比如3 1 1 和 4 2 2 2，如果前面的帧丢失变成 3 1，那么后面的4就会被补到前面变成 3 1 4导致错误<br><img src="https://img-blog.csdnimg.cn/20200627122122260.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-2-字符填充法"><a href="#2-1-2-字符填充法" class="headerlink" title="2.1.2 字符填充法"></a>2.1.2 字符填充法</h3><p>就是加头加尾分别标记开始结束，和零比特填充法（见下）对比，<strong>开始和结束的对应的字符不一样</strong><br>但有可能出现数据内某段比特流数据正好<strong>与标记字段重复</strong>，从而导致误判断的情况<br><img src="https://img-blog.csdnimg.cn/20200627122415229.png?xshadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>解决方法：添加转义字符</strong><br><img src="https://img-blog.csdnimg.cn/20200627122642435.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-3-零比特填充法"><a href="#2-1-3-零比特填充法" class="headerlink" title="2.1.3 零比特填充法"></a>2.1.3 零比特填充法</h3><p><img src="https://img-blog.csdnimg.cn/20200627122934743.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-4-违规编码法"><a href="#2-1-4-违规编码法" class="headerlink" title="2.1.4 违规编码法"></a>2.1.4 违规编码法</h3><p>因为曼彻斯特编码不使用高-高，低-低来表示，所以如果使用高-高，低-低来表示帧起始和终止就<strong>不会与数据冲突</strong><br><img src="https://img-blog.csdnimg.cn/20200627123050151.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-差错控制"><a href="#3-差错控制" class="headerlink" title="3. 差错控制"></a>3. 差错控制</h1><h2 id="3-1-差错是什么，从哪来的"><a href="#3-1-差错是什么，从哪来的" class="headerlink" title="3.1 差错是什么，从哪来的"></a>3.1 差错是什么，从哪来的</h2><p>数据链路层的差错检测的是<strong>比特</strong>的错误<br><img src="https://img-blog.csdnimg.cn/2020062712365377.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-为什么要在数据链路层进行差错控制？"><a href="#3-2-为什么要在数据链路层进行差错控制？" class="headerlink" title="3.2 为什么要在数据链路层进行差错控制？"></a>3.2 为什么要在数据链路层进行差错控制？</h2><p>因为错误可以尽早发现，不会让一个错误的数据包发送了很长时间到达最终目的地之后才被发现，从而导致网络资源的浪费</p><h2 id="3-3-检错编码（奇偶校验码，循环冗余码CRC）"><a href="#3-3-检错编码（奇偶校验码，循环冗余码CRC）" class="headerlink" title="3.3 检错编码（奇偶校验码，循环冗余码CRC）"></a>3.3 检错编码（奇偶校验码，循环冗余码CRC）</h2><h3 id="3-3-1-奇偶校验码"><a href="#3-3-1-奇偶校验码" class="headerlink" title="3.3.1 奇偶校验码"></a>3.3.1 奇偶校验码</h3><p>缺点：只能检测出1，3，5，7…等等奇位数错误，检测成功率位50%<br><img src="https://img-blog.csdnimg.cn/20200627130921199.png" alt="在这里插入图片描述"></p><h3 id="3-3-2-循环冗余码CRC"><a href="#3-3-2-循环冗余码CRC" class="headerlink" title="3.3.2 循环冗余码CRC"></a>3.3.2 循环冗余码CRC</h3><p>就是用传输数据除以生成多项式得到冗余码<br><img src="https://img-blog.csdnimg.cn/2020062713153254.png" alt="在这里插入图片描述"><br>实际例子<br>注释：<br>1.阶数就是最高位是哪位，然后位数-1，如10011就是5-1=4,1011就是4-1=3<br>2.异或运算就是相同得0，不同得1，比如100和101做异或，结果就是001<br>3.出书和最后的余数添加到要发送的数据后面，称为<strong>帧检验序列FCS</strong><br><img src="https://img-blog.csdnimg.cn/20200627131633434.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接收方收到数据后进行检测<br><img src="https://img-blog.csdnimg.cn/20200627132107709.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要注意的地方<br><img src="https://img-blog.csdnimg.cn/20200627132214691.png" alt="在这里插入图片描述"></p><h2 id="3-4-纠错编码（海明码）"><a href="#3-4-纠错编码（海明码）" class="headerlink" title="3.4 纠错编码（海明码）"></a>3.4 纠错编码（海明码）</h2><p>分为四步</p><h3 id="第一步-确认校验码位数r"><a href="#第一步-确认校验码位数r" class="headerlink" title="第一步 确认校验码位数r"></a>第一步 确认校验码位数r</h3><p><img src="https://img-blog.csdnimg.cn/20200627132546766.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="第二步-确定校验码和数据的位置"><a href="#第二步-确定校验码和数据的位置" class="headerlink" title="第二步 确定校验码和数据的位置"></a>第二步 确定校验码和数据的位置</h3><p>注释：<br>1.为什么是10为数据位？因为4位校验码+6位信息位=10位<br>2.校验码放到2的几次方的位置，其他的地方按顺序放已知的信息位</p><p><img src="https://img-blog.csdnimg.cn/20200627132725336.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="第三步-求出校验码的值"><a href="#第三步-求出校验码的值" class="headerlink" title="第三步 求出校验码的值"></a>第三步 求出校验码的值</h3><p>注释<br>1.先是通过二进制位确定有几位。本题中因为最大位10的二进制是1010，所以是4为，将其标注<br>2.然后从p1开始看，看p1的二进制位的数值和所有信息位的对应位置的数值是否相同，然后找出来这些位<br>这里有点难理解，这里以p1为例辅助理解，这里找出来的就是P1,D1,D2,D4,D5<br><img src="https://img-blog.csdnimg.cn/20200627133356420.png" alt="在这里插入图片描述"><br>然后计算异或值，比如说这里D1=1,D2=0,D4=1,D5=0,就是p1要同时和<strong>0</strong>,<strong>1</strong>，<strong>0</strong>,<strong>1</strong>进行异或之后得到0，为了标识我加粗原始计算数据<br>举例：<strong>0</strong>和<strong>1</strong>异或得1,1和<strong>0</strong>异或得1,1和<strong>1</strong>异或得0，那么p1和0异或得0，p1就是0了<br>3.其他同理，按顺序计算出P2,P3,P4,然后填入表格<br><img src="https://img-blog.csdnimg.cn/20200627133056623.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="第四步-检测并纠错"><a href="#第四步-检测并纠错" class="headerlink" title="第四步 检测并纠错"></a>第四步 检测并纠错</h3><p>就是和上面一样，将所有校验位进行运算，得出的结果的值就是错误的位<br><img src="https://img-blog.csdnimg.cn/20200627134416184.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-数据链路层的流量控制和可靠传输"><a href="#4-数据链路层的流量控制和可靠传输" class="headerlink" title="4. 数据链路层的流量控制和可靠传输"></a>4. 数据链路层的流量控制和可靠传输</h1><h2 id="4-1-流量控制与可靠传输"><a href="#4-1-流量控制与可靠传输" class="headerlink" title="4.1 流量控制与可靠传输"></a>4.1 流量控制与可靠传输</h2><p>流量控制是为了让传输过程中的发送速度和接受速度匹配，减少传输出错与资源浪费<br>可靠传输是发送端发送什么，接收端就要受到什么</p><h3 id="4-1-1-停止等待协议（Stop-and-Wait）"><a href="#4-1-1-停止等待协议（Stop-and-Wait）" class="headerlink" title="4.1.1 停止等待协议（Stop-and-Wait）"></a>4.1.1 停止等待协议（Stop-and-Wait）</h3><p><img src="https://img-blog.csdnimg.cn/20200627150624453.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>停止等待协议的<strong>无差错</strong>情况<br>注释：因为一次就一个，所以用0和1标记ack就行<br><img src="https://img-blog.csdnimg.cn/20200627150810912.png?xshadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>停止等待协议的<strong>有差错</strong>情况<br><img src="https://img-blog.csdnimg.cn/20200627151008798.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627151301222.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627151343650.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>停止等待协议的特点<br>1.简单<br>2.信道利用率低。大部分时间数据都在路上，发送方很长时间闲置，资源浪费<br><img src="https://img-blog.csdnimg.cn/20200627151529667.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200627151615649.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-1-2-后退N帧协议（GBN）"><a href="#4-1-2-后退N帧协议（GBN）" class="headerlink" title="4.1.2 后退N帧协议（GBN）"></a>4.1.2 后退N帧协议（GBN）</h3><p>因为停止等待协议太浪费时间了，所以尝试采用GBN，发送连续多个数据帧，以增大信道利用率<br>注释：<br>累计确认：就是收到一个确认帧，那么<strong>它和它之前的所有帧</strong>都默认已收到，反之，如果某个确认帧没收到，那么<strong>它和它之后的所有帧</strong>都默认丢失（即使收到了也丢掉），进行重传</p><p><img src="https://img-blog.csdnimg.cn/2020062715251276.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下图是一个实例<br>注释：此图发送2帧时丢失，所以接收方几首收到后面的帧也是直接丢弃并且发送最晚收到的有效帧1的ACK，直至2帧的超时重传机制被触发进行重传并得到ACK之后，接收方才会接受2帧以及后面的帧</p><p><img src="https://img-blog.csdnimg.cn/20200627153111466.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发送窗口不能无限大，与使用的编号的比特数有关<br>很简单，就是1比特编号0和1,同理2比特编号0-3，如果用1比特编号，却要4个窗口长度，那么窗口内数据编号都编不过来，直接乱套了<br>GBN的优缺点也显而易见，优点是提高了信道利用率，缺点是因为重传机制的原因导致已经收到数据却需要强行丢弃而造成浪费</p><h3 id="4-1-3-选择重传协议（SR）"><a href="#4-1-3-选择重传协议（SR）" class="headerlink" title="4.1.3 选择重传协议（SR）"></a>4.1.3 选择重传协议（SR）</h3><p>为了解决GBN的缺点，我们打算尝试只重传错误的帧，这样的话就不用浪费资源吧已经收到的帧再重传一次了。<br>和GBN相比，两者都有窗口了，和GBN的区别其实就是做了一个数据缓存，已经收到的帧不用扔了，等待之前因意外丢失的帧收到的时候确认即可，但是只能缓存窗口尺寸内的包含的帧（PS，缓存咋可能无限大）<br>SR运行过程<br>注释：2帧丢失之后仍然在发送，但是2帧丢失之后只是缓存，并没有移动窗口，直至最后2帧收到后一次性确认2-5帧<br><img src="https://img-blog.csdnimg.cn/20200627155019851.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同样的，因为编号的问题，发送窗口不能无限大<br>发送窗口最后和接受窗口<strong>大小相同</strong>，这样利用率比较高</p><h1 id="5-介质访问控制技术"><a href="#5-介质访问控制技术" class="headerlink" title="5. 介质访问控制技术"></a>5. 介质访问控制技术</h1><p>就是让节点之间的通信不会进行相互干扰<br><img src="https://img-blog.csdnimg.cn/20200627160903721.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-1-信道划分介质访问控制"><a href="#5-1-信道划分介质访问控制" class="headerlink" title="5.1 信道划分介质访问控制"></a>5.1 信道划分介质访问控制</h2><p>虽然使用一条共享信道，但是通过多路复用技术组合进行传输，提高了信道的利用率</p><h3 id="5-1-1-频分多路复用FDM"><a href="#5-1-1-频分多路复用FDM" class="headerlink" title="5.1.1 频分多路复用FDM"></a>5.1.1 频分多路复用FDM</h3><p><img src="https://img-blog.csdnimg.cn/2020062716134134.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-1-2-时分多路复用TDM"><a href="#5-1-2-时分多路复用TDM" class="headerlink" title="5.1.2 时分多路复用TDM"></a>5.1.2 时分多路复用TDM</h3><p>TDM的缺点就是利用率低，所以又衍生出了STDM<br><img src="https://img-blog.csdnimg.cn/20200627161416465.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-1-3-统计时分复用STDM"><a href="#5-1-3-统计时分复用STDM" class="headerlink" title="5.1.3 统计时分复用STDM"></a>5.1.3 统计时分复用STDM</h3><p>STDM的原则是先到先走，满了就发，相对于TDM提高了利用率<br><img src="https://img-blog.csdnimg.cn/20200627161525107.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-1-4-码分多路复用CDM"><a href="#5-1-4-码分多路复用CDM" class="headerlink" title="5.1.4 码分多路复用CDM"></a>5.1.4 码分多路复用CDM</h3><p>CDM只是做一下记录，暂时还用不到，有需要请自行查找资料<br><img src="https://img-blog.csdnimg.cn/20200627161726662.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-2-随机访问介质访问控制"><a href="#5-2-随机访问介质访问控制" class="headerlink" title="5.2 随机访问介质访问控制"></a>5.2 随机访问介质访问控制</h2><p>所有用户都可以随机发送信息，发送时可以占用全部带宽，理论上个人使用时比静态分配信道的速度更快</p><h3 id="5-2-1-ALOHA协议"><a href="#5-2-1-ALOHA协议" class="headerlink" title="5.2.1 ALOHA协议"></a>5.2.1 ALOHA协议</h3><p>纯ALOHA协议缺点：太随性，导致效率低<br><img src="https://img-blog.csdnimg.cn/20200627162357969.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>时隙ALOHA协议<br>相对于纯ALOHA协议就是固定了发送的时间（只能在一个时间片的开始），提高了效率<br><img src="https://img-blog.csdnimg.cn/20200627162650471.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-2-CSMA协议"><a href="#5-2-2-CSMA协议" class="headerlink" title="5.2.2 CSMA协议"></a>5.2.2 CSMA协议</h3><p><img src="https://img-blog.csdnimg.cn/20200627163031462.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>名称</p><p>描述</p><p>优点</p><p>缺点</p><p>1-坚持CSMA</p><p>发送信息时监听信道，一空闲下来就立即传输，信道忙也一直监听，如果发送时冲突就等待随机时长之后再监听</p><p>立即发送，利用率高</p><p>如果多台设备同时监听，那么会发生冲突</p><p>非坚持CSMA</p><p>发送信息时监听信道，如果空闲就立即传输，信道忙就随机等待一段时间后再监听</p><p>冲突发生的几率减少</p><p>因为需要等待，所以利用率不高</p><p>p-坚持CSMA</p><p>发送信息时监听信道，空闲时以概率p进行传输，概率1-p不传输。信道忙就随机等待一段时间后再监听</p><p>冲突减少的同时效率也比较高</p><p>即使发生冲突也要坚持发送数据，资源被浪费</p><h3 id="5-2-3-CSMA-CD协议"><a href="#5-2-3-CSMA-CD协议" class="headerlink" title="5.2.3 CSMA/CD协议"></a>5.2.3 CSMA/CD协议</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>就是因为链路实际有长短，发送数据需要时间，这个时间内可能就被其他节点当成空闲状态导致发生碰撞<br>知道自己发生碰撞的最长时间是2τ（两倍的<strong>传播时延</strong>），就是一去一回<br><img src="https://img-blog.csdnimg.cn/20200627172333977.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图示传播时延对载波监听的影响<br><img src="https://img-blog.csdnimg.cn/20200627181945643.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200627183458233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627182153577.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由此我们可以想到最小帧长的问题，因为如果帧太短，帧都发送完了才检测到碰撞导致停止，导致无法停止碰撞<br><img src="https://img-blog.csdnimg.cn/2020062718350424.png?,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-4-CSMA-CA协议"><a href="#5-2-4-CSMA-CA协议" class="headerlink" title="5.2.4 CSMA/CA协议"></a>5.2.4 CSMA/CA协议</h3><p><img src="https://img-blog.csdnimg.cn/20200627184714796.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627184823659.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-5-CSMA-CD-与-CSMA-CA的区别"><a href="#5-2-5-CSMA-CD-与-CSMA-CA的区别" class="headerlink" title="5.2.5 CSMA/CD 与 CSMA/CA的区别"></a>5.2.5 CSMA/CD 与 CSMA/CA的区别</h3><p><img src="https://img-blog.csdnimg.cn/2020062718532038.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-3-轮询访问介质访问控制"><a href="#5-3-轮询访问介质访问控制" class="headerlink" title="5.3 轮询访问介质访问控制"></a>5.3 轮询访问介质访问控制</h2><p>主要包括两大类，一个是<strong>轮询协议</strong>，另一个是<strong>令牌传递协议</strong></p><h3 id="5-3-1-轮询协议"><a href="#5-3-1-轮询协议" class="headerlink" title="5.3.1 轮询协议"></a>5.3.1 轮询协议</h3><p>就是选出一个代表，让他控制所有的传输<br>注释：<br>轮询开销在随着服务的节点越多，需要用于查询是否发送数据发送的数据帧也就越多，会造成一定开销<br>等待延迟就是因为这是轮流“邀请”，所以难免某个节点需要发送数据，但是主节点还在较远的需要里有需求的节点那边，导致需求得不到立即响应<br>单点故障很好理解，就是代表挂了</p><p><img src="https://img-blog.csdnimg.cn/20200627190229529.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-3-2-令牌传递协议"><a href="#5-3-2-令牌传递协议" class="headerlink" title="5.3.2 令牌传递协议"></a>5.3.2 令牌传递协议</h3><p>注释：在节点之间没有收发数据的需求时，令牌在节点之间循环。<br>发送数据的流程<br>》当一个节点需要时就可以获得这个令牌。然后修改这个令牌的状态（空闲-&gt;占用）<br>》再将令牌与数据帧结合，让其在节点构成的环之间流动<br>》不是目的地的节点收到令牌也不接受，直接略过，目标节点收到信息并复制一份到本地（传输完成），因为是个闭环，所以发送节点最后得到令牌<br>》最后，发送令牌的节点对令牌的内容进行检查，如果发现数据出错还要重新发一遍<br>问题基本和轮询协议相同</p><p><img src="https://img-blog.csdnimg.cn/20200627205055826.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="6-局域网"><a href="#6-局域网" class="headerlink" title="6.局域网"></a>6.局域网</h1><h2 id="6-1-局域网的概念"><a href="#6-1-局域网的概念" class="headerlink" title="6.1 局域网的概念"></a>6.1 局域网的概念</h2><p>概括：范围大小，速度快，延迟低，节点平等<br><img src="https://img-blog.csdnimg.cn/20200627210439299.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-1-1-局域网的网络拓扑结构"><a href="#6-1-1-局域网的网络拓扑结构" class="headerlink" title="6.1.1 局域网的网络拓扑结构"></a>6.1.1 局域网的网络拓扑结构</h3><p>常用的是<strong>总线型拓扑</strong><br><img src="https://img-blog.csdnimg.cn/20200627210700283.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-1-2-局域网的传播介质"><a href="#6-1-2-局域网的传播介质" class="headerlink" title="6.1.2 局域网的传播介质"></a>6.1.2 局域网的传播介质</h3><p>局域网</p><p>常用介质</p><p>有线局域网</p><p>双绞线，同轴电缆，光纤</p><p>无线局域网</p><p>电磁波</p><h3 id="6-1-3-局域网介质访问方法"><a href="#6-1-3-局域网介质访问方法" class="headerlink" title="6.1.3 局域网介质访问方法"></a>6.1.3 局域网介质访问方法</h3><p><img src="https://img-blog.csdnimg.cn/20200627210926529.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-2-局域网的分类"><a href="#6-2-局域网的分类" class="headerlink" title="6.2 局域网的分类"></a>6.2 局域网的分类</h2><p><img src="https://img-blog.csdnimg.cn/20200627211026206.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-3-IEEE802标准"><a href="#6-3-IEEE802标准" class="headerlink" title="6.3 IEEE802标准"></a>6.3 IEEE802标准</h2><p><img src="https://img-blog.csdnimg.cn/20200627211306397.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-3-1-IEEE802描述的局域网参考模型"><a href="#6-3-1-IEEE802描述的局域网参考模型" class="headerlink" title="6.3.1 IEEE802描述的局域网参考模型"></a>6.3.1 IEEE802描述的局域网参考模型</h3><p><img src="https://img-blog.csdnimg.cn/20200627211401404.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-4以太网"><a href="#6-4以太网" class="headerlink" title="6.4以太网"></a>6.4以太网</h2><h3 id="6-4-1-以太网概念"><a href="#6-4-1-以太网概念" class="headerlink" title="6.4.1 以太网概念"></a>6.4.1 以太网概念</h3><p><img src="https://img-blog.csdnimg.cn/20200627211606200.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627211721247.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-4-2-以太网的发展"><a href="#6-4-2-以太网的发展" class="headerlink" title="6.4.2 以太网的发展"></a>6.4.2 以太网的发展</h3><p><img src="https://img-blog.csdnimg.cn/20200627224030441.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-4-3-适配器和MAC地址"><a href="#6-4-3-适配器和MAC地址" class="headerlink" title="6.4.3 适配器和MAC地址"></a>6.4.3 适配器和MAC地址</h3><p><img src="https://img-blog.csdnimg.cn/20200627224149350.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-4-4-以太网MAC帧"><a href="#6-4-4-以太网MAC帧" class="headerlink" title="6.4.4 以太网MAC帧"></a>6.4.4 以太网MAC帧</h3><p>注释：<br>1.这里的mac层指的是数据链路层<br>2.之前说过数据链路层将上一层ip数据包加头加尾<br>头就是目标地址（6字节），源地址（6字节），类型（2字节）<br>尾就是FCS（帧检验序列），（4字节）<br>3.前导码<strong>不是MAC帧的一部分</strong>，目的是使时钟同步<br>4.为什么数据长度时46~1500？<br>因为有最小传输字节64字节，mac占用6+6+2+4=18，所以数据最小为64-18=46，1500则是规定的默认最大字节，没有理由</p><p><img src="https://img-blog.csdnimg.cn/20200627224520210.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-4-5-10BASE-T以太网"><a href="#6-4-5-10BASE-T以太网" class="headerlink" title="6.4.5 10BASE-T以太网"></a>6.4.5 10BASE-T以太网</h3><p><img src="https://img-blog.csdnimg.cn/20200627225136362.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-4-6-高速以太网"><a href="#6-4-6-高速以太网" class="headerlink" title="6.4.6 高速以太网"></a>6.4.6 高速以太网</h3><p><img src="https://img-blog.csdnimg.cn/20200627224252903.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-5-无线局域网"><a href="#6-5-无线局域网" class="headerlink" title="6.5 无线局域网"></a>6.5 无线局域网</h2><p><img src="https://img-blog.csdnimg.cn/20200627230045240.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627230109894.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-5-1-两种无线局域网"><a href="#6-5-1-两种无线局域网" class="headerlink" title="6.5.1 两种无线局域网"></a>6.5.1 两种无线局域网</h3><p><img src="https://img-blog.csdnimg.cn/20200627230151259.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627230158897.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="7-广域网"><a href="#7-广域网" class="headerlink" title="7.广域网"></a>7.广域网</h1><h2 id="7-1-广域网的概述"><a href="#7-1-广域网的概述" class="headerlink" title="7.1 广域网的概述"></a>7.1 广域网的概述</h2><p>概括一下，一个字大<br><img src="https://img-blog.csdnimg.cn/20200627230316639.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-2-PPP协议（Point-to-Point-Protocol）"><a href="#7-2-PPP协议（Point-to-Point-Protocol）" class="headerlink" title="7.2 PPP协议（Point-to-Point Protocol）"></a>7.2 PPP协议（Point-to-Point Protocol）</h2><p>PPP协议是目前<strong>使用最广泛</strong>的数据链路层协议，拨号基本都是PPP协议<br>PPP协议<strong>仅支持全双工</strong>链路</p><h3 id="7-2-1-PPP协议需要满足的要求"><a href="#7-2-1-PPP协议需要满足的要求" class="headerlink" title="7.2.1 PPP协议需要满足的要求"></a>7.2.1 PPP协议需要满足的要求</h3><p><img src="https://img-blog.csdnimg.cn/20200627230948785.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-2-2-PPP协议不需要满足的要求"><a href="#7-2-2-PPP协议不需要满足的要求" class="headerlink" title="7.2.2 PPP协议不需要满足的要求"></a>7.2.2 PPP协议不需要满足的要求</h3><p><img src="https://img-blog.csdnimg.cn/20200627230916385.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-2-3-PPP协议组成成分以及功能"><a href="#7-2-3-PPP协议组成成分以及功能" class="headerlink" title="7.2.3 PPP协议组成成分以及功能"></a>7.2.3 PPP协议组成成分以及功能</h3><p><img src="https://img-blog.csdnimg.cn/20200627231054259.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-2-4-PPP协议的帧格式"><a href="#7-2-4-PPP协议的帧格式" class="headerlink" title="7.2.4 PPP协议的帧格式"></a>7.2.4 PPP协议的帧格式</h3><p><img src="https://img-blog.csdnimg.cn/2020062723121486.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-3-HDLC协议（High-Level-Data-Link-Control）"><a href="#7-3-HDLC协议（High-Level-Data-Link-Control）" class="headerlink" title="7.3 HDLC协议（High-Level Data Link Control）"></a>7.3 HDLC协议（High-Level Data Link Control）</h2><h3 id="7-3-1-HDLC协议概述"><a href="#7-3-1-HDLC协议概述" class="headerlink" title="7.3.1 HDLC协议概述"></a>7.3.1 HDLC协议概述</h3><p><img src="https://img-blog.csdnimg.cn/20200627231345512.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-3-2-HDLC的三种站"><a href="#7-3-2-HDLC的三种站" class="headerlink" title="7.3.2 HDLC的三种站"></a>7.3.2 HDLC的三种站</h3><p><img src="https://img-blog.csdnimg.cn/202006272314286.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-3-3-HDLC的帧格式"><a href="#7-3-3-HDLC的帧格式" class="headerlink" title="7.3.3 HDLC的帧格式"></a>7.3.3 HDLC的帧格式</h3><p><img src="https://img-blog.csdnimg.cn/20200627231635817.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-4-PPP协议和HDLC协议对比"><a href="#7-4-PPP协议和HDLC协议对比" class="headerlink" title="7.4 PPP协议和HDLC协议对比"></a>7.4 PPP协议和HDLC协议对比</h2><p>为什么HDLC协议更可靠，但是我们使用PPP协议？<br>因为现在网络要求高，数据链路层本来就是不可靠的尽力传输，差错控制这些复杂的交给了TCP等<br><img src="https://img-blog.csdnimg.cn/2020062723171761.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="8-链路层设备"><a href="#8-链路层设备" class="headerlink" title="8. 链路层设备"></a>8. 链路层设备</h1><h2 id="8-1-集线器（Hub）"><a href="#8-1-集线器（Hub）" class="headerlink" title="8.1 集线器（Hub）"></a>8.1 集线器（Hub）</h2><p>可以扩展以太网，但是集线器会无脑将一个设备的所有消息转发到集线器所连的所有设备，故会将所连接的<strong>所有设备</strong>变成一个大的冲突域，同时只能有两台设备进行通信，且设备越多，冲突越多。由此诞生了网桥</p><h2 id="8-2-网桥（Bridge）"><a href="#8-2-网桥（Bridge）" class="headerlink" title="8.2 网桥（Bridge）"></a>8.2 网桥（Bridge）</h2><p>使用网桥时，由于网桥会根据mac地址进行过滤，所以<strong>不会形成冲突域</strong><br><img src="https://img-blog.csdnimg.cn/20200628000638789.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="8-2-1-两种网桥"><a href="#8-2-1-两种网桥" class="headerlink" title="8.2.1 两种网桥"></a>8.2.1 两种网桥</h3><h4 id="透明网桥"><a href="#透明网桥" class="headerlink" title="透明网桥"></a>透明网桥</h4><p>通过自学习来构建转发表。每一个通过网桥的数据包都会被记录下网桥收到数据时<strong>数据对应的地址</strong>和<strong>网桥自己的接口</strong>，通过许许多多的数据包的构造的缓存，网桥就可以知道哪个数据包在哪个接口，以后如果要穿数据包就知道要往哪个接口发送数据包了</p><h4 id="原路由网桥"><a href="#原路由网桥" class="headerlink" title="原路由网桥"></a>原路由网桥</h4><p>在发送时，直接将最佳路径放到帧首部。那么网桥如何获得最佳路径？通过广播方式想目标地址发送广播，此时可能会经过不同路由产生不同的路径，目标地址收到后再将每一条路径都发一个响应帧给网桥，网桥经过对比就知道哪个接口最快了</p><h2 id="8-3-交换机"><a href="#8-3-交换机" class="headerlink" title="8.3 交换机"></a>8.3 交换机</h2><p>网桥接口越来越多，网桥就变成了交换机<br><img src="https://img-blog.csdnimg.cn/2020062800263617.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-4-冲突域和广播域"><a href="#8-4-冲突域和广播域" class="headerlink" title="8.4 冲突域和广播域"></a>8.4 冲突域和广播域</h2><p><img src="https://img-blog.csdnimg.cn/20200628001124492.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="9-本章总结思维导图"><a href="#9-本章总结思维导图" class="headerlink" title="9. 本章总结思维导图"></a>9. 本章总结思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20200628002730615.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="本章常用中英文对照"><a href="#本章常用中英文对照" class="headerlink" title="本章常用中英文对照"></a>本章常用中英文对照</h1><p>End system 端系统<br>Modem 调制解调器（俗称：猫）<br>Base station 基站<br>Communication link 通信链路<br>Physical media 物理介质<br>Coaxial cable 同轴电缆<br>Fiber optics 光纤<br>Radio spectrum 射频频谱<br>Transmission rate 传输速率<br>Packets （数据）包，或分组<br>Routers 路由器<br>Path 路径<br>ISP (Internet Service Provider) 网络服务提供商<br>FDM (frequency-division multiplexing) 频分多路复用<br>TDM (time-division multiplexing) 时分多路复用<br>Statistical Multiplexing 统计复用<br>Store-and-forward 存储转发<br>Queuing delays 排队延迟<br>Transmission delay 传输延迟，或发送延迟<br>Propagation delay 传播延迟<br>Throughput 吞吐量<br>Internet backbone 骨干网<br>Delay 延迟，或时延<br>Loss 丢包<br>Message 消息，或报文<br>Segment （报文）段<br>Datagram 数据报<br>Frames 帧<br>参考资料<br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">2019 王道考研 计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理层</title>
      <link href="2021/02/05/%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>2021/02/05/%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="本人计算机网络笔记总目录"><a href="#本人计算机网络笔记总目录" class="headerlink" title="本人计算机网络笔记总目录"></a>本人计算机网络笔记总目录</h1><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记Part1 概述</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106974965">计算机网络笔记Part2 物理层（Physical Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106993253">计算机网络笔记Part4 网络层（Network Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107034202">计算机网络笔记Part5 传输层（Transport Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107053479">计算机网络笔记Part6 应用层（Application Layer）</a></p><h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><p><img src="https://img-blog.csdnimg.cn/20200626212252286.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-数据通信基本知识"><a href="#2-数据通信基本知识" class="headerlink" title="2. 数据通信基本知识"></a>2. 数据通信基本知识</h1><h2 id="2-1-一个数据通信例子"><a href="#2-1-一个数据通信例子" class="headerlink" title="2.1 一个数据通信例子"></a>2.1 一个数据通信例子</h2><p><img src="https://img-blog.csdnimg.cn/20200626212614182.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-相关术语"><a href="#2-2-相关术语" class="headerlink" title="2.2 相关术语"></a>2.2 相关术语</h2><p><img src="https://img-blog.csdnimg.cn/20200626212816152.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3-三种通讯方式"><a href="#2-3-三种通讯方式" class="headerlink" title="2.3 三种通讯方式"></a>2.3 三种通讯方式</h2><p>名称</p><p>英文</p><p>定义</p><p>需要信道条数</p><p>单工通信</p><p>Simplex</p><p>只能一个发一个收</p><p>一条</p><p>半双工通信</p><p>half-duplex</p><p>都可以发或者收，但是同一时间只能进行一个</p><p>两条</p><p>全双工通信</p><p>duplex</p><p>都可以同时收发数据</p><p>两条</p><h2 id="2-4-两种数据传输方式"><a href="#2-4-两种数据传输方式" class="headerlink" title="2.4 两种数据传输方式"></a>2.4 两种数据传输方式</h2><p>传输方式</p><p>特点</p><p>串行传输</p><p>速度慢，省钱，适合远距离</p><p>并行传输</p><p>速度快，耗钱，适合近距离</p><p><img src="https://img-blog.csdnimg.cn/20200626213810764.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-5-码元（Symbol）"><a href="#2-5-码元（Symbol）" class="headerlink" title="2.5 码元（Symbol）"></a>2.5 码元（Symbol）</h2><p>定义：码元是指用一个固定时长的信号波形（数字脉冲），代表离散数值的基本波形。当有多个离散状态时，成为M进制码元<br>一个码元可以携带多个比特的信息<br>个人理解：码元就是在网线上传输的一个个信号段。码元的不同进制就是用来表示不同的数值的</p><h2 id="2-6-波特（Baud）"><a href="#2-6-波特（Baud）" class="headerlink" title="2.6 波特（Baud）"></a>2.6 波特（Baud）</h2><p>用来指一秒可以传输多少个码元</p><h2 id="2-7-速率"><a href="#2-7-速率" class="headerlink" title="2.7 速率"></a>2.7 速率</h2><p>分为<strong>码元传输速率</strong>和<strong>信息传输速率</strong><br>信息传输速率就是b/s，就是我们平常说的<strong>网速</strong><br>码元可以理解为几个比特的<strong>集合</strong>，所以信息传输速率（网速）=码元传输速率x码元所带信息量（多少比特）<br>码元所带信息量（比特数）=log2（码元进制数）</p><h2 id="2-8-带宽（Band-Width）"><a href="#2-8-带宽（Band-Width）" class="headerlink" title="2.8 带宽（Band Width）"></a>2.8 带宽（Band Width）</h2><p>用来表示最高数据速率</p><h2 id="2-9-奈式准则（Nyquist）"><a href="#2-9-奈式准则（Nyquist）" class="headerlink" title="2.9 奈式准则（Nyquist）"></a>2.9 奈式准则（Nyquist）</h2><p>是在<strong>理想状态下</strong>得出的结论<br><img src="https://img-blog.csdnimg.cn/20200626222053679.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-10-香农公式（Shannon）"><a href="#2-10-香农公式（Shannon）" class="headerlink" title="2.10 香农公式（Shannon）"></a>2.10 香农公式（Shannon）</h2><p>是在<strong>有噪声的信道中</strong>得出的结论<br><img src="https://img-blog.csdnimg.cn/20200626225409541.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200626225547833.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-11-基带信号和宽带-带通信号（Base-band，pass-band）"><a href="#2-11-基带信号和宽带-带通信号（Base-band，pass-band）" class="headerlink" title="2.11 基带信号和宽带/带通信号（Base band，pass band）"></a>2.11 基带信号和宽带/带通信号（Base band，pass band）</h2><p>计算机网络中用的基带信号是<strong>数字信号</strong><br><img src="https://img-blog.csdnimg.cn/20200626225921565.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-12-编码"><a href="#2-12-编码" class="headerlink" title="2.12 编码"></a>2.12 编码</h2><p>将数据转化为<strong>数字信号</strong><br>数字数据(digtal data)通过 数字发送器(digit emitter) 转化为 数字信号(digtal signal)<br><img src="https://img-blog.csdnimg.cn/20200626154459852.png" alt="在这里插入图片描述"><br>模拟数据(analog data)通过 PCM编码器(PCM coder) 转化为 数字信号 (digtal signal)<br><img src="https://img-blog.csdnimg.cn/20200626154431937.png" alt="在这里插入图片描述"></p><blockquote><p><strong>单极性不归零编码</strong>：只使用一个电压值，高电平表示1，低电平表示0.</p></blockquote><blockquote><p><strong>双极性不归零编码</strong>：用幅值相等的正负电平表示二进制数1和0.</p></blockquote><blockquote><p><strong>单极性归零编码</strong>：发送码1时高电平在整个码元期间只持续一段时间，其余时间返回零电平。</p></blockquote><blockquote><p><strong>双极性归零编码</strong>：正负零三个电平，信号本身携带同步信息。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200626163610563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong>曼彻斯特编码</strong>：单极性编码的缺点是没有办法区分此时是没有信号，还是有信号，但是信号是0.<br>这种编码方式是bit中间有信号，低-高跳转表示0，高-低跳转表示1，一个时钟周期只可以表示一个bit，并且必须通过两次采样才能得到一个bit。它能携带时钟信号，而且能区分此时是没有信号还是信号为0.</p></blockquote><blockquote><p><strong>差分曼彻斯特编码</strong>：抗干扰能力比曼彻斯特编码更强。bit与bit之间有信号跳变，表示下一个bit为0，bit与bit之间没有信号跳变，表示下一个bit为1。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200626165018277.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-13-调制：数据转化为模拟信号（了解）"><a href="#2-13-调制：数据转化为模拟信号（了解）" class="headerlink" title="2.13 调制：数据转化为模拟信号（了解）"></a>2.13 调制：数据转化为模拟信号（了解）</h2><p>常用的调制方法：调频(AM)，调频(FM)，调相(PM)<br><img src="https://img-blog.csdnimg.cn/20200626165059865.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>模拟数据(analog data)通过 调制器(modulaotr) 转化为 模拟信号 (analog signal)<br><img src="https://img-blog.csdnimg.cn/20200626154409879.png" alt="在这里插入图片描述"></p><p>数字数据(digtal data)通过 调制器(modulaotr) 转化为 模拟信号 (analog signal)<br><img src="https://img-blog.csdnimg.cn/20200626154455793.png" alt="在这里插入图片描述"></p><h1 id="3-物理层传输介质"><a href="#3-物理层传输介质" class="headerlink" title="3. 物理层传输介质"></a>3. 物理层传输介质</h1><p>传输介质分为<strong>导向性</strong>传输介质和<strong>非导向性</strong>传输介质</p><p>导向性传输介质</p><p>电磁波沿着固体媒介（铜线or光纤）被导向传播</p><p>非导向性传输介质</p><p>自由空间，如空气，水等等</p><h2 id="3-1-常见的导向性传输介质"><a href="#3-1-常见的导向性传输介质" class="headerlink" title="3.1 常见的导向性传输介质"></a>3.1 常见的导向性传输介质</h2><h3 id="3-1-1-双绞线"><a href="#3-1-1-双绞线" class="headerlink" title="3.1.1 双绞线"></a>3.1.1 双绞线</h3><p>根据有无屏蔽层分为<strong>屏蔽双绞线（STP）</strong>和<strong>无屏蔽双绞线（UTP）</strong><br><img src="https://img-blog.csdnimg.cn/20200627110148375.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-1-2-同轴电缆（Coaxial-Cable）"><a href="#3-1-2-同轴电缆（Coaxial-Cable）" class="headerlink" title="3.1.2 同轴电缆（Coaxial Cable）"></a>3.1.2 同轴电缆（Coaxial Cable）</h3><p><img src="https://img-blog.csdnimg.cn/20200627110353962.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-1-3-光纤（Optical-fiber）"><a href="#3-1-3-光纤（Optical-fiber）" class="headerlink" title="3.1.3 光纤（Optical fiber）"></a>3.1.3 光纤（Optical fiber）</h3><p><img src="https://img-blog.csdnimg.cn/20200627110509407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据<strong>入射角</strong>不同，又分为单模光纤和多模光纤<br><img src="https://img-blog.csdnimg.cn/20200627110700437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-常见的非导向性传输介质"><a href="#3-2-常见的非导向性传输介质" class="headerlink" title="3.2 常见的非导向性传输介质"></a>3.2 常见的非导向性传输介质</h2><p>包括<strong>无线电波</strong>，<strong>微波</strong>，<strong>红外线</strong>和<strong>激光</strong>等<br><img src="https://img-blog.csdnimg.cn/20200627110843264.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-物理层设备"><a href="#4-物理层设备" class="headerlink" title="4. 物理层设备"></a>4. 物理层设备</h1><h2 id="4-1-中继器（RP-repeater）"><a href="#4-1-中继器（RP-repeater）" class="headerlink" title="4.1 中继器（RP repeater）"></a>4.1 中继器（RP repeater）</h2><p>注释：5-4-3规则是为了限制中继器使用次数的，理由可见图<br>5是指不能超过5个网段<br>4是指在这些网段中的物理层网络设备（中继器，集线器）最多不超过4个<br>3是指这些网段中最多只有三个网段挂有计算机<br><img src="https://img-blog.csdnimg.cn/20200627111139163.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-2-集线器（Hub）"><a href="#4-2-集线器（Hub）" class="headerlink" title="4.2 集线器（Hub）"></a>4.2 集线器（Hub）</h2><p>集线器是个大的冲突域，同时<strong>只能有两个设备进行通讯</strong>，只会传输信号，没有智能。<br><img src="https://img-blog.csdnimg.cn/20200627111545392.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="5-本章思维导图"><a href="#5-本章思维导图" class="headerlink" title="5. 本章思维导图"></a>5. 本章思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20200627112018411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考资料<br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">2019 王道考研 计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记概述</title>
      <link href="2021/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0Part1%E6%A6%82%E8%BF%B0/"/>
      <url>2021/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0Part1%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="本人计算机网络笔记总目录"><a href="#本人计算机网络笔记总目录" class="headerlink" title="本人计算机网络笔记总目录"></a>本人计算机网络笔记总目录</h1><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记Part1 概述</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106974965">计算机网络笔记Part2 物理层（Physical Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106980441">计算机网络笔记Part3 数据链路层（Data Link Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/106993253">计算机网络笔记Part4 网络层（Network Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107034202">计算机网络笔记Part5 传输层（Transport Layer）</a><br><a href="https://blog.csdn.net/weixin_45067603/article/details/107053479">计算机网络笔记Part6 应用层（Application Layer）</a></p><h1 id="1-速率相关性能指标"><a href="#1-速率相关性能指标" class="headerlink" title="1. 速率相关性能指标"></a>1. 速率相关性能指标</h1><h2 id="1-1-速率"><a href="#1-1-速率" class="headerlink" title="1.1 速率"></a>1.1 速率</h2><p>定义：连接在计算机网络上的主机在数字信道上传送数据位数的速率<br>单位:b/s,Kb/s,Mb/s,Tb/s，<br>如果用字节表示，则是B/s,KB/s,MB/s,TB/s<br>1Byte=8Bit</p><h2 id="1-2-带宽"><a href="#1-2-带宽" class="headerlink" title="1.2 带宽"></a>1.2 带宽</h2><p>在计算机网络中，指的是网络设备所支持的最高速度，单位同速率，是<strong>理想条件下最高速率</strong></p><h2 id="1-3-吞吐量"><a href="#1-3-吞吐量" class="headerlink" title="1.3 吞吐量"></a>1.3 吞吐量</h2><p>指的是单位时间内通过某个网络的数据<strong>总</strong>量</p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>速率就是实际网速，带宽是理论网速（长城宽带警告），吞吐量是一个或多个设备的综合速率，比如说1000m宽带的路由器连着三部手机，每部手机都是10mb/s看片，那么速率就是10mb/s，带宽是宽带的1000m，路由器吞吐量是30mb/s，即三者之和</p><h1 id="2-时延相关指标"><a href="#2-时延相关指标" class="headerlink" title="2.时延相关指标"></a>2.时延相关指标</h1><h2 id="2-1-时延"><a href="#2-1-时延" class="headerlink" title="2.1 时延"></a>2.1 时延</h2><p>时延包括四大类</p><p>名称</p><p>描述</p><p>计算公式</p><p>发送时延</p><p>数据从主机到信道上所用的时间</p><p>发送的数据长度/发送速率</p><p>传播时延</p><p>数据在信道上传播所花费的时间</p><p>信道长度/电磁波在信道上传播的速率</p><p>排队时延</p><p>数据在路由器前等待前面数据处理的时间</p><p>无计算方式</p><p>处理时延</p><p>数据在路由器中处理需求的时间</p><p>无计算方式</p><p>使用高速链路(提高网速)，只能减小发送时延，无法减少其他三个时延</p><h2 id="2-2-时延带宽积"><a href="#2-2-时延带宽积" class="headerlink" title="2.2 时延带宽积"></a>2.2 时延带宽积</h2><p>公式：时延带宽积=传播时延x带宽<br>意思是链路上有多少比特的数据</p><h2 id="2-3往返时延RTT"><a href="#2-3往返时延RTT" class="headerlink" title="2.3往返时延RTT"></a>2.3往返时延RTT</h2><p>从发送方发送数据开始，到接收方确认收到为止所花费的时间<br>RTT=<strong>传播时延</strong>x2+处理时间(有时可能直接忽略)</p><h2 id="2-4-利用率"><a href="#2-4-利用率" class="headerlink" title="2.4 利用率"></a>2.4 利用率</h2><h3 id="2-4-1-信道利用率"><a href="#2-4-1-信道利用率" class="headerlink" title="2.4.1 信道利用率"></a>2.4.1 信道利用率</h3><p>信道利用率=有数据通过<strong>时间</strong>/有+无数据通过<strong>时间</strong></p><h3 id="2-4-2-网络利用率"><a href="#2-4-2-网络利用率" class="headerlink" title="2.4.2 网络利用率"></a>2.4.2 网络利用率</h3><p>网络利用率=所有信道利用率加权求平均值</p><h3 id="2-4-3-时延和利用率的关系图"><a href="#2-4-3-时延和利用率的关系图" class="headerlink" title="2.4.3 时延和利用率的关系图"></a>2.4.3 时延和利用率的关系图</h3><p>利用率越高，延迟越大<br><img src="https://img-blog.csdnimg.cn/20200626203643244.png" alt="在这里插入图片描述"></p><h1 id="3-分层结构"><a href="#3-分层结构" class="headerlink" title="3. 分层结构"></a>3. 分层结构</h1><h2 id="3-1-为什么要分层，分层要做什么"><a href="#3-1-为什么要分层，分层要做什么" class="headerlink" title="3.1 为什么要分层，分层要做什么"></a>3.1 为什么要分层，分层要做什么</h2><p>（1）发起通信的计算机必须将数据通信的通路进行激活。<br>（2）要告诉网络如何识别目的主机。<br>（3）发起通信的计算机要查明目的主机是否开机，并且与网络连接正常。<br>（4）发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。<br>（5）确保差错和意外可以解决。</p><h2 id="3-2-正式认识分层结构"><a href="#3-2-正式认识分层结构" class="headerlink" title="3.2 正式认识分层结构"></a>3.2 正式认识分层结构</h2><p><img src="https://img-blog.csdnimg.cn/20200626204724293.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-参考模型"><a href="#4-参考模型" class="headerlink" title="4. 参考模型"></a>4. 参考模型</h1><p>名称</p><p>英文</p><p>作用</p><p>应用层</p><p>Application Layer</p><p>直接为用户的应用进程（例如电子邮件、文件传输和终端仿真）提供服务。如HTTP、SMTP、FTP、DNS等</p><p>表示层</p><p>Presentation Layer</p><p>把数据转换为能与接收者的系统格式兼容并适合传输的格式，即让两个系统可以交换信息</p><p>会话层</p><p>Session Layer</p><p>负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接</p><p>传输层</p><p>Transport Layer</p><p>负责端到端通讯，可靠传输，不可靠传输 ，流量控制，复用分用</p><p>网络层</p><p>Network Layer</p><p>负责选择路由最佳路径，规划IP地址(ipv4和ipv6变化只会影响网络层)，拥塞控制</p><p>数据链路层</p><p>Data Link Layer</p><p>帧的开始和结束，还有透明传输，差错校验(纠错由传输层解决)</p><p>物理层</p><p>Physical Layer</p><p>定义网络设备接口标准，电气标准(电压)，如何在物理链路上传输的更快</p><h2 id="4-1-OSI流程简介"><a href="#4-1-OSI流程简介" class="headerlink" title="4.1 OSI流程简介"></a>4.1 OSI流程简介</h2><p>网络层及以上，每一层都要对上一层发送的数据进行处理（加个头部）<br>数据链路层不仅需要加头部，还需要加尾部<br>物理层什么都不加，只管发送数据（比特流）<br><img src="https://img-blog.csdnimg.cn/20200626205152756.png?xshadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-2-TCP-IP参考模型"><a href="#4-2-TCP-IP参考模型" class="headerlink" title="4.2 TCP/IP参考模型"></a>4.2 TCP/IP参考模型</h2><p><img src="https://img-blog.csdnimg.cn/20200626205911885.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-3-五层参考模型及其传输过程简介"><a href="#4-3-五层参考模型及其传输过程简介" class="headerlink" title="4.3 五层参考模型及其传输过程简介"></a>4.3 五层参考模型及其传输过程简介</h2><p><img src="https://img-blog.csdnimg.cn/20200626210125977.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200626210211625.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考资料<br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">2019 王道考研 计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mvn打包的时候为什么用clean</title>
      <link href="2021/01/30/2015-01-30-diffrence-between-mvn-clean-install-and-mvn-install/"/>
      <url>2021/01/30/2015-01-30-diffrence-between-mvn-clean-install-and-mvn-install/</url>
      
        <content type="html"><![CDATA[<ul><li><p>   理论上来讲不做mvn clean 得到的jar包应该是最新的，除非其他方式修改jar包中的内容而不修改源代码。</p></li><li><p>   平时可以用mvn install，而不进行chean节省时间（如果你觉得节省时间多的话），但最保险还是用 mvn clean install 生成最新的jar包或其他包</p></li><li><p>   不想用mvn clean又想保证jar包最新，建议添加 -Djar.forceCreation 参数</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间协议</title>
      <link href="2021/01/18/2020-01-18-time-protocol/"/>
      <url>2021/01/18/2020-01-18-time-protocol/</url>
      
        <content type="html"><![CDATA[<h1 id="时间协议"><a href="#时间协议" class="headerlink" title="时间协议"></a>时间协议</h1><p>前两天在看Netty的hello world的时候，里面举了个例子—创建时间协议服务器。通过学习，才知道这个协议很老的，甚至已经被网络时间替代了。但是这个协议很简单，所以学习一下也无碍。</p><h2 id="什么是时间协议"><a href="#什么是时间协议" class="headerlink" title="什么是时间协议"></a>什么是时间协议</h2><p>时间协议（英语：TIME protocol）是一个在RFC 868内定义的网络传输协议。它用作提供机器可读的日期时间信息。</p><p>这是时间协议（Time Protocol）在<a href="https://tools.ietf.org/html/rfc868">RFC868</a>上的定义（中文由我自己翻译的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">                             Time Protocol</span><br><span class="line">                                时间协议</span><br><span class="line"></span><br><span class="line">This RFC specifies a standard for the ARPA Internet community.  Hosts on</span><br><span class="line">the ARPA Internet that choose to implement a Time Protocol are expected</span><br><span class="line">to adopt and implement this standard.</span><br><span class="line">这个RFC的标准给ARPA（美国国防部国防高等研究计划署）英特网定义的。在ARPA英特网上，</span><br><span class="line">要实现时间协议的主机，则希望采用并且实现这个标准。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This protocol provides a site-independent, machine readable date and</span><br><span class="line">time.  The Time service sends back to the originating source the time in</span><br><span class="line">seconds since midnight on January first 1900.</span><br><span class="line">这个协议提供了一个独立的，机器可读的日期和时间。时间服务将回复给客户端一个从</span><br><span class="line">格林威治时间1900年1月1日开始计算，到请求时刻的总秒数。</span><br><span class="line"></span><br><span class="line">One motivation arises from the fact that not all systems have a</span><br><span class="line">date&#x2F;time clock, and all are subject to occasional human or machine</span><br><span class="line">error.  The use of time-servers makes it possible to quickly confirm or</span><br><span class="line">correct a system&#39;s idea of the time, by making a brief poll of several</span><br><span class="line">independent sites on the network.</span><br><span class="line">现实中，并不是所有的系统都有时间功能，而且偶尔会受到人为的或者机器错误的影响。</span><br><span class="line">那么时间服务器就可以快速地提供正确的时间来让其他系统确认，或者用来纠正时间，</span><br><span class="line">只需要在网络上简单地查询就可以。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This protocol may be used either above the Transmission Control Protocol</span><br><span class="line">(TCP) or above the User Datagram Protocol (UDP).</span><br><span class="line">这个协议可以用在TCP和UDP协议上。</span><br><span class="line"></span><br><span class="line">When used via TCP the time service works as follows:</span><br><span class="line">当通过TCP协议使用时，时间服务器将执行以下步骤：</span><br><span class="line"></span><br><span class="line">   S: Listen on port 37 (45 octal).</span><br><span class="line">   服务端：监听37端口</span><br><span class="line"></span><br><span class="line">   U: Connect to port 37.</span><br><span class="line">   客户端：连接到37端口</span><br><span class="line"></span><br><span class="line">   S: Send the time as a 32 bit binary number.</span><br><span class="line">   服务端：发送32位二进制的时间</span><br><span class="line"></span><br><span class="line">   U: Receive the time.</span><br><span class="line">   客户端：接收到时间</span><br><span class="line"></span><br><span class="line">   U: Close the connection.</span><br><span class="line">   客户端：断开连接</span><br><span class="line"></span><br><span class="line">   S: Close the connection.</span><br><span class="line">   服务端：断开连接</span><br><span class="line"></span><br><span class="line">   The server listens for a connection on port 37.  When the connection</span><br><span class="line">   is established, the server returns a 32-bit time value and closes the</span><br><span class="line">   connection.  If the server is unable to determine the time at its</span><br><span class="line">   site, it should either refuse the connection or close it without</span><br><span class="line">   sending anything.</span><br><span class="line">   服务器监听端口37的连接。当连接建立，服务器将返回32位的时间值，然后关闭连接。</span><br><span class="line">   如果服务器无法确定时间，它需要拒绝连接，或者不发送任何信息，直接关闭连接。</span><br><span class="line"></span><br><span class="line">When used via UDP the time service works as follows:</span><br><span class="line">当通过UDP协议使用时，时间服务器将执行以下步骤：</span><br><span class="line"></span><br><span class="line">   S: Listen on port 37 (45 octal).</span><br><span class="line">   服务端：监听37端口</span><br><span class="line"></span><br><span class="line">   U: Send an empty datagram to port 37.</span><br><span class="line">   客户端：发送空数据报到37端口</span><br><span class="line"></span><br><span class="line">   S: Receive the empty datagram.</span><br><span class="line">   服务端：接受到空的数据报</span><br><span class="line"></span><br><span class="line">   S: Send a datagram containing the time as a 32 bit binary number.</span><br><span class="line">   服务端：发送32位二进制的时间的数据报</span><br><span class="line"></span><br><span class="line">   U: Receive the time datagram.</span><br><span class="line">   客户端：接收时间数据报</span><br><span class="line"></span><br><span class="line">   The server listens for a datagram on port 37.  When a datagram</span><br><span class="line">   arrives, the server returns a datagram containing the 32-bit time</span><br><span class="line">   value.  If the server is unable to determine the time at its site, it</span><br><span class="line">   should discard the arriving datagram and make no reply.</span><br><span class="line">   服务器用37端口监听数据报。当接收到数据报，服务器就返回包含32位二进制的时间的数据报。</span><br><span class="line">   如果服务器无法确定时间，则它应该丢弃接收到的数据报，不作回复。</span><br><span class="line"></span><br><span class="line">The Time</span><br><span class="line">时间</span><br><span class="line"></span><br><span class="line">The time is the number of seconds since 00:00 (midnight) 1 January 1900</span><br><span class="line">GMT, such that the time 1 is 12:00:01 am on 1 January 1900 GMT; this</span><br><span class="line">base will serve until the year 2036.</span><br><span class="line">这里的时间，时从格林威治时间1900年1月1日0点0分0秒开始计算，</span><br><span class="line">比如1就表示时格林威治时间1900年1月1日上午12点0分1秒；但是，这种计算方式到2036年将不再适用。</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">   the time  2,208,988,800 corresponds to 00:00  1 Jan 1970 GMT,</span><br><span class="line"></span><br><span class="line">             2,398,291,200 corresponds to 00:00  1 Jan 1976 GMT,</span><br><span class="line"></span><br><span class="line">             2,524,521,600 corresponds to 00:00  1 Jan 1980 GMT,</span><br><span class="line"></span><br><span class="line">             2,629,584,000 corresponds to 00:00  1 May 1983 GMT,</span><br><span class="line"></span><br><span class="line">        and -1,297,728,000 corresponds to 00:00 17 Nov 1858 GMT.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时间协议服务器的Java实现"><a href="#时间协议服务器的Java实现" class="headerlink" title="时间协议服务器的Java实现"></a>时间协议服务器的Java实现</h2><p>完整代码在<a href="https://github.com/henryhuang/time-protocol-example">https://github.com/henryhuang/time-protocol-example</a>。</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> OFF_SET = <span class="number">2208988800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> TPServer().start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Server starting...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(PORT)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Socket connection = serverSocket.accept();</span><br><span class="line">                <span class="keyword">new</span> TPHandlerThread(connection);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TPHandlerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Socket connection;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">TPHandlerThread</span><span class="params">(Socket connection)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.connection = connection;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Receive seek time request!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (DataOutputStream os = <span class="keyword">new</span> DataOutputStream(connection.getOutputStream())) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] timeBytes = String.valueOf(getTime()).getBytes();</span><br><span class="line">                os.writeInt(timeBytes.length);</span><br><span class="line">                os.write(timeBytes);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        connection.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() / <span class="number">1000L</span> + OFF_SET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TPClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> OFF_SET = <span class="number">2208988800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Long time = <span class="keyword">new</span> TPClient(<span class="string">&quot;localhost&quot;</span>).seekTime();</span><br><span class="line">        <span class="keyword">if</span> (time != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date((time - OFF_SET) * <span class="number">1000L</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TPClient</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">seekTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(<span class="keyword">this</span>.host, PORT);</span><br><span class="line">            DataInputStream is = <span class="keyword">new</span> DataInputStream(socket.getInputStream())) &#123;</span><br><span class="line">            <span class="keyword">int</span> length = is.readInt();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">            is.readFully(bytes);</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(<span class="keyword">new</span> String(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机网络综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识点 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马克西姆可可粉</title>
      <link href="2021/01/07/2013-05-15-maxim-coco/"/>
      <url>2021/01/07/2013-05-15-maxim-coco/</url>
      
        <content type="html"><![CDATA[<p><img title="马克西姆可可粉" src="http://cnhaloimg.wxio.club/20121107/makeximu.jpeg" alt="马克西姆可可粉"></p><p>这罐马克西姆的可可粉放了有一段时间了，一直忘了解决它。</p><p>想想，冲咖啡粉，然后加上牛奶和它，这种&ldquo;混搭&rdquo;的感觉还别有一番风味。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境下使用mysql数据库</title>
      <link href="2020/12/10/docker%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2020/12/10/docker%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Docker搭建MySQL服务"><a href="#使用Docker搭建MySQL服务" class="headerlink" title="使用Docker搭建MySQL服务"></a><a href="https://www.cnblogs.com/sablier/p/11605606.html">使用Docker搭建MySQL服务</a></h1><h3 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker#"></a>一、安装docker<a href="https://www.cnblogs.com/sablier/p/11605606.html#1773318026">#</a></h3><p>windows 和 mac 版可以直接到官网下载 docker desktop</p><p>linux 的安装方法可以参考 <a href="https://www.cnblogs.com/myzony/p/9071210.html">https://www.cnblogs.com/myzony/p/9071210.html</a></p><p>可以在shell中输入以下命令检查是否成功安装： <code>sudo docker version</code></p><h3 id="二、建立镜像"><a href="#二、建立镜像" class="headerlink" title="二、建立镜像#"></a>二、建立镜像<a href="https://www.cnblogs.com/sablier/p/11605606.html#3520192223">#</a></h3><ol><li><p>拉取官方镜像（我们这里选择5.7，如果不写后面的版本号则会自动拉取最新版）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copydocker pull mysql:5.7   # 拉取 mysql 5.7</span><br><span class="line">docker pull mysql       # 拉取最新版mysql镜像</span><br></pre></td></tr></table></figure><p><a href="https://hub.docker.com/_/mysql/">MySQL文档地址</a></p></li><li><p>检查是否拉取成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy$ sudo docker images</span><br></pre></td></tr></table></figure></li><li><p>一般来说数据库容器不需要建立目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copysudo docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>–name：容器名，此处命名为<code>mysql</code></li><li>-e：配置信息，此处配置mysql的root用户的登陆密码</li><li>-p：端口映射，此处映射 主机3306端口 到 容器的3306端口</li></ul></li><li><p>如果要建立目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copyduso docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /usr/local/docker/mysql/conf:/etc/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/logs:/var/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>-v：主机和容器的目录映射关系，”:”前为主机目录，之后为容器目录</li></ul></li><li><p>检查容器是否正确运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copydocker container ls</span><br></pre></td></tr></table></figure><ul><li>可以看到容器ID，容器的源镜像，启动命令，创建时间，状态，端口映射信息，容器名字</li></ul></li></ol><h3 id="三、连接mysql"><a href="#三、连接mysql" class="headerlink" title="三、连接mysql#"></a>三、连接mysql<a href="https://www.cnblogs.com/sablier/p/11605606.html#2972020989">#</a></h3><ol><li><p>进入docker本地连接mysql客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copysudo docker exec -it mysql bash</span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure></li><li><p>使用 Navicat 远程连接mysql</p><p>我只找到了 mac 版本的 Navicat Premiun（如下），没有找到windows和linux的。大家可以自行寻找。</p><p> <a href="https://pan.baidu.com/s/1bcJVyIvFneiEoMZPU-oIbA#list/path=/">百度云连接</a> 密码: qps3 （该软件包来自著名分享网站 Pirate ，并感谢网友 chaosgod 和 jor_ivy）</p><p><a href="https://img-blog.csdn.net/20180801090208199?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvcl9pdnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><img src="https://img-blog.csdn.net/20180801090208199?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvcl9pdnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></a></p><p><a href="https://img-blog.csdn.net/20180801090230920?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvcl9pdnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><img src="https://img-blog.csdn.net/20180801090230920?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvcl9pdnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></a></p><p>安装完之后：复制中文包”zh-Hans.lproj”放到 /Contents/Resources 即可。（应用程序右键显示包内容）</p></li><li><p>使用远程连接软件时要注意一个问题</p><p>我们在创建容器的时候已经将容器的3306端口和主机的3306端口映射到一起，所以我们应该访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Copyhost: 127.0.0.1</span><br><span class="line">port: 3306</span><br><span class="line">user: root</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure></li><li><p>如果你的容器运行正常，但是无法访问到MySQL，一般有以下几个可能的原因：</p><ul><li><p>防火墙阻拦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Copy#</span><span class="bash"> 开放端口：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd  --zone=public --add-port=3306/tcp -permanent</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd  --reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop firewalld</span></span><br></pre></td></tr></table></figure></li><li><p>需要进入docker本地客户端设置远程访问账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Copy$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it mysql bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p123456</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&quot;password&quot;</span>;</span></span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Copy#</span><span class="bash"> mysql使用mysql数据库中的user表来管理权限，修改user表就可以修改权限（只有root账号可以修改）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select host,user,password from user;</span></span><br><span class="line">+--------------+------+-------------------------------------------+</span><br><span class="line">| host                    | user      | password                                                                 |</span><br><span class="line">+--------------+------+-------------------------------------------+</span><br><span class="line">| localhost              | root     | *A731AEBFB621E354CD41BAF207D884A609E81F5E      |</span><br><span class="line">| 192.168.1.1            | root     | *A731AEBFB621E354CD41BAF207D884A609E81F5E      |</span><br><span class="line">+--------------+------+-------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all privileges  on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&quot;password&quot;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select host,user,password from user;</span></span><br><span class="line">+--------------+------+-------------------------------------------+</span><br><span class="line">| host                    | user      | password                                                                 |</span><br><span class="line">+--------------+------+-------------------------------------------+</span><br><span class="line">| localhost              | root      | *A731AEBFB621E354CD41BAF207D884A609E81F5E     |</span><br><span class="line">| 192.168.1.1            | root      | *A731AEBFB621E354CD41BAF207D884A609E81F5E     |</span><br><span class="line">| %                       | root      | *A731AEBFB621E354CD41BAF207D884A609E81F5E     |</span><br><span class="line">+--------------+------+-------------------------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="参考连接："><a href="#参考连接：" class="headerlink" title="参考连接：#"></a>参考连接：<a href="https://www.cnblogs.com/sablier/p/11605606.html#4141473237">#</a></h3><p><a href="https://blog.csdn.net/jor_ivy/article/details/81323199">https://blog.csdn.net/jor_ivy/article/details/81323199</a></p><p><a href="https://www.52pojie.cn/thread-727433-1-1.html">https://www.52pojie.cn/thread-727433-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述微服务设计</title>
      <link href="2020/12/07/%E7%AE%80%E8%BF%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/12/07/%E7%AE%80%E8%BF%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>一文详解微服务架构本文将介绍微服务架构和相关的组件，介绍他们是什么以及为什么要使用微服务架构和这些组件。本文侧重于简明地表达微服务架构的全局图景，因此不会涉及具体如何使用组件等细节。要理解微服务，首先要先理解不是微服务的那些。通常跟微服务相对的是单体应用，即将所有功能都打包成在一个独立单元的应用程序。从单体应用到微服务并不是一蹴而就的，这是一个逐渐演变的过程。本文将以一个网上超市应用为例来说明这一过程。<strong>最初的需求</strong>几年前，小明和小皮一起创业做网上超市。小明负责程序开发，小皮负责其他事宜。当时互联网还不发达，网上超市还是蓝海。只要功能实现了就能随便赚钱。所以他们的需求很简单，只需要一个网站挂在公网，用户能够在这个网站上浏览商品、购买商品；另外还需一个管理后台，可以管理商品、用户、以及订单数据。我们整理一下功能清单：网站：用户注册、登录功能商品展示下单管理后台：用户管理商品管理订单管理由于需求简单，小明左手右手一个慢动作，网站就做好了。管理后台出于安全考虑，不和网站做在一起，小明右手左手慢动作重播，管理网站也做好了。总体架构图如下：<img src="https://pic2.zhimg.com/50/v2-72023eb73961d33d560cd4419f803103_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-72023eb73961d33d560cd4419f803103_1440w.jpg?source=1940ef5c" alt="img"></p><p>小明挥一挥手，找了家云服务部署上去，网站就上线了。上线后好评如潮，深受各类肥宅喜爱。小明小皮美滋滋地开始躺着收钱。<strong>随着业务发展……</strong>好景不长，没过几天，各类网上超市紧跟着拔地而起，对小明小皮造成了强烈的冲击。在竞争的压力下，小明小皮决定开展一些营销手段：开展促销活动。比如元旦全场打折，春节买二送一，情人节狗粮优惠券等等。拓展渠道，新增移动端营销。除了网站外，还需要开发移动端APP，微信小程序等。精准营销。利用历史数据对用户进行分析，提供个性化服务。……这些活动都需要程序开发的支持。小明拉了同学小红加入团队。小红负责数据分析以及移动端相关开发。小明负责促销活动相关功能的开发。因为开发任务比较紧迫，小明小红没有好好规划整个系统的架构，随便拍了拍脑袋，决定把促销管理和数据分析放在管理后台里，微信和移动端APP另外搭建。通宵了几天后，新功能和新应用基本完工。这时架构图如下：<img src="https://pic1.zhimg.com/50/v2-1292f5a391142ac8da195787e28291bf_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-1292f5a391142ac8da195787e28291bf_1440w.jpg?source=1940ef5c" alt="img">这一阶段存在很多不合理的地方：网站和移动端应用有很多相同业务逻辑的重复代码。数据有时候通过数据库共享，有时候通过接口调用传输。接口调用关系杂乱。单个应用为了给其他应用提供接口，渐渐地越改越大，包含了很多本来就不属于它的逻辑。应用边界模糊，功能归属混乱。管理后台在一开始的设计中保障级别较低。加入数据分析和促销管理相关功能后出现性能瓶颈，影响了其他应用。数据库表结构被多个应用依赖，无法重构和优化。所有应用都在一个数据库上操作，数据库出现性能瓶颈。特别是数据分析跑起来的时候，数据库性能急剧下降。开发、测试、部署、维护愈发困难。即使只改动一个小功能，也需要整个应用一起发布。有时候发布会不小心带上了一些未经测试的代码，或者修改了一个功能后，另一个意想不到的地方出错了。为了减轻发布可能产生的问题的影响和线上业务停顿的影响，所有应用都要在凌晨三四点执行发布。发布后为了验证应用正常运行，还得盯到第二天白天的用户高峰期……团队出现推诿扯皮现象。关于一些公用的功能应该建设在哪个应用上的问题常常要争论很久，最后要么干脆各做各的，或者随便放个地方但是都不维护。尽管有着诸多问题，但也不能否认这一阶段的成果：快速地根据业务变化建设了系统。不过<strong>紧迫且繁重的任务容易使人陷入局部、短浅的思维方式，从而做出妥协式的决策</strong>。在这种架构中，每个人都只关注在自己的一亩三分地，缺乏全局的、长远的设计。长此以往，系统建设将会越来越困难，甚至陷入不断推翻、重建的循环。<strong>是时候做出改变了</strong>幸好小明和小红是有追求有理想的好青年。意识到问题后，小明和小红从琐碎的业务需求中腾出了一部分精力，开始梳理整体架构，针对问题准备着手改造。<em>要做改造，首先你需要有足够的精力和资源。如果你的需求方（业务人员、项目经理、上司等）很强势地一心追求需求进度，以致于你无法挪出额外的精力和资源的话，那么你可能无法做任何事……</em>在编程的世界中，最重要的便是<strong>抽象能力</strong>。微服务改造的过程实际上也是个抽象的过程。小明和小红整理了网上超市的业务逻辑，抽象出公用的业务能力，做成几个公共服务：用户服务商品服务促销服务订单服务数据分析服务各个应用后台只需从这些服务获取所需的数据，从而删去了大量冗余的代码，就剩个轻薄的控制层和前端。这一阶段的架构如下：<img src="https://pic2.zhimg.com/50/v2-0882bc64f3f20939876d3433e51fad72_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-0882bc64f3f20939876d3433e51fad72_1440w.jpg?source=1940ef5c" alt="img">这个阶段只是将服务分开了，数据库依然是共用的，所以一些烟囱式系统的缺点仍然存在：数据库成为性能瓶颈，并且有单点故障的风险。数据管理趋向混乱。即使一开始有良好的模块化设计，随着时间推移，总会有一个服务直接从数据库取另一个服务的数据的现象。数据库表结构可能被多个服务依赖，牵一发而动全身，很难调整。如果一直保持共用数据库的模式，则整个架构会越来越僵化，失去了微服务架构的意义。因此小明和小红一鼓作气，把数据库也拆分了。所有持久化层相互隔离，由各个服务自己负责。另外，为了提高系统的实时性，加入了消息队列机制。架构如下：<img src="https://pic3.zhimg.com/50/v2-90388920d31fe35b791c6a92f758db18_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-90388920d31fe35b791c6a92f758db18_1440w.jpg?source=1940ef5c" alt="img">完全拆分后各个服务可以采用异构的技术。比如数据分析服务可以使用数据仓库作为持久化层，以便于高效地做一些统计计算；商品服务和促销服务访问频率比较大，因此加入了缓存机制等。<em>还有一种抽象出公共逻辑的方法是把这些公共逻辑做成公共的框架库。这种方法可以减少服务调用的性能损耗。但是这种方法的管理成本非常高昂，很难保证所有应用版本的一致性。</em><br><em>数据库拆分也有一些问题和挑战：比如说跨库级联的需求，通过服务查询数据颗粒度的粗细问题等。但是这些问题可以通过合理的设计来解决。总体来说，数据库拆分是一个利大于弊的。</em>微服务架构还有一个技术外的好处，它使整个系统的分工更加明确，责任更加清晰，每个人专心负责为其他人提供更好的服务。在单体应用的时代，公共的业务功能经常没有明确的归属。最后要么各做各的，每个人都重新实现了一遍；要么是随机一个人（一般是能力比较强或者比较热心的人）做到他负责的应用里面。在后者的情况下，这个人在负责自己应用之外，还要额外负责给别人提供这些公共的功能——而这个功能本来是无人负责的，仅仅因为他能力较强/比较热心，就莫名地背锅（这种情况还被美其名曰能者多劳）。结果最后大家都不愿意提供公共的功能。长此以往，团队里的人渐渐变得各自为政，不再关心全局的架构设计。从这个角度上看，使用微服务架构同时也需要组织结构做相应的调整。所以说做微服务改造需要管理者的支持。改造完成后，小明和小红分清楚各自的锅。两人十分满意，一切就像是麦克斯韦方程组一样漂亮完美。然而……<strong>没有银弹</strong>春天来了，万物复苏，又到了一年一度的购物狂欢节。眼看着日订单数量蹭蹭地上涨，小皮小明小红喜笑颜开。可惜好景不长，乐极生悲，突然嘣的一下，系统挂了。以往单体应用，排查问题通常是看一下日志，研究错误信息和调用堆栈。而<strong>微服务架构整个应用分散成多个服务，定位故障点非常困难</strong>。小明一个台机器一台机器地查看日志，一个服务一个服务地手工调用。经过十几分钟的查找，小明终于定位到故障点：促销服务由于接收的请求量太大而停止响应了。其他服务都直接或间接地会调用促销服务，于是也跟着宕机了。<strong>在微服务架构中，一个服务故障可能会产生雪崩效用，导致整个系统故障</strong>。其实在节前，小明和小红是有做过请求量评估的。按照预计，服务器资源是足以支持节日的请求量的，所以肯定是哪里出了问题。不过形势紧急，随着每一分每一秒流逝的都是白花花的银子，因此小明也没时间排查问题，当机立断在云上新建了几台虚拟机，然后一台一台地部署新的促销服务节点。几分钟的操作后，系统总算是勉强恢复正常了。整个故障时间内估计损失了几十万的销售额，三人的心在滴血……事后，小明简单写了个日志分析工具（量太大了，文本编辑器几乎打不开，打开了肉眼也看不过来），统计了促销服务的访问日志，发现在故障期间，商品服务由于代码问题，在某些场景下会对促销服务发起大量请求。这个问题并不复杂，小明手指抖一抖，修复了这个价值几十万的Bug。问题是解决了，但谁也无法保证不会再发生类似的其他问题。微服务架构虽然逻辑设计上看是完美的，但就像积木搭建的华丽宫殿一样，经不起风吹草动。微服务架构虽然解决了旧问题，也引入了新的问题：微服务架构整个应用分散成多个服务，定位故障点非常困难。稳定性下降。服务数量变多导致其中一个服务出现故障的概率增大，并且一个服务故障可能导致整个系统挂掉。事实上，在大访问量的生产场景下，故障总是会出现的。服务数量非常多，部署、管理的工作量很大。开发方面：如何保证各个服务在持续开发的情况下仍然保持协同合作。测试方面：服务拆分后，几乎所有功能都会涉及多个服务。原本单个程序的测试变为服务间调用的测试。测试变得更加复杂。小明小红痛定思痛，决心好好解决这些问题。对故障的处理一般从两方面入手，一方面尽量减少故障发生的概率，另一方面降低故障造成的影响。<img src="https://pic2.zhimg.com/50/v2-9e24974c29f3a57ef1bdc5ea47c59566_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-9e24974c29f3a57ef1bdc5ea47c59566_1440w.jpg?source=1940ef5c" alt="img"><strong>监控 - 发现故障的征兆</strong>在高并发分布式的场景下，故障经常是突然间就雪崩式爆发。所以必须建立完善的监控体系，尽可能发现故障的征兆。微服务架构中组件繁多，各个组件所需要监控的指标不同。比如Redis缓存一般监控占用内存值、网络流量，数据库监控连接数、磁盘空间，业务服务监控并发数、响应延迟、错误率等。因此如果做一个大而全的监控系统来监控各个组件是不大现实的，而且扩展性会很差。一般的做法是让各个组件提供报告自己当前状态的接口（metrics接口），这个接口输出的数据格式应该是一致的。然后部署一个指标采集器组件，定时从这些接口获取并保持组件状态，同时提供查询服务。最后还需要一个UI，从指标采集器查询各项指标，绘制监控界面或者根据阈值发出告警。大部分组件都不需要自己动手开发，网络上有开源组件。小明下载了RedisExporter和MySQLExporter，这两个组件分别提供了Redis缓存和MySQL数据库的指标接口。微服务则根据各个服务的业务逻辑实现自定义的指标接口。然后小明采用Prometheus作为指标采集器，Grafana配置监控界面和邮件告警。这样一套微服务监控系统就搭建起来了：<img src="https://pic4.zhimg.com/50/v2-ab2479317923472e06d5f3e0b8943944_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-ab2479317923472e06d5f3e0b8943944_1440w.jpg?source=1940ef5c" alt="img"><strong>定位问题 - 链路跟踪</strong>在微服务架构下，一个用户的请求往往涉及多个内部服务调用。为了方便定位问题，需要能够记录每个用户请求时，微服务内部产生了多少服务调用，及其调用关系。这个叫做链路跟踪。我们用一个Istio文档里的链路跟踪例子来看看效果：<img src="https://pic2.zhimg.com/50/v2-c1e791200de645b39ed670f9b86109e8_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-c1e791200de645b39ed670f9b86109e8_1440w.jpg?source=1940ef5c" alt="img"><em>图片来自<a href="https://link.zhihu.com/?target=https://istio.io/zh/docs/tasks/telemetry/distributed-tracing/zipkin/">Istio文档</a><em>从图中可以看到，这是一个用户访问productpage页面的请求。在请求过程中，productpage服务顺序调用了details和reviews服务的接口。而reviews服务在响应过程中又调用了ratings的接口。整个链路跟踪的记录是一棵树：<img src="https://pic2.zhimg.com/50/v2-da001bd5ae83cd8fbcca1dec0db8dc24_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-da001bd5ae83cd8fbcca1dec0db8dc24_1440w.jpg?source=1940ef5c" alt="img">要实现链路跟踪，每次服务调用会在HTTP的HEADERS中记录至少记录四项数据：traceId：traceId标识一个用户请求的调用链路。具有相同traceId的调用属于同一条链路。spanId：标识一次服务调用的ID，即链路跟踪的节点ID。parentId：父节点的spanId。requestTime &amp; responseTime：请求时间和响应时间。另外，还需要调用日志收集与存储的组件，以及展示链路调用的UI组件。<img src="https://pic1.zhimg.com/50/v2-c1ac0f0772b5ddedafa44636e75b3ded_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-c1ac0f0772b5ddedafa44636e75b3ded_1440w.jpg?source=1940ef5c" alt="img">以上只是一个极简的说明，关于链路跟踪的理论依据可详见Google的<a href="https://link.zhihu.com/?target=http://bigbully.github.io/Dapper-translation/">Dapper</a>了解了理论基础后，小明选用了Dapper的一个开源实现Zipkin。然后手指一抖，写了个HTTP请求的拦截器，在每次HTTP请求时生成这些数据注入到HEADERS，同时异步发送调用日志到Zipkin的日志收集器中。这里额外提一下，HTTP请求的拦截器，可以在微服务的代码中实现，也可以使用一个网络代理组件来实现（不过这样子每个微服务都需要加一层代理）。链路跟踪只能定位到哪个服务出现问题，不能提供具体的错误信息。查找具体的错误信息的能力则需要由日志分析组件来提供。<strong>分析问题 - 日志分析</strong>日志分析组件应该在微服务兴起之前就被广泛使用了。即使单体应用架构，当访问数变大、或服务器规模增多时，日志文件的大小会膨胀到难以用文本编辑器进行访问，更糟的是它们分散在多台服务器上面。排查一个问题，需要登录到各台服务器去获取日志文件，一个一个地查找（而且打开、查找都很慢）想要的日志信息。因此，在应用规模变大时，我们需要一个日志的“<strong>搜索引擎</strong>”。以便于能准确的找到想要的日志。另外，数据源一侧还需要收集日志的组件和展示结果的UI组件：<img src="https://pic4.zhimg.com/50/v2-b721b26bd974169cffd107ba4eec54f0_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-b721b26bd974169cffd107ba4eec54f0_1440w.jpg?source=1940ef5c" alt="img">小明调查了一下，使用了大名鼎鼎地ELK日志分析组件。ELK是Elasticsearch、Logstash和Kibana三个组件的缩写。Elasticsearch：搜索引擎，同时也是日志的存储。Logstash：日志采集器，它接收日志输入，对日志进行一些预处理，然后输出到Elasticsearch。Kibana：UI组件，通过Elasticsearch的API查找数据并展示给用户。最后还有一个小问题是如何将日志发送到Logstash。一种方案是在日志输出的时候直接调用Logstash接口将日志发送过去。这样一来又（咦，为啥要用“又”）要修改代码……于是小明选用了另一种方案：日志仍然输出到文件，每个服务里再部署个Agent扫描日志文件然后输出给Logstash。<strong>网关 - 权限控制，服务治理</strong>拆分成微服务后，出现大量的服务，大量的接口，使得整个调用关系乱糟糟的。经常在开发过程中，写着写着，忽然想不起某个数据应该调用哪个服务。或者写歪了，调用了不该调用的服务，本来一个只读的功能结果修改了数据……为了应对这些情况，微服务的调用需要一个把关的东西，也就是网关。在调用者和被调用者中间加一层网关，每次调用时进行权限校验。另外，网关也可以作为一个提供服务接口文档的平台。使用网关有一个问题就是要决定在多大粒度上使用：最粗粒度的方案是整个微服务一个网关，微服务外部通过网关访问微服务，微服务内部则直接调用；最细粒度则是所有调用，不管是微服务内部调用或者来自外部的调用，都必须通过网关。折中的方案是按照业务领域将微服务分成几个区，区内直接调用，区间通过网关调用。由于整个网上超市的服务数量还不算特别多，小明采用的最粗粒度的方案：<img src="https://pic4.zhimg.com/50/v2-84a6eee84a5dc3f2e97f56b4148bbc66_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-84a6eee84a5dc3f2e97f56b4148bbc66_1440w.jpg?source=1940ef5c" alt="img"><strong>服务注册于发现 - 动态扩容</strong>前面的组件，都是旨在降低故障发生的可能性。然而故障总是会发生的，所以另一个需要研究的是如何降低故障产生的影响。最粗暴的（也是最常用的）故障处理策略就是冗余。一般来说，一个服务都会部署多个实例，这样一来能够分担压力提高性能，二来即使一个实例挂了其他实例还能响应。冗余的一个问题是使用几个冗余？这个问题在时间轴上并没有一个切确的答案。根据服务功能、时间段的不同，需要不同数量的实例。比如在平日里，可能4个实例已经够用；而在促销活动时，流量大增，可能需要40个实例。因此冗余数量并不是一个固定的值，而是根据需要实时调整的。一般来说新增实例的操作为：部署新实例将新实例注册到负载均衡或DNS上操作只有两步，但如果注册到负载均衡或DNS的操作为人工操作的话，那事情就不简单了。想想新增40个实例后，要手工输入40个IP的感觉……解决这个问题的方案是服务自动注册与发现。首先，需要部署一个服务发现服务，它提供所有已注册服务的地址信息的服务。DNS也算是一种服务发现服务。然后各个应用服务在启动时自动将自己注册到服务发现服务上。并且应用服务启动后会实时（定期）从服务发现服务同步各个应用服务的地址列表到本地。服务发现服务也会定期检查应用服务的健康状态，去掉不健康的实例地址。这样新增实例时只需要部署新实例，实例下线时直接关停服务即可，服务发现会自动检查服务实例的增减。<img src="https://pic1.zhimg.com/50/v2-5b0fea85e31caa7b6ed88cb6fbdf5005_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-5b0fea85e31caa7b6ed88cb6fbdf5005_1440w.jpg?source=1940ef5c" alt="img">服务发现还会跟客户端负载均衡配合使用。由于应用服务已经同步服务地址列表在本地了，所以访问微服务时，可以自己决定负载策略。甚至可以在服务注册时加入一些元数据（服务版本等信息），客户端负载则根据这些元数据进行流量控制，实现A/B测试、蓝绿发布等功能。服务发现有很多组件可以选择，比如说Zookeeper 、Eureka、Consul、Etcd等。不过小明觉得自己水平不错，想炫技，于是基于Redis自己写了一个……<strong>熔断、服务降级、限流</strong></em></em>熔断<strong>当一个服务因为各种原因停止响应时，调用方通常会等待一段时间，然后超时或者收到错误返回。如果调用链路比较长，可能会导致请求堆积，整条链路占用大量资源一直在等待下游响应。所以当多次访问一个服务失败时，应熔断，标记该服务已停止工作，直接返回错误。直至该服务恢复正常后再重新建立连接。<img src="https://pic4.zhimg.com/50/v2-1fbc686e2aeef234b9cfe096274e0206_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-1fbc686e2aeef234b9cfe096274e0206_1440w.jpg?source=1940ef5c" alt="img"><em>图片来自《<a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26772677/">微服务设计</a>》</em></strong>服务降级<strong>当下游服务停止工作后，如果该服务并非核心业务，则上游服务应该降级，以保证核心业务不中断。比如网上超市下单界面有一个推荐商品凑单的功能，当推荐模块挂了后，下单功能不能一起挂掉，只需要暂时关闭推荐功能即可。</strong>限流<strong>一个服务挂掉后，上游服务或者用户一般会习惯性地重试访问。这导致一旦服务恢复正常，很可能因为瞬间网络流量过大又立刻挂掉，在棺材里重复着仰卧起坐。因此服务需要能够自我保护——限流。限流策略有很多，最简单的比如当单位时间内请求数过多时，丢弃多余的请求。另外，也可以考虑分区限流。仅拒绝来自产生大量请求的服务的请求。例如商品服务和订单服务都需要访问促销服务，商品服务由于代码问题发起了大量请求，促销服务则只限制来自商品服务的请求，来自订单服务的请求则正常响应。<img src="https://pic4.zhimg.com/50/v2-9a4737be63222fb4928ac6a26b60c92b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-9a4737be63222fb4928ac6a26b60c92b_1440w.jpg?source=1940ef5c" alt="img"><strong>测试</strong>微服务架构下，测试分为三个层次：端到端测试：覆盖整个系统，一般在用户界面机型测试。服务测试：针对服务接口进行测试。单元测试：针对代码单元进行测试。三种测试从上到下实施的容易程度递增，但是测试效果递减。端到端测试最费时费力，但是通过测试后我们对系统最有信心。单元测试最容易实施，效率也最高，但是测试后不能保证整个系统没有问题。<img src="https://pic2.zhimg.com/50/v2-7da95a84f6c0dfd889ceb96acdf98b88_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-7da95a84f6c0dfd889ceb96acdf98b88_1440w.jpg?source=1940ef5c" alt="img">由于端到端测试实施难度较大，一般只对核心功能做端到端测试。一旦端到端测试失败，则需要将其分解到单元测试：则分析失败原因，然后编写单元测试来重现这个问题，这样未来我们便可以更快地捕获同样的错误。服务测试的难度在于服务会经常依赖一些其他服务。这个问题可以通过Mock Server解决：<img src="https://pic1.zhimg.com/50/v2-3f13157528d14462e26d08d1d6be0817_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-3f13157528d14462e26d08d1d6be0817_1440w.jpg?source=1940ef5c" alt="img">单元测试大家都很熟悉了。我们一般会编写大量的单元测试（包括回归测试）尽量覆盖所有代码。</strong>微服务框架<strong>指标接口、链路跟踪注入、日志引流、服务注册发现、路由规则等组件以及熔断、限流等功能都需要在应用服务上添加一些对接代码。如果让每个应用服务自己实现是非常耗时耗力的。基于DRY的原则，小明开发了一套微服务框架，将与各个组件对接的代码和另外一些公共代码抽离到框架中，所有的应用服务都统一使用这套框架进行开发。使用微服务框架可以实现很多自定义的功能。甚至可以将程序调用堆栈信息注入到链路跟踪，实现代码级别的链路跟踪。或者输出线程池、连接池的状态信息，实时监控服务底层状态。使用统一的微服务框架有一个比较严重的问题：框架更新成本很高。每次框架升级，都需要所有应用服务配合升级。当然，一般会使用兼容方案，留出一段并行时间等待所有应用服务升级。但是如果应用服务非常多时，升级时间可能会非常漫长。并且有一些很稳定几乎不更新的应用服务，其负责人可能会拒绝升级……因此，使用统一微服务框架需要完善的版本管理方法和开发管理规范。</strong>另一条路 - Service Mesh*<em>另一种抽象公共代码的方法是直接将这些代码抽象到一个反向代理组件。每个服务都额外部署这个代理组件，所有出站入站的流量都通过该组件进行处理和转发。这个组件被称为Sidecar。</em>Sidecar不会产生额外网络成本。Sidecar会和微服务节点部署在同一台主机上并且共用相同的虚拟网卡。所以sidecar和微服务节点的通信实际上都只是通过内存拷贝实现的。*<img src="https://pic1.zhimg.com/50/v2-567a3bd63e4894d1358c6141fca7ba72_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-567a3bd63e4894d1358c6141fca7ba72_1440w.jpg?source=1940ef5c" alt="img">*图片来自：<a href="https://link.zhihu.com/?target=http://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh</a>*Sidecar只负责网络通信。还需要有个组件来统一管理所有sidecar的配置。在Service Mesh中，负责网络通信的部分叫数据平面（data plane），负责配置管理的部分叫控制平面（control plane）。数据平面和控制平面构成了Service Mesh的基本架构。<img src="https://pic2.zhimg.com/50/v2-c79af0ff0b1b11ed4586701a3a2e314c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-c79af0ff0b1b11ed4586701a3a2e314c_1440w.jpg?source=1940ef5c" alt="img">*图片来自：<a href="https://link.zhihu.com/?target=http://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh</a>*Sevice Mesh相比于微服务框架的优点在于它不侵入代码，升级和维护更方便。它经常被诟病的则是性能问题。即使回环网络不会产生实际的网络请求，但仍然有内存拷贝的额外成本。另外有一些集中式的流量处理也会影响性能。<strong>结束、也是开始</strong>微服务不是架构演变的终点。往细走还有Serverless、FaaS等方向。另一方面也有人在唱合久必分分久必合，重新发现单体架构……不管怎样，微服务架构的改造暂时告一段落了。小明满足地摸了摸日益光滑的脑袋，打算这个周末休息一下约小红喝杯咖啡。</p><p>微服务架构区别于传统的单体软件架构，是一种为了适应当前互联网后台服务的「<strong>三高需求：高并发、高性能、高可用</strong>」而产生的的软件架构。由于工作需要，本人曾调研过微服务相关内容，其实微服务也没什么神秘的，今天就用图解的形式了来和大家唠唠<strong>什么是微服务？****单体式应用程序</strong>与微服务相对的另一个概念是传统的<strong>单体式应用程序</strong>( Monolithic application )，单体式应用内部包含了所有需要的服务。而且各个服务功能模块有很强的耦合性，也就是相互依赖彼此，很难拆分和扩容。说在做的各位都写过单体程序，大家都没意见吧？给大家举个栗子，刚开始写代码你写的helloworld程序就是单体程序，一个程序包含所有功能，虽然 helloworld 功能很简单。单体应用程序的优点开发简洁，功能都在单个程序内部，便于软件设计和开发规划。容易部署，程序单一不存在分布式集群的复杂部署环境，降低了部署难度。容易测试，没有各种复杂的服务调用关系，都是内部调用方便测试。<br><strong>单体应用程序的缺点</strong>单体程序的缺点一开始不是特别明显，项目刚开始需求少，业务逻辑简单，写代码一时爽，一直爽。噩梦从业务迭代更新，系统日益庞大开始，前期的爽没有了，取而代之的是软件维护和迭代更新的无尽痛苦。<br><img src="https://pic4.zhimg.com/50/v2-28abdbf63886720b624e7d72f9bdb418_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-28abdbf63886720b624e7d72f9bdb418_1440w.jpg?source=1940ef5c" alt="img"><br>由于单体式应用程序就像一个大型容器一样，里面放置了许多服务，且他们都是密不可分的，这导致应用程序在扩展时必须以「应用程序」为单位。当里面有个业务模块负载过高时，并不能够单独扩展该服务，必须扩展整个应用程序（就是这么霸道），这可能导致额外的资源浪费。此外，单体式应用程序由于服务之间的紧密度、相依性过高，这将导致测试、升级有所困难，且开发曲线有可能会在后期大幅度地上升，令开发不易。相较之下「微服务架构」能够解决这个问题。<br><strong>微服务</strong>微服务 (Microservices) 就是一些协同工作小而自治的服务。2014年，<a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/Martin_Fowler">Martin Fowler</a> 与 <a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/w/index.php?title=James_Lewis&action=edit&redlink=1">James Lewis</a> 共同提出了微服务的概念，定义了微服务是由以单一应用程序构成的小服务，自己拥有自己的行程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通信。同时服务会使用最小的规模的集中管理 (例如 <a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/Docker">Docker</a>) 能力，服务可以用不同的编程语言与数据库等组件实现 。「维基百科」<br><strong>举例</strong><br><img src="https://pic4.zhimg.com/50/v2-e4a1491d321a9389cd1e6585d354f3b7_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-e4a1491d321a9389cd1e6585d354f3b7_1440w.jpg?source=1940ef5c" alt="img"><br>还是拿前面的 helloworld 程序来举栗子，想象一下你是 helloworld 公司的 CTO（老板还缺人吗？会写代码的那种），假设你们公司的 helloworld 业务遍布全球，需要编写不同语种的 helloworld 版本，分别输出英语、日语、法语、俄语…现在世界有6000多种语言（奇怪的知识又增加了）。有人会说这还不简单我用<code>switch case</code>语句就完事了，同学，不要较真我就是举个例子，现实中的业务比 helloworld 复杂多了。好了，我们姑且认为按语言输出是个庞大复杂的工作，这时候就可以用微服务架构了，架构图如下：<br><img src="https://pic2.zhimg.com/50/v2-10ffb1a815476a629c526ae66a510c3b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-10ffb1a815476a629c526ae66a510c3b_1440w.jpg?source=1940ef5c" alt="img"><br><strong>微服务与SOA****面向服务的体系结构</strong> <code>SOA (Service-Oriented Architecture)</code> 听起来和微服务很像，但 <code>SOA</code> 早期均使用了总线模式，这种总线模式是与某种技术栈强绑定的，比如：<code>J2EE</code>。这导致很多企业的遗留系统很难对接，切换时间太长，成本太高，新系统稳定性的收敛也需要一些时间，最终 <code>SOA</code> 看起来很美，但却成为了企业级奢侈品，中小公司都望而生畏。 此外，实施<code>SOA</code>时会遇到很多问题，比如通信协议（例如SOAP)的选择、第三方中间件如何选择、服务粒度如何确定等，目前也存在一些关于如何划分系统的指导性原则，但其中有很多都是错误的。<code>SOA</code>并没有告诉你如何划分单体应用成微服务，所以在实施<code>SOA</code>时会遇到很多问题。这些问题再微服务框架中得到很好的解决，你可以认为微服务架构是<code>SOA</code>的一种特定方法。<strong>微服务架构</strong>合久必分，鉴于「单体应用程序」有上述的缺点，单个应用程序被划分成各种小的、互相连接的微服务，一个微服务完成一个比较单一的功能，相互之间保持独立和解耦合，这就是微服务架构。<strong>微服务优点</strong>相对于单体服务，微服务有很多优点，这里列举几个主要的好处技术异构性不同服务内部的开发技术可以不一致，你可以用java来开发helloworld服务A，用golang来开发helloworld服务B，大家再也不用为哪种语言是世界上最好的语言而争论不休。 <img src="https://pic1.zhimg.com/50/v2-7562b0be8f63c7823e09d7a295d9cf99_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-7562b0be8f63c7823e09d7a295d9cf99_1440w.jpg?source=1940ef5c" alt="img"><br>为不同的服务选择最适合该服务的技术，系统中不同部分也可以使用不同的存储技术，比如A服务可以选择redis存储，B服务你可以选择用MySQL存储，这都是允许的，你的服务你做主。<br>隔离性一个服务不可用不会导致另一个服务也瘫痪，因为各个服务是相互独立和自治的系统。这在单体应用程序中是做不到的，单体应用程序中某个模块瘫痪，必将导致整个系统不可用，当然，单体程序也可以在不同机器上部署同样的程序来实现备份，不过，同样存在上面说的资源浪费问题。可扩展性庞大的单体服务如果出现性能瓶颈只能对软件整体进行扩展，可能真正影响性能的只是其中一个很小的模块，我们也不得不付出升级整个应用的代价。这在微服务架构中得到了改善，你可以只对那些影响性能的服务做扩展升级，这样对症下药的效果是很好的。简化部署如果你的服务是一个超大的单体服务，有几百万行代码，即使修改了几行代码也要重新编译整个应用，这显然是非常繁琐的，而且软件变更带来的不确定性非常高，软件部署的影响也非常大。在微服务架构中，各个服务的部署是独立的，如果真出了问题也只是影响单个服务，可以快速回滚版本解决。易优化微服务架构中单个服务的代码量不会很大，这样当你需要重构或者优化这部分服务的时候，就会容易很多，毕竟，代码量越少意味着代码改动带来的影响越可控。<br><strong>微服务缺点</strong>我们上面一直在强调微服务的好处，但是，微服务架构不是万能的，并不能解决所有问题，其实这也是微服务把单体应用拆分成很多小的分布式服务导致的，所谓人多手杂，服务多起来管理的不好各种问题就来了。为了解决微服务的缺点，前辈们提出了下面这些概念。服务注册与发现微服务之间相互调用完成整体业务功能，如何在众多微服务中找到正确的目标服务地址，这就是所谓「服务发现」功能。常用的做法是服务提供方启动的时候把自己的地址上报给「服务注册中心」，这就是「服务注册」。服务调用方「订阅」服务变更「通知」，动态的接收服务注册中心推送的服务地址列表，以后想找哪个服务直接发给他就可以。<br><img src="https://pic4.zhimg.com/50/v2-3578297e7768e6c99d1fa1f33ebde659_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-3578297e7768e6c99d1fa1f33ebde659_1440w.jpg?source=1940ef5c" alt="img"><br>服务监控单体程序的监控运维还好说，大型微服务架构的服务运维是一大挑战。服务运维人员需要实时的掌握服务运行中的各种状态，最好有个控制面板能看到服务的内存使用率、调用次数、健康状况等信息。这就需要我们有一套完备的服务监控体系，包括拓扑关系、监控（Metrics）、日志监控（Logging）、调用追踪（Trace）、告警通知、健康检查等，防患于未然。服务容错任何服务都不能保证100%不出问题，生产环境复杂多变，服务运行过程中不可避免的发生各种故障（宕机、过载等等），工程师能够做的是在故障发生时尽可能降低影响范围、尽快恢复正常服务。程序员为此避免被祭天，需要引入「熔断、隔离、限流和降级、超时机制」等「服务容错」机制来保证服务持续可用性。服务安全有些服务的敏感数据存在安全问题，「服务安全」就是对敏感服务采用安全鉴权机制，对服务的访问需要进行相应的身份验证和授权，防止数据泄露的风险，安全是一个长久的话题，在微服务中也有很多工作要做。<strong>服务治理</strong>说到「治理」一般都是有问题才需要治理，我们平常说环境治理、污染治理一个意思，微服务架构中的微服务越来越多，上面说的那些问题就更加显现，为了解决上面微服务架构缺陷「服务治理」就出现了。<br><img src="https://pic4.zhimg.com/50/v2-238e741a39592caeb236a001013580a0_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-238e741a39592caeb236a001013580a0_1440w.jpg?source=1940ef5c" alt="img"><br>微服务的那些问题都要公司技术团队自己解决的话，如果不是大型公司有成熟的技术团队，估计会很头大。幸好，有巨人的肩膀可以借给我们站上去，通过引入「微服务框架」来帮助我们完成服务治理。<strong>微服务框架</strong>介绍一些业界比较成熟的微服务框架。<strong>Dubbo</strong>是阿里巴巴公司开源的一个Java高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。 Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现 。2011 年末对外开源，仅支持 Java 语言。官网：<code>http://dubbo.apache.org/zh-cn/</code><br><strong>Tars</strong>腾讯内部使用的微服务架构 TAF（Total Application Framework）多年的实践成果总结而成的开源项目。 仅支持 C++ 语言，目前在腾讯内部应用也非常广泛。2017 年对外开源，仅支持 C++ 语言。源码： <code>https://github.com/TarsCloud/Tars/</code><br><img src="https://pic1.zhimg.com/50/v2-8fe78be188c0577ec94e2fb443ec09e2_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-8fe78be188c0577ec94e2fb443ec09e2_1440w.jpg?source=1940ef5c" alt="img"><br><strong>本命鹅厂 TARS 框架介绍 PPT 已下载，不想自己麻烦去找的同学，拉到文末阅读原文链接获取****Motan</strong>是新浪微博开源的一个Java 框架。Motan 在微博平台中已经广泛应用，每天为数百个服务完成近千亿次的调用。于 2016 年对外开源，仅支持 Java 语言。官方指南： <code>https://github.com/weibocom/motan/wiki/zh_userguide</code><img src="https://pic2.zhimg.com/50/v2-8980cffbcf69b0987418b0b003d2a1a2_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-8980cffbcf69b0987418b0b003d2a1a2_1440w.jpg?source=1940ef5c" alt="img"><br><strong>gRPC</strong>是Google开发的高性能、通用的开源RPC框架，其由Google主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers)序列化协议开发。本身它不是分布式的，所以要实现上面的框架的功能需要进一步的开发。2015 年对外开源的跨语言 RPC 框架，支持多种语言。中文教程：<code>https://doc.oschina.net/grpc?t=58008</code><img src="https://pic4.zhimg.com/50/v2-c0eb4a1e7411af2da9ffa76b9969ef33_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-c0eb4a1e7411af2da9ffa76b9969ef33_1440w.jpg?source=1940ef5c" alt="img"><strong>thrift</strong>最初是由 Facebook 开发的内部系统跨语言的高性能 RPC 框架，2007 年贡献给了 Apache 基金，成为 Apache 开源项目之一， 跟 gRPC 一样，Thrift 也有一套自己的接口定义语言 IDL，可以通过代码生成器，生成各种编程语言的 Client 端和 Server 端的 SDK 代码，支持多种语言。<img src="https://pic2.zhimg.com/50/v2-08205252ae7a4b5632c3087ff7167a85_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-08205252ae7a4b5632c3087ff7167a85_1440w.jpg?source=1940ef5c" alt="img"><strong>微服务框架和RPC</strong>很多人对这两个概念有点混淆，微服务框架上面我们说过了，我们再来看下RPC的概念。<strong>什么是RPC</strong><code>RPC (Remote Procedure Call)</code>远程过程调用是一个计算机通信协议。我们一般的程序调用是本地程序内部的调用，<code>RPC</code>允许你像调用本地函数一样去调用另一个程序的函数，这中间会涉及网络通信和进程间通信，但你无需知道实现细节，<code>RPC</code>框架为你屏蔽了底层实现。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过<strong>发送请求-接受回应</strong>进行信息交互的系统。 <strong>两者关系</strong><code>RPC</code>和微服务框架的关系我的理解，微服务框架一般都包含了<code>RPC</code>的实现和一系列「服务治理」能力，是一套软件开发框架。我们可以基于这个框架之上实现自己的微服务，方便的利用微服务框架提供的「服务治理」能力和<code>RPC能力</code>，所以微服务框架也被有些人称作<code>RPC框架</code>。<br><strong>下一代微服务架构</strong><code>Service Mesh</code>（服务网格）被认为是下一代微服务架构，<code>Service Mesh</code>并没有给我们带来新的功能，它是用于解决其他工具已经解决过的服务网络调用、限流、熔断和监控等问题，只不过这次是在<code>Cloud Native</code> 的 <code>kubernetes</code> 环境下的实现。 <strong>特点</strong>Service Mesh 有如下几个特点：应用程序间通讯的中间层轻量级网络代理应用程序无感知解耦应用程序的重试/超时、监控、追踪和服务发现目前两款流行的 <code>Service Mesh</code> 开源软件 <code>[Istio](https://istio.io/)</code> 和 <code>[Linkerd](https://linkerd.io/)</code>都可以直接在<code>kubernetes</code> 中集成，其中<code>Linkerd</code>已经成为<code>云原生计算基金会 CNCF (Cloud Native Computing Foundation)</code> 成员。<strong>Why Service Mesh</strong>为什么现有微服务架构已经解决的问题还要用<code>Service Mesh</code>呢？这个问题问的好。<br><img src="https://pic1.zhimg.com/50/v2-a7de7ff7d10faf4f58b8bee244d50e60_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-a7de7ff7d10faf4f58b8bee244d50e60_1440w.jpg?source=1940ef5c" alt="img"><br>回答问题之前，先看下<code>istio.io</code>上对<code>service mesh</code>的解释，我觉得挺好的，摘抄出来：As a service mesh grows in size and complexity, it can become harder to understand and manage. Its requirements can include discovery, load balancing, failure recovery, metrics, and monitoring. A service mesh also often has more complex operational requirements, like A/B testing, canary rollouts, rate limiting, access control, and end-to-end authentication.<br>makes it easy to create a network of deployed services with load balancing, service-to-service authentication, monitoring, and more, <strong>with few or no code changes in service code.</strong>  试着总结一下：随着微服务的增多复杂程度也增加，管理变得更加困难，微服务架构虽然解决了「网络调用、限流、熔断和监控」等问题，但大多数框架和开源软件对原有业务是<code>侵入式</code>的，也就是需要在业务服务程序中集成相关的「服务治理」组件。<code>Service Mesh</code>之于微服务，就像<code>TCP/IP</code>之于互联网，<code>TCP/IP</code>为网络通信提供了面向连接的、可靠的、基于字节流的基础通信功能，你不再需要关心底层的重传、校验、流量控制、拥塞控制。用了<code>Service Mesh</code>你也不必去操心「服务治理」的细节，不需要对服务做特殊的改造，所有业务之外的功能都由<code>Service Mesh</code>帮你去做了。它就像一个<code>轻量级网络代理</code> 对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 <code>serivce mesh</code> 中实现 。<img src="https://pic2.zhimg.com/50/v2-2a2e5b537c564ad8cf1dcd1b47d5d68a_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-2a2e5b537c564ad8cf1dcd1b47d5d68a_1440w.jpg?source=1940ef5c" alt="img"><strong>写在最后</strong>在IT世界没有什么技术是永不过时的，微服务架构的演进就是一个例子，从单体程序到微服务架构，再到<code>service mesh</code>架构，我不知道下一个技术迭代点是什么时候，但我知道微服务架构肯定还会更新，IT人更应该建立终身学习习惯。   当然更重要的是拥有对技术的热情，热于拥抱变化、接受新技术，当我看到新技术我是兴奋的，内心os是<code>厉害了，还能这么玩！</code>，希望你也有这般热情，而不仅仅是面向工资编程，生活会有趣很多。   </p><p>“微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务和服务之间采用轻量级的通信机制相互沟通（通常是基于HTTP的Restful API).每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构”—- Martin Fowler的博客<strong>微服务的特征与界定**</strong><img src="https://pic1.zhimg.com/50/v2-ccdb9ae2fec048e0ed02beb5156dff2e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-ccdb9ae2fec048e0ed02beb5156dff2e_1440w.jpg?source=1940ef5c" alt="img">*<strong><em>单体应用*</em> <strong>vs</strong> <strong>微服务架构</strong> <strong>优点</strong>提升开发交流，每个服务足够内聚，足够小，代码容易理解；服务独立测试、部署、升级、发布；按需定制的DFX，资源利用率，每个服务可以各自进行x扩展和z扩展，而且，每个服务可以根据自己的需要部署到合适的硬件服务器上；每个服务按需要选择HA的模式，选择接受服务的实例个数；容易扩大开发团队，可以针对每个服务（service）组件开发团队；提高容错性（fault isolation），一个服务的内存泄露并不会让整个系统瘫痪；新技术的应用，系统不会被长期限制在某个技术栈上；</strong>缺点<strong>没有银弹，微服务提高了系统的复杂度；开发人员要处理分布式系统的复杂性；服务之间的分布式通信问题；服务的注册与发现问题；服务之间的分布式事务问题；数据隔离再来的报表处理问题；服务之间的分布式一致性问题；服务管理的复杂性，服务的编排；不同服务实例的管理。<img src="https://pic4.zhimg.com/50/v2-559b6e5b1a8d1b4460bf2ccd7493f7b6_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-559b6e5b1a8d1b4460bf2ccd7493f7b6_1440w.jpg?source=1940ef5c" alt="img">Chris Richardson提出的微服务的三维扩展模型：X轴，服务实例水平扩展，保证可靠性与性能；Y轴，功能的扩展，服务单一职责，功能独立；Z轴，数据分区，数据独立，可靠性保证；<img src="https://pic1.zhimg.com/50/v2-f592c2d646822ddeceea1b145526ccdd_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-f592c2d646822ddeceea1b145526ccdd_1440w.jpg?source=1940ef5c" alt="img"><strong>通信问题</strong>微服务的拆分一般会带来IPC通信的问题。通信机制需要完备可靠，服务之间的通信选择应尽量单一，从两个维度对通信的模式进行划分：第一个维度是一对一还是一对多：一对一：每个客户端请求有一个服务实例来响应。一对多：每个客户端请求有多个服务实例来响应。第二个维度是这些交互式同步还是异步：同步模式：客户端请求需要服务端即时响应，甚至可能由于等待而阻塞。异步模式：客户端请求不会阻塞进程，服务端的响应可以是非即时的。<img src="https://pic1.zhimg.com/50/v2-10882e9f6662309eb137c6767faa381c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-10882e9f6662309eb137c6767faa381c_1440w.jpg?source=1940ef5c" alt="img">微服务架构认为，服务间通信应该就只有这几种模式。AC出于时延、编程模型等方面的考虑，提供了一套通信机制，业务之间的通信要按需选用。</strong>服务的发现与注册<strong>一般的微服务架构里都有两层API GetWay，一层是外部API GetWay，用于用户访问系统；一层是内部API GetWay，内部服务之间的API GetWay。内部API GetWay要解决的问题就是服务发现和服务注册。从这也能看出来，为什么通信的方式要尽量单一，API GetWay有一项工作就是协议转换。微服务可能是HA主备的，也可能是LB的，怎么找到一个服务？有两种思路，客户端发现（左图）,客户端去注册中心查询服务实例列表，自行选择；另一种是服务端发现（右图），添加LB模块，客户端把请求发向LB，由LB根据负载均衡策略选择服务实例；<img src="https://pic3.zhimg.com/50/v2-a9e55ce3d4c3bebe6353001a1733ca76_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-a9e55ce3d4c3bebe6353001a1733ca76_1440w.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/50/v2-8c1c5389e15b55f08d81696810dc39fb_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-8c1c5389e15b55f08d81696810dc39fb_1440w.jpg?source=1940ef5c" alt="img">微服务注册表的典型实现： ETCD : 是一个高可用，分布式的，一致性的，键值表，用于共享配置和服务发现。两个著名案例包括Kubernetes和Cloud Foundry。<br> ZK: 是一个广泛使用，为分布式应用提供高性能整合的服务。Apache ZooKeeper最初是Hadoop的子项目，现在已经变成顶级项目。</strong>微服务架构的部署*<strong>*微服务架构对于部署的要求**：部署速率，Amazon与NetFlix都有千个服务，每个服务都有持续部署的要求，Amazon的服务每秒都会部署一次；部署自动化，一切都要自动化，IaaS与PaaS解决I层与P层自动化部署，微服务有自动部署与运维工具，并实现Auto-Scaling；部署提供基础机制，为实现分布式部署要求，部署机制一般都有资源池化、服务的生命周期来看，部署服务 与服务注册是一体的； <strong>部署的粒度：</strong>VM: 部署系统管理的VM的生命周期，如当前AC的iDeploy部署，把AC部署拆分为每个VM的安装、配置与启动；这种方式粒度粗，支撑不了微服务的部署(除非一个服务占用一个VM); App: 管理应用的生命周期及部署形态，生命周期分为部署、配置、启动、升级等，部署形态有主备、LB、Daemon等；Container: 相比于APP，容器有更好的隔离性和移植性；微服务：一般的微服务要么是APP，要么是Container，但AC就不是。受限于ONOS架构，我们的服务是一组feature；</strong>MS部署的解决方案：<strong>TOSCA: 云应用拓扑标准，一种描述云化部署的DSL，我司主推一个标准，PaaS的部署系统和MANO用的都是TOSCA；Kubernetes:Google开源的容器管理系统，提出了Pod/Service/Labels等概念，以ETCD为中心，PaaS基于K8S开发出了我司的云化部署平台；Mesosphere:DCOS，数据中心操作系统，基于mesos实现资源池化，有自身的编排工具；分布式LAB基于DCOS的思想做出了一套部署与集群管理系统(HASEN)；</strong>微服务的划分<strong>微服务的划分主要是保证微服务功能内聚，职责单一。一般使用DDD(Domain Drive Design)的思想与方法对微服务进行划分，这种方法有点类似于数据库ER图的划分，不断分解数据，保证关系型数据库符合原子性、冗余性的范式要求。当然，微服务的划分比数据表划分更复杂，也没有微服务范式的概念，但思想是一致的。更多的内容，请参考《领域驱动设计》这本书。</strong>分布式一致性<strong>有两个大的思路：全局的分布式事务；事件驱动；分布式事务就是现在AC的思路，在设计开发中；事件驱动，忽略了事务的概念，由每个服务在应用层面保存服务的状态，服务之间的通信使用事件机制通知；此种方法可以保证微服务间的独立性，但把问题交给了服务的设计者；具体事件驱动的案例见参考材料；</strong>数据隔离问题<strong>微服务之间数据隔离可以保证服务的独立升级与部署，数据隔离有三个维度：数据表级隔离；数据表之间独立，没有外键关系；数据库级隔离；不同服务有不同的数据库；DBMS级隔离；不同服务有不同的数据库管理系统；一般做到数据库级隔离就可以了，服务之间的数据交换使用服务间接口。</strong>从单体到微服务<strong>微服务架构是一个衍生架构，都是从单体架构演化而来的。因为微服务架构本身的复杂性，初创系统出于快速开发、快速验证的考虑，很少在一开始就使用微服务架构。加之微服务的概念在这两年才火，大型单体应用也是看到了开发与维护的成本在不断增加，才会有转型微服务的动力。因此，如何从单体到微服务是一个普遍问题。从单体到微服务的原则：</strong>逐步演进，不要全部重构**。全部重构，带来极大的成本和风险，系统会有很长的不稳定期。而且，最终的效果也不会很好，在设计时很难想到所有问题。微服务架构的演化思路应该是一步步铺基础设施，一点点拆分微服务。 <strong>DevOps与微服务架构</strong>DevOps是09年提出来的概念，但一直没有太火。直到14年，容器与微服务架构的提出，DevOps才得到了快速的发展。DevOps不单是一个实现自动化的工具链，而是组织、流程与技术的结合。组织上强调全栈团队、团队特性专一、团队自治；技术上打通开发与运维；流程上强调端到端、可视化、灰度升级、A/B测试等。对于DevOps，MS不是必须的，但MS为DevOps提供了最好的架构支撑，对于组织和流程的要求也是一致的。所以，也有人称MS是DevOps架构。<img src="https://pic2.zhimg.com/50/v2-a60c186935f935b2af0bec9226a67097_hd.jpg?source=1940ef5c" alt="img"><br> 我观察业界这么多年，做微服务没几个好死的。据说马丁是微服务最初的提出者，但是我看了他的提法，狗屁不通。1， 微服务的起因是服务化普及以后带来的高开发成本、协作成本2， 但服务化本身是正确的，所以只能在降低成本、轻量级上做改进；而不是推翻。微服务的命名大概就是这么个初衷。3， 但独立部署比内部jar性能高？成本低？运维成本低？Restful比RPC性能高？成本低？运维成本低？拆分比合并成本低？效率高？这些全是增加成本的。他病看对了，药开错了。只有名字是对的，药方基本全错。尽管如此，我依然推崇微服务。不过不推荐大家去拥抱他——仅仅用，但是不要深入用，不要拥抱。比如框架换个皮，从以前框架换成微服务，你就能立即享受微服务的优势了。但是如果你进一步拥抱，拆分，独立部署。。。。。麻烦等着你呢（restful相对没那么重要，仅仅10%以内的性能消耗，并没有带来其他太大的弊病，但是带来了体系开放性——虽然99%的情况下没什么用。但是也凑合吧）本世纪初，IT圈面临的问题是信息化死局：上ERP是找死，不上是等死。为啥上了找死，不上等死？早期的信息化系统都是全家桶式的全套解决方案。比如买了个ERP挺合适，但是OA，财务什么的可能不合适。但是不能分开用，因为是封闭体系、不开放（闭环？）于是财务、OA什么的就得捏着鼻子用。业务不兼容？业务改造啊。。。。客户不接受？……这是找死。不上呢，你得想清楚了。未来的企业是不是还用算盘，容得下老古董。那是等死。SOA解决了这个问题。SOA在08年-10年左右开始大热、成熟。其中是走了一些“弯路”的。比如早起SOA方案疯狂推荐的时ESB，但今天ESB罕有人用。用的多数是拆分+RPC（dubbo等）这种P2PRPC的方案。这个“弯路”加引号是因为今天再去审视dubbo/springcloud等这些P2PRC的SOA架构普及以后，发现了很多问题，比如服务粒度细、体系架构复杂、开发效率低、服务治理难，监控维护难等……需要一大堆基础设施建设或者说擦屁股方案打补丁。这么看起来，ESB看起来更优秀，只不过门槛高，但是和那一大堆擦屁股方案比起来，他简单到极致了。P2PRPC才是弯路啊。其实这种弯路，OSGI（支付宝要不要给我点个赞，顺便把你们的弯路分享一下，还有你们在DDD上的“成就”），RIA，RCP，WEBSERVICE一样都走过。我们今天的微服务、中台一样正在走这个弯路。回顾所有这些曲折的话，你会发现并不一定道路是曲折的，前途是光明的。比如有些就一路曲折到火葬场。但是，对一个人成长最大的其实是弯路。走弯路之前你想了什么？是不是狐狸精勾引你了？还是你有什么心魔？你为什么做了这个选择 ？其中关键的要素是什么？我们漏掉了什么？自己还有哪些缺点？我们对现实世界的规律有没有多一点认识？以后怎么改进？所以其实相比现在业界各种效果不确定的所谓技术盛宴营销，我其实更想听他们走了啥弯路，开心开心，也更有收获一点。我在某宝的时候，就发现有个规律，内部最核心的最有用的技术架构和思想，从来不分享。外界几乎一个字都搜索不到，那些没什么用，但是看起来特别难，特别高大上的，分享的特别欢乐。外面趋之若鹜。这其实是一种很委婉的劝降行为：嗨，这事太难了，你不行，赶紧投降吧。我很牛逼的，都用我的。当然，绝大多数人都不会投降，但是的确会认可某里技术牛逼的现实。并且上进的人会追求进步，然后走了弯路。不过人家并没有说谎啊。所以，现在技术圈的文章，技术上看一半，信只能信1/4；还得多琢磨琢磨技术以外的因素。只是 看看，寻个思路，想还是要自己想，以自己为主。微服务、中台等，一样的 古人说圣人不止，大盗不止；原理就是大家推崇什么，就坏人一定就伪装什么，推崇的越厉害，坏人就越具有破坏性。技术这词，现在就这意思。现代人说：钱多的地方是非多。IT圈就能例外？每个人脸上写着他是天生的技术人？技术是纯粹的，但是技术后面的人是不纯粹的。技术不会自己张嘴说话。</p><p>一、全面了解微服务a : 4个典型特点1.单个服务尽量专注一件事情，高内聚、低耦合；2.进程隔离；3.每个服务可以独立的开发、测试、构建、部署；4.小且灵活；<br><img src="https://pic4.zhimg.com/50/v2-2f5ac5ac2dbbc17431e4539a5a22ffa0_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-2f5ac5ac2dbbc17431e4539a5a22ffa0_1440w.jpg?source=1940ef5c" alt="img"><br>b : 无与伦比的优点1.交付周期每个服务可以独立的开发、测试和交付，降低周期；2.快速沟通小团队开发，降低代码耦合度导致的沟通成本；业务按服务拆分，新人不需要了解整体架构，上手快；3.定制化可以根据市场需求，灵活多变的组合出新的业务场景；4.隔离性进程隔离方式，故障范围有效控制；5.技术栈可以根据需求按服务选择不同技术栈；6.演进优化可以按照服务粒度进行演进优化；二、微服务基础架构关键点下面脑图中芒果色标注的七个模块，被认为认为是构建微服务 2.0 技术栈的核心模块，本文后面的选型会分别基于这些模块展开。对于每个模块我也列出一些核心架构关注点，在选择具体产品时，需要尽可能覆盖到这些关注点。下图是我近期工作总结和参考的一个微服务技术体系，我想同时分享给一线架构师或者工程师参考，其中粉红色标注的模块是和微服务关系最密切的模块，大家在做技术选型时，可以同时对照这个体系。<br><img src="https://pic2.zhimg.com/50/v2-b802789f34a329d524f11075bb2a45b6_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-b802789f34a329d524f11075bb2a45b6_1440w.jpg?source=1940ef5c" alt="img"><br>三、 服务框架选型服务框架是一个比较成熟的领域，有太多可选项。Spring Boot/Cloud 由于 Spring 社区的影响力和 Netflix 的背书，目前可以认为是构建 Java 微服务的一个社区标准，Spring Boot 目前在 GitHub 上有超过 20k 星。基于 Spring 的框架本质上可以认为是一种 RESTful 框架（不是 RPC 框架），序列化协议主要采用基于文本的 JSON，通讯协议一般基于 HTTP。RESTful 框架天然支持跨语言，任何语言只要有 HTTP 客户端都可以接入调用，但是客户端一般需要自己解析 payload。目前 Spring 框架也支持 Swagger 契约编程模型，能够基于契约生成各种语言的强类型客户端，极大方便不同语言栈的应用接入，但是因为 RESTful 框架和 Swagger 规范的弱契约特性，生成的各种语言客户端的互操作性还是有不少坑的。Dubbo 是阿里多年构建生产级分布式微服务的技术结晶，服务治理能力非常丰富，在国内技术社区具有很大影响力，目前 github 上有超过 16k 星。Dubbo 本质上是一套基于 Java 的 RPC 框架，当当 Dubbox 扩展了 Dubbo 支持 RESTful 接口暴露能力。Dubbo 主要面向 Java 技术栈，跨语言支持不足是它的一个弱项，另外因为治理能力太丰富，以至于这个框架比较重，完全用好这个框架的门槛比较高，但是如果你的企业基本上投资在 Java 技术栈上，选 Dubbo 可以让你在服务框架一块站在较高的起点上，不管是性能还是企业级的服务治理能力，Dubbo 都做的很出色。新浪微博开源的 Motan（GitHub 4k stars）也不错，功能和 Dubbo 类似，可以认为是一个轻量裁剪版的 Dubbo。gRPC 是谷歌近年新推的一套 RPC 框架，基于 protobuf 的强契约编程模型，能自动生成各种语言客户端，且保证互操作。支持 HTTP2 是 gRPC 的一大亮点，通讯层性能比 HTTP 有很大改进。Protobuf 是在社区具有悠久历史和良好口碑的高性能序列化协议，加上 Google 公司的背书和社区影响力，目前 gRPC 也比较火，GitHub 上有超过 13.4k 星。目前看 gRPC 更适合内部服务相互调用场景，对外暴露 RESTful 接口可以实现，但是比较麻烦（需要 gRPC Gateway 配合），所以对于对外暴露 API 场景可能还需要引入第二套 RESTful 框架作为补充。总体上 gRPC 这个东西还比较新，社区对于 HTTP2 带来的好处还未形成一致认同，建议谨慎投入，可以做一些试点。四、 运行时支撑服务选型运行时支撑服务主要包括服务注册中心，服务路由网关和集中式配置中心三个产品。服务注册中心，如果采用 Spring Cloud 体系，则选择 Eureka 是最佳搭配，Eureka 在 Netflix 经过大规模生产验证，支持跨数据中心，客户端配合 Ribbon 可以实现灵活的客户端软负载，Eureka 目前在 GitHub 上有超过 4.7k 星；Consul 也是不错选择，天然支持跨数据中心，还支持 KV 模型存储和灵活健康检查能力，目前在 GitHub 上有超过 11k 星。服务网关也是一个比较成熟的领域，有很多可选项。如果采用 Spring Cloud 体系，则选择 Zuul 是最佳搭配，Zuul 在 Netflix 经过大规模生产验证，支持灵活的动态过滤器脚本机制，异步性能不足（基于 Netty 的异步 Zuul 迟迟未能推出正式版）。Zuul 网关目前在 github 上有超过 3.7k 星。基于 Nginx/OpenResty 的 API 网关 Kong 目前在 github 上比较火，有超过 14.1k 星。因为采用 Nginx 内核，Kong 的异步性能较强，另外基于 lua 的插件机制比较灵活，社区插件也比较丰富，从安全到限流熔断都有，还有不少开源的管理界面，能够集中管理 Kong 集群。配置中心，Spring Cloud 自带 Spring Cloud Config（GitHub 0.75k stars），个人认为算不上生产级，很多治理能力缺失，小规模场景可以试用。个人比较推荐携程的 Apollo 配置中心，在携程经过生产级验证，具备高可用，配置实时生效（推拉结合），配置审计和版本化，多环境多集群支持等生产级特性，建议中大规模需要对配置集中进行治理的企业采用。Apollo 目前在 github 上有超过 3.4k 星。五、服务监控选型主要包括日志监控，调用链监控，Metrics 监控，健康检查和告警通知等产品。ELK 目前可以认为是日志监控的标配，功能完善开箱即用，ElasticSearch 目前在 GitHub 上有超过 28.4k 星。Elastalert(GitHub 4k stars) 是 Yelp 开源的针对 ELK 的告警通知模块。调用链监控目前社区主流是点评 CAT（GitHub 4.3k stars），Twitter 之前开源现在由 OpenZipkin 社区维护的 Zipkin（GitHub 7.5k stars）和 Naver 开源的 Pinpoint（GitHub 5.3k stars）。个人比较推荐点评开源的 CAT，在点评和国内多家互联网公司有落地案例，生产级特性和治理能力较完善，另外 CAT 自带告警模块。下面是我之前对三款产品的评估表，供参考。<br><img src="https://pic1.zhimg.com/50/v2-faa4396cd0713be12053052f349d0c2e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-faa4396cd0713be12053052f349d0c2e_1440w.jpg?source=1940ef5c" alt="img"><br>Metrics 监控主要依赖于时间序列数据库 (TSDB)，目前较成熟的产品是 StumbleUpon 公司开源的基于 HBase 的 OpenTSDB（基于 Cassandra 的 KariosDB 也是一个选择，GitHub 1.1k stars，它基本上是 OpenTSDB 针对 Cassandra 的一个改造版），OpenTSDB 具有分布式能力可以横向扩展，但是相对较重，适用于中大规模企业，OpenTSDB 目前在 GitHub 上有近 2.9k 星。OpenTSDB 本身不提供告警模块，Argus（GitHub 0.29k 星）是 Salesforce 开源的基于 OpenTSDB 的统一监控告警平台，支持丰富的告警函数和灵活的告警配置，可以作为 OpenTSDB 的告警补充。近年也出现一些轻量级的 TSDB，如 InfluxDB（GitHub 12.4k stars）和 Prometheus（GitHub 14.3k stars），这些产品函数报表能力丰富，自带告警模块，但是分布式能力不足，适用于中小规模企业。Grafana（GitHub 19.9k stars）是 Metrics 报表展示的社区标配。社区还有一些通用的健康检查和告警产品，例如 Sensu（GitHub 2.7k stars），能够对各种服务（例如 Spring Boot 暴露的健康检查端点，时间序列数据库中的 metrics，ELK 中的错误日志等）定制灵活的健康检查 (check)，然后用户可以针对 check 结果设置灵活的告警通知策略。Sensu 在 Yelp 等公司有落地案例。其它类似产品还有 Esty 开源的 411（GitHub 0.74k 星）和 Zalando 的 ZMon(GitHub 0.15k 星)，它们是分别在 Esty 和 Zalando 落地的产品，但是定制 check 和告警配置的使用门槛比较高，社区不热，建议有定制自研能力的团队试用。ZMon 后台采用 KairosDB 存储，如果企业已经采用 KariosDB 作为时间序列数据库，则可以考虑 ZMon 作为告警通知模块。六、服务容错选型针对 Java 技术栈，Netflix 的 Hystrix（github 12.4k stars）把熔断、隔离、限流和降级等能力封装成组件，任何依赖调用（数据库，服务，缓存）都可以封装在 Hystrix Command 之内，封装后自动具备容错能力。Hystrix 起源于 Netflix 的弹性工程项目，经过 Netflix 大规模生产验证，目前是容错组件的社区标准，GitHub 上有超 12k 星。其它语言栈也有类似 Hystrix 的简化版本组件。Hystrix 一般需要在应用端或者框架内埋点，有一定的使用门槛。对于采用集中式反向代理（边界和内部）做服务路由的公司，则可以集中在反向代理上做熔断限流，例如采用 Nginx（GitHub 5.1k stars）或者 Kong（GitHub 11.4k stars）这类反向代理，它们都插件支持灵活的限流容错配置。Zuul 网关也可以集成 Hystrix 实现网关层集中式限流容错。集中式反向代理需要有一定的研发和运维能力，但是可以对限流容错进行集中治理，可以简化客户端。七、 后台服务选型后台服务主要包括消息系统，分布式缓存，分布式数据访问层和任务调度系统。后台服务是一个相对比较成熟的领域，很多开源产品基本可以开箱即用。消息系统，对于日志等可靠性要求不高的场景，则 Apache 顶级项目 Kafka（GitHub 7.2k stars）是社区标配。对于可靠性要求较高的业务场景，Kafka 其实也是可以胜任，但企业需要根据具体场景，对 Kafka 的监控和治理能力进行适当定制完善，Allegro 公司开源的 hermes（GitHub 0.3k stars）是一个可参考项目，它在 Kafka 基础上封装了适合业务场景的企业级治理能力。阿里开源的 RocketMQ（GitHub 3.5k 星）也是一个不错选择，具备更多适用于业务场景的特性，目前也是 Apache 顶级项目。RabbitMQ（GitHub 3.6k 星）是老牌经典的 MQ，队列特性和文档都很丰富，性能和分布式能力稍弱，中小规模场景可选。对于缓存治理，如果倾向于采用客户端直连模式（个人认为缓存直连更简单轻量），则 SohuTv 开源的 cachecloud（GitHub 2.5k stars）是一款不错的 Redis 缓存治理平台，提供诸如监控统计，一键开启，自动故障转移，在线伸缩，自动化运维等生产级治理能力，另外其文档也比较丰富。如果倾向采用中间层 Proxy 模式，则 Twitter 开源的 twemproxy（GitHub 7.5k stars）和 CodisLab 开源的 codis（GitHub 6.9k stars）是社区比较热的选项。对于分布式数据访问层，如果采用 Java 技术栈，则当当开源的 shardingjdbc（GitHub 3.5k stars）是一个不错的选项，分库分表逻辑做在客户端 jdbc driver 中，客户端直连数据库比较简单轻量，建议中小规模场景采用。如果倾向采用数据库访问中间层 proxy 模式，则从阿里 Cobar 演化出来的社区开源分库分表中间件 MyCAT（GitHub 3.6k stars）是一个不错选择 。proxy 模式运维成本较高，建议中大规模场景，有一定框架自研和运维能力的团队采用。任务调度系统，个人推荐徐雪里开源的 xxl-job（GitHub 3.4k stars），部署简单轻量，大部分场景够用。当当开源的 elastic-job（GitHub 3.2k stars）也是一个不错选择，相比 xxl-job 功能更强一些也更复杂。八、 服务安全选型对于微服务安全认证授权机制一块，目前业界虽然有 OAuth 和 OpenID connect 等标准协议，但是各家具体实现的做法都不太一样，企业一般有很多特殊的定制需求，整个社区还没有形成通用生产级开箱即用的产品。有一些开源授权服务器产品，比较知名的如 Apereo CAS（GitHub 3.6k stars），JBoss 开源的 keycloak（GitHub 1.9 stars），spring cloud security 等，大都是 opinionated（一家观点和做法）的产品，同时因支持太多协议造成产品复杂，也缺乏足够灵活性。个人建议基于 OAuth 和 OpenID connect 标准，在参考一些开源产品的基础上（例如 Mitre 开源的 OpenID-Connect-Java-Spring-Server，GitHub 0.62k stars），定制自研轻量级授权服务器。Wso2 提出了一种微服务安全的参考方案，建议参考，该方案的关键步骤如下：<br><img src="https://pic4.zhimg.com/50/v2-79a24c7c2bd4e81812c35bc6947fae30_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-79a24c7c2bd4e81812c35bc6947fae30_1440w.jpg?source=1940ef5c" alt="img"><br>\1. 使用支持 OAuth 2.0 和 OpenID Connect 标准协议的授权服务器（个人建议定制自研）；2. 使用 API 网关作为单一访问入口，统一实现安全治理；3. 客户在访问微服务之前，先通过授权服务器登录获取 access token，然后将 access token 和请求一起发送到网关；4. 网关获取 access token，通过授权服务器校验 token，同时做 token 转换获取 JWT token。5. 网关将 JWT Token 和请求一起转发到后台微服务。6. JWT 中可以存储用户会话信息，该信息可以传递给后台的微服务，也可以在微服务之间传递，用作认证授权等用途；7. 每个微服务包含 JWT 客户端，能够解密 JWT 并获取其中的用户会话信息。8. 整个方案中，access token 是一种 by reference token，不包含用户信息可以直接暴露在公网上；JWT token 是一种 by value token，可以包含用户信息但不暴露在公网上。九、 服务部署平台选型容器已经被社区接受为交付微服务的一种理想手段，可以实现不可变（immutable）发布模式。一个轻量级的基于容器的服务部署平台主要包括容器资源调度，发布系统，镜像治理，资源治理和 IAM 等模块。<strong>集群资源调度系统</strong>：屏蔽容器细节，将整个集群抽象成容器资源池，支持按需申请和释放容器资源，物理机发生故障时能够实现自动故障迁移 (fail over)。目前 Google 开源的 Kubernetes，在 Google 背书和社区的强力推动下，基本已经形成市场领导者地位，GitHub 上有 31.8k 星，社区的活跃度已经远远超过了 mesos（GitHub 3.5k stars）和 swarm 等竞争产品，所以容器资源调度建议首选 K8s。当然如果你的团队有足够定制自研能力，想深度把控底层调度算法，也可以基于 Mesos 做定制自研。<strong>镜像治理</strong>：基于 Docker Registry，封装一些轻量级的治理功能。VMware 开源的 harbor(GitHub 3.5k stars) 是目前社区比较成熟的企业级产品，在 Docker Registry 基础上扩展了权限控制，审计，镜像同步，管理界面等治理能力，可以考虑采用。<strong>资源治理</strong>：类似于 CMDB 思路，在容器云环境中，企业仍然需要对应用 app，组织 org，容器配额和数量等相关信息进行轻量级的治理。目前这块还没有生产级的开源产品，一般企业需要根据自己的场景定制自研。<strong>发布平台</strong>：面向用户的发布管理控制台，支持发布流程编排。它和其它子系统对接交互，实现基本的应用发布能力，也实现如蓝绿，金丝雀和灰度等高级发布机制。目前这块生产级的开源产品很少，Netflix 开源的 spinnaker（github 4.2k stars）是一个，但是这个产品比较复杂重量（因为它既要支持适配对接各种 CI 系统，同时还要适配对接各种公有云和容器云，使得整个系统异常复杂），一般企业建议根据自己的场景定制自研轻量级的解决方案。<strong>IAM</strong>：是 identity &amp; access management 的简称，对发布平台各个组件进行身份认证和安全访问控制。社区有不少开源的 IAM 产品，比较知名的有 Apereo CAS（GitHub 3.6k stars），JBoss 开源的 keycloak（GitHub 1.9 stars）等。但是这些产品一般都比较复杂重量，很多企业考虑到内部各种系统灵活对接的需求，都会考虑定制自研轻量级的解决方案。考虑到服务部署平台目前还没有端到端生产级解决方案，企业一般需要定制集成，下面给出一个可以参考的具备轻量级治理能力的发布体系：<br><img src="https://pic2.zhimg.com/50/v2-60b0dd7124de19e4553c47a3bcd152be_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-60b0dd7124de19e4553c47a3bcd152be_1440w.jpg?source=1940ef5c" alt="img"><br>简化发布流程如下：1. 应用通过 CI 集成后生成镜像，用户将镜像推到镜像治理中心；2. 用户在资产治理中心申请发布，填报应用，发布和配额相关信息，然后等待审批通过；3. 发布审批通过，开发人员通过发布控制台发布应用；4. 发布系统通过查询资产治理中心获取发布规格信息；5. 发布系统向容器云发出启动容器实例指令；6. 容器云从镜像治理中心拉取镜像并启动容器；7. 容器内服务启动后自注册到服务注册中心，并保持定期心跳；8. 用户通过发布系统调用服务注册中心调拨流量，实现蓝绿，金丝雀或灰度发布等机制；9. 网关和内部微服务客户端定期同步服务注册中心上的服务路由表，将流量按负载均衡策略分发到新的服务实例上。另外，持续交付流水线（CD Pipeline）也是微服务发布重要环节，这块主要和研发流程相关，一般需要企业定制，下面是一个可供参考的流水线模型，在镜像治理中心上封装一些轻量级的治理流程，例如只有通过测试环境测试的镜像才能升级发布到 UAT 环境，只有通过 UAT 环境测试的镜像才能升级发布到生产环境，通过在流水线上设置一些质量门，保障应用高质量交付到生产。十、总结注意，本文限于篇幅，对测试和 CI 等环节没有涉及，但它们同样是构建微服务架构的重要环节，也有众多成熟的开源产品可选。技术选型虽然重要，但还只是微服务建设的一小部分工作，选型后的产品要在企业内部真正落地，形成完整的微服务技术栈体系，则后续还有大量集成、定制、治理、运维和推广等工作。以上是理论部分，具体实践请详细参照各大公司的系统微服务演进，包括华为、阿里、百度、滴滴、豆瓣、七牛、小米、360、58等公司的实践案例以及两本最佳学习微服务的电子书，王磊著的《微服务架构与实践》以及国外Sam Newman著的《微服务设计》。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java是编译型语言还是解释型语言</title>
      <link href="2020/12/04/2014-12-04-java-is-compiled-or-interpreted/"/>
      <url>2020/12/04/2014-12-04-java-is-compiled-or-interpreted/</url>
      
        <content type="html"><![CDATA[<p>大多数开发人员都知道，Java源文件需要编译成.class文件才能在JVM中运行。如果继续追问，许多开发人员还会告诉你说.class中的字节码首先会被JVM解释，但是在稍后即时（JIT）编译。然而很多人将字节码含糊地理解为“在某种虚构的或者简化的CPU上运行的机器码”。</p><span id="more"></span><p>实际上，JVM字节码更像是中途的驿站，是一种从人类可读的源码向机器码过度的中间状态。用编译原理术语讲，字节码实际上是一种中间语言（IL）形态，不是真正的机器码。也就是说，将Java源码变成变成字节码的过程不是C或C++程序员所理解的那种编译。Java所谓的编译器javac也不同于gcc，实际上它只是一种针对java源码生成类文件的工具。Java体系中真正的编译器是JIT:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        javac              类加载器</span><br><span class="line">.java ----------&gt; .class ------------&gt; </span><br><span class="line">              </span><br><span class="line">               解释器                JIT编译器</span><br><span class="line">转换后的.class ---------&gt; 可执行代码 ------------&gt; 101011机器码</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有人说Java是“动态编译”的，他们说的编译是指JIT的运行时编译，不是指构建时创建类文件的过程。</p><p>所以如果被问及“Java是编译型语言还是解释型语言”，你可以回答“都是”。</p><hr><blockquote><p>2015年2月5日</p></blockquote><p>昨天和同事突然又讨论到这个问题，然后又想了一下这个问题。</p><p>有很多人倾向于避开将语言按照解释型和编译型还区分，应该区分得更细化一点了，强类型的、弱类型的，静态的、动态的，GC-based的、手工管理内存的，有没有VM…</p><p>从某个科学的角度（书读得少，不知道怎么描述这个角度= =）来说，编译型和解释型可以说相同，因为都是从文本形式的代码转换到最终的相同目的。</p><p>一段来自知乎的文字：</p><p>现在关于解释和编译的界限也不是特别清晰了。</p><ul><li>Java需要预先把代码编译成虚拟机指令的，然后在运行这些虚拟机指令，有的教科书上会成为混合型或者半编译型。</li><li>像Python和lua这样就更不好分了，可以直接解释源代码运行，也可以编译为虚拟机指令然后再运行。</li><li>php编译之后的结果可以被Web Server缓存起来，甚至还可以先被翻译为C++，然后再编译。</li><li>.NET 的CLR运行时是Windows的组成部分，编译好的.NET 系列语言的代码直接生成可执行文件，然后被“直接”执行，看起来跟C没有什么太大的差别。</li><li>JavaScript可以被V8引擎编译为机器码然后执行，如果在node.js下，这个编译结果被缓存起来了，你说这跟编译好再执行的C有什么区别？- </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> it </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC下JDK版本的切换</title>
      <link href="2020/12/02/2013-12-02-jdk-version-switch-in-mac/"/>
      <url>2020/12/02/2013-12-02-jdk-version-switch-in-mac/</url>
      
        <content type="html"><![CDATA[<p>原来系统里安装的是1.6的，这是最后一个由提供的jdk，1.7开始Oracle提供mac平台的jdk了。</p><p>现在安装了1.7的，觉得需要进行多个版本的切换，以下是方法：</p><h3 id="临时更改版本（单会话有效）"><a href="#临时更改版本（单会话有效）" class="headerlink" title="临时更改版本（单会话有效）"></a>临时更改版本（单会话有效）</h3><p>首先运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home</span><br></pre></td></tr></table></figure><p>可以知道当前环境的JAVA_HOME是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>这是1.7的JAVA_HOME，我们可以使用 -v 标识来获取1.6的JAVA_HOME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -v <span class="string">&#x27;1.6*&#x27;</span></span><br><span class="line"></span><br><span class="line">/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>然后我们可以手动地设置JAVA_HOME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home -v <span class="string">&#x27;1.6*&#x27;</span>`</span><br><span class="line"></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line">java version <span class="string">&quot;1.6.0_65&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="所有会话生效"><a href="#所有会话生效" class="headerlink" title="所有会话生效"></a>所有会话生效</h3><p>以上只是在一个终端会话中临时设置的，如果要运用到所有的会话中，则需要在.bash_profile中写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home -v <span class="string">&#x27;1.6*&#x27;</span>`</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mac </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中添加鼠标右键功能</title>
      <link href="2020/11/29/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E5%8A%9F%E8%83%BD/"/>
      <url>2020/11/29/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo中添加鼠标右键功能"><a href="#hexo中添加鼠标右键功能" class="headerlink" title="hexo中添加鼠标右键功能"></a>hexo中添加鼠标右键功能</h1><p><img src="https://gitee.com/zyoushuo/Blog/raw/master/images/rightmenu_2.png" alt="img"></p><p>为你的博客添加鼠标右键菜单。此样式功能是在网上看到的，于是就整到hexo中。同样，由于本人使用Volantis主题，所以对Volantis作了些配置。通用的方法会在后文写到。也可按照自己使用的主题自行配置。</p><h4 id="添加配置信息"><a href="#添加配置信息" class="headerlink" title="添加配置信息"></a>添加配置信息</h4><p>在主题配置文件volantis/_config.yml中添加配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Right_Click:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># true or false  是否开启右键</span></span><br><span class="line">  <span class="attr">js:</span> <span class="string">https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/js/GalMenu.js</span></span><br><span class="line">  <span class="attr">audio:</span> <span class="literal">false</span>  <span class="comment"># true or false 是否开启点击音乐</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p>在blog\themes\volantis\layout_partial中创建名为Right_Click.ejs的文件，添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.Right_Click.enable) &#123; %&gt;</span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;GalMenu GalDropDown&quot;</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;circle&quot;</span> id=<span class="string">&quot;gal&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ring&quot;</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;/&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:history.go(1);&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;前进&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:$(&#x27;html,body&#x27;).animate(&#123;scrollTop:0&#125;,500);&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;顶部&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:location.reload();&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;刷新&lt;/a&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;/Message/&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;留言&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:history.go(-1);&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;后退&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(theme.Right_Click.audio) &#123;%&gt;</span><br><span class="line">&lt;audio id=<span class="string">&quot;audio&quot;</span> src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/audio/niconiconi.mp3&quot;</span>&gt;&lt;/audio&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.menuItem&#x27;</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">        items[i].style.left = (<span class="number">50</span> - <span class="number">35</span> * <span class="built_in">Math</span>.cos( - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI - <span class="number">2</span> * (<span class="number">1</span> / l) * i * <span class="built_in">Math</span>.PI)).toFixed(<span class="number">4</span>) + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        items[i].style.top = (<span class="number">50</span> + <span class="number">35</span> * <span class="built_in">Math</span>.sin( - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI - <span class="number">2</span> * (<span class="number">1</span> / l) * i * <span class="built_in">Math</span>.PI)).toFixed(<span class="number">4</span>) + <span class="string">&quot;%&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">window</span>.jQuery || <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/js/jquery-2.1.1.min.js&quot;&gt;&lt;\/script&gt;&#x27;</span>)&lt;/script&gt;</span><br><span class="line">&lt;%- js(theme.Right_Click.js) %&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;body&#x27;</span>).GalMenu(&#123;</span><br><span class="line">          <span class="string">&#x27;menu&#x27;</span>: <span class="string">&#x27;GalDropDown&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中右键菜单内容可在此处修改。</p><h4 id="引入样式文件"><a href="#引入样式文件" class="headerlink" title="引入样式文件"></a>引入样式文件</h4><p>在blog\themes\volantis\layout_partial的head.ejs文件中引入样式文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/css/GalMenu.css&quot;</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>右键菜单中的图片可在此处修改。</p><h4 id="引入到页面"><a href="#引入到页面" class="headerlink" title="引入到页面"></a>引入到页面</h4><p>在blog\themes\volantis\layout的layout.ejs文件中的<code>&lt;/body&gt;</code>引入。（一定要在末尾引入)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-<span class="ruby"> partial(<span class="string">&#x27;_partial/Right_Click&#x27;</span>) </span>%&gt;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>最后别忘了一键三连。</p><p>Volantis3.0版本已经添加了右键功能，使用本文中的右键别忘了关闭原主题中的右键。</p><h3 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h3><h4 id="引入样式文件-1"><a href="#引入样式文件-1" class="headerlink" title="引入样式文件"></a>引入样式文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/css/GalMenu.css&quot;</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="引入到页面-1"><a href="#引入到页面-1" class="headerlink" title="引入到页面"></a>引入到页面</h4><p>在<code>&lt;/body&gt;</code>上方添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;GalMenu GalDropDown&quot;</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;circle&quot;</span> id=<span class="string">&quot;gal&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ring&quot;</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;/&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:history.go(1);&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;前进&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:$(&#x27;html,body&#x27;).animate(&#123;scrollTop:0&#125;,500);&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;顶部&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:location.reload();&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;刷新&lt;/a&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;/Message/&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;留言&lt;/a&gt;</span><br><span class="line">          &lt;a href=<span class="string">&quot;javascript:history.go(-1);&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menuItem&quot;</span>&gt;后退&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;audio id=<span class="string">&quot;audio&quot;</span> src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/audio/niconiconi.mp3&quot;</span>&gt;&lt;/audio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.menuItem&#x27;</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">       items[i].style.left = (<span class="number">50</span> - <span class="number">35</span> * <span class="built_in">Math</span>.cos( - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI - <span class="number">2</span> * (<span class="number">1</span> / l) * i * <span class="built_in">Math</span>.PI)).toFixed(<span class="number">4</span>) + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">       items[i].style.top = (<span class="number">50</span> + <span class="number">35</span> * <span class="built_in">Math</span>.sin( - <span class="number">0.5</span> * <span class="built_in">Math</span>.PI - <span class="number">2</span> * (<span class="number">1</span> / l) * i * <span class="built_in">Math</span>.PI)).toFixed(<span class="number">4</span>) + <span class="string">&quot;%&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;<span class="built_in">window</span>.jQuery || <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/js/jquery-2.1.1.min.js&quot;&gt;&lt;\/script&gt;&#x27;</span>)&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/hexo/js/GalMenu.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">&#x27;body&#x27;</span>).GalMenu(&#123;</span><br><span class="line">         <span class="string">&#x27;menu&#x27;</span>: <span class="string">&#x27;GalDropDown&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>目前只作了些简单的配置，后期期望加入更多的功能。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四种JavaEE架构简介</title>
      <link href="2020/11/29/%E5%9B%9B%E7%A7%8DJavaEE%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/"/>
      <url>2020/11/29/%E5%9B%9B%E7%A7%8DJavaEE%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="四种JavaEE架构简介"><a href="#四种JavaEE架构简介" class="headerlink" title="四种JavaEE架构简介"></a><a href="https://www.cnblogs.com/shaohsiung/p/9552990.html">四种JavaEE架构简介</a></h2><h1 id="1-传统三层架构"><a href="#1-传统三层架构" class="headerlink" title="1. 传统三层架构"></a>1. 传统三层架构</h1><p>配图是一个基于MVC的三层架构, 大致可以分成表现层, 业务层和持久层</p><p>表现层负责接收请求和转发请求</p><p>业务层主要负责处理请求, 值得注意的是事务管理, 日志记录等操作通常也是封装在这层中</p><p>持久层主要负责数据库与实体之间的操作</p><p>我们可以使用框架来简化各层的开发, 例如表现层使用SpringMVC或Strut2, 持久层使用Mybatis或Hibernate, 使用Spring管理三层之间的关系</p><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105155049-481908758.png" alt="img"></p><h1 id="2-集群架构"><a href="#2-集群架构" class="headerlink" title="2. 集群架构"></a>2. 集群架构</h1><p>集群属于水平拓展.</p><p>传统三层架构中存在许多问题, 比如业务层中不同模块占用系统资源的比例相差太大, 导致占用系统资源, 可以使用集群解决这类问题.</p><p>在集群架构, 一般由这么一个重要的角色, 那就是反向代理服务器, 它的主要任务是实现负载均衡, 接收用户请求, 转发到目标服务器.</p><p>反向代理服务器可以使用nginx实现.</p><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829103451096-37051288.png" alt="img"></p><h1 id="3-分布式架构"><a href="#3-分布式架构" class="headerlink" title="3. 分布式架构"></a>3. 分布式架构</h1><p>多个模块完成一个功能.</p><p>每个模块都可以搭建集群 -&gt; 高可用</p><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104315263-150430733.png" alt="img"></p><h1 id="4-微服务架构"><a href="#4-微服务架构" class="headerlink" title="4. 微服务架构"></a>4. 微服务架构</h1><p>根据产品的业务功能模块来划分服务的种类, 这属于垂直划分.</p><p>客户端可以通过基于HTTP或RPC的方式来调用微服务, 这样做的目的是为了降低调用所产生的性能开销.</p><p>每个模块也可搭建集群 -&gt; 高可用</p><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829104515114-760628485.png" alt="img"></p><h2 id="三种轻量级API调用服务-使用service-gateway和service-register实现客户端与微服务之间的调用-实现通信"><a href="#三种轻量级API调用服务-使用service-gateway和service-register实现客户端与微服务之间的调用-实现通信" class="headerlink" title="三种轻量级API调用服务 - 使用service gateway和service register实现客户端与微服务之间的调用(实现通信)"></a>三种轻量级API调用服务 - 使用service gateway和service register实现客户端与微服务之间的调用(实现通信)</h2><p>SOA实现两个系统之间通信的三种方式</p><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105440188-18517504.png" alt="img"></p><h2 id="dubbo体系结构"><a href="#dubbo体系结构" class="headerlink" title="dubbo体系结构:"></a>dubbo体系结构:</h2><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105514263-1906080560.png" alt="img"></p><h2 id="一个典型的基于SOA的电商项目架构"><a href="#一个典型的基于SOA的电商项目架构" class="headerlink" title="一个典型的基于SOA的电商项目架构:"></a>一个典型的基于SOA的电商项目架构:</h2><p><img src="https://images2018.cnblogs.com/blog/1471979/201808/1471979-20180829105035906-521553459.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题实现全局播放背景音乐</title>
      <link href="2020/11/29/%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%92%AD%E6%94%BE%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/"/>
      <url>2020/11/29/%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%92%AD%E6%94%BE%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Next-主题实现全局播放背景音乐"><a href="#Hexo-Next-主题实现全局播放背景音乐" class="headerlink" title="Hexo + Next 主题实现全局播放背景音乐"></a>Hexo + Next 主题实现全局播放背景音乐</h1><h2 id="第一种方式：使用网易云音乐插件"><a href="#第一种方式：使用网易云音乐插件" class="headerlink" title="第一种方式：使用网易云音乐插件"></a>第一种方式：使用网易云音乐插件</h2><p>特点：</p><ul><li>简单快捷</li><li>有版权保护的音乐无法播放（易造成歌单失效）</li></ul><p>我们可以将此插件添加到博客界面，或者博客文章之中（直接粘贴网易云插件代码即可）。</p><blockquote><p><a href="https://blog.csdn.net/qq_39720594/article/details/105423726">如何获取网易云歌单外链音乐插件及注意事项</a></p></blockquote><h3 id="在此我们举例将音乐插件添加到侧边栏。"><a href="#在此我们举例将音乐插件添加到侧边栏。" class="headerlink" title="在此我们举例将音乐插件添加到侧边栏。"></a>在此我们举例将音乐插件添加到侧边栏。</h3><p>打开我们主题文件：<code>themes\next\layout\_macro\sidebar.swig</code>找到<code>sidebar-inner</code>，将网易云插件代码代码粘贴到此<code>&lt;div&gt;</code>标签后即可。</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;sidebar-inner&quot;</span>&gt; <span class="comment">//从下面开始复制，粘贴到这里</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!--网易云插件--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;iframe frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> marginwidth=<span class="string">&quot;0&quot;</span> marginheight=<span class="string">&quot;0&quot;</span> width=<span class="number">330</span> height=<span class="number">86</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      src=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=463352828&amp;auto=0&amp;height=66&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>在博客文件夹打开<code>GitBash</code>执行<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>，即可看到效果。</p><p>效果图：</p><p><img src="https://img-blog.csdnimg.cn/2020040902523955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzIwNTk0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="第二种方式：使用Aplayer-MetingJS插件"><a href="#第二种方式：使用Aplayer-MetingJS插件" class="headerlink" title="第二种方式：使用Aplayer + MetingJS插件"></a>第二种方式：使用Aplayer + MetingJS插件</h2><p>特点：</p><ul><li>可以播放<strong>大部分音乐</strong>。</li><li>还可以添加其他音乐平台的歌单，如：<code>QQ音乐...</code></li></ul><h3 id="在此我们举例将音乐插件添加到侧边栏。-1"><a href="#在此我们举例将音乐插件添加到侧边栏。-1" class="headerlink" title="在此我们举例将音乐插件添加到侧边栏。"></a>在此我们举例将音乐插件添加到侧边栏。</h3><blockquote><p>点击绿色框线处就会打开播放列表</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200409100541773.png#pic_center" alt="在这里插入图片描述"></p><h3 id="有两种实现方式"><a href="#有两种实现方式" class="headerlink" title="有两种实现方式"></a>有两种实现方式</h3><p>打开我们主题文件：<code>themes\next\layout\_macro\sidebar.swig</code>找到<code>sidebar-inner</code>，复制下面代码粘贴到此<code>&lt;div&gt;</code>标签后即可。</p><h4 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h4><blockquote><p>经测试：此方式，有时会失效，留作研究。【不推荐】 【要求<code>MetingJS</code>版本：@2.0.1】</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;sidebar-inner&quot;</span>&gt;   <span class="comment">//从下面开始复制，粘贴到这里</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="built_in">require</span> APlayer --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="built_in">require</span> MetingJS--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--网易云--&gt;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;meting-js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      server=<span class="string">&quot;netease&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      id=<span class="string">&quot;4916164702&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  type=<span class="string">&quot;playlist&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mini=<span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      fixed=<span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      list-folded=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      autoplay=<span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      volume=<span class="string">&quot;0.4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      theme=<span class="string">&quot;#FADFA3&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      order=<span class="string">&quot;random&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  loop=<span class="string">&quot;all&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      preload=<span class="string">&quot;auto&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      mutex=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/meting-js&gt;</span><br></pre></td></tr></table></figure><p><strong>属性</strong></p><table><thead><tr><th>选项</th><th>默认值</th><th>功能描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, `artist</td></tr><tr><td>auto</td><td>options</td><td>music link, support: <code>netease</code>, <code>tencent</code>, <code>xiami</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>autoplay</td><td><code>false</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>theme</td><td><code>#2980b9</code></td><td>播放器风格色彩设置</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>volume</td><td><code>0.7</code></td><td>播放器音量</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>lrc-type</td><td><code>0</code></td><td>lyric type</td></tr><tr><td>list-folded</td><td><code>false</code></td><td>歌词格式类型</td></tr><tr><td>list-max-height</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>storage-name</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr></tbody></table><blockquote><p><strong>其他属性请参照：<a href="https://github.com/metowolf/MetingJS">MetingJS</a></strong></p></blockquote><h4 id="添加QQ音乐歌单"><a href="#添加QQ音乐歌单" class="headerlink" title="添加QQ音乐歌单"></a>添加QQ音乐歌单</h4><p>将<code>meting-js</code>换成下面即可。 <code>auto</code>后为歌单网址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meting-js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   auto=<span class="string">&quot;https://y.qq.com/n/yqq/playlist/1790504159.html#stat=y_new.playlist.pic_click&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/meting-js&gt;</span><br></pre></td></tr></table></figure><h4 id="复杂方式"><a href="#复杂方式" class="headerlink" title="复杂方式"></a>复杂方式</h4><p>在<code>data-</code>后添加属性及属性值即可实现相同功能</p><blockquote><p>【要求<code>MetingJS</code>版本：@1.2】</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;sidebar-inner&quot;</span>&gt;   <span class="comment">//从下面开始复制，粘贴到这里</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="built_in">require</span> APlayer --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="built_in">require</span> MetingJS--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--网易云--&gt;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;aplayer&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-id=<span class="string">&quot;4916164702&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-server=<span class="string">&quot;netease&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-type=<span class="string">&quot;playlist&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-fixed=<span class="string">&quot;false&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-autoplay=<span class="string">&quot;false&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-list-folded=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-mutex=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-order=<span class="string">&quot;random&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-loop=<span class="string">&quot;all&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-volume=<span class="string">&quot;0.4&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      data-theme=<span class="string">&quot;#FADFA3&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      date-preload=<span class="string">&quot;auto&quot;</span> &gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>其他属性请参照：<a href="https://aplayer.js.org/#/zh-Hans/">APlayer</a></strong></p></blockquote><h2 id="第三种方式：使用Aplayer添加本地音乐"><a href="#第三种方式：使用Aplayer添加本地音乐" class="headerlink" title="第三种方式：使用Aplayer添加本地音乐"></a>第三种方式：使用Aplayer添加本地音乐</h2><p>此方式有些麻烦和复杂，界面相关属性都需要自己设置和修改，不做具体阐述，参考以下链接</p><blockquote><ul><li><a href="https://www.jianshu.com/p/3fb29cc7a00b">feilong4659196</a>：使用Aplayer + LeanCloud方式</li><li>[Y`s BLOG](<a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html)%EF%BC%9A%E4%BD%BF%E7%94%A8Aplayer">https://blog.yleao.com/2018/0902/hexo上的aplayer应用.html)：使用Aplayer</a> + 纯代码方式（Aplay官方文档也有描述）</li></ul></blockquote><h2 id="使用-Pajx-实现背景音乐全局播放"><a href="#使用-Pajx-实现背景音乐全局播放" class="headerlink" title="使用 Pajx 实现背景音乐全局播放"></a>使用 <code>Pajx</code> 实现背景音乐全局播放</h2><p>即实现页面跳转刷新后音乐不间断播放</p><blockquote><p>经测试，在博客文章中的网易云插件无法实现全局播放。（留作研究）</p></blockquote><ul><li>打开<code>themes\next\layout</code>文件夹找到<code>_layout.swig</code></li><li>在<code>&lt;\head&gt;</code>标签前添加下面代码，并保存。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;   <span class="comment">//粘贴到这里</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!--pjax：防止跳转页面音乐暂停--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt; </span><br></pre></td></tr></table></figure><ul><li>在主题的配置文件中找到<code>pajx</code>，将它设置为<code>true</code>，并保存。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pjax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure><p>在博客文件夹打开<code>GitBash</code>执行<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>，跳转页面时即可看到效果。</p><h4 id="参考文章-【鸣谢】"><a href="#参考文章-【鸣谢】" class="headerlink" title="参考文章 【鸣谢】"></a>参考文章 【鸣谢】</h4><blockquote><ul><li><a href="https://aplayer.js.org/#/zh-Hans/">Aplay官方文档(中文版)</a></li><li><a href="https://github.com/theme-next/theme-next-pjax">Pjax</a></li><li><a href="https://github.com/metowolf/MetingJS">MetingJS</a></li><li><a href="https://blog.csdn.net/yjwan521/article/details/80899992">Sourc0d</a></li><li><a href="https://blog.csdn.net/hushhw/article/details/88092728">hushhw</a></li><li><a href="https://www.jianshu.com/p/3fb29cc7a00b">feilong4659196</a></li><li>[Y`s BLOG](<a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html">https://blog.yleao.com/2018/0902/hexo上的aplayer应用.html</a>)</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用反射设置值</title>
      <link href="2020/11/25/2013-11-25-java-reflect-set-value/"/>
      <url>2020/11/25/2013-11-25-java-reflect-set-value/</url>
      
        <content type="html"><![CDATA[<p>今天敲代码，遇到个问题，需要实现一个方法：给一个类的成员变量设置值，数字类型的设置为0，布尔类型的设置为false，其他设置为null，变量不知道是什么类型的。</p><p>这里面有几个要点：</p><ul><li>给变量设值</li><li>区分变量是什么类型（数字，布尔或其他）</li><li>基本类型的处理情况</li></ul><span id="more"></span><h3 id="1-给变量设值"><a href="#1-给变量设值" class="headerlink" title="1. 给变量设值"></a>1. 给变量设值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.reflect.Field.set(Object obj, Object value);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-区分变量是什么类型（数字，布尔或其他）"><a href="#2-区分变量是什么类型（数字，布尔或其他）" class="headerlink" title="2. 区分变量是什么类型（数字，布尔或其他）"></a>2. 区分变量是什么类型（数字，布尔或其他）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz = field.getType();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是数字的, 查看java源码可以知道基本类型里面除了char和boolean，其他的都是// java.lang。Number 的子类</span></span><br><span class="line"><span class="keyword">if</span>(Number.class.isAssignableFrom(type))</span><br><span class="line">field.set(cfg, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Boolean.class.isAssignableFrom(type))</span><br><span class="line">field.set(cfg, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">field.set(cfg, <span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Class.isAssignableFrom(Class&lt;?&gt; cls)查看源码，得知：</p><pre><code>判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。 特别地，通过身份转换或扩展引用转换，此方法能测试指定 Class 参数所表示的类型能否转换为此 Class 对象所表示的类型。有关详细信息，请参阅 Java Language Specification 的第 5.1.1 和 5.1.4 节。 参数：cls - 要检查的 Class 对象 返回：表明 cls 类型的对象能否赋予此类对象的 boolean 值 抛出： NullPointerException - 如果指定的 Class 参数为 null。</code></pre><h3 id="3-基本类型的处理情况"><a href="#3-基本类型的处理情况" class="headerlink" title="3. 基本类型的处理情况"></a>3. 基本类型的处理情况</h3><p>使用 Class.isAssignableFrom，并不能处理基本类型的情况，找来找去，并没有发现相关的方法，所以就自己写了个方法，来转换基本类型和包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getWrapperClass(Class&lt;?&gt; primitiveClass) &#123;</span><br><span class="line"><span class="keyword">if</span>(!primitiveClass.isPrimitive())</span><br><span class="line"><span class="keyword">return</span> primitiveClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(primitiveClass == Boolean.TYPE)</span><br><span class="line"><span class="keyword">return</span> Boolean.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Character.TYPE)</span><br><span class="line"><span class="keyword">return</span> Character.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Byte.TYPE)</span><br><span class="line"><span class="keyword">return</span> Byte.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Short.TYPE)</span><br><span class="line"><span class="keyword">return</span> Short.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Integer.TYPE)</span><br><span class="line"><span class="keyword">return</span> Integer.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Long.TYPE)</span><br><span class="line"><span class="keyword">return</span> Long.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Float.TYPE)</span><br><span class="line"><span class="keyword">return</span> Float.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Double.TYPE)</span><br><span class="line"><span class="keyword">return</span> Double.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Void.class;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，在获取到Field的类型（Field.getType()）后，可以根据Class.isPrimitive()来判断是不是基本类型，然后再使用此方法进行转换</p><h3 id="4-完整示例"><a href="#4-完整示例" class="headerlink" title="4. 完整示例"></a>4. 完整示例</h3><p>以上是关键点的代码，下面是具体的代码实现：</p><p>Config.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cnhalo.mrhuang.field.Config &lt;示例&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>huangyijie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>2013年11月25日 下午3:35:57</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> doubleVar = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">public</span> Integer integerWrapperVar = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">public</span> String stringVar = <span class="string">&quot;stringVar&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> booleanVar = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Config instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)</span><br><span class="line">instance = <span class="keyword">new</span> Config();</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Config. &lt;说明&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Config</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> doubleVar + <span class="string">&quot;, &quot;</span> + integerWrapperVar + <span class="string">&quot;, &quot;</span> + stringVar + <span class="string">&quot;, &quot;</span> + booleanVar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cnhalo.mrhuang.field.Main &lt;示例&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>huangyijie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>2013年11月25日 下午3:35:04</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * main: 实现的功能： &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 给一个类的成员变量设置值，数字类型的设置为0，布尔类型的设置为false，其他设置为null，变量不知道是什么类型的 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SecurityException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">Config cfg = Config.getInstance();</span><br><span class="line"><span class="comment">// 打印一下初始值</span></span><br><span class="line">System.out.println(cfg);</span><br><span class="line"></span><br><span class="line">Field[] fields = cfg.getClass().getFields();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Field field : fields) &#123;</span><br><span class="line">Class&lt;?&gt; clazz = field.getType();</span><br><span class="line"><span class="comment">// 如果是基本类型</span></span><br><span class="line"><span class="keyword">if</span>(clazz.isPrimitive())</span><br><span class="line"><span class="comment">// 转换为包装类</span></span><br><span class="line">clazz = getWrapperClass(clazz);</span><br><span class="line"><span class="comment">// 判断为数字类型</span></span><br><span class="line"><span class="keyword">if</span>(Number.class.isAssignableFrom(clazz))</span><br><span class="line">field.set(cfg, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Boolean.class.isAssignableFrom(clazz))</span><br><span class="line">field.set(cfg, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">field.set(cfg, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印一下修改后的值</span></span><br><span class="line">System.out.println(cfg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * getWrapperClass: 将基本类型转换为包装类 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 我暂时找不到java中相关的方法，如果有的话可以替换，现在先自己写一个 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> primitiveClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getWrapperClass(Class&lt;?&gt; primitiveClass) &#123;</span><br><span class="line"><span class="keyword">if</span>(!primitiveClass.isPrimitive())</span><br><span class="line"><span class="keyword">return</span> primitiveClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(primitiveClass == Boolean.TYPE)</span><br><span class="line"><span class="keyword">return</span> Boolean.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Character.TYPE)</span><br><span class="line"><span class="keyword">return</span> Character.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Byte.TYPE)</span><br><span class="line"><span class="keyword">return</span> Byte.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Short.TYPE)</span><br><span class="line"><span class="keyword">return</span> Short.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Integer.TYPE)</span><br><span class="line"><span class="keyword">return</span> Integer.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Long.TYPE)</span><br><span class="line"><span class="keyword">return</span> Long.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Float.TYPE)</span><br><span class="line"><span class="keyword">return</span> Float.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(primitiveClass == Double.TYPE)</span><br><span class="line"><span class="keyword">return</span> Double.class;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Void.class;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-相关扩展"><a href="#5-相关扩展" class="headerlink" title="5. 相关扩展"></a>5. 相关扩展</h3><h4 id="5-1-转-Java中判断字符串是否为数字的三种方法"><a href="#5-1-转-Java中判断字符串是否为数字的三种方法" class="headerlink" title="5.1 [转]Java中判断字符串是否为数字的三种方法"></a>5.1 [转]Java中判断字符串是否为数字的三种方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 用JAVA自带的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = str.length();--i&gt;=<span class="number">0</span>;)&#123;   </span><br><span class="line">   <span class="keyword">if</span> (!Character.isDigit(str.charAt(i)))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用正则表达式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span></span>&#123; </span><br><span class="line">    Pattern pattern = Pattern.compile(<span class="string">&quot;[0-9]*&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> pattern.matcher(str).matches();    </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 用ascii码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=str.length();--i&gt;=<span class="number">0</span>;)&#123;</span><br><span class="line">      <span class="keyword">int</span> chr=str.charAt(i);</span><br><span class="line">      <span class="keyword">if</span>(chr&lt;<span class="number">48</span> || chr&gt;<span class="number">57</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> reflect </tag>
            
            <tag> Field </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot入门</title>
      <link href="2020/11/21/springboot%E5%85%A5%E9%97%A8/"/>
      <url>2020/11/21/springboot%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-Boot-01-快速入门篇（图文教程）"><a href="#Spring-Boot-01-快速入门篇（图文教程）" class="headerlink" title="Spring Boot -01- 快速入门篇（图文教程）"></a>Spring Boot -01- 快速入门篇（图文教程）</h3><p>今天开始不断整理 Spring Boot 2.0 版本学习笔记，大家可以在博客看到我的笔记，然后大家想看视频课程也可以到【慕课网】手机 app，去找【Spring Boot 2.0 深度实践】的课程，令人开心的是，课程完全免费！</p><h3 id="什么是-Spring-Boot？"><a href="#什么是-Spring-Boot？" class="headerlink" title="什么是 Spring Boot？"></a>什么是 Spring Boot？</h3><p><img src="https://img-blog.csdnimg.cn/20181117220632243.png" alt="在这里插入图片描述"></p><p>Spring Boot 是由 Pivotal 团队提供的全新框架。Spring Boot 是所有基于 Spring Framework 5.0 开发的项目的起点。Spring Boot 的设计是为了让你尽可能快的跑起来 Spring 应用程序并且尽可能减少你的配置文件。</p><p><strong>设计目的：</strong> 用来简化新 Spring 应用的初始搭建以及开发过程。</p><p>从最根本上来讲，Spring Boot 就是一些库的集合，它能够被任意项目的构建系统所使用。它使用 “习惯优于配置” （项目中存在大量的配置，此外还内置一个习惯性的配置）的理念让你的项目快速运行起来。用大佬的话来理解，就是 spring boot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 maven 整合了所有的 jar 包，spring boot 整合了所有的框架，总结一下及几点：</p><p>（1）为所有 Spring 开发提供一个更快更广泛的入门体验。</p><p>（2）零配置。无冗余代码生成和XML 强制配置，遵循“约定大于配置” 。</p><p>（3）集成了大量常用的第三方库的配置， Spring Boot 应用为这些第三方库提供了几乎可以零配置的开箱即用的能力。</p><p>（4）提供一系列大型项目常用的非功能性特征，如嵌入式服务器、安全性、度量、运行状况检查、外部化配置等。</p><p>（5）Spring Boot 不是Spring 的替代者，Spring 框架是通过 IOC 机制来管理 Bean 的。Spring Boot 依赖 Spring 框架来管理对象的依赖。Spring Boot 并不是Spring 的精简版本，而是为使用 Spring 做好各种产品级准备</p><h3 id="Spring-Boot-在应用中的角色"><a href="#Spring-Boot-在应用中的角色" class="headerlink" title="Spring Boot 在应用中的角色"></a>Spring Boot 在应用中的角色</h3><p>Spring Boot 是基于 Spring Framework 来构建的，Spring Framework 是一种 J2EE 的框架（<a href="https://blog.csdn.net/qq_40147863/article/details/83011705">什么是 J2EE？</a>）<br>Spring Boot 是一种快速构建 Spring 应用<br>Spring Cloud 是构建 Spring Boot 分布式环境，也就是常说的云应用<br>Spring Boot 中流砥柱，承上启下</p><p><img src="https://img-blog.csdnimg.cn/20181117225158786.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>（1）JDK 环境必须是 1.8 及以上，传送门：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">jdk1.8.191 下载</a></li><li>（2）后面要使用到 Maven 管理工具 3.2.5 及以上版本，所以会先介绍 Maven 的安装与配置</li><li>（3）开发工具建议使用 IDEA，也可以 MyEclipse，为了实现一站式服务，传送门：<ul><li><a href="https://blog.csdn.net/qq_40147863/article/details/81356116">IDEA 破解（原文是PyCharm的，步骤完全一样，Webstorm 也可以破解）</a></li><li><a href="https://blog.csdn.net/qq_40147863/article/details/83017723">MyEclipse 2018 安装与破解</a></li></ul></li></ul><h3 id="Maven-安装与环境变量配置"><a href="#Maven-安装与环境变量配置" class="headerlink" title="Maven 安装与环境变量配置"></a>Maven 安装与环境变量配置</h3><p><strong>（1）Maven 安装：</strong></p><ul><li>在官网下载：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></li></ul><p><img src="https://img-blog.csdnimg.cn/20181117222111238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>（2）Maven 配置环境变量：</strong></p><p>解压到一个路径，然后配置环境变量：</p><ul><li>新建变量名：MAVEN_HOME 变量值：D:\server\apache-maven-3.6.0（这是我的 MAVEN 路径）</li><li>编辑变量名：Path 在最前面加上：%MAVEN_HOME%\bin</li></ul><p><strong>（3）检查是否配置成功：</strong></p><p>在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn -V</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>然后会一大堆东西：<br><img src="https://img-blog.csdnimg.cn/20181117224859157.png" alt="在这里插入图片描述"></p><p><strong>（4）配置 maven 仓库：</strong></p><p>1.打开 maven 文件夹下的 config 文件夹下的 settings.xml；<br>2.找到 localRepository 标签，此时是被注释掉的，我们解除注释，然后配置一个路径，例如：D:/space/MavenRepository/maven_jar，这样以后 MAVEN 管理下载的jar 包都会在这个路径下。<br>【注意】：注意结点的位置，先找到注释掉的部分，贴在下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\space\MavenRepository\maven_jar&lt;&#x2F;localRepository&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181118094647638.png" alt="在这里插入图片描述"></p><p>3.配置远程仓库，找到 mirrors 标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--远程仓库--&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">　　&lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class="line">　　&lt;name&gt;aliyun Maven&lt;&#x2F;name&gt;</span><br><span class="line">　　&lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">   &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181118094701996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4.当然我们需要先建这样一个目录结构，然后还要把settings.xml 复制一份到 D:/space/MavenRepository 下</p><p><img src="https://img-blog.csdnimg.cn/2018111809395871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>（5）在 idea 配置 maven：</strong><br>点击【File】&gt;【Settings】&gt;搜索【Maven】，按截图配置安装目录和选择刚刚 settings 配置文件；<br><img src="https://img-blog.csdnimg.cn/20181118095827943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择完settings之后，本地仓库自动改成settings文件中配置的；点击apply，再点击ok即配置完成。</p><hr><h3 id="使用-idea-快速搭建-Spring-Boot"><a href="#使用-idea-快速搭建-Spring-Boot" class="headerlink" title="使用 idea 快速搭建 Spring Boot"></a>使用 idea 快速搭建 Spring Boot</h3><p><strong>第一步：新建 Spring Initializr 项目：</strong></p><p><img src="https://img-blog.csdnimg.cn/20181117223306858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（1）选择 Spring Initializr<br>（2）选择 SDK，点击【new】这里就是使用 JAVA SDK 要求版本 1.8+，选择你默认安装在 C:\Program Files\Java\jdk1.8.0_191 目录：<br><img src="https://img-blog.csdnimg.cn/2018111809500265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（3）然后选择默认的 url （不用管）点击【Next】：</p><p><img src="https://img-blog.csdnimg.cn/20181117223018703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（4）然后填写一下项目的信息：</p><p><img src="https://img-blog.csdnimg.cn/20181118095134665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（5）先勾选上 Web 依赖：<br><img src="https://img-blog.csdnimg.cn/20181117223605792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（6）勾选 SQl 下的 MySQL，MyBatis 依赖：<br>（根据自己的项目选择，后面可加）<br><img src="https://img-blog.csdnimg.cn/20181118103359434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（7）选择好项目的位置，点击【Finish】：</p><p><img src="https://img-blog.csdnimg.cn/20181118095156516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（7）如果是第一次配置 Spring Boot 的话可能需要等待一会儿 IDEA 下载相应的 依赖包，默认创建好的项目结构如下：</p><p><img src="https://img-blog.csdnimg.cn/20181118100821722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>项目结构还是看上去挺清爽的，少了很多配置文件，我们来了解一下默认生成的有什么：</p><ul><li>SpringbootApplication： 一个带有 main() 方法的类，用于启动应用程序</li><li>SpringbootApplicationTests：一个空的 Junit 测试了，它加载了一个使用 Spring Boot 字典配置功能的 Spring 应用程序上下文</li><li>application.properties：一个空的 properties 文件，可以根据需要添加配置属性</li><li>pom.xml： Maven 构建说明文件</li></ul><p><strong>第二步：HelloController</strong></p><p>在 【main/java/com.xpwi.springboot】包下新建一个【HelloController】：</p><p><img src="https://img-blog.csdnimg.cn/20181118101115334.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.xpwi.springboot;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 测试控制器</span><br><span class="line"> *</span><br><span class="line"> * @author: @肖朋伟CSDN</span><br><span class="line"> * @create: 2018-11-18</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">12345678910111213141516171819</span><br></pre></td></tr></table></figure><p><strong>第三步：利用 IDEA 启动 Spring Boot</strong></p><p>（1）我们回到 SpringbootApplication 这个类中，然后右键点击运行：</p><p><img src="https://img-blog.csdnimg.cn/20181118101551613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（2）会提示 Maven 导包，点击 import<br><img src="https://img-blog.csdnimg.cn/20181118101418750.png" alt="在这里插入图片描述"></p><p>（3）注意：我们之所以在上面的项目中没有手动的去配置 Tomcat 服务器，是因为 Spring Boot 内置了 Tomcat<br>等待一会儿就会看到下方的成功运行的提示信息：</p><p><img src="https://img-blog.csdnimg.cn/2018111810180249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（4）此时，可以看到我们的 Tomcat 运行在 8080 端口，我们来访问下面地址试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;hello</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181118101947898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-Boot-项目文件介绍"><a href="#Spring-Boot-项目文件介绍" class="headerlink" title="Spring Boot 项目文件介绍"></a>Spring Boot 项目文件介绍</h3><p><strong>一、解析 pom.xml 文件：</strong></p><p>（1）让我们来看看默认生成的 pom.xml 文件中到底有些什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.xpwi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;springboot&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line"></span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051</span><br></pre></td></tr></table></figure><p>（2）我们可以看到一个比较陌生一些的标签 ，这个标签是在配置 Spring Boot 的父级依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>有了这个，当前的项目才是 Spring Boot 项目，spring-boot-starter-parent 是一个特殊的 starter ，它用来提供相关的 Maven 默认依赖，使用它之后，常用的包依赖就可以省去 version 标签。</p><p>关于具体 Spring Boot 提供了哪些 jar 包的依赖，我们可以查看本地 Maven 仓库下：\repository\org\springframework\boot\spring-boot-dependencies\2.1.0.RELEASE\spring-boot-dependencies-2.1.0.RELEASE.pom 文件来查看，挺长的…</p><p><strong>二、应用入口类 SpringbootApplication.java</strong></p><p>Spring Boot 项目通常有一个名为 *Application 的入口类，入口类里有一个 main 方法， 这个 main 方法其实就是一个标准的 Javay 应用的入口方法。</p><p><strong>@SpringBootApplication</strong> 是 Spring Boot 的核心注解，它是一个组合注解，该注解组合了：**@Configuration<strong>、</strong>@EnableAutoConfiguration、@ComponentScan；** 若不是用 <strong>@SpringBootApplication</strong> 注解也可以使用这三个注解代替。</p><ul><li>其中，**@EnableAutoConfiguration 让 Spring Boot 根据类路径中的 jar 包依赖为当前项目进行自动配置**，例如，添加了 spring-boot-starter-web 依赖，会自动添加 Tomcat 和 Spring MVC 的依赖，那么 Spring Boot 会对 Tomcat 和 Spring MVC 进行自动配置。</li><li><strong>Spring Boot 还会自动扫描 @SpringBootApplication 所在类的同级包以及下级包里的 Bean</strong> ，所以入口类建议就配置在 grounpID + arctifactID 组合的包名下（这里为 com.xpwi.springboot 包）</li></ul><p><strong>三、Spring Boot 的配置文件：</strong></p><p>Spring Boot 使用一个全局的配置文件 application.properties 或 application.yml，放置在【src/main/resources】目录或者类路径的 /config 下。</p><p>Spring Boot 不仅支持常规的 properties 配置文件，还支持 yaml 语言的配置文件。yaml 是以数据为中心的语言，在配置数据的时候具有面向对象的特征。</p><p>Spring Boot 的全局配置文件的作用是对一些默认配置的配置值进行修改。</p><p><strong>修改 properties 配置文件实例：</strong></p><p>（1）打开 resources 下的 application.properties</p><p><img src="https://img-blog.csdnimg.cn/20181118105134569.png" alt="在这里插入图片描述"></p><p>（2）在这里我们可以设置访问的端口，将 Tomcat 默认端口设置为 8080 （默认的不修改） ，并将默认的访问路径从 “/” 修改为 “/cn” 时，再访问 <a href="http://localhost:8080/">http://localhost:8080/</a> 是什么都没有的，此时要访问 hello 是要使用 <a href="http://localhost:8080/cn/hello">http://localhost:8080/cn/hello</a></p><p><img src="https://img-blog.csdnimg.cn/20181118105520656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意：如果是 yml 需要在 “:” 后加一个空格，幸好 IDEA 很好地支持了 yml 文件的格式有良好的代码提示；<br>我们可以自己配置多个属性</p></blockquote><p>（3）<strong>使用 yml 文件作为配置文件</strong>，我们直接把 .properties 后缀的文件删掉，使用 .yml 文件来进行简单的配置</p><p><img src="https://img-blog.csdnimg.cn/20181118111549383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（4）在然后使用在我们的 HelloController.java 类中使用 @Value 来获取配置属性，代码（请看注释）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.xpwi.springboot;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 测试控制器</span><br><span class="line"> *</span><br><span class="line"> * @author: @肖朋伟CSDN</span><br><span class="line"> * @create: 2018-11-18</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取.yml 文件中值</span><br><span class="line">    @Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取 age</span><br><span class="line">    @Value(&quot;$&#123;csdnUrl&#125;&quot;)</span><br><span class="line">    private String csdnUrl;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;路径映射，对应浏览器访问的地址，访问该路径则执行下面函数</span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return name + &quot; CSDN 博客：&quot;+ csdnUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">1234567891011121314151617181920212223242526272829</span><br></pre></td></tr></table></figure><p>（5）重启 Spring Boot ，输入地址：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 能看到正确的结果：</p><p><img src="https://img-blog.csdnimg.cn/20181118112021290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>【注意】：此时如果你第一次使用 idea 出现中文乱码，解决办法：</p><p><img src="https://img-blog.csdnimg.cn/20181118112547922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（6）【注意】： 我们并没有在 yml 文件中注明属性的类型，而是在使用的时候定义的。你也可以在配置文件中使用当前配置：</p><p><img src="https://img-blog.csdnimg.cn/20181118113038260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（7）任然可以得到正确结果：</p><p><img src="https://img-blog.csdnimg.cn/20181118113111788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（8）【问题】： 这样写配置文件繁琐而且可能会造成类的臃肿，因为有许许多多的 @Value 注解。</p><p>可以，封装配置信息</p><h3 id="封装配置信息使用方法："><a href="#封装配置信息使用方法：" class="headerlink" title="封装配置信息使用方法："></a>封装配置信息使用方法：</h3><p>（1）application.yml 文件内容如下：<br><img src="https://img-blog.csdnimg.cn/20181118113538919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（2）新建 author.java 和 HelloController.java 同级，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.xpwi.springboot;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;author&quot;)</span><br><span class="line">public class author &#123;</span><br><span class="line">    private  String name;</span><br><span class="line"></span><br><span class="line">    private  String csdnUrl;</span><br><span class="line"></span><br><span class="line">    public String getCsdnUrl() &#123;</span><br><span class="line">        return csdnUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCsdnUrl(String csdnUrl) &#123;</span><br><span class="line">        this.csdnUrl &#x3D; csdnUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829</span><br></pre></td></tr></table></figure><p>（3）此时可能会报错，如果报错，打开 pom.xml 文件，添加内容（注意位置）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181118121422492.png" alt="在这里插入图片描述"></p><p>（4）重新编写 HelloController 类，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.xpwi.springboot;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 测试控制器</span><br><span class="line"> *</span><br><span class="line"> * @author: @肖朋伟CSDN</span><br><span class="line"> * @create: 2018-11-18</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取.yml 文件中值</span><br><span class="line">    &#x2F;&#x2F;@Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">    &#x2F;&#x2F;private String name;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取 age</span><br><span class="line">    &#x2F;&#x2F;@Value(&quot;$&#123;csdnUrl&#125;&quot;)</span><br><span class="line">    &#x2F;&#x2F;private String csdnUrl;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private author author;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;路径映射，对应浏览器访问的地址，访问该路径则执行下面函数</span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;名字：&quot; + author.getName() + &quot; 地址：&quot; + author.getCsdnUrl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435</span><br></pre></td></tr></table></figure><p>（5）重启 Spring Boot，访问浏览器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;hello</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181118122317781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>【提示】：我们可以把配置信息封装成一个类，首先在我们的 name 和 age 前加一个 student 前缀，然后新建一个 StudentProperties 的类用来封装这些信息，并用上两个注解：</p><ul><li>@Component：表明当前类是一个 Java Bean</li><li>@ConfigurationProperties(prefix = “author”)：表示获取前缀为 author 的配置信息</li></ul><p><strong>转载请注明出处：肖朋伟：<a href="https://blog.csdn.net/qq_40147863/article/details/84194493">https://blog.csdn.net/qq_40147863/article/details/84194493</a></strong></p><h3 id="更多文章链接："><a href="#更多文章链接：" class="headerlink" title="更多文章链接："></a>更多文章链接：</h3><ul><li><a href="https://blog.csdn.net/qq_40147863/article/category/8378529">Spring Boot 学习笔记</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树遍历算法学习分享</title>
      <link href="2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
      <url>2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言-数据结构-二叉树实现、二叉树的三种遍历"><a href="#C语言-数据结构-二叉树实现、二叉树的三种遍历" class="headerlink" title="C语言 数据结构 二叉树实现、二叉树的三种遍历"></a>C语言 数据结构 二叉树实现、二叉树的三种遍历</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。</p><p><strong>二叉树的遍历：</strong></p><p>前序遍历、中序遍历、后续遍历</p><p><strong>以下代码的二叉树图形表示</strong><br><img src="https://img-blog.csdnimg.cn/2019012121523427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c;<span class="comment">//数的一个节点包含多个数据类型，可定义结构体，赋值时用memcopy</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pleft</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pright</span>;</span></span><br><span class="line">&#125;Node, *pNode;</span><br><span class="line"><span class="comment">//前序遍历:if中要打印的放前面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(pNode p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);<span class="comment">//等价于printf(&quot;%c&quot;,c);</span></span><br><span class="line">preOrder(p-&gt;pleft);</span><br><span class="line">preOrder(p-&gt;pright);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历：if中要打印的放中间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">midOrder</span><span class="params">(pNode p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">midOrder(p-&gt;pleft);</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line">midOrder(p-&gt;pright);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历：if中要打印的放后面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">latOrder</span><span class="params">(pNode p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">latOrder(p-&gt;pleft);</span><br><span class="line">latOrder(p-&gt;pright);</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[N + <span class="number">1</span>] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line">pNode p[N];<span class="comment">//一共有N个节点，p[N]用于存储每一个节点的地址值</span></span><br><span class="line">pNode tree;<span class="comment">//树的头指针</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)<span class="comment">//把每个字母都放进树的节点中</span></span><br><span class="line">&#123;</span><br><span class="line">p[i] = (pNode)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(Node));</span><br><span class="line">p[i]-&gt;c = c[i];</span><br><span class="line">&#125;</span><br><span class="line">tree = p[<span class="number">0</span>];<span class="comment">//树的头指针（树根）</span></span><br><span class="line"><span class="comment">//以下实现节点的连结:广度优先遍历</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)<span class="comment">//外层循环控制往树坑里放的节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)<span class="comment">//内层循环找空闲的树坑,放入节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p[j]-&gt;pleft)</span><br><span class="line">&#123;</span><br><span class="line">p[j]-&gt;pleft = p[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p[j]-&gt;pright)</span><br><span class="line">&#123;</span><br><span class="line">p[j]-&gt;pright = p[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历打印</span></span><br><span class="line">preOrder(p[<span class="number">0</span>]);<span class="comment">//前序遍历</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">midOrder(p[<span class="number">0</span>]);<span class="comment">//中序遍历</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">latOrder(p[<span class="number">0</span>]);<span class="comment">//后序遍历</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ABDHIEJCFG</span><br><span class="line">HDIBJEAFCG</span><br><span class="line">HIDJEBFGCA</span><br><span class="line">请按任意键继续. . .</span><br><span class="line"></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h2 id="VS2017查看监视"><a href="#VS2017查看监视" class="headerlink" title="VS2017查看监视"></a>VS2017查看监视</h2><p><img src="https://img-blog.csdnimg.cn/20190121215534187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据机构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo初始搭建</title>
      <link href="2020/11/21/%E5%88%9D%E5%A7%8B%E6%90%AD%E5%BB%BA/"/>
      <url>2020/11/21/%E5%88%9D%E5%A7%8B%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo搭建博客以及next主题的各种特效合集"><a href="#hexo搭建博客以及next主题的各种特效合集" class="headerlink" title="hexo搭建博客以及next主题的各种特效合集"></a>hexo搭建博客以及next主题的各种特效合集</h1><p><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png" alt="img"></p><p><a href="https://me.csdn.net/wuguidian1114">Capricorn322</a> 2020-02-20 21:45:13 <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes.png" alt="img"> 487 <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect.png" alt="img"> 收藏</p><p>版权</p><h1 id="hexo搭建博客"><a href="#hexo搭建博客" class="headerlink" title="hexo搭建博客"></a>hexo搭建博客</h1><p>1、安装node和npm，这个自己百度一下node官网下载即可就不在这多说了，node下载后npm也会一起下载，下载完成后终端测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">检测版本号</span><br></pre></td></tr></table></figure><p>2、全局安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli     # -g表示全局安装</span><br></pre></td></tr></table></figure><p>3、初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init xxx  #文件名</span><br></pre></td></tr></table></figure><p>4、进入文件夹并且初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd myblog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>5、在本地运行创建的博客</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以在package.json中配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;local&quot;</span> : <span class="string">&#x27;hexo g &amp; hexo s&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次想要运行这两个语句的时候直接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm run local</span><br></pre></td></tr></table></figure><p>这个时候你就能够在本地看到你搭建的博客</p><h2 id="hexo发布文章"><a href="#hexo发布文章" class="headerlink" title="hexo发布文章"></a>hexo发布文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new  xxxx  # xxx为文章名字可以是汉字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>此时会出现一个提示</p><p><img src="https://img-blog.csdnimg.cn/20200220213650129.png" alt="img"></p><p>进入posts文件夹下,打开文章，在里面进行编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim test5.md</span><br></pre></td></tr></table></figure><h1 id="hexo添加标签和分类"><a href="#hexo添加标签和分类" class="headerlink" title="hexo添加标签和分类"></a>hexo添加标签和分类</h1><p>这里只拿标签页作举例子，其他页面都是一个道理</p><p>1、在配置文件中找到menu，将你想现实的页面钱前方的#去掉</p><p><img src="https://img-blog.csdnimg.cn/20200223100756882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1Z3VpZGlhbjExMTQ=,size_16,color_FFFFFF,t_70" alt="img"></p><p>2、这时候你刷新就可以看到主页面已经有了tags，但是，点击的时候会现实cannot get，这是因为你还没有创建对应的界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>此时会给你一个提示信息</p><h1 id><a href="#" class="headerlink" title></a><img src="https://img-blog.csdnimg.cn/20200223101203287.png" alt="img"></h1><p>3、进入tags文件夹后，打开index.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.md</span><br></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://img-blog.csdnimg.cn/20200223101429826.png" alt="img"></h1><p>type写为tags ，保存，这时候再刷新就可以看到你的tags啦</p><h2 id="hexo添加多个tag"><a href="#hexo添加多个tag" class="headerlink" title="hexo添加多个tag"></a>hexo添加多个tag</h2><p><img src="https://img-blog.csdnimg.cn/20200223181840578.png" alt="img"></p><h2 id="hexo添加多个分类（categories）"><a href="#hexo添加多个分类（categories）" class="headerlink" title="hexo添加多个分类（categories）"></a>hexo添加多个分类（categories）</h2><p>1、添加两个并行分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> - [分类1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> - [分类2]</span><br></pre></td></tr></table></figure><p>2、添加子分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">categories：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> - 父分类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> - 子分类</span><br></pre></td></tr></table></figure><h1 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h1><p>1、将文章底部带#的tag变成图标</p><p>实现效果图</p><p><img src="https://img-blog.csdnimg.cn/20200220213833591.png" alt="img"><br>实现方法：找到next下的配置文件，把tag_icon设置为true</p><p><img src="https://img-blog.csdnimg.cn/2020022021394877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1Z3VpZGlhbjExMTQ=,size_16,color_FFFFFF,t_70" alt="img"></p><p>2、在每一篇文章后加本文结束的标记</p><p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px; margin-top:10px&quot;</span>&gt;</span>-------------本文结束---感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件,将下方代码复制到红框位置</p><p><img src="https://img-blog.csdnimg.cn/20200220214311547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1Z3VpZGlhbjExMTQ=,size_16,color_FFFFFF,t_70" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（_config.yml），在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">passage_end_tag:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客优化之实用功能添加系列分类雷达</title>
      <link href="2020/11/21/hexo%E4%B9%8B%E5%88%86%E7%B1%BB%E9%9B%B7%E8%BE%BE/"/>
      <url>2020/11/21/hexo%E4%B9%8B%E5%88%86%E7%B1%BB%E9%9B%B7%E8%BE%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-博客优化之实用功能添加系列（持续更新）"><a href="#Hexo-博客优化之实用功能添加系列（持续更新）" class="headerlink" title="Hexo 博客优化之实用功能添加系列（持续更新）"></a>Hexo 博客优化之实用功能添加系列（持续更新）</h1><p><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png" alt="img"></p><p><a href="https://me.csdn.net/qq_36759224">TRHX • 鲍勃</a> 2019-12-08 00:12:07 <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes.png" alt="img"> 32540 <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect.png" alt="img"> 收藏 31</p><p>分类专栏： <a href="https://blog.csdn.net/qq_36759224/category_9285510.html">【 Hexo 博客搭建 】</a> 文章标签： <a href="https://www.csdn.net/gather_24/MtTaEg0sMzY5NDMtYmxvZwO0O0OO0O0O.html">博客优化</a> <a href="https://so.csdn.net/so/search/s.do?q=%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0&t=blog&o=vip&s=&l=&f=&viparticle=">博客实用功能添加</a> <a href="https://www.csdn.net/gather_22/MtTaYg5sNTA0ODctYmxvZwO0O0OO0O0O.html">Hexo博客</a></p><p>版权</p><hr><p>本文将讲述一些 Hexo 博客实用功能的添加，本文以作者 <a href="https://luuman.github.io/Home/H1/index.html">luuman</a> 的 <a href="https://github.com/luuman/hexo-theme-spfk">spfk</a> 主题和作者 <a href="https://xaoxuu.com/">xaoxuu</a> 的 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题为例，实际效果欢迎访问<a href="https://www.itrhx.com/">我的博客</a>进行查看，本文章会不定时进行更新。文章涉及有关参考资料、教程、链接如有侵权请联系我删除！</p><p><strong>请注意：</strong>不同主题可能方法有些不同，相同主题不同版本，配置方法也有所差异！阅读主题文档非常重要！</p><p><strong>博客功能添加前提条件：</strong>有一定的前端基础，了解 HTML、CSS、JS，了解 CSS 预处理语言 Sass、Less、Stylus，搞懂 hexo 的目录结构。</p><p><strong>博客功能添加通用步骤：</strong>选定主题，认真阅读主题文档，大多数主题文档都有非常详细的配置设置，分析主题目录结构，了解每个文件是对应网页哪个部分的，认真阅读相关教程，教程本质上只为你提供核心代码和思路，具体代码要添加到哪个地方，需要你自己搞懂主题结构，添加到需要的、合适的位置！</p><p>欢迎关注我的专栏：<a href="https://itrhx.blog.csdn.net/column/info/34316">《Github/Coding Pages + Hexo》</a>，从前期搭建到后期美化一条龙，帮你解决 Hexo 常见问题！</p><p>推荐阅读：<a href="https://itrhx.blog.csdn.net/article/details/85420403">《Hexo 博客优化之博客美化系列（持续更新）》</a></p><p>Hexo 交流群：924812033，有问题可以一起交流解决。</p><hr><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000001_font_20">【01】添加评论系统</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000002_font_68">【02】添加字数统计和阅读时长</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000003_font_170">【03】添加网站运行时间</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000004_font_199">【04】添加百度统计</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000005RSS_font_219">【05】添加RSS订阅</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000006_Fork_me_on_GitHub__font_251">【06】添加 Fork me on GitHub 效果</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000007_font_259">【07】更改本地预览端口号</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000008_HTTPS_font_277">【08】启用 HTTPS</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000009_font_283">【09】博客备份</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF000010_font_289">【10】自定义一个不使用主题模板渲染的独立页面</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/85010191?ops_request_misc=%7B%22request_id%22:%22160593899319725225019743%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=160593899319725225019743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-6-85010191.pc_search_result_cache&utm_term=hexo&spm=1018.2118.3001.4449#font_colorFF0000__font_294">未完待续……</a></li></ul><hr><h1 id="【01】添加评论系统"><a href="#【01】添加评论系统" class="headerlink" title="【01】添加评论系统"></a>【01】添加评论系统</h1><p>主流的评论系统有很多，比如：网易云跟帖、多说、友言、畅言、来必力（LiveRe）、Disqus、Valine、Gitalk 等等，目前网易云跟帖、多说、友言都已经关闭了，还有些可能国内还访问不了，比较麻烦，百度了一下，最后还是选择了来必力评论系统</p><p>进入<a href="https://livere.com/">来必力官网</a>，注册一个账号：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzAvNWM5ZjkxZWQ4OTczYS5wbmc" alt="img"></p><p>注册完毕之后，登录，进入安装页面，选择 City 免费版安装，安装之后你会得到一段代码<br><img src="https://img-blog.csdnimg.cn/20190807103722227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190807103745470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5ZjkyOWU3ZDYyYi5wbmc" alt="img"></p><p>我们打开主题文件下的 _config.yml 文件，添加如下代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5ZjkyYjVlMjcwZi5wbmc" alt="img"></p><p>在 \themes\hexo-theme-spfk\layout_partial\comments 文件夹下新建一个 livere.ejs 的文件，在里面填写来必力提供的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;lv-container&quot;</span> data-id=<span class="string">&quot;city&quot;</span> data-uid=<span class="string">&quot;这里是你的uid&quot;</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    </span><br><span class="line">        j = d.createElement(s);</span><br><span class="line">        j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span><br><span class="line">        j.async = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">        &#125;)(<span class="built_in">document</span>, <span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><p>打开 \themes\hexo-theme-spfk\layout_partial\article.ejs 文件，在适当位置添加如下红框中的代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5ZjkyZTNlZWJhYS5wbmc" alt="img"></p><p>完成以上操作之后，我们就可以使用来必力评论系统了<br><img src="https://img-blog.csdnimg.cn/20190807103817644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>另外推荐使用 <a href="https://valine.js.org/">Valine</a> 评论系统，和 gitalk 评论系统</p><hr><h1 id="【02】添加字数统计和阅读时长"><a href="#【02】添加字数统计和阅读时长" class="headerlink" title="【02】添加字数统计和阅读时长"></a>【02】添加字数统计和阅读时长</h1><p>先在博客目录下执行以下命令安装 hexo-wordcount 插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i --save hexo-wordcount</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>注意：在 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题中，字数统计和阅读时长的功能我已提交 PR，在最新版本中，只需要安装插件后，在主题 <code>config.yml</code> 配置文件里，将 <code>word_count</code> 关键字设置为 <code>true</code> 即可，对于旧版本，可以通过以下方法实现：</p><p>以 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题（版本 1.2.1）为例，在 \themes\material-x\layout_meta 目录下创建 word.ejs 文件，在 word.ejs 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(isPostList || !isPostList)&#123; %&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (theme.word_count &amp;&amp; !post.no_word_count) &#123; %&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin-right: 10px;&quot;</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-time&quot;</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br><span class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-keyboard&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-count&quot;</span>&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-time&quot;</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br><span class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-hourglass-half&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;  阅读时长≈&lt;/span&gt;</span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-count&quot;</span>&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure><p>然后在主题的配置文件 _config.yml 找到 meta 关键字，将 word 填入 header 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meta:</span><br><span class="line">  header: [title, author, date, categories, tags, counter, word, top]</span><br><span class="line">  footer: [updated, share]</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>最后在主题目录下的 _config.yml 添加以下配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20191129201331969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pdHJoeC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>同样的，以 <a href="https://github.com/luuman/hexo-theme-spfk">spfk</a> 主题为例，在 \themes\hexo-theme-spfk\layout_partial\post 目录下创建 word.ejs 文件，在 word.ejs 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;margin-top:10px;&quot;</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-time&quot;</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-keyboard-o&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-count&quot;</span>&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-time&quot;</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-hourglass-half&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;  阅读时长: &lt;/span&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-count&quot;</span>&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><p>然后在 \themes\hexo-theme-spfk\layout_partial\article.ejs 中适当位置添加以下代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk1ZmU0ZTM2YS5wbmc" alt="img"></p><p>最后在主题目录下的 _config.yml 添加以下配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果显示的位置不好，可以自行更改其位置，成功配置后的效果如下：<br><img src="https://img-blog.csdnimg.cn/20190807104015998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk2ODkyZTRkYi5wbmc" alt="img"></p><hr><p>另外：要在博客底部显示所有文章的总字数，可以<a href="https://www.npmjs.com/package/hexo-wordcount">点击此处</a>，根据你博客底部文件的类型选择相应的代码放在适当的位置即可，前提是要安装好 hexo-wordcount 插件，例如我使用 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题，在 \themes\material-x\layout_partial 目录下的 footer.ejs 文件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fas fa-chart-area&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-count&quot;</span>&gt;字数统计：&lt;%= totalcount(site) %&gt;&lt;/span&gt;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>实现效果如下：<br><img src="https://img-blog.csdnimg.cn/20190807104042630.png" alt="在这里插入图片描述"></p><hr><h1 id="【03】添加网站运行时间"><a href="#【03】添加网站运行时间" class="headerlink" title="【03】添加网站运行时间"></a>【03】添加网站运行时间</h1><p>一个比较好的小功能，可以看见自己的博客运行多久了，时间一天天的增加，成就感也会一天天增加的<br>在 \themes\hexo-theme-spfk\layout_partial\footer.ejs 文件下添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">&quot;timeDate&quot;</span>&gt;载入天数...&lt;<span class="regexp">/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/</span>span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;08/10/2018 17:38:00&quot;</span>);<span class="comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span><br><span class="line">        now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><p>最后效果如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk3ZGRlY2E4YS5wbmc" alt="img"></p><hr><h1 id="【04】添加百度统计"><a href="#【04】添加百度统计" class="headerlink" title="【04】添加百度统计"></a>【04】添加百度统计</h1><p>百度统计是百度推出的一款免费的专业网站流量分析工具，能够告诉用户访客是如何找到并浏览用户的网站，在网站上做了些什么，非常有趣，接下来我们把百度统计添加到自己博客当中</p><p>访问<a href="https://tongji.baidu.com/">百度统计首页</a>，注册一个账号后登陆，添加你的博客网站<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk4NTk0Yzg5NS5wbmc" alt="img"><br>接着点击代码获取，复制该代码<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk4ODE1M2MzNS5wbmc" alt="img"></p><p>然后到目录 \themes\hexo-theme-spfk\layout_partial 下新建一个 baidu-analytics.ejs 文件，里面粘贴你刚刚复制的代码<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk4YjBiYjRlZi5wbmc" alt="img"></p><p>修改主题文件夹下的 _config.yml 文件，将你的key（图中涂掉部分）填写进去：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk4ZDQzNTQ5ZC5wbmc" alt="img"></p><p>所有操作完成后可以在百度统计管理页面检查代码是否安装成功，如果代码安装正确，一般20分钟后，可以查看网站分析数据<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMzEvNWM5Zjk5MDBiOWI4Ny5wbmc" alt="img"></p><p>另外推荐：<a href="https://web.umeng.com/main.php?c=user&a=index">友盟</a>，2010年4月在北京成立，安全、可靠、公正、第三方的网站流量统计分析系统</p><hr><h1 id="【05】添加RSS订阅"><a href="#【05】添加RSS订阅" class="headerlink" title="【05】添加RSS订阅"></a>【05】添加RSS订阅</h1><p>RSS订阅是站点用来和其他站点之间共享内容的一种简易方式，即Really Simple Syndication（简易信息聚合），如果不会使用，可以参见百度百科：<a href="https://baike.baidu.com/item/RSS%E8%AE%A2%E9%98%85/663114">https://baike.baidu.com/item/RSS%E8%AE%A2%E9%98%85/663114</a> ；首先我们安装feed插件，在本地hexo目录下右键<code>Git Bash Here</code>，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-feed</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>等待安装完成后，打开hexo目录下的配置文件 _config.yml，在末尾添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">#RSS订阅</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p>随后打开主题配置文件 _config.yml，添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>至此，RSS订阅功能添加完成</p><hr><h1 id="【06】添加-Fork-me-on-GitHub-效果"><a href="#【06】添加-Fork-me-on-GitHub-效果" class="headerlink" title="【06】添加 Fork me on GitHub 效果"></a>【06】添加 Fork me on GitHub 效果</h1><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20190807104140857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a href="https://blog.github.com/2008-12-19-github-ribbons/">点击此处</a>可以查看更多样式，将相应样式的代码复制到你想要放的地方就OK了，代码里的链接也要替换成你的，更多创意，比如 Follow me on CSDN ，只需要用PS改掉图片里的文字，替换掉相应链接即可</p><hr><h1 id="【07】更改本地预览端口号"><a href="#【07】更改本地预览端口号" class="headerlink" title="【07】更改本地预览端口号"></a>【07】更改本地预览端口号</h1><p>hexo博客在执行<code>hexo s</code>进行本地预览的时候，默认端口号是4000，当该端口号被占用时会报错 <code>Error: listen EADDRINUSE 0.0.0.0:4000</code> ，此时可以关闭占用该端口的进程，也可以更换端口号，更换端口号可以通过以下两种方法实现：</p><p>方法一：在根目录的<code>_config.yml</code>配置文件内加上如下代码更改<code>hexo s</code>运行时的端口号：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>方法二：通过 <code>hexo server -p 5000</code> 命令来指定端口，这种方法只是本次执行有效</p><hr><h1 id="【08】启用-HTTPS"><a href="#【08】启用-HTTPS" class="headerlink" title="【08】启用 HTTPS"></a>【08】启用 HTTPS</h1><p>参考我的另一篇文章：<a href="https://blog.csdn.net/qq_36759224/article/details/99228310">《利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS》</a></p><hr><h1 id="【09】博客备份"><a href="#【09】博客备份" class="headerlink" title="【09】博客备份"></a>【09】博客备份</h1><p>参考我的另一篇文章：<a href="https://blog.csdn.net/qq_36759224/article/details/101702153">《使用 hexo-git-backup 插件备份你的 Hexo 博客》</a></p><hr><h1 id="【10】自定义一个不使用主题模板渲染的独立页面"><a href="#【10】自定义一个不使用主题模板渲染的独立页面" class="headerlink" title="【10】自定义一个不使用主题模板渲染的独立页面"></a>【10】自定义一个不使用主题模板渲染的独立页面</h1><p>参考我的另一篇文章：<a href="https://itrhx.blog.csdn.net/article/details/90320295">《Hexo 博客自定义一个不使用主题模板渲染的独立页面》</a></p><hr><h1 id="未完待续…https-www-itrhx-com-2018-08-27-A04-Hexo-blog-topic-personalization"><a href="#未完待续…https-www-itrhx-com-2018-08-27-A04-Hexo-blog-topic-personalization" class="headerlink" title="未完待续…https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/)"></a>未完待续…<a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/">https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/</a>)</h1>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volantis之打赏模块</title>
      <link href="2020/11/21/volantis%E4%B9%8B%E6%89%93%E8%B5%8F%E6%A8%A1%E5%9D%97/"/>
      <url>2020/11/21/volantis%E4%B9%8B%E6%89%93%E8%B5%8F%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客打赏"><a href="#hexo博客打赏" class="headerlink" title="hexo博客打赏"></a><a href="https://www.cnblogs.com/peihao/p/5269130.html">hexo博客打赏</a></h1><p>随着支付宝和微信转账支付的日益深入人心，有时候我们甚至可以在很多博客文章后面看到小编和文章作者自己添加的DIY打赏功能，包括微信、支付宝等扫描支付转账，本篇文章就是为hexo优化，在每篇文章后面添加打赏功能。</p><h1 id="打赏模块的代码"><a href="#打赏模块的代码" class="headerlink" title="打赏模块的代码"></a>打赏模块的代码</h1><p><code>layout\_partial</code> 下新建 <code>donate.ejs</code> 输入如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 添加捐赠图标 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> =<span class="string">&quot;post-donate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;donate_board&quot;</span> <span class="attr">class</span>=<span class="string">&quot;donate_bar center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;btn_donate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn_donate&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;打赏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;donate_txt&quot;</span>&gt;</span></span><br><span class="line">           <span class="symbol">&amp;uarr;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           &lt;%=theme.donate_message%&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;donate_guide&quot;</span> <span class="attr">class</span>=<span class="string">&quot;donate_bar center hidden&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 支付宝打赏图案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/chuangwailinjie/chuangwailinjie.github.io/master/img/zhifubao.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;支付宝打赏&quot;</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 微信打赏图案 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/chuangwailinjie/chuangwailinjie.github.io/master/img/wx.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;微信打赏&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn_donate&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#donate_board&#x27;</span>).addClass(<span class="string">&#x27;hidden&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#donate_guide&#x27;</span>).removeClass(<span class="string">&#x27;hidden&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;! -- 添加捐赠图标 --&gt;</span><br></pre></td></tr></table></figure><h1 id="设置打赏模块的样式"><a href="#设置打赏模块的样式" class="headerlink" title="设置打赏模块的样式"></a>设置打赏模块的样式</h1><p><code>source\css\_partial</code> 下新建 <code>donate.styl</code> 输入如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donate_bar</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">82px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif</span>)no-repeat;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: background <span class="number">0s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">82px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-class">.donate_txt</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9d9d9d</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">2</span> <span class="string">&quot;Microsoft Yahei&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-donate</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">420px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，记得在 <code>source\css\style.styl</code> 中添加 <code>@import &#39;_partial/donate&#39;</code><br>第三步： 讲打赏模块整合到文章中<br>在 <code>layout\_partial\article.ejs</code> 中的 <code>&lt;article&gt; &lt;/article&gt;</code> 标签内添加如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; theme.donate)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">&#x27;donate&#x27;</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>第四步： 编写配置文件<br>我们可以在主题的 <code>_config.yml</code> 文件中关闭和打开打赏功能，还可以自定义设置打赏文案。例如：</p><h1 id="是否开启打赏功能"><a href="#是否开启打赏功能" class="headerlink" title="是否开启打赏功能"></a>是否开启打赏功能</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">donate: true</span><br></pre></td></tr></table></figure><h1 id="打赏文案"><a href="#打赏文案" class="headerlink" title="打赏文案"></a>打赏文案</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">donate_message: ****</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题美化进阶&lt;hexo主题美化进阶&gt;</title>
      <link href="2020/11/19/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E8%BF%9B%E9%98%B6/"/>
      <url>2020/11/19/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo之Volantis主题美化"><a href="#hexo之Volantis主题美化" class="headerlink" title="hexo之Volantis主题美化"></a>hexo之Volantis主题美化</h1><p><em><strong>此博客为转载学习博客。</strong></em></p><p><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png"></p><p>置顶  <a href="https://me.csdn.net/qq_45428737">阳光派plus</a>  2020-05-23 15:24:13  <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes.png">  784 <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect.png">  收藏  7</p><p>分类专栏：  <a href="https://blog.csdn.net/qq_45428737/category_9916148.html">博客</a>  文章标签：  <a href="https://www.csdn.net/gather_2c/OtDaQg2sNzExLWJsb2cO0O0O.html">javascript</a>  <a href="https://www.csdn.net/gather_2f/MtTaEg0sMzc5NzAtYmxvZwO0O0OO0O0O.html">前端</a>  <a href="https://www.csdn.net/gather_22/MtTaEg0sMzgzMjEtYmxvZwO0O0OO0O0O.html">css3</a>  <a href="https://www.csdn.net/gather_2c/MtzaUg4sNDIwOC1ibG9n.html">github</a>  <a href="https://www.csdn.net/gather_2f/MtTaEg3sMTYyNzYtYmxvZwO0O0OO0O0O.html">经验分享</a></p><p>版权</p><p>具体效果请移步我的博客👉<a href="https://www.zyoushuo.cn/post/1788.html">阳光派Plus</a><br>更：<br>1.<a href="https://blog.csdn.net/qq_45428737/article/details/108134574">添加暗黑模式</a><br>2.<a href="https://blog.csdn.net/qq_45428737/article/details/108086742">添加鼠标右键功能</a><br>3.<a href="https://blog.csdn.net/qq_45428737/article/details/108061722">添加页面预加载功能</a></p><p>7.20 更新<br>★valine评论区卡片式背景<br>★添加鼠标样式<br>★文章首字下沉<br>★文章末尾版权<br>★修改页面卡片阴影<br>6.15 更新<br>★修改valine表情区域样式<br>★主页、正文区域文章标题居中<br>★博客文章链接优化</p><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><ul><li><ul><li><a href="https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#_24">一、主界面显示</a><pre><code>-   -   [1、设置主页logo](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#1logo_26)    -   [2、添加小标题动态彩色字体](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#2_30)    -   [3、界面间距](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#3_96)-   [二、页面优化](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#_146)-   -   [1、导航栏样式](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#1_148)    -   [2、页面卡片阴影](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#2_196)    -   [3、页面特效](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#3_230)    -   -   [a、樱花](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#a_234)        -   [b、鼠标滑动特效](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#b_242)        -   [c、鼠标点击特效](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#c_250)        -   [d、鼠标点击爱心特效](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#d_258)        -   [e、鼠标点击社会主义价值观特效](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#e_266)    -   [4、主页、正文文章标题居中](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#4_272)    -   [5、博客文章链接优化](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#5_292)    -   [6、添加鼠标样式](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#6_314)    -   [7、文章首字下沉](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#7_326)    -   [8、文章末尾版权](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#8_351)-   [三、valine评论优化](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#valine_373)-   -   [1、Valine添加博主标签](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#1Valine_374)    -   [2、评论添加一言](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#2_491)    -   [3、添加评论背景](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#3_527)    -   [4、添加自定义表情](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#4_551)    -   [5、修改表情区域样式](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#5_665)    -   [6、评论区卡片式背景](https://blog.csdn.net/qq_45428737/article/details/106299049?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control#6_679)</code></pre></li></ul></li></ul></li></ul></li></ul><p>☀️  写在前面<br>本教程适用于Volantis2.6.4及以上的版本，如果版本不同，文件位置可能会有些不同。不过总体不影响。可以查看作者更新文档。当然也不仅局限于Volantis主题，其他主题按照自身的语法格式同样可修改。Volantis主题已升级到3.0版本，有些文件位置与2.X版本有所不同，文中会提出。<br>本文中涉及到修改.styl后缀的文件时一定要注意格式，不能多一个会少一个空格<br>●主界面优化<br>●页面优化<br>●评论区优化</p><h4 id="一、主界面显示"><a href="#一、主界面显示" class="headerlink" title="一、主界面显示"></a>一、主界面显示</h4><h5 id="1、设置主页logo"><a href="#1、设置主页logo" class="headerlink" title="1、设置主页logo"></a>1、设置主页logo</h5><p>默认显示文字显得有些单调，故选择使用图片logo代替文字显示标题。修改主题配置文件<code>_config.yml</code>中的cover，添加logo属性值。</p><h5 id="2、添加小标题动态彩色字体"><a href="#2、添加小标题动态彩色字体" class="headerlink" title="2、添加小标题动态彩色字体"></a>2、添加小标题动态彩色字体</h5><p>修改主题配置文件<code>_config.yml</code>中的cover。去除subtitile属性值；在 themes/volantis/layout/_cover中index.ejs文件中添加如下代码(文字部分可修改)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 封面滚动字体 --&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;binft&quot;</span>&gt;&lt;/div&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> binft = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * b.length)]</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="number">94</span> * <span class="built_in">Math</span>.random() + <span class="number">33</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="built_in">document</span>.createDocumentFragment(), i = <span class="number">0</span>; r &gt; i; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> l = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">          l.textContent = e(), l.style.color = t(), n.appendChild(l)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = o[c.skillI];</span><br><span class="line">        c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= <span class="number">0</span> &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : <span class="string">&quot;forward&quot;</span> === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = <span class="string">&quot;backward&quot;</span>, c.delay = a) : c.skillP &gt; <span class="number">0</span> ? (c.text = c.text.slice(<span class="number">0</span>, -<span class="number">1</span>), c.skillP--) : (c.skillI = (c.skillI + <span class="number">1</span>) % o.length, c.direction = <span class="string">&quot;forward&quot;</span>)), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? <span class="built_in">Math</span>.min(s, s + c.prefixP) : <span class="built_in">Math</span>.min(s, t.length - c.skillP))), <span class="built_in">setTimeout</span>(i, d)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> l = <span class="string">&quot;&quot;</span>,</span><br><span class="line">      o = [<span class="string">&quot;山有木兮木有枝，心悦君兮君不知。&quot;</span>, <span class="string">&quot;人生若只如初见，何事秋风悲画扇。&quot;</span>,<span class="string">&quot;十年生死两茫茫，不思量，自难忘。&quot;</span>, <span class="string">&quot;曾经沧海难为水，除却巫山不是云。&quot;</span>,<span class="string">&quot;洛中何郁郁，冠带自相索。&quot;</span>,<span class="string">&quot;只愿君心似我心，定不负相思意。&quot;</span>,<span class="string">&quot;愿得一心人，白头不相离。&quot;</span>,<span class="string">&quot;入我相思门，知我相思苦。&quot;</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> r + <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;),</span><br><span class="line">      a = <span class="number">2</span>,</span><br><span class="line">      g = <span class="number">1</span>,</span><br><span class="line">      s = <span class="number">5</span>,</span><br><span class="line">      d = <span class="number">75</span>,</span><br><span class="line">      b = [<span class="string">&quot;rgb(110,64,170)&quot;</span>, <span class="string">&quot;rgb(150,61,179)&quot;</span>, <span class="string">&quot;rgb(191,60,175)&quot;</span>, <span class="string">&quot;rgb(228,65,157)&quot;</span>, <span class="string">&quot;rgb(254,75,131)&quot;</span>, <span class="string">&quot;rgb(255,94,99)&quot;</span>, <span class="string">&quot;rgb(255,120,71)&quot;</span>, <span class="string">&quot;rgb(251,150,51)&quot;</span>, <span class="string">&quot;rgb(226,183,47)&quot;</span>, <span class="string">&quot;rgb(198,214,60)&quot;</span>, <span class="string">&quot;rgb(175,240,91)&quot;</span>, <span class="string">&quot;rgb(127,246,88)&quot;</span>, <span class="string">&quot;rgb(82,246,103)&quot;</span>, <span class="string">&quot;rgb(48,239,130)&quot;</span>, <span class="string">&quot;rgb(29,223,163)&quot;</span>, <span class="string">&quot;rgb(26,199,194)&quot;</span>, <span class="string">&quot;rgb(35,171,216)&quot;</span>, <span class="string">&quot;rgb(54,140,225)&quot;</span>, <span class="string">&quot;rgb(76,110,219)&quot;</span>, <span class="string">&quot;rgb(96,84,200)&quot;</span>],</span><br><span class="line">      c = &#123;</span><br><span class="line">        text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        prefixP: -s,</span><br><span class="line">        skillI: <span class="number">0</span>,</span><br><span class="line">        skillP: <span class="number">0</span>,</span><br><span class="line">        direction: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">        delay: a,</span><br><span class="line">        step: g</span><br><span class="line">      &#125;;</span><br><span class="line">      i()</span><br><span class="line">      &#125;;</span><br><span class="line">      binft(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;binft&#x27;</span>));</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div class=&#x27;a&#x27;&gt;</span><br><span class="line">    &lt;% if (theme.cover.logo) &#123; %&gt;</span><br><span class="line">      &lt;img class=&#x27;logo&#x27; src=&#x27;&lt;%- url_for(theme.cover.logo) %&gt;&#x27;/&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% if (theme.cover.title) &#123; %&gt;</span><br><span class="line">      &lt;p class=&quot;title&quot;&gt;&lt;%- theme.cover.title ? theme.cover.title : config.title %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% if (theme.cover.subtitle) &#123; %&gt;</span><br><span class="line">      &lt;p class=&quot;subtitle&quot;&gt;&lt;%- theme.cover.subtitle%&gt;&lt;/p&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="addition">+     此处添加代码</span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个滚动字体可以加在任何位置。</p><h5 id="3、界面间距"><a href="#3、界面间距" class="headerlink" title="3、界面间距"></a>3、界面间距</h5><p>原界面处title,subtitle,searc,menu之间间距感觉有点大，所以调整了一下。在 themes/volantis/source/css/_layout中的<code>cover.styl</code>文件修改margin-top，margin-bottom的值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cover-wrapper</span> <span class="selector-class">.cover</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">  left: <span class="number">0</span></span><br><span class="line">  max-width: <span class="number">100%</span></span><br><span class="line">  height: <span class="number">100vh</span></span><br><span class="line">  display: flex</span><br><span class="line">  flex-wrap: nowrap</span><br><span class="line">  flex-direction: column</span><br><span class="line">  align-items: center</span><br><span class="line">  align-self: center</span><br><span class="line">  align-content: center</span><br><span class="line">  color: $color-site-inner</span><br><span class="line">  padding: $gap</span><br><span class="line">  .cover-body</span><br><span class="line">    div.b</span><br><span class="line">      margin-top: <span class="number">3vh</span></span><br><span class="line">      margin-bottom: <span class="number">8vh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另：在界面中导航栏部分默认第一个会有下划线，如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV8yLnBuZw?x-oss-process=image/format,png"></p><p>去除方法：在themes/volantis/source/css/_layout中<code>cover.styl</code>文件，大概在148行处，删除border-bottom属性</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    ul&gt;li&gt;a</span><br><span class="line">      font-size: $fontsize-meta</span><br><span class="line">      padding: 2px</span><br><span class="line">      margin: 4px</span><br><span class="line">      trans()</span><br><span class="line">      color: alpha($color-site-inner, .65)</span><br><span class="line">      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05)</span><br><span class="line">      border-bottom: 2px solid transparent</span><br><span class="line">      i</span><br><span class="line">        margin-right: 4px</span><br><span class="line">      &amp;:hover, &amp;.active, &amp;:active</span><br><span class="line">        color: $color-site-inner</span><br><span class="line"><span class="deletion">-       border-bottom: 2px solid $color-site-inner(删除此行)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总体效果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV8xLnBuZw?x-oss-process=image/format,png"></p><h4 id="二、页面优化"><a href="#二、页面优化" class="headerlink" title="二、页面优化"></a>二、页面优化</h4><h5 id="1、导航栏样式"><a href="#1、导航栏样式" class="headerlink" title="1、导航栏样式"></a>1、导航栏样式</h5><p>主要是在原基础上添加了一个渐变背景。</p><p>首先在主题配置文件<code>_config.yml</code>中navbar的effext毛玻璃特效（blur）去掉。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">style:</span><br><span class="line">  font_smoothing: false # font-smoothing for webkit</span><br><span class="line">  max_width: 1280px # Sum of body width and sidebar width (This limit will be exceeded           when the device width is greater than 2000px, reaching 75% of the total width)</span><br><span class="line">  scrollbar:</span><br><span class="line">    size: 4px</span><br><span class="line">    border: 2px</span><br><span class="line">    color: &#x27;#2196f3&#x27;</span><br><span class="line">    hover: &#x27;#ff5722&#x27;</span><br><span class="line">  navbar:</span><br><span class="line">    height: 64px</span><br><span class="line">    width: auto # auto, max</span><br><span class="line"><span class="deletion">-   effect: [shadow, blur] # [shadow, floatable, blur]</span></span><br><span class="line"><span class="addition">+   effect: [shadow] # [shadow, floatable, blur]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在themes\volantis\source\css_layout\navbar.styl中，大概25行处添加代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top, <span class="number">#fff1eb</span> <span class="number">0%</span>, <span class="number">#ace0f9</span> <span class="number">100%</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.l_header</span><br><span class="line">  $iconW = 32px</span><br><span class="line">  $iconMargin = 4px</span><br><span class="line">  position: fixed</span><br><span class="line">  z-index: 1000</span><br><span class="line">  top: 0</span><br><span class="line">  width: 100%</span><br><span class="line">  height: $navbar-height</span><br><span class="line">  background: $color-card</span><br><span class="line"><span class="addition">+ background-image: linear-gradient(to top, #fff1eb 0%, #ace0f9 100%)</span></span><br><span class="line">  box-shadow: $boxshadow-card</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV8zLnBuZw?x-oss-process=image/format,png"></p><p>附上一个免费的CSS渐变背景样式网站👉<a href="http://color.oulu.me/">CSS背景渐变</a></p><h5 id="2、页面卡片阴影"><a href="#2、页面卡片阴影" class="headerlink" title="2、页面卡片阴影"></a>2、页面卡片阴影</h5><p>在主页面中的文章、侧边栏添加一点阴影，并在鼠标悬停时出现阴影。</p><p>在themes\volantis\source\css_layout中<code>main.styl</code>文件，找到<code>.white-box</code>属性,在background下方添加代码：<br>主页文章：在\themes\volantis\source\css_layout中<code>main.styl</code>文件，找到<code>.post-wrapper</code>属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.post-wrapper</span></span><br><span class="line">    column-<span class="attribute">break-inside</span>: avoid</span><br><span class="line">    break-inside: avoid-column</span><br><span class="line">+   box-shadow: <span class="number">0</span> <span class="number">1px</span> <span class="number">20px</span> -<span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">+   border-radius: <span class="number">8px</span></span><br><span class="line">+   transition: box-shadow .<span class="number">5s</span> ease</span><br><span class="line">+   &amp;:hover</span><br><span class="line">+     box-shadow:<span class="number">0px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在themes\volantis\source\css_layout中<code>sidebar.styl</code>文件，找到<code>.widget</code>属性，在display下方添加上面同样的代码。<br>侧边栏：在themes\volantis\source\css_layout中<code>sidebar.styl</code>文件，找到<code>.widget</code>属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.widget</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span></span><br><span class="line">  background: $color-card</span><br><span class="line">  margin-top: $gap</span><br><span class="line">  border-radius: $border-card</span><br><span class="line">  width: <span class="number">100%</span></span><br><span class="line">  display: none</span><br><span class="line">+ box-shadow: <span class="number">0</span> <span class="number">1px</span> <span class="number">20px</span> -<span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">+ transition: box-shadow .<span class="number">5s</span> ease</span><br><span class="line">+ &amp;:hover</span><br><span class="line">+   box-shadow:<span class="number">0px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意格式！</p><h5 id="3、页面特效"><a href="#3、页面特效" class="headerlink" title="3、页面特效"></a>3、页面特效</h5><p>以下特效整理于网上分享的js代码，均在themes\volantis\layout中<code>layout.ejs</code>文件body里面直接引用即可。(不限制于Volantis主题)</p><h6 id="a、樱花"><a href="#a、樱花" class="headerlink" title="a、樱花"></a>a、樱花</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV80LmdpZg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/hexo/js/sakura.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="b、鼠标滑动特效"><a href="#b、鼠标滑动特效" class="headerlink" title="b、鼠标滑动特效"></a>b、鼠标滑动特效</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV81LmdpZg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/hexo/js/mouse_slide.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="c、鼠标点击特效"><a href="#c、鼠标点击特效" class="headerlink" title="c、鼠标点击特效"></a>c、鼠标点击特效</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV82LmdpZg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/hexo/js/mouse_click.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="d、鼠标点击爱心特效"><a href="#d、鼠标点击爱心特效" class="headerlink" title="d、鼠标点击爱心特效"></a>d、鼠标点击爱心特效</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV83LmdpZg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/hexo/js/clicklove.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="e、鼠标点击社会主义价值观特效"><a href="#e、鼠标点击社会主义价值观特效" class="headerlink" title="e、鼠标点击社会主义价值观特效"></a>e、鼠标点击社会主义价值观特效</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV84LmdpZg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/hexo/js/clicksocialist.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、主页、正文文章标题居中"><a href="#4、主页、正文文章标题居中" class="headerlink" title="4、主页、正文文章标题居中"></a>4、主页、正文文章标题居中</h5><p>主页面的文章、文章正文、关于/友链/留言板等自定义页面的标题居中。<br>文章地址 themes\volantis\source\css_layout\main.styl</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.post-wrapper</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: $gap</span><br><span class="line">    .post</span><br><span class="line">      div.meta</span><br><span class="line">        margin-bottom: $gap</span><br><span class="line">        .title</span><br><span class="line">          font-size: $fontsize-h2</span><br><span class="line">+         text-align: center</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      <span class="selector-class">.title</span></span><br><span class="line">        trans(.<span class="number">1s</span>)</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">+       text-align: center</span><br><span class="line">        color: $color-text</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5、博客文章链接优化"><a href="#5、博客文章链接优化" class="headerlink" title="5、博客文章链接优化"></a>5、博客文章链接优化</h5><p>原本hexo中文章的链接是<code>:year/:month/:day/:title/</code>格式，有时候可能还会有乱码，不好看，所以通过插件修改。</p><p><strong>安装插件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此插件跟<code>hexo-asset-image</code>插件有冲突（可以使用本地图片的插件），若使用这个插件，<code>hexo-asset-image</code>插件会失效。</p><p><strong>修改配置文件</strong><br>文件地址  <code>blog/_config.yml</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">+ permalink: post/:abbrlink.html  //post可以修改</span><br><span class="line">+ abbrlink:</span><br><span class="line">+   alg: crc16</span><br><span class="line">+   rep: hex</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后一键三连。然后链接就会变成<code>post/***.html</code>的格式。</p><h5 id="6、添加鼠标样式"><a href="#6、添加鼠标样式" class="headerlink" title="6、添加鼠标样式"></a>6、添加鼠标样式</h5><p>下载两个文件（<a href="https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/File/default.cur">文件一</a>、<a href="https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/File/pointer.cur">文件二</a>），文件放在<code>\blog\themes\volantis\source\img</code>中，然后在<code>index.styl</code>文件中引用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">  outline: none</span><br><span class="line">  margin: <span class="number">0</span></span><br><span class="line">  padding: <span class="number">0</span></span><br><span class="line">+ cursor: <span class="built_in">url</span>(<span class="string">/img/default.cur</span>),auto</span><br><span class="line">+:link</span><br><span class="line">+ cursor: <span class="built_in">url</span>(<span class="string">/img/pointer.cur</span>),auto</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7、文章首字下沉"><a href="#7、文章首字下沉" class="headerlink" title="7、文章首字下沉"></a>7、文章首字下沉</h5><p>设置文章中第一个p标签首字样式，达到下沉的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article</span></span><br><span class="line">  underline()</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">      <span class="attribute">text-decoration</span>: underline</span><br><span class="line">  .article-entry</span><br><span class="line">+   &gt;p</span><br><span class="line">+     &amp;:first-child::first-letter</span><br><span class="line">+       float: left</span><br><span class="line">+       margin-top: <span class="number">14px</span></span><br><span class="line">+       margin-right: <span class="number">6px</span></span><br><span class="line">+       color: <span class="number">#555</span></span><br><span class="line">+       font-size: <span class="number">42px</span></span><br><span class="line">+       line-height: <span class="number">28px</span></span><br><span class="line">+       font-style: normal</span><br><span class="line">+       font-weight: <span class="number">400</span></span><br><span class="line">+       +<span class="built_in">mobile</span>()&#123;</span><br><span class="line">+         margin-top: <span class="number">10px</span></span><br><span class="line">+         margin-right: <span class="number">4px</span></span><br><span class="line">+         font-size: <span class="number">26px</span></span><br><span class="line">+         line-height: <span class="number">20px</span></span><br><span class="line">+       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="8、文章末尾版权"><a href="#8、文章末尾版权" class="headerlink" title="8、文章末尾版权"></a>8、文章末尾版权</h5><p>修改默认的文章末尾版权区域样式。<br>修改样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">blockquote</span></span><br><span class="line">+    <span class="attribute">background</span>: <span class="number">#efefef</span>     //修改背景颜色</span><br><span class="line">+    border-left: $border-codeblock solid <span class="number">#575757</span>   //修改左边框颜色</span><br><span class="line">    border-radius: $border-codeblock</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  copyright:</span><br><span class="line">    class: copyright</span><br><span class="line">    display: [desktop, mobile] # [desktop, mobile]</span><br><span class="line">    blockquote: true</span><br><span class="line">+    permalink: <span class="string">&#x27;🔗 本文链接：&#x27;</span></span><br><span class="line">    content:</span><br><span class="line">+     - <span class="string">&#x27;📚 本文由&lt;a href=&quot;https://www.zyoushuo.cn/&quot;&gt;阳光派Plus&lt;/a&gt;创作，转载请注明出处&#x27;</span></span><br><span class="line">+     - <span class="string">&#x27;🧾 博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议&#x27;</span></span><br><span class="line">+     - permalink</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>图标来自于<a href="https://emojipedia.org/">📙 Emojipedia — 😃</a></p><h4 id="三、valine评论优化"><a href="#三、valine评论优化" class="headerlink" title="三、valine评论优化"></a>三、valine评论优化</h4><h5 id="1、Valine添加博主标签"><a href="#1、Valine添加博主标签" class="headerlink" title="1、Valine添加博主标签"></a>1、Valine添加博主标签</h5><p>此部分参考博主<a href="https://blog.hclonely.com/">HCLonely Blog</a>的文章<a href="https://blog.hclonely.com/posts/409d3090/">Valine添加博主标签及评论微信、QQ通知</a>。</p><p>Volantis主题添加需要修改一点语法格式。</p><p>★添加评论<code>QQ头像</code><br>★添加<code>博主</code>，<code>小伙伴</code>，<code>访客</code>标签<br>★添加<code>浏览器</code>和<code>操作系统</code>图标，需  <code>fontawesomeV5</code>  支持<br>★增加 QQ 邮箱识别<br>★<code>metaplaceholder</code>  可自定义</p><p>⑴ 首先引入valine的js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HCLonely&#x2F;Valine@latest&#x2F;dist&#x2F;Valine.min.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本人使用的版本引入valine的js是在主题配置文件<code>_conflg.yml</code>的valine配置中，其他版本要是没有的话就在themes\volantis\layout_partial的<code>scripts.ejs</code>文件中找一下。</p><p>(2) 添加valine配置参数</p><p>参数</p><p>类型</p><p>说明</p><p>默认</p><p>实例</p><p>tagMeta</p><p>Array</p><p>标签要显示的文字</p><p>博主,小伙伴,访客</p><p>博主,小伙伴,访客</p><p>master</p><p>Array/String</p><p>md5 加密后的博主邮箱</p><p>.</p><p>315be36db8ad7b3e3a7bb0839d6fa839</p><p>friends</p><p>Array</p><p>md5 加密后的小伙伴邮箱</p><p>.</p><p>315be36db8ad7b3e3a7bb0839d6fa839</p><p>metaPlaceholder</p><p>Object</p><p>meta placeholder 内容</p><p>.</p><p>{“nick”:“昵称 / QQ 号”,“mail”:“邮箱 (必填)”}</p><p>md5加密需要完整的邮箱地址，例如QQ邮箱就是<a href="mailto:&#49;&#x32;&#51;&#x34;&#x35;&#x36;&#x37;&#x38;&#57;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#49;&#x32;&#51;&#x34;&#x35;&#x36;&#x37;&#x38;&#57;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>；加密必须是32位小写。<br>例如我的配置为</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  title: &lt;i class=&#x27;fas fa-comments&#x27;&gt;&lt;/i&gt; 评论</span><br><span class="line">  subtitle:</span><br><span class="line">  service: valine # valine, minivaline, disqus, gitalk, livere</span><br><span class="line">  valine:</span><br><span class="line">    appId:  ***# your appId</span><br><span class="line">    appKey: ***# your appKey</span><br><span class="line">    js: https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js</span><br><span class="line">    path: # All pages use the same path (share the same comments data)</span><br><span class="line">    meta: nick,mail,link # valine comment header info</span><br><span class="line">    requiredFields: [&#x27;nick&#x27;,&#x27;mail&#x27;]</span><br><span class="line">    enableQQ: true # Unstable avatar link</span><br><span class="line">    placeholder: 快来评论吧~ # valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">    avatar: robohash # gravatar style https://valine.js.org/avatar</span><br><span class="line">    pageSize: 10 # comment list page size</span><br><span class="line">    lang: zh-cn</span><br><span class="line">    highlight: true</span><br><span class="line">    visitor: true</span><br><span class="line">    mathJax: false</span><br><span class="line"><span class="addition">+   metaPlaceholder:</span></span><br><span class="line"><span class="addition">+     - nick: 阳光派Plus</span></span><br><span class="line"><span class="addition">+     - mail: ***@qq.com</span></span><br><span class="line"><span class="addition">+   tagMeta: 博主,小伙伴,访客</span></span><br><span class="line"><span class="addition">+   master: </span></span><br><span class="line"><span class="addition">+     - 487f87505f619bf9ea08f26bb34f8118</span></span><br><span class="line"><span class="addition">+   friends: </span></span><br><span class="line"><span class="addition">+     - 011c2b8a03f490e9aeab5d41a8a0469a</span></span><br><span class="line"><span class="addition">+     - 8fe874d093278833df8b7172113eca32</span></span><br><span class="line"><span class="addition">+     ......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>附上一个MD5加密网站👉<a href="https://md5jiami.51240.com/">MD5在线加密</a></p><p>(3) 添加valine渲染文件参数</p><p>在themes\volantis\layout_partial中<code>scripts.ejs</code>文件，找到enableValine，在valine.init中添加<br>（3.0版本文件位置在\themes\volantis\layout_third-party\comments\valine的scripts.ejs文件）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master: master,</span><br><span class="line">friends: friends,</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> valine.init(&#123;</span><br><span class="line">    el: &#x27;#valine_container&#x27;,</span><br><span class="line">    meta: meta,</span><br><span class="line">    &lt;% if (page.valine &amp;&amp; page.valine.path) &#123; %&gt;</span><br><span class="line">      path: &quot;&lt;%= page.valine.path %&gt;&quot;,</span><br><span class="line">    &lt;% &#125; else if (theme.comments.valine.path) &#123; %&gt;</span><br><span class="line">      path: &quot;&lt;%= theme.comments.valine.path %&gt;&quot;,</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    appId: &quot;&lt;%= theme.comments.valine.appId %&gt;&quot;,</span><br><span class="line">    appKey: &quot;&lt;%= theme.comments.valine.appKey %&gt;&quot;,</span><br><span class="line">    placeholder: &quot;&lt;%= (page.valine &amp;&amp; page.valine.placeholder) ? page.valine.placeholder : theme.comments.valine.placeholder %&gt;&quot;,</span><br><span class="line">    pageSize:&#x27;&lt;%= theme.comments.valine.pageSize %&gt;&#x27;,</span><br><span class="line">    avatar:&#x27;&lt;%= theme.comments.valine.avatar %&gt;&#x27;,</span><br><span class="line">    lang:&#x27;&lt;%= theme.comments.valine.lang %&gt;&#x27;,</span><br><span class="line">    visitor: &#x27;&lt;%= theme.comments.valine.visitor %&gt;&#x27;,</span><br><span class="line">    highlight: &#x27;&lt;%= theme.comments.valine.highlight %&gt;&#x27;,</span><br><span class="line">    mathJax: &#x27;&lt;%= theme.comments.valine.mathJax %&gt;&#x27;,</span><br><span class="line">    enableQQ: &#x27;&lt;%= theme.comments.valine.enableQQ %&gt;&#x27;,</span><br><span class="line">    requiredFields: requiredFields,</span><br><span class="line"><span class="addition">+   emojiCDN: &#x27;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/emoji/&#x27;,</span></span><br><span class="line">    emojiMaps: emojiMaps,</span><br><span class="line"><span class="addition">+master: master,</span></span><br><span class="line"><span class="addition">+friends: friends,</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在  <code>var valine = new Valine();</code>下方添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> friends = <span class="string">&#x27;&lt;%= theme.comments.valine.friends %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> master = <span class="string">&#x27;&lt;%= theme.comments.valine.master %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  var valine = new Valine();</span><br><span class="line"><span class="addition">+ var friends = &#x27;&lt;%= theme.comments.valine.friends %&gt;&#x27;.split(&#x27;,&#x27;);</span></span><br><span class="line"><span class="addition">+ var master = &#x27;&lt;%= theme.comments.valine.master %&gt;&#x27;.split(&#x27;,&#x27;);</span></span><br><span class="line">  function emoji(path, idx, ext) &#123;</span><br><span class="line">      return path + &quot;/&quot; + path + &quot;-&quot; + idx + &quot;.&quot; + ext;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、评论添加一言"><a href="#2、评论添加一言" class="headerlink" title="2、评论添加一言"></a>2、评论添加一言</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3p5b3VzaHVvL0Jsb2cvaW1hZ2VzL21laWh1YV85LnBuZw?x-oss-process=image/format,png"></p><p>在themes\volantis\layout_third-party中的<code>comments.ejs</code>文件，找到enableValine，在&lt;/ section&gt;上方添加代码<br>（3.0版本文件位置在\themes\volantis\layout_third-party\comments\valine的layout.ejs中）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- valine 添加一言 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">     jinrishici.load(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> jrsc_plac =  result.data.content + <span class="string">&quot;\n「&quot;</span> + result.data.origin.title + <span class="string">&quot;」&quot;</span> + result.data.origin.dynasty + <span class="string">&quot; · &quot;</span> + result.data.origin.author</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&quot;veditor&quot;</span>).setAttribute(<span class="string">&quot;placeholder&quot;</span>,jrsc_plac);</span><br><span class="line">      &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (enableValine)&#123; %&gt;</span><br><span class="line">  &lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">     &lt;div id=&quot;valine_container&quot; class=&quot;valine_thread&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fas fa-cog fa-spin fa-fw fa-2x&quot;&gt;&lt;/i&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line"> &lt;!-- valine 添加一言 --&gt;</span><br><span class="line"><span class="addition">+&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+       &lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="addition">+              jinrishici.load(function(result) &#123;</span></span><br><span class="line"><span class="addition">+            var jrsc_plac =  result.data.content + &quot;\n「&quot; + result.data.origin.title + &quot;」&quot; + result.data.origin.dynasty + &quot; · &quot; + result.data.origin.author</span></span><br><span class="line"><span class="addition">+             document.getElementById(&quot;veditor&quot;).setAttribute(&quot;placeholder&quot;,jrsc_plac);</span></span><br><span class="line"><span class="addition">+            &#125;);</span></span><br><span class="line"><span class="addition">+     &lt;/script&gt;</span></span><br><span class="line">   &lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、添加评论背景"><a href="#3、添加评论背景" class="headerlink" title="3、添加评论背景"></a>3、添加评论背景</h5><p>在themes\volantis\source\css_third-party中的<code>valine.styl</code>文件，找到vedit，在span标签下方再添加.veditor标签属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.veditor</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/zyoushuo/Blog/images/valinebg.webp</span>) <span class="number">100%</span> <span class="number">100%</span> no-repeat</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>背景可替换。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        .vedit</span><br><span class="line">          .vctrl span</span><br><span class="line">            padding: 0</span><br><span class="line">            margin: 10px</span><br><span class="line">          span</span><br><span class="line">            fill: $color-p</span><br><span class="line">            &amp;.actived</span><br><span class="line">              fill: $color-theme</span><br><span class="line"><span class="addition">+  .veditor</span></span><br><span class="line"><span class="addition">+    background: url(https://cdn.jsdelivr.net/gh/zyoushuo/Blog/images/valinebg.webp) 100% 100% no-repeat</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、添加自定义表情"><a href="#4、添加自定义表情" class="headerlink" title="4、添加自定义表情"></a>4、添加自定义表情</h5><p>目前我使用的版本，在主题配置文件_config.yml的valine配置中，即使引用不同的js，valine的表情还是没有变化，需要修改渲染文件。</p><p>在themes\volantis\layout_partial中的<code>scripts.ejs</code>文件，找到enableValine，在var emojiMaps = {}中即可添加。例如我的配置：<br>(3.0版本文件位置在\themes\volantis\layout_third-party\comments\valine的scripts.ejs文件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> emojiMaps = &#123;</span><br><span class="line"><span class="string">&quot;doge&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/doge.png&quot;</span>,</span><br><span class="line">   <span class="string">&quot;亲亲&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/亲亲.png&quot;</span>,</span><br><span class="line">   <span class="string">&quot;偷笑&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/偷笑.png&quot;</span>,  </span><br><span class="line"><span class="string">&quot;再见&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/再见.png&quot;</span>,</span><br><span class="line">   <span class="string">&quot;冷漠&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/冷漠.png&quot;</span>,</span><br><span class="line">   <span class="string">&quot;发怒&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/发怒.png&quot;</span>,</span><br><span class="line">   <span class="string">&quot;发财&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/发财.png&quot;</span>,</span><br><span class="line">   <span class="string">&quot;可爱&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/可爱.png&quot;</span>,</span><br><span class="line">   .....</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方法适合对中文表情包，如果不在乎表情包名字的话可以按照作者的语法格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">54</span>; i++) &#123;</span><br><span class="line">  emojiMaps[<span class="string">&#x27;tieba-&#x27;</span> + i] = emoji(<span class="string">&#x27;tieba&#x27;</span>, i, <span class="string">&#x27;png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">101</span>; i++) &#123;</span><br><span class="line">  emojiMaps[<span class="string">&#x27;qq-&#x27;</span> + i] = emoji(<span class="string">&#x27;qq&#x27;</span>, i, <span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">116</span>; i++) &#123;</span><br><span class="line">  emojiMaps[<span class="string">&#x27;aru-&#x27;</span> + i] = emoji(<span class="string">&#x27;aru&#x27;</span>, i, <span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">125</span>; i++) &#123;</span><br><span class="line">  emojiMaps[<span class="string">&#x27;twemoji-&#x27;</span> + i] = emoji(<span class="string">&#x27;twemoji&#x27;</span>, i, <span class="string">&#x27;png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">  emojiMaps[<span class="string">&#x27;weibo-&#x27;</span> + i] = emoji(<span class="string">&#x27;weibo&#x27;</span>, i, <span class="string">&#x27;png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照语法格式对表情包进行命名，比较方便。我的配置为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (enableValine)&#123; %&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (theme.comments.valine.js) &#123; %&gt;</span><br><span class="line">    &lt;%- js(theme.comments.valine.js) %&gt;</span><br><span class="line">  &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;%- js([<span class="string">&#x27;js/valine.js&#x27;</span>]) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> GUEST_INFO = [<span class="string">&#x27;nick&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;link&#x27;</span>];</span><br><span class="line">  <span class="keyword">var</span> meta = <span class="string">&#x27;&lt;%= theme.comments.valine.meta %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GUEST_INFO.indexOf(item) &gt; -<span class="number">1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> REQUIRED_FIELDS = [<span class="string">&#x27;nick&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;link&#x27;</span>];</span><br><span class="line">  <span class="keyword">var</span> requiredFields = <span class="string">&#x27;&lt;%= theme.comments.valine.requiredFields %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> REQUIRED_FIELDS.indexOf(item) &gt; -<span class="number">1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> valine = <span class="keyword">new</span> Valine();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">emoji</span>(<span class="params">path, idx, ext</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> path + <span class="string">&quot;/&quot;</span> + path + <span class="string">&quot;-&quot;</span> + idx + <span class="string">&quot;.&quot;</span> + ext;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> friends = <span class="string">&#x27;&lt;%= theme.comments.valine.friends %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> master = <span class="string">&#x27;&lt;%= theme.comments.valine.master %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> emojiMaps = &#123;</span><br><span class="line"><span class="string">&quot;doge&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/doge.png&quot;</span>,</span><br><span class="line">    <span class="string">&quot;亲亲&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/亲亲.png&quot;</span>,</span><br><span class="line">    <span class="string">&quot;偷笑&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/偷笑.png&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;冷漠&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/冷漠.png&quot;</span>,</span><br><span class="line">    <span class="string">&quot;发怒&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@master/emoji/bilibili/发怒.png&quot;</span>,</span><br><span class="line">             ....</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">23</span>; i++) &#123;</span><br><span class="line">    emojiMaps[<span class="string">&#x27;weibo-&#x27;</span> + i] = emoji(<span class="string">&#x27;weibo&#x27;</span>, i, <span class="string">&#x27;png&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">23</span>; i++) &#123;</span><br><span class="line">    emojiMaps[<span class="string">&#x27;tieba-&#x27;</span> + i] = emoji(<span class="string">&#x27;tieba&#x27;</span>, i, <span class="string">&#x27;png&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">23</span>; i++) &#123;</span><br><span class="line">    emojiMaps[<span class="string">&#x27;bqb-&#x27;</span> + i] = emoji(<span class="string">&#x27;bqb&#x27;</span>, i, <span class="string">&#x27;jpg&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">23</span>; i++) &#123;</span><br><span class="line">    emojiMaps[<span class="string">&#x27;ya-&#x27;</span> + i] = emoji(<span class="string">&#x27;ya&#x27;</span>, i, <span class="string">&#x27;jpg&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  valine.init(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#valine_container&#x27;</span>,</span><br><span class="line">    meta: meta,</span><br><span class="line">    &lt;% <span class="keyword">if</span> (page.valine &amp;&amp; page.valine.path) &#123; %&gt;</span><br><span class="line">      path: <span class="string">&quot;&lt;%= page.valine.path %&gt;&quot;</span>,</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.comments.valine.path) &#123; %&gt;</span><br><span class="line">      path: <span class="string">&quot;&lt;%= theme.comments.valine.path %&gt;&quot;</span>,</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    appId: <span class="string">&quot;&lt;%= theme.comments.valine.appId %&gt;&quot;</span>,</span><br><span class="line">    appKey: <span class="string">&quot;&lt;%= theme.comments.valine.appKey %&gt;&quot;</span>,</span><br><span class="line">    placeholder: <span class="string">&quot;&lt;%= (page.valine &amp;&amp; page.valine.placeholder) ? page.valine.placeholder : theme.comments.valine.placeholder %&gt;&quot;</span>,</span><br><span class="line">    pageSize:<span class="string">&#x27;&lt;%= theme.comments.valine.pageSize %&gt;&#x27;</span>,</span><br><span class="line">    avatar:<span class="string">&#x27;&lt;%= theme.comments.valine.avatar %&gt;&#x27;</span>,</span><br><span class="line">    lang:<span class="string">&#x27;&lt;%= theme.comments.valine.lang %&gt;&#x27;</span>,</span><br><span class="line">    visitor: <span class="string">&#x27;&lt;%= theme.comments.valine.visitor %&gt;&#x27;</span>,</span><br><span class="line">    highlight: <span class="string">&#x27;&lt;%= theme.comments.valine.highlight %&gt;&#x27;</span>,</span><br><span class="line">    mathJax: <span class="string">&#x27;&lt;%= theme.comments.valine.mathJax %&gt;&#x27;</span>,</span><br><span class="line">    enableQQ: <span class="string">&#x27;&lt;%= theme.comments.valine.enableQQ %&gt;&#x27;</span>,</span><br><span class="line">    requiredFields: requiredFields,</span><br><span class="line">    emojiCDN: <span class="string">&#x27;https://cdn.jsdelivr.net/gh/zyoushuo/Blog/emoji/&#x27;</span>,</span><br><span class="line">    emojiMaps: emojiMaps,</span><br><span class="line">master: master,</span><br><span class="line">friends: friends,</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此方法要在emojiCDN处添加地址。</p><h5 id="5、修改表情区域样式"><a href="#5、修改表情区域样式" class="headerlink" title="5、修改表情区域样式"></a>5、修改表情区域样式</h5><p>修改表情大小、背景颜色。在themes\volantis\source\css_third-party中的valine.styl文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="selector-class">.vemojis</span>,<span class="selector-class">.vpreview</span></span><br><span class="line">+         <span class="attribute">background</span>: <span class="number">#fff</span>  //背景区域颜色</span><br><span class="line">          border-radius: $border-codeblock</span><br><span class="line">          padding: $gap * <span class="number">0.5</span></span><br><span class="line">+         border: <span class="number">1px</span> solid <span class="number">#f6f6f6</span> //边框</span><br><span class="line">          <span class="built_in">scrollbar</span>()</span><br><span class="line">          .vemoji</span><br><span class="line">+           max-height: <span class="number">40px</span>   //表情大小</span><br><span class="line">+           max-width: <span class="number">100px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6、评论区卡片式背景"><a href="#6、评论区卡片式背景" class="headerlink" title="6、评论区卡片式背景"></a>6、评论区卡片式背景</h5><p>具体样式就是给每一条评论加个背景边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">      <span class="selector-class">.vcards</span></span><br><span class="line">+       <span class="selector-class">.vcard</span></span><br><span class="line">+         <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">12</span>)</span><br><span class="line">+         padding: <span class="number">15px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">+         margin-bottom: <span class="number">10px</span></span><br><span class="line">+         border-radius: <span class="number">8px</span></span><br><span class="line">        .vquote</span><br><span class="line">          border-left: none</span><br><span class="line">        .vh</span><br><span class="line">          border-bottom: <span class="number">1px</span> dashed <span class="built_in">alpha</span>($color-text, .<span class="number">1</span>)</span><br><span class="line">+         .vcard</span><br><span class="line">+           box-shadow: none</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>🌻最后<br>虽然是对Volantis主题的美化，但是其他主题同样适用。学会使用F12，找准位置，然后找到对应的文件，按照语法格式修改即可。多去参考参考其他博主的网站。<br>目前对Volantis主题就修改了怎么多，若再有修改，日后添加。<br>注意事项<br>☆如果修改了样式发现没有变化，请使用<code>hexo cl</code>清理文件缓存、<code>Ctrl+F5</code>强制刷新、<code>Ctrl+shift+delete</code>清理浏览器缓存。（尤其是最后一个）</p><p>☆有时候在修改<code>styl文件</code>会出现错误，比如这样：<br><img src="https://cdn.jsdelivr.net/gh/zyoushuo/Blog/images/meihua_10.png"></p><p>可以发现是格式不正确，请删除多余的空格。<br>参考文章：</p><p><a href="https://blog.csdn.net/cungudafa/article/details/105548858">Valine-1.4.4新版本尝鲜+个性制定（表情包、qq头像、UI样式</a></p><p><a href="https://blog.hclonely.com/posts/409d3090/">Valine添加博主标签及评论微信、QQ通知</a></p><p><a href="https://bestzuo.cn/posts/halo-beauty.html">halo 博客深度定制与美化教程</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo之Volantis添加暗黑模式</title>
      <link href="2020/11/19/hexo%E4%B9%8BVolantis%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/11/19/hexo%E4%B9%8BVolantis%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>很久之前就想过给博客添加一个暗黑模式，一直搁置。直到Volantis更新到3.0版本后添加了暗黑模式，然而尝试之后的结果却不是那么满意。于是着手自己配置一下。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlvdXNodW8vQmxvZy9yYXcvbWFzdGVyL2ltYWdlcy9hbmhlaV80LmdpZg"></p><p>主要的实现方法参考了博主  <a href="https://cungudafa.top/">cungudafa</a>的文章，然后配置到Volantis中。其实自己主要是做了适合于Volantis主题在暗黑模式下的一些格式、代码等等的颜色配置。</p><p>请注意，由于自己修改了原主题的许多源码，所以在做这个时主要配置了适合自己的一些代码风格，以下仅供参考，可以自行调整颜色配置。  </p><p>使用此暗黑模式请删除原主题中blog\themes\volantis\source\css_third-party下的darkmode.styl文件，自己在配置时发现与此文件可能是冲突或者原暗黑模式有点bug。</p><h3 id="在Volantis中实现暗黑模式"><a href="#在Volantis中实现暗黑模式" class="headerlink" title="在Volantis中实现暗黑模式"></a>在Volantis中实现暗黑模式</h3><h4 id="创建格式文件"><a href="#创建格式文件" class="headerlink" title="创建格式文件"></a>创建格式文件</h4><p>在blog\themes\volantis\layout_partial下创建文件<code>left.ejs</code>文件，添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;RightDownBtn&quot;</span>&gt;</span><br><span class="line">    &lt;a onclick=<span class="string">&quot;switchNightMode()&quot;</span> title=<span class="string">&quot;切换暗黑模式&quot;</span>&gt;</span><br><span class="line">        &lt;svg style=<span class="string">&quot; width: 1.5em;height: 1.5em;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;icon&quot;</span> aria-hidden=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">            &lt;use id=<span class="string">&quot;modeicon&quot;</span> xlink:href=<span class="string">&quot;#icon-_moon&quot;</span>&gt;</span><br><span class="line">            &lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;svg aria-hidden=<span class="string">&quot;true&quot;</span> style=<span class="string">&quot;position: absolute; width: 0px; height: 0px; overflow: hidden;&quot;</span>&gt;</span><br><span class="line">        &lt;symbol id=<span class="string">&quot;icon-sun&quot;</span> viewBox=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M511.99976 511.99976m-511.99976 0a511.99976 511.99976 0 1 0 1023.99952 0 511.99976 511.99976 0 1 0-1023.99952 0Z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#91D2F2&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M144.623932 868.455593C237.679889 964.327548 367.831828 1023.99952 511.99976 1023.99952c269.983873 0 490.99977-209.007902 510.455761-474.031778C956.991551 535.703749 887.559584 527.999753 815.623618 527.999753c-309.535855 0-572.895731 142.055933-670.999686 340.45584z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#198058&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M979.623541 575.99973c-351.319835 0-647.791696 155.655927-741.279653 368.639827A509.359761 509.359761 0 0 0 511.99976 1023.99952c260.839878 0 475.967777-195.111909 507.799762-447.31979a1194.34344 1194.34344 0 0 0-40.175981-0.68z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#1E9969&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M69.711967 769.831639C158.503926 921.815568 323.271848 1023.99952 511.99976 1023.99952a509.455761 509.455761 0 0 0 269.631874-76.783964C657.111692 828.375612 464.271782 751.999648 247.623884 751.999648c-61.575971 0-121.183943 6.271997-177.911917 17.831991z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#6AA33A&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M487.887771 1023.39152c-86.543959-122.151943-236.911889-214.679899-417.591804-252.543881 85.11996 144.919932 239.415888 244.279885 417.591804 252.543881z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#95E652&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M394.159815 167.999921l-45.255979 45.255979L303.647858 167.999921l45.255978-45.255979zM394.159815 503.999764l-45.255979 45.255979L303.655858 503.999764l45.247978-45.247979z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#FFF8E6&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M180.879915 290.719864l45.247979 45.247979-45.255979 45.255978-45.255979-45.255978zM516.903758 290.719864l45.247978 45.247979-45.247978 45.247978-45.247979-45.247978z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#FFF8E6&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path d=<span class="string">&quot;M198.087907 185.207913h63.99997v63.99997h-63.99997zM435.671796 422.791802h63.99997v63.99997h-63.99997z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#FFF8E6&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path d=<span class="string">&quot;M198.087907 422.791802h63.99997v63.99997h-63.99997zM435.671796 185.207913h63.99997v63.99997h-63.99997z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#FFF8E6&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M348.879836 335.999843m-183.999913 0a183.999914 183.999914 0 1 0 367.999827 0 183.999914 183.999914 0 1 0-367.999827 0Z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#FFEAB3&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M348.879836 335.999843m-159.999925 0a159.999925 159.999925 0 1 0 319.99985 0 159.999925 159.999925 0 1 0-319.99985 0Z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#FFDC80&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">        &lt;/symbol&gt;</span><br><span class="line">        &lt;symbol id=<span class="string">&quot;icon-_moon&quot;</span> viewBox=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><br><span class="line">            &lt;path d=<span class="string">&quot;M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z&quot;</span> fill=<span class="string">&quot;#323232&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M512 512m-407.005867 0a407.005867 407.005867 0 1 0 814.011734 0 407.005867 407.005867 0 1 0-814.011734 0Z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#494A4A&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M748.1344 633.9584c0-1.143467 0.085333-2.286933 0.085333-3.413333a69.512533 69.512533 0 0 0-8.823466-33.979734q-1.058133-1.911467-2.2528-3.7376l-0.187734-0.3072a70.485333 70.485333 0 0 0-5.2736-7.099733l-0.238933-0.273067q-1.3312-1.536-2.730667-3.003733l-0.3072-0.324267a70.894933 70.894933 0 0 0-6.417066-5.819733l-0.5632-0.443733q-1.467733-1.160533-3.003734-2.235734l-0.494933-0.341333q-1.706667-1.2288-3.6352-2.3552l-0.256-0.136533q-1.706667-0.989867-3.413333-1.8944l-0.887467-0.4608q-1.604267-0.802133-3.242667-1.536l-0.6144-0.273067q-1.928533-0.836267-3.9424-1.553067l-0.8192-0.273066a54.8864 54.8864 0 0 0-3.242666-1.024l-1.143467-0.324267a85.248 85.248 0 0 0-3.601067-0.887467l-0.546133-0.119466a67.345067 67.345067 0 0 0-4.1984-0.733867l-1.143467-0.136533q-1.706667-0.2048-3.2768-0.341334l-1.245866-0.1024a74.786133 74.786133 0 0 0-4.386134-0.1536 69.8368 69.8368 0 0 0-20.48 3.037867 104.106667 104.106667 0 0 0-12.1344-11.076267 258.696533 258.696533 0 0 0-449.9456-248.763733 183.1424 183.1424 0 0 1 106.939734-34.2528c5.12 0 10.24 0.221867 15.36 0.631467a183.125333 183.125333 0 0 1 50.5344 11.52h0.170666q3.874133 1.501867 7.68 3.157333l0.256 0.1024 7.441067 3.413333 0.273067 0.136534q3.669333 1.826133 7.253333 3.805866l0.221867 0.119467q3.618133 2.013867 7.133866 4.164267a184.610133 184.610133 0 0 1 26.760534 20.036266h0.085333q2.986667 2.696533 5.870933 5.5296l0.324267 0.3072q2.781867 2.7648 5.461333 5.632l0.443734 0.477867q2.6112 2.833067 5.12 5.768533l0.494933 0.580267q2.4576 2.9184 4.795733 5.956267l0.494934 0.648533q2.321067 3.037867 4.522666 6.178133l0.426667 0.6144q2.2016 3.1744 4.283733 6.4512l0.324267 0.529067q2.116267 3.413333 4.078933 6.826667l0.170667 0.3072c1.553067 2.7136 3.0208 5.495467 4.437333 8.2944a56.149333 56.149333 0 0 0-12.578133 2.304 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009066 41.079467 104.277333 104.277333 0 0 0-42.2912 80.110933 13.653333 13.653333 0 0 0 0 1.4336v0.426667c0 0.136533 0.1024 0.682667 0.187733 1.024s0 0.3072 0.1024 0.4608 0.2048 0.733867 0.324267 1.092267l0.1024 0.3072a15.36 15.36 0 0 0 0.580266 1.416533l0.1024 0.187733a16.520533 16.520533 0 0 0 0.648534 1.211734l0.221866 0.3584c0.221867 0.3584 0.4608 0.733867 0.7168 1.092266l0.221867 0.3072a26.333867 26.333867 0 0 0 2.338133 2.798934l0.119467 0.119466q0.6144 0.631467 1.297067 1.262934l0.2048 0.187733q0.7168 0.648533 1.501866 1.297067 1.706667 1.416533 3.720534 2.781866c0.6656 0.4608 1.348267 0.904533 2.065066 1.348267 26.914133 16.7936 87.995733 28.535467 159.044267 28.535467 19.3536 0 37.956267-0.8704 55.3472-2.474667l-0.494933 0.750933-0.426667 0.6144q-2.2016 3.140267-4.539733 6.178134l-0.477867 0.631466q-2.338133 3.037867-4.795733 5.956267l-0.494934 0.580267q-2.491733 2.935467-5.12 5.7856l-0.443733 0.477866q-2.679467 2.884267-5.461333 5.649067l-0.3072 0.290133q-2.884267 2.833067-5.870934 5.546667a184.8832 184.8832 0 0 1-26.7776 20.036267q-3.515733 2.167467-7.150933 4.181333l-0.187733 0.1024q-3.584 1.979733-7.2704 3.805867l-0.256 0.136533q-3.6864 1.826133-7.458134 3.413333l-0.238933 0.1024q-3.805867 1.706667-7.68 3.157334h-0.136533a183.057067 183.057067 0 0 1-50.551467 11.52c-5.12 0.4096-10.24 0.631467-15.36 0.631466a183.159467 183.159467 0 0 1-106.939733-34.2528 258.5088 258.5088 0 0 0 180.138666 107.093334 109.550933 109.550933 0 0 0-3.259733 26.453333 16.520533 16.520533 0 0 0 0.1024 1.706667v0.529066c0 0.170667 0.136533 0.853333 0.221867 1.262934l0.136533 0.5632 0.392533 1.365333 0.136534 0.4096a13.892267 13.892267 0 0 0 0.733866 1.706667l0.119467 0.238933c0.238933 0.512 0.512 1.006933 0.802133 1.501867l0.273067 0.443733q0.4096 0.682667 0.887467 1.365333l0.273066 0.375467a33.0752 33.0752 0 0 0 2.9184 3.413333l0.1536 0.1536 1.5872 1.553067 0.273067 0.256 1.8432 1.621333q2.116267 1.706667 4.625067 3.413334l2.56 1.706666c33.467733 20.8896 109.431467 35.4816 197.802666 35.4816 119.330133 0 216.046933-26.606933 216.046934-59.409066a131.413333 131.413333 0 0 0-56.285867-102.058667z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#323232&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M573.8496 401.8176v-2.781867a56.200533 56.200533 0 0 0-72.6016-53.725866 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009066 41.079467 104.277333 104.277333 0 0 0-42.257067 80.0768c0 26.385067 77.7728 47.786667 173.7216 47.786667s173.7216-21.384533 173.7216-47.786667a105.659733 105.659733 0 0 0-45.568-82.688z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#CDCCCA&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M293.768533 506.2656a104.277333 104.277333 0 0 1 42.2912-80.110933 42.530133 42.530133 0 0 1 53.009067-41.079467 82.807467 82.807467 0 0 1 134.007467-18.039467 56.32 56.32 0 0 1 43.758933 4.642134 56.2176 56.2176 0 0 0-65.518933-26.4192 82.824533 82.824533 0 0 0-134.007467 18.039466 42.530133 42.530133 0 0 0-53.009067 41.079467 104.277333 104.277333 0 0 0-42.325333 80.128c0 8.413867 7.936 16.3328 21.845333 23.210667a13.294933 13.294933 0 0 1-0.0512-1.450667z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#E8E9EC&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M453.4784 166.912a258.338133 258.338133 0 0 0-210.944 108.919467 183.995733 183.995733 0 1 1 0 299.451733 258.6624 258.6624 0 1 0 210.944-408.388267z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#DDAE2A&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M364.834133 608.9216q7.594667 0.631467 15.36 0.648533a183.995733 183.995733 0 0 0 0-367.9744q-7.748267 0-15.36 0.631467a183.995733 183.995733 0 0 1 0 366.6944z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#EDC849&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M794.7776 605.969067c0-1.143467 0.085333-2.286933 0.085333-3.413334a69.973333 69.973333 0 0 0-90.299733-66.833066 102.997333 102.997333 0 0 0-166.656 22.4256 52.906667 52.906667 0 0 0-65.928533 51.0976 129.706667 129.706667 0 0 0-52.599467 99.6352c0 32.8192 96.733867 59.409067 216.046933 59.409066s216.046933-26.606933 216.046934-59.409066a131.413333 131.413333 0 0 0-56.695467-102.912z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#CDCCCA&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">            &lt;path</span><br><span class="line">                d=<span class="string">&quot;M446.481067 735.914667a129.706667 129.706667 0 0 1 52.599466-99.6352 52.906667 52.906667 0 0 1 65.928534-51.080534 102.997333 102.997333 0 0 1 166.6048-22.442666 69.973333 69.973333 0 0 1 54.408533 5.7856 69.973333 69.973333 0 0 0-81.476267-32.853334 102.997333 102.997333 0 0 0-166.656 22.4256 52.906667 52.906667 0 0 0-65.928533 51.0976 129.706667 129.706667 0 0 0-52.599467 99.6352c0 10.478933 9.864533 20.309333 27.170134 28.859734a17.408 17.408 0 0 1-0.0512-1.792z&quot;</span></span><br><span class="line">                fill=<span class="string">&quot;#E8E9EC&quot;</span>&gt;&lt;/path&gt;</span><br><span class="line">        &lt;/symbol&gt;</span><br><span class="line">    &lt;/svg&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">music_on</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> audio1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;bg_music&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (audio1.paused) &#123;</span><br><span class="line">            audio1.play();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            audio1.pause();</span><br><span class="line">            audio1.currentTime = <span class="number">0</span>;<span class="comment">//音乐从头播放</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BackTOP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#btn&quot;</span>).hide();</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="built_in">window</span>).scrollTop() &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                    $(<span class="string">&quot;#btn&quot;</span>).fadeIn(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">&quot;#btn&quot;</span>).fadeOut(<span class="number">200</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&#x27;body,html&#x27;</span>).animate(&#123;</span><br><span class="line">                        scrollTop: <span class="number">0</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="number">500</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#say&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&#x27;body,html&#x27;</span>).animate(&#123;</span><br><span class="line">                        scrollTop: $(<span class="string">&#x27;html, body&#x27;</span>).get(<span class="number">0</span>).scrollHeight</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="number">500</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#readmode&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;body&#x27;</span>).toggleClass(<span class="string">&#x27;read-mode&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SiderMenu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#main-container&#x27;</span>).toggleClass(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">        $(<span class="string">&#x27;.iconflat&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;50px&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, <span class="string">&#x27;50px&#x27;</span>);</span><br><span class="line">        $(<span class="string">&#x27;.openNav&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, <span class="string">&#x27;50px&#x27;</span>);</span><br><span class="line">        $(<span class="string">&#x27;#main-container,#mo-nav,.openNav&#x27;</span>).toggleClass(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">switchNightMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>).appendTo($(<span class="string">&quot;body&quot;</span>)), <span class="built_in">setTimeout</span>(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> DarkMode = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">&quot;$1&quot;</span>) ||</span><br><span class="line">                    <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                (DarkMode == <span class="string">&#x27;0&#x27;</span>) ? ($(<span class="string">&quot;html&quot;</span>).addClass(<span class="string">&quot;DarkMode&quot;</span>), <span class="built_in">document</span>.cookie = <span class="string">&quot;DarkMode=1;path=/&quot;</span>, <span class="built_in">console</span></span><br><span class="line">                    .log(<span class="string">&#x27;夜间模式开启&#x27;</span>), $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-sun&quot;</span>)) : ($(<span class="string">&quot;html&quot;</span>).removeClass(</span><br><span class="line">                        <span class="string">&quot;DarkMode&quot;</span>), <span class="built_in">document</span>.cookie = <span class="string">&quot;DarkMode=0;path=/&quot;</span>, <span class="built_in">console</span>.log(<span class="string">&#x27;夜间模式关闭&#x27;</span>), $(<span class="string">&#x27;#modeicon&#x27;</span>)</span><br><span class="line">                    .attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-_moon&quot;</span>)), <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">&quot;.Cuteen_DarkSky&quot;</span>).fadeOut(<span class="number">1e3</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $(<span class="built_in">this</span>).remove()</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;, <span class="number">2e3</span>)</span><br><span class="line">            &#125;), <span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkNightMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;html&quot;</span>).hasClass(<span class="string">&quot;n-f&quot;</span>)) &#123;</span><br><span class="line">            $(<span class="string">&quot;html&quot;</span>).removeClass(<span class="string">&quot;day&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;html&quot;</span>).addClass(<span class="string">&quot;DarkMode&quot;</span>);</span><br><span class="line">            $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-sun&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;html&quot;</span>).hasClass(<span class="string">&quot;d-f&quot;</span>)) &#123;</span><br><span class="line">            $(<span class="string">&quot;html&quot;</span>).removeClass(<span class="string">&quot;DarkMode&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;html&quot;</span>).addClass(<span class="string">&quot;day&quot;</span>);</span><br><span class="line">            $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-_moon&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.cookie.replace(<span class="regexp">/(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">&quot;$1&quot;</span>) === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getHours() &gt;= <span class="number">23</span> || <span class="keyword">new</span> <span class="built_in">Date</span>().getHours() &lt; <span class="number">7</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;html&quot;</span>).addClass(<span class="string">&quot;DarkMode&quot;</span>);</span><br><span class="line">                <span class="built_in">document</span>.cookie = <span class="string">&quot;DarkMode=1;path=/&quot;</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;夜间模式开启&#x27;</span>);</span><br><span class="line">                $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-sun&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;html&quot;</span>).removeClass(<span class="string">&quot;DarkMode&quot;</span>);</span><br><span class="line">                <span class="built_in">document</span>.cookie = <span class="string">&quot;DarkMode=0;path=/&quot;</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;夜间模式关闭&#x27;</span>);</span><br><span class="line">                $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-_moon&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> DarkMode = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/(?:(?:^|.*;\s*)DarkMode\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">&quot;$1&quot;</span>) || <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (DarkMode == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;html&quot;</span>).removeClass(<span class="string">&quot;DarkMode&quot;</span>);</span><br><span class="line">                $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-_moon&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DarkMode == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;html&quot;</span>).addClass(<span class="string">&quot;DarkMode&quot;</span>);</span><br><span class="line">                $(<span class="string">&#x27;#modeicon&#x27;</span>).attr(<span class="string">&quot;xlink:href&quot;</span>, <span class="string">&quot;#icon-sun&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BackTOP();</span><br><span class="line">    checkNightMode();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #RightDownBtn &#123;</span><br><span class="line">        position: fixed;</span><br><span class="line">        left: <span class="number">1.</span>875rem;</span><br><span class="line">        bottom: <span class="number">1.</span>875rem;</span><br><span class="line">        padding: <span class="number">0.</span>3125rem <span class="number">0.</span>625rem;</span><br><span class="line">        background: #fff;</span><br><span class="line">        border-radius: <span class="number">0.</span>1875rem;</span><br><span class="line">        &lt;!-- box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">0.</span>3125rem rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.4</span>); --&gt;</span><br><span class="line">        transition: <span class="number">0.</span>3s ease all;</span><br><span class="line">        z-index: <span class="number">1</span>;</span><br><span class="line">        align-items: flex-end;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        display: -moz-flex;</span><br><span class="line">        display: flex;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #RightDownBtn&gt;a,</span><br><span class="line">    #RightDownBtn&gt;label &#123;</span><br><span class="line">        width: <span class="number">1.</span>5em;</span><br><span class="line">        height: <span class="number">1.</span>5em;</span><br><span class="line">        margin: <span class="number">0.</span>3125rem <span class="number">0</span>;</span><br><span class="line">        transition: .2s cubic-bezier(<span class="number">.25</span>, <span class="number">.46</span>, <span class="number">.45</span>, <span class="number">.94</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* font color */</span></span><br><span class="line">    .DarkMode #page,</span><br><span class="line">    .DarkMode #colophon,</span><br><span class="line">    .DarkMode #vcomments .vbtn,</span><br><span class="line">    .DarkMode .art-content #archives .al_mon_list .al_mon,</span><br><span class="line">    .DarkMode .art-content #archives .al_mon_list span,</span><br><span class="line">    .DarkMode body,</span><br><span class="line">    .DarkMode .art-content #archives .al_mon_list .al_mon,</span><br><span class="line">    .DarkMode .art-content #archives .al_mon_list span,</span><br><span class="line">    .DarkMode button,</span><br><span class="line">    .DarkMode .art .art-content #archives a,</span><br><span class="line">    .DarkMode textarea,</span><br><span class="line">    .DarkMode strong,</span><br><span class="line">    .DarkMode a,</span><br><span class="line">    .DarkMode p,</span><br><span class="line">.DarkMode li,</span><br><span class="line">    .DarkMode .label &#123;</span><br><span class="line">        color: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">.6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    .DarkMode #page,</span><br><span class="line">    .DarkMode body,</span><br><span class="line">    .DarkMode #colophon,</span><br><span class="line">    .DarkMode #main-container,</span><br><span class="line">    .DarkMode #page .yya,</span><br><span class="line">    .DarkMode #content,</span><br><span class="line">    .DarkMode #contentss,</span><br><span class="line">    .DarkMode #footer &#123;</span><br><span class="line">        background-color: #292a2d;</span><br><span class="line">    &#125;</span><br><span class="line">    .DarkMode strong,</span><br><span class="line">    .DarkMode img &#123;</span><br><span class="line">        filter: brightness(<span class="number">.7</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* sun and noon */</span></span><br><span class="line">    .Cuteen_DarkSky,</span><br><span class="line">    .Cuteen_DarkSky:before &#123;</span><br><span class="line">        content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        position: fixed;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        right: <span class="number">0</span>;</span><br><span class="line">        top: <span class="number">0</span>;</span><br><span class="line">        bottom: <span class="number">0</span>;</span><br><span class="line">        z-index: <span class="number">88888888</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .Cuteen_DarkSky &#123;</span><br><span class="line">        background: linear-gradient(#feb8b0, #fef9db)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .Cuteen_DarkSky:before &#123;</span><br><span class="line">        transition: 2s ease all;</span><br><span class="line">        opacity: <span class="number">0</span>;</span><br><span class="line">        background: linear-gradient(#4c3f6d, #6c62bb, #93b1ed)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .DarkMode .Cuteen_DarkSky:before &#123;</span><br><span class="line">        opacity: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .Cuteen_DarkPlanet &#123;</span><br><span class="line">        z-index: <span class="number">99999999</span>;</span><br><span class="line">        position: fixed;</span><br><span class="line">        left: -<span class="number">50</span>%;</span><br><span class="line">        top: -<span class="number">50</span>%;</span><br><span class="line">        width: <span class="number">200</span>%;</span><br><span class="line">        height: <span class="number">200</span>%;</span><br><span class="line">        -webkit-animation: CuteenPlanetMove 2s cubic-bezier(<span class="number">.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        animation: CuteenPlanetMove 2s cubic-bezier(<span class="number">.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        transform-origin: center bottom</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @-webkit-keyframes CuteenPlanetMove &#123;</span><br><span class="line">        <span class="number">0</span>% &#123;</span><br><span class="line">            transform: rotate(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        to &#123;</span><br><span class="line">            transform: rotate(360deg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes CuteenPlanetMove &#123;</span><br><span class="line">        <span class="number">0</span>% &#123;</span><br><span class="line">            transform: rotate(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        to &#123;</span><br><span class="line">            transform: rotate(360deg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .Cuteen_DarkPlanet:after &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: <span class="number">35</span>%;</span><br><span class="line">        top: <span class="number">40</span>%;</span><br><span class="line">        width: <span class="number">9.</span>375rem;</span><br><span class="line">        height: <span class="number">9.</span>375rem;</span><br><span class="line">        border-radius: <span class="number">50</span>%;</span><br><span class="line">        content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        background: linear-gradient(#fefefe, #fffbe8)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- left side bar.end --&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建样式文件"><a href="#创建样式文件" class="headerlink" title="创建样式文件"></a>创建样式文件</h4><p>建议所有关于主题自定义的样式都放置在同一个文件夹中，然后全局引入。在blog\themes\volantis\source\css下创建文件夹<code>_custom</code>，然后在blog\themes\volantis\source\css下的index.styl中全局引用此文件夹下所有文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Project</span><br><span class="line"> @import &#x27;_base&#x27;</span><br><span class="line"> @import &#x27;_tag-plugins/*&#x27;</span><br><span class="line"> @import &#x27;_highlight&#x27;</span><br><span class="line"> @import &#x27;_third-party/*&#x27;</span><br><span class="line"> @import &#x27;_layout/*&#x27;</span><br><span class="line"><span class="addition">+@import &#x27;_custom/*&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建样式文件<code>highlight.styl</code>，放置在_custom文件夹中。添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.DarkMode</span></span><br><span class="line">  <span class="string">.l_main</span></span><br><span class="line">    <span class="comment">#comments</span></span><br><span class="line">      <span class="string">.vcards</span></span><br><span class="line">        <span class="string">.vhead</span></span><br><span class="line">          <span class="string">.vsys</span></span><br><span class="line">            <span class="string">background:none</span></span><br><span class="line">        <span class="string">.vcontent</span></span><br><span class="line">          <span class="string">p</span></span><br><span class="line">            <span class="attr">color:</span> <span class="string">rgb(136</span> <span class="number">136</span> <span class="number">136</span><span class="string">)</span></span><br><span class="line">      <span class="string">.vinput</span></span><br><span class="line">        <span class="attr">color:</span> <span class="comment">#dbdbe2</span></span><br><span class="line">      <span class="comment">#valine_container</span></span><br><span class="line">        <span class="string">.vwrap</span></span><br><span class="line">          <span class="attr">border:</span> <span class="string">1px</span> <span class="string">dashed</span> <span class="comment">#fff</span></span><br><span class="line">          <span class="string">.vemojis</span></span><br><span class="line">            <span class="string">background:none</span></span><br><span class="line">    <span class="string">.post</span></span><br><span class="line">      <span class="string">section</span></span><br><span class="line">        <span class="string">.title</span></span><br><span class="line">          <span class="string">a</span></span><br><span class="line">            <span class="attr">color:</span> <span class="comment">#dbdbe2</span></span><br><span class="line">    <span class="string">.article</span></span><br><span class="line">      <span class="string">.prev-next</span></span><br><span class="line">        <span class="string">&gt;a</span></span><br><span class="line">          <span class="attr">background:</span> <span class="comment">#444</span></span><br><span class="line">  <span class="string">.widget</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="comment">#292a2d</span></span><br><span class="line">    <span class="string">&gt;.content</span></span><br><span class="line">      <span class="string">ul</span></span><br><span class="line">        <span class="string">&gt;li</span></span><br><span class="line">          <span class="string">a</span></span><br><span class="line">            <span class="attr">color:</span> <span class="string">rgba(255,</span> <span class="number">255</span><span class="string">,</span> <span class="number">255</span><span class="string">,</span> <span class="number">.6</span><span class="string">)</span> <span class="type">!important</span></span><br><span class="line">            <span class="string">&amp;:hover</span></span><br><span class="line">              <span class="attr">color:</span> <span class="string">rgb(99</span> <span class="number">203</span> <span class="number">252</span><span class="string">)</span> <span class="type">!important</span></span><br><span class="line">    <span class="string">header</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">rgb(68</span> <span class="number">215</span> <span class="number">182</span><span class="string">)</span></span><br><span class="line">      <span class="string">a</span></span><br><span class="line">        <span class="attr">color:</span> <span class="string">rgb(68</span> <span class="number">215</span> <span class="number">182</span><span class="string">)</span></span><br><span class="line">  <span class="string">.container</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="comment">#292a2d</span></span><br><span class="line">    <span class="attr">box-shadow:</span> <span class="number">0</span> <span class="string">1px</span> <span class="string">3px</span> <span class="number">0</span> <span class="string">rgba(6,6,6,.28)</span></span><br><span class="line">  <span class="string">.white-box</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="comment">#292a2d</span></span><br><span class="line"></span><br><span class="line">  <span class="string">.article</span></span><br><span class="line">    <span class="string">code</span></span><br><span class="line">      <span class="attr">background:</span> <span class="comment">#f6f6f663 !important</span></span><br><span class="line">      <span class="attr">border:</span> <span class="string">none</span></span><br><span class="line">    <span class="string">blockquote</span></span><br><span class="line">      <span class="attr">background:</span> <span class="comment">#f6f6f663</span></span><br><span class="line">    <span class="string">h3,h4,h5</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">rgb(219</span> <span class="number">219</span> <span class="number">226</span><span class="string">)</span></span><br><span class="line">  <span class="string">div.note</span></span><br><span class="line">    <span class="attr">background:</span> <span class="comment">#44444475 !important</span></span><br><span class="line">  <span class="string">details</span></span><br><span class="line">    <span class="attr">border:</span> <span class="string">none</span></span><br><span class="line">    <span class="string">background:none</span></span><br><span class="line">    <span class="string">&gt;summary</span></span><br><span class="line">      <span class="attr">background:</span> <span class="comment">#444</span></span><br><span class="line"></span><br><span class="line">  <span class="string">.l_header</span></span><br><span class="line">    <span class="string">.m_search</span></span><br><span class="line">      <span class="string">.input</span></span><br><span class="line">        <span class="attr">background-color:</span> <span class="comment">#292a2d</span></span><br><span class="line">    <span class="string">.wrapper</span></span><br><span class="line">      <span class="string">.title</span></span><br><span class="line">        <span class="attr">color:</span> <span class="comment">#dbdbe2</span></span><br><span class="line">    <span class="string">.switcher</span></span><br><span class="line">      <span class="string">&gt;li</span> <span class="string">&gt;a</span></span><br><span class="line">        <span class="attr">color:</span> <span class="comment">#44d7b6 !important</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#archive-page</span></span><br><span class="line">    <span class="string">.archive</span></span><br><span class="line">      <span class="string">.archive-year</span></span><br><span class="line">        <span class="string">h2</span></span><br><span class="line">          <span class="attr">color:</span> <span class="comment">#fff</span></span><br><span class="line">      <span class="string">.archive_page</span></span><br><span class="line">        <span class="string">.archive-post</span></span><br><span class="line">          <span class="string">.title</span></span><br><span class="line">            <span class="attr">color:</span> <span class="string">rgb(219</span> <span class="number">219</span> <span class="number">226</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#RightDownBtn</span></span><br><span class="line">    <span class="attr">background:</span> <span class="string">none</span></span><br><span class="line">  <span class="string">h1</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">rgb(219</span> <span class="number">219</span> <span class="number">226</span><span class="string">)</span></span><br><span class="line">  <span class="string">ul.list-v</span></span><br><span class="line">    <span class="attr">background:</span> <span class="string">rgb(41</span> <span class="number">42</span> <span class="number">45</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line">  <span class="string">.comments</span></span><br><span class="line">    <span class="string">hr</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">rgb(102</span> <span class="number">102</span> <span class="number">102</span><span class="string">)</span></span><br><span class="line">    <span class="string">.article</span></span><br><span class="line">      <span class="string">p[ct]</span></span><br><span class="line">        <span class="attr">color:</span> <span class="comment">#dbdbe2</span></span><br><span class="line">  <span class="string">div.tabs</span></span><br><span class="line">    <span class="attr">background:</span> <span class="string">rgb(102</span> <span class="number">102</span> <span class="number">102</span><span class="string">)</span></span><br><span class="line">  <span class="string">.new-meta-item</span></span><br><span class="line">    <span class="string">p</span></span><br><span class="line">      <span class="attr">color:</span> <span class="comment">#888 !important</span></span><br><span class="line">  <span class="string">.highlight&gt;table</span></span><br><span class="line">      <span class="attr">background:</span> <span class="comment">#282c34</span></span><br><span class="line">  <span class="string">.gutter</span></span><br><span class="line">    <span class="attr">background:</span> <span class="comment">#282c34 !important</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="comment">#282c34 !important</span></span><br><span class="line">  <span class="string">.highlight</span> </span><br><span class="line">    <span class="string">figcaption</span></span><br><span class="line">      <span class="attr">background-color:</span> <span class="comment">#21252b</span></span><br><span class="line">  <span class="string">.highlight</span></span><br><span class="line">    <span class="attr">border:</span> <span class="string">1px</span> <span class="string">solid</span> <span class="comment">#21252b !important</span></span><br><span class="line">    <span class="attr">background:</span> <span class="comment">#282c34</span></span><br><span class="line">  <span class="string">.highlight</span> <span class="string">pre</span> <span class="string">.line,</span> <span class="string">.highlight</span> <span class="string">pre</span> <span class="string">.params</span> </span><br><span class="line">      <span class="attr">color:</span> <span class="string">rgba(158,</span> <span class="number">142</span><span class="string">,</span> <span class="number">142</span><span class="string">,</span> <span class="number">0.9</span><span class="string">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所有的样式都是基于我自己的主题写的，仅供参考。</p><h4 id="引入到页面"><a href="#引入到页面" class="headerlink" title="引入到页面"></a>引入到页面</h4><p>在blog\themes\volantis\layout\layout.ejs的文件末尾<code>&lt;/body&gt;</code>下引入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-<span class="ruby"> partial(<span class="string">&#x27;_partial/left&#x27;</span>, null, &#123;<span class="symbol">cache:</span> !config.relative_link&#125;) </span>%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后一键三连。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>配置的最终效果还是挺满意的，目前只调试了这么多，后期若发现有哪里不合适的地方再修改。在原文章中，博主写了很多功能，不过我都抛弃了，只留下的暗黑模式。可以参考文章自己添加。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/cungudafa/article/details/106500877">hexo（sakura）给博客增添侧边栏（回到顶部，跳转评论，深色模式，播放音乐）</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kmp算法解析&lt;kmp算法解析&gt;</title>
      <link href="2020/11/19/kmp%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
      <url>2020/11/19/kmp%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>有些算法，适合从它产生的动机，如何设计与解决问题这样正向地去介绍。但KMP算法真的不适合这样去学。最好的办法是先搞清楚它所用的数据结构是什么，再搞清楚怎么用，最后为什么的问题就会有恍然大悟的感觉。我试着从这个思路再介绍一下。大家只需要记住一点，PMT是什么东西。然后自己临时推这个算法也是能推出来的，完全不需要死记硬背。</p><p>KMP算法的核心，是一个被称为部分匹配表(Partial Match Table)的数组。我觉得理解KMP的最大障碍就是很多人在看了很多关于KMP的文章之后，仍然搞不懂PMT中的值代表了什么意思。这里我们抛开所有的枝枝蔓蔓，先来解释一下这个数据到底是什么。</p><p>对于字符串“abababca”，它的PMT如下表所示：</p><p><img src="https://pic1.zhimg.com/50/v2-e905ece7e7d8be90afc62fe9595a9b0f_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-e905ece7e7d8be90afc62fe9595a9b0f_1440w.jpg?source=1940ef5c"></p><p>就像例子中所示的，如果待匹配的模式字符串有8个字符，那么PMT就会有8个值。</p><p>我先解释一下字符串的前缀和后缀。如果字符串A和B，存在A=BS，其中S是任意的非空字符串，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A=SB， 其中S是任意的非空字符串，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的后缀。</p><p>有了这个定义，就可以说明PMT中的值的意义了。<strong>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度</strong>。例如，对于”aba”，它的前缀集合为{”a”, ”ab”}，后缀 集合为{”ba”, ”a”}。两个集合的交集为{”a”}，那么长度最长的元素就是字符串”a”了，长 度为1，所以对于”aba”而言，它在PMT表中对应的值就是1。再比如，对于字符串”ababa”，它的前缀集合为{”a”, ”ab”, ”aba”, ”abab”}，它的后缀集合为{”baba”, ”aba”, ”ba”, ”a”}， 两个集合的交集为{”a”, ”aba”}，其中最长的元素为”aba”，长度为3。</p><p>好了，解释清楚这个表是什么之后，我们再来看如何使用这个表来加速字符串的查找，以及这样用的道理是什么。如图 1.12 所示，要在主字符串”ababababca”中查找模式字符串”abababca”。如果在 j 处字符不匹配，那么由于前边所说的模式字符串 PMT 的性质，主字符串中 i 指针之前的 PMT[j −1] 位就一定与模式字符串的第 0 位至第 PMT[j−1] 位是相同的。这是因为主字符串在 i 位失配，也就意味着主字符串从 i−j 到 i 这一段是与模式字符串的 0 到 j 这一段是完全相同的。而我们上面也解释了，模式字符串从 0 到 j−1 ，在这个例子中就是”ababab”，其前缀集合与后缀集合的交集的最长元素为”abab”， 长度为4。所以就可以断言，主字符串中i指针之前的 4 位一定与模式字符串的第0位至第 4 位是相同的，即长度为 4 的后缀与前缀相同。这样一来，我们就可以将这些字符段的比较省略掉。具体的做法是，保持i指针不动，然后将j指针指向模式字符串的PMT[j −1]位即可。</p><p>简言之，以图中的例子来说，在 i 处失配，那么主字符串和模式字符串的前边6位就是相同的。又因为模式字符串的前6位，它的前4位前缀和后4位后缀是相同的，所以我们推知主字符串i之前的4位和模式字符串开头的4位是相同的。就是图中的灰色部分。那这部分就不用再比较了。</p><p><img src="https://pic1.zhimg.com/50/v2-03a0d005badd0b8e7116d8d07947681c_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-03a0d005badd0b8e7116d8d07947681c_1440w.jpg?source=1940ef5c"></p><p>有了上面的思路，我们就可以使用PMT加速字符串的查找了。我们看到如果是在 j 位 失配，那么影响 j 指针回溯的位置的其实是第 j −1 位的 PMT 值，所以为了编程的方便， 我们不直接使用PMT数组，而是将PMT数组向后偏移一位。我们把新得到的这个数组称为next数组。下面给出根据next数组进行字符串匹配加速的字符串匹配程序。其中要注意的一个技巧是，在把PMT进行向右偏移时，第0位的值，我们将其设成了-1，这只是为了编程的方便，并没有其他的意义。在本节的例子中，next数组如下表所示。</p><p><img src="https://pic2.zhimg.com/50/v2-40b4885aace7b31499da9b90b7c46ed3_hd.jpg?source=1940ef5c"><img src="https://pic2.zhimg.com/80/v2-40b4885aace7b31499da9b90b7c46ed3_1440w.jpg?source=1940ef5c"></p><p>具体的程序如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> * t, <span class="keyword">char</span> * p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(t) &amp;&amp; j &lt; <span class="built_in">strlen</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || t[i] == p[j]) </span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">           j++;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">           j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="built_in">strlen</span>(p))</span><br><span class="line">       <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好了，讲到这里，其实KMP算法的主体就已经讲解完了。你会发现，其实KMP算法的动机是很简单的，解决的方案也很简单。远没有很多教材和算法书里所讲的那么乱七八糟，只要搞明白了PMT的意义，其实整个算法都迎刃而解。</p><p>现在，我们再看一下如何编程快速求得next数组。其实，求next数组的过程完全可以看成字符串匹配的过程，即以模式字符串为主字符串，以模式字符串的前缀为目标字符串，一旦字符串匹配成功，那么当前的next值就是匹配成功的字符串的长度。</p><p>具体来说，就是从模式字符串的第一位(注意，不包括第0位)开始对自身进行匹配运算。 在任一位置，能匹配的最长长度就是当前位置的next值。如下图所示。</p><p><img src="https://pic1.zhimg.com/50/v2-645f3ec49836d3c680869403e74f7934_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-645f3ec49836d3c680869403e74f7934_1440w.jpg?source=1940ef5c"></p><p><img src="https://pic4.zhimg.com/50/v2-06477b79eadce2d7d22b4410b0d49aba_hd.jpg?source=1940ef5c"><img src="https://pic4.zhimg.com/80/v2-06477b79eadce2d7d22b4410b0d49aba_1440w.jpg?source=1940ef5c"></p><p><img src="https://pic4.zhimg.com/50/v2-8a1a205df5cad7ab2f07498484a54a89_hd.jpg?source=1940ef5c"><img src="https://pic4.zhimg.com/80/v2-8a1a205df5cad7ab2f07498484a54a89_1440w.jpg?source=1940ef5c"></p><p><img src="https://pic1.zhimg.com/50/v2-f2b50c15e7744a7b358154610204cc62_hd.jpg?source=1940ef5c"><img src="https://pic1.zhimg.com/80/v2-f2b50c15e7744a7b358154610204cc62_1440w.jpg?source=1940ef5c"></p><p><img src="https://pic4.zhimg.com/50/v2-bd42e34a9266717b63706087a81092ac_hd.jpg?source=1940ef5c"><img src="https://pic4.zhimg.com/80/v2-bd42e34a9266717b63706087a81092ac_1440w.jpg?source=1940ef5c"></p><p>求next数组值的程序如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> * p, <span class="keyword">int</span> * next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || p[i] == p[j])</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">++j;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，KMP算法就全部介绍完了。<strong>粗体</strong></p><p><em><strong>对于要考研的小伙伴来说，这章节在串string那一块算重点，可以结合王道考研笔记结合起来学习。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM对于文件字符编码的转换</title>
      <link href="2020/11/18/2013-11-18-vim-encoding-convert/"/>
      <url>2020/11/18/2013-11-18-vim-encoding-convert/</url>
      
        <content type="html"><![CDATA[<h3 id="使用vim自己的方式"><a href="#使用vim自己的方式" class="headerlink" title="使用vim自己的方式"></a>使用vim自己的方式</h3><h4 id="fenc-enc"><a href="#fenc-enc" class="headerlink" title="fenc, enc"></a>fenc, enc</h4><p>在Vim中输入:set fenc=编码  即可将文档的编码转换为相应的编码格式,这是只需要保存文档,文档的编码就变了。</p><p>如果在Vim中输入:set enc=编码  即可改变Vim的显示编码,这是就可以看到文档中的乱码了,不过这是即使对文档做了修改并保存,文档仍旧以之前的文档编码保存。</p><span id="more"></span><h4 id="fileencoding"><a href="#fileencoding" class="headerlink" title="fileencoding"></a>fileencoding</h4><p>Vim中输入:set fileencoding=编码</p><h3 id="使用iconv"><a href="#使用iconv" class="headerlink" title="使用iconv"></a>使用iconv</h3><p>iconv命令用于转换指定文件的编码,默认输出到标准输出设备,亦可指定输出文件。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>iconv [选项…] [文件…]</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><p>输入/输出格式规范：</p><p>  -f, –from-code=名称 原始文本编码</p><p>  -t, –to-code=名称 输出编码</p></li><li><p>信息：</p><p>  -l, –list 列举所有已知的字符集</p></li><li><p>输出控制：</p><p>  -c 从输出中忽略无效的字符</p><p>  -o, –output=FILE 输出文件</p><p>  -s, –silent 关闭警告</p><p>  –verbose 打印进度信息</p></li><li><p>其他：</p><p>  -?, –help 给出该系统求助列表</p><p>  –usage 给出简要的用法信息</p><p>  -V, –version 打印程序版本号</p></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>iconv -f utf-8 -t gb2312 filebackupscheme.ini &gt; filebackupscheme2.ini</p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中使用Markdown</title>
      <link href="2020/11/16/2013-11-16-java-markdown-lib/"/>
      <url>2020/11/16/2013-11-16-java-markdown-lib/</url>
      
        <content type="html"><![CDATA[<p>由于需要将输入的markdown内容转换成html，所以找到了这个包：<a href="http://markdown.tautua.org/">MarkdownPapers</a></p><p>Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tautua.markdownpapers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>markdownpapers-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;use latest&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用起来非常简单：</p><figure class="highlight java"><figcaption><span>示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Reader in = <span class="keyword">new</span> FileReader(<span class="string">&quot;in.md&quot;</span>);</span><br><span class="line">Writer out = <span class="keyword">new</span> FileWriter(<span class="string">&quot;out.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">Markdown md = <span class="keyword">new</span> Markdown();</span><br><span class="line">md.transform(in, out);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习笔记观察者模式</title>
      <link href="2020/11/12/2013-11-12-design-patterns-observer/"/>
      <url>2020/11/12/2013-11-12-design-patterns-observer/</url>
      
        <content type="html"><![CDATA[<h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><p>观察者模式（Observer Pattern）也叫做发布订阅模式（Publish/subscribe），它使一个在项目中经常使用的模式。</p><h3 id="2-模式各角色"><a href="#2-模式各角色" class="headerlink" title="2. 模式各角色"></a>2. 模式各角色</h3><p><strong>Subject被观察者</strong>：定义被观察者必须实现的职责，它必须能够动态地增加、取消观察者。它一般是抽象类或者是实现类，仅仅完成作为被观察者必须实现的职责：管理观察者并通知观察者。</p><p><strong>Observer观察者</strong>：观察者接收到消息后，即进行update（更新方法）操作，对接收到的信息进行处理。</p><p><strong>ConcreteSubject具体的被观察者</strong>：定义被观察者自己的业务逻辑，同时定义对哪些事件进行通知。</p><p><strong>ConcreteObserver具体的观察者</strong>：每个观察在接收到消息后的处理反应是不同，各个观察者有自己的处理逻辑。</p><h3 id="3-模式类图"><a href="#3-模式类图" class="headerlink" title="3. 模式类图"></a>3. 模式类图</h3><p><img src="http://githubimg.wxio.club/designpatterns/patterns_observer.png" alt="观察者模式类图"></p><span id="more"></span><h3 id="4-通用代码"><a href="#4-通用代码" class="headerlink" title="4. 通用代码"></a>4. 通用代码</h3><p><strong>被观察者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个观察者数组</span></span><br><span class="line"><span class="keyword">public</span> Vector&lt;Observer&gt; obsVector = <span class="keyword">new</span> Vector&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.obsVector.add(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个观察者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.obsVector.remove(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知所有观察者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Observer observer : <span class="keyword">this</span>.obsVector)</span><br><span class="line">observer.update();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>具体被观察者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的业务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;被观察者做点啥&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>观察者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体观察者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现更新方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;接收到信息，并进行处理！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个被观察者</span></span><br><span class="line">ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个观察者</span></span><br><span class="line">Observer observer = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者观察被观察者</span></span><br><span class="line">subject.addObserver(observer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者开始活动</span></span><br><span class="line">subject.doSomething();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 观察者 </tag>
            
            <tag> observer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat打开远程调试</title>
      <link href="2020/10/29/2013-10-29-tomcat-remote-debug/"/>
      <url>2020/10/29/2013-10-29-tomcat-remote-debug/</url>
      
        <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-Linux下"><a href="#1-Linux下" class="headerlink" title="1.    Linux下"></a>1.    Linux下</h3><p>在bin/startup.sh 或者 bin/catalina.sh 开头添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -x CATALINA_OPTS=<span class="string">&quot;-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8787&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-Windows下"><a href="#2-Windows下" class="headerlink" title="2.    Windows下"></a>2.    Windows下</h3><p>在bin/startup.bat 或者 bin/catalina.bat 开头添加</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SET</span> CATALINA_OPTS=-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class="number">8787</span></span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>这样启动以后，就会监听8787端口，通过IDE进行调试，这里以Eclipse示例</p><p>依次打开Run –&gt; Debug Configurations –&gt; Remote Java Application –&gt; 右键New –&gt; 填写tomcat相关信息，端口就是8787</p><p>这样启动tomcat后，再进行Debug后就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
            <tag> debug </tag>
            
            <tag> remote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat安装CA证书（详细过程篇）</title>
      <link href="2020/10/29/2013-05-16-tomcat-install-cert/"/>
      <url>2020/10/29/2013-05-16-tomcat-install-cert/</url>
      
        <content type="html"><![CDATA[<p><strong>1.创建一个本地证书：&nbsp;</strong><br><br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-genkey&nbsp;-alias&nbsp;tomcat&nbsp;-keyalg&nbsp;RSA&nbsp;-keystore&nbsp;keystore&nbsp;<br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br>您的名字与姓氏是什么？&nbsp;<br>&nbsp;&nbsp;[Unknown]：&nbsp;&nbsp;www.test.com&nbsp;<br>您的组织单位名称是什么？&nbsp;<br>&nbsp;&nbsp;[Unknown]：&nbsp;&nbsp;system&nbsp;<br>您的组织名称是什么？&nbsp;<br>&nbsp;&nbsp;[Unknown]：&nbsp;&nbsp;test&nbsp;<br>您所在的城市或区域名称是什么？&nbsp;<br>&nbsp;&nbsp;[Unknown]：&nbsp;&nbsp;beijing&nbsp;<br>您所在的州或省份名称是什么？&nbsp;<br>&nbsp;&nbsp;[Unknown]：&nbsp;&nbsp;beijing&nbsp;<br>该单位的两字母国家代码是什么&nbsp;<br>&nbsp;&nbsp;[Unknown]：&nbsp;&nbsp;cn&nbsp;<br>CN=liujx,&nbsp;OU=system,&nbsp;O=test,&nbsp;L=beijing,&nbsp;ST=beijing,&nbsp;C=cn&nbsp;正确吗？&nbsp;<br>&nbsp;&nbsp;[否]：&nbsp;&nbsp;y&nbsp;<br><br>输入&lt;tomcat&gt;;的主密码&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（如果和&nbsp;keystore&nbsp;密码相同，按回车）：&nbsp;</p><p><span id="more"></span><br><br>查看证书&nbsp;<br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-list&nbsp;-keystore&nbsp;keystore&nbsp;<br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br><br>Keystore&nbsp;类型：&nbsp;jks&nbsp;<br>Keystore&nbsp;提供者：&nbsp;SUN&nbsp;<br><br>您的&nbsp;keystore&nbsp;包含&nbsp;1&nbsp;输入&nbsp;<br><br>tomcat,&nbsp;2004-11-26,&nbsp;keyEntry,&nbsp;<br>认证指纹&nbsp;(MD5)：&nbsp;B8:44:A1:A2:C7:9A:09:EE:A0:CF:5B:AA:DC:F7:0F:80&nbsp;<br><br><br><strong>2.然后创建CSR：&nbsp;</strong><br><br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-certreq&nbsp;-keyalg&nbsp;RSA&nbsp;-alias&nbsp;tomcat&nbsp;-file&nbsp;certreq.csr&nbsp;-keystore&nbsp;keystore&nbsp;<br><br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br><br>现在，你有了一个叫certreq.csr的文件，你可以将它提交到CA（参考CA网站上的文档怎样做）。然后就得到了证书。&nbsp;<br>例如：我们申请了个Verisign.com的测试证书保存为：client.cer&nbsp;<br><br><strong>3.从你获得证书的CA下载Chain&nbsp;Certificate:&nbsp;</strong><br><br>例如：&nbsp;<br>Verisign.com正式证书：去http://www.verisign.com/support/install/intermediate.html&nbsp;<br>Verisign&nbsp;Test&nbsp;CA&nbsp;Root证书：去http://www.verisign.com/server2/trial/faq/index.html&nbsp;<br><br><br><strong>4.将Chain&nbsp;Certificate导入到keystore：&nbsp;</strong><br><br>例如：导入Verisign&nbsp;Test&nbsp;CA&nbsp;Root证书getcacert.cer&nbsp;<br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-import&nbsp;-trustcacerts&nbsp;-alias&nbsp;root&nbsp;-file&nbsp;getcacert.cer&nbsp;-keystore&nbsp;keystore&nbsp;<br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br>Owner:&nbsp;OU=For&nbsp;VeriSign&nbsp;authorized&nbsp;testing&nbsp;only.&nbsp;No&nbsp;assurances&nbsp;(C)VS1997,&nbsp;OU=www.verisign.com/repository/TestCPS&nbsp;Incorp.&nbsp;By&nbsp;Ref.&nbsp;Liab.&nbsp;LTD.,&nbsp;O="VeriSign,&nbsp;Inc"&nbsp;<br>发照者：&nbsp;OU=For&nbsp;VeriSign&nbsp;authorized&nbsp;testing&nbsp;only.&nbsp;No&nbsp;assurances&nbsp;(C)VS1997,&nbsp;OU=www.verisign.com/repository/TestCPS&nbsp;Incorp.&nbsp;By&nbsp;Ref.&nbsp;Liab.&nbsp;LTD.,&nbsp;O="VeriSign,&nbsp;Inc"&nbsp;<br>序号：&nbsp;52a9f424da674c9daf4f537852abef6e&nbsp;<br>有效期间：&nbsp;Sun&nbsp;Jun&nbsp;07&nbsp;08:00:00&nbsp;CST&nbsp;1998&nbsp;至：&nbsp;Wed&nbsp;Jun&nbsp;07&nbsp;07:59:59&nbsp;CST&nbsp;2006&nbsp;<br>认证指纹：&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MD5：&nbsp;&nbsp;40:06:53:11:FD:B3:3E:88:0A:6F:7D:D1:4E:22:91:87&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1：&nbsp;93:71:C9:EE:57:09:92:5D:0A:8E:FA:02:0B:E2:F5:E6:98:6C:60:DE&nbsp;<br>信任这个认证？&nbsp;[否]：&nbsp;&nbsp;y&nbsp;<br>认证已添加至keystore中&nbsp;<br><br>查看证书&nbsp;<br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-list&nbsp;-keystore&nbsp;keystore&nbsp;<br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br><br>Keystore&nbsp;类型：&nbsp;jks&nbsp;<br>Keystore&nbsp;提供者：&nbsp;SUN&nbsp;<br><br>您的&nbsp;keystore&nbsp;包含&nbsp;2&nbsp;输入&nbsp;<br><br>root,&nbsp;2004-11-26,&nbsp;trustedCertEntry,&nbsp;<br>认证指纹&nbsp;(MD5)：&nbsp;40:06:53:11:FD:B3:3E:88:0A:6F:7D:D1:4E:22:91:87&nbsp;<br>tomcat,&nbsp;2004-11-26,&nbsp;keyEntry,&nbsp;<br>认证指纹&nbsp;(MD5)：&nbsp;B8:44:A1:A2:C7:9A:09:EE:A0:CF:5B:AA:DC:F7:0F:80&nbsp;<br><br><br><br><strong>5.最后，导入你的新证书：&nbsp;&nbsp;</strong><br><br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-import&nbsp;-trustcacerts&nbsp;-alias&nbsp;tomcat&nbsp;-file&nbsp;client.crt&nbsp;-keystore&nbsp;keystore&nbsp;<br>.old&nbsp;<br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br>认证回复已安装在&nbsp;keystore中&nbsp;<br><br>查看证书&nbsp;<br>C:\j2sdk1.4.2_05\bin&gt;;keytool&nbsp;-list&nbsp;-keystore&nbsp;keystore&nbsp;<br>输入keystore密码：&nbsp;&nbsp;12345678&nbsp;<br><br>Keystore&nbsp;类型：&nbsp;jks&nbsp;<br>Keystore&nbsp;提供者：&nbsp;SUN&nbsp;<br><br>您的&nbsp;keystore&nbsp;包含&nbsp;2&nbsp;输入&nbsp;<br><br>root,&nbsp;2004-11-26,&nbsp;trustedCertEntry,&nbsp;<br>认证指纹&nbsp;(MD5)：&nbsp;40:06:53:11:FD:B3:3E:88:0A:6F:7D:D1:4E:22:91:87&nbsp;<br>tomcat,&nbsp;2004-11-26,&nbsp;keyEntry,&nbsp;<br>认证指纹&nbsp;(MD5)：&nbsp;68:33:EE:6C:5C:5B:70:B5:0D:85:3B:6D:AF:00:91:24&nbsp;<br><br>注意：仔细观察tomcat项的认证指纹与导入之前是不同的。&nbsp;<br><br><strong>6.安装证书&nbsp;</strong><br><br>把最后生成的keystore文件，复制到tomcat安装路径的conf目录下&nbsp;<br><br><br><strong>7.修改Tomcat的配置文件server.xml&nbsp;</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Define&nbsp;a&nbsp;SSL&nbsp;Coyote&nbsp;HTTP/1.1&nbsp;Connector&nbsp;on&nbsp;port&nbsp;8443&nbsp;--&gt;;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Connector&nbsp;port="8443"&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="150"&nbsp;minSpareThreads="25"&nbsp;maxSpareThreads="75"&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enableLookups="false"&nbsp;disableUploadTimeout="true"&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acceptCount="100"&nbsp;debug="0"&nbsp;scheme="https"&nbsp;secure="true"&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clientAuth="false"&nbsp;sslProtocol="TLS"&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keystoreFile="/conf/keystore"&nbsp;keystorePass="12345678"/&gt;;&nbsp;<br><br><strong>8.重新启动Tomcat&nbsp;</strong><br><br><strong>9.为IE浏览器安装测试根证书：</strong>&nbsp;<br><br>双击getcacert.cer，安装测试根证书&nbsp;<br><br><strong>10.测试SSL&nbsp;</strong><br><br>打开IE输入https://www.test.com:8443/&nbsp;</p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> JAVA </tag>
            
            <tag> TOMCAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy开始</title>
      <link href="2020/10/28/2014-10-28-groovy-starting/"/>
      <url>2020/10/28/2014-10-28-groovy-starting/</url>
      
        <content type="html"><![CDATA[<p>之前看了《Java程序员修炼之道》，第三部分JVM上的多语言编程里面讲到JVM上面的一些脚本语言，有Groovy，Scala，Clojure，没有等。于是这两天学了一下Groovy，发现还真是方便，最明显的就是他的闭包Closure。</p><p>平时在用Java编程的时候，写着写着总是有点烦，一个很简单的方法都要写一堆代码，其实具体逻辑就一行，想着用闭包多好，那么Groovy完全就可以用得上。</p><span id="more"></span><h3 id="1-Groovy的安装"><a href="#1-Groovy的安装" class="headerlink" title="1. Groovy的安装"></a>1. Groovy的安装</h3><ul><li>安装GVM</li></ul><p>使用<a href="http://gvmtool.net/">GVM</a>(the Groovy enVironment Manager)进行安装和版本管理，进行版本的随意切换，GVM的概念可以说是来自RVM，它不仅可以管理Groovy，还可以管理crash, gaiden, glide, gradle, grails, griffon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s get.gvmtool.net | bash</span><br></pre></td></tr></table></figure><ul><li>直接安装最新版的Groovy</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gvm install groovy</span><br></pre></td></tr></table></figure><ul><li>安装指定版本的Groovy</li></ul><p>首先查看所有版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gvm list groovy</span><br></pre></td></tr></table></figure><p>然后加入版本号即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gvm install groovy 2.3.7</span><br></pre></td></tr></table></figure><h3 id="2-Groovy的编程"><a href="#2-Groovy的编程" class="headerlink" title="2. Groovy的编程"></a>2. Groovy的编程</h3><ul><li>Hello World</li></ul><p>Groovy可以不像Java那样每个class文件必须有一个类，它就像很多脚本一样，一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>保存为hw.groovy，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovy hw.groovy</span><br></pre></td></tr></table></figure><p>解决！而在Java里，则要这么麻烦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存hw.java，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac hw.java</span><br><span class="line">java hw.class</span><br></pre></td></tr></table></figure><p>这一点Groovy还是挺方便的了。</p><ul><li>groovyConsole</li></ul><p>Groovy还提供了GroovyConsole，一个简单的IDE，也是挺方便的，可以通过以下方式启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groovyConsole</span><br></pre></td></tr></table></figure><h4 id="2-2-闭包"><a href="#2-2-闭包" class="headerlink" title="2.2 闭包"></a>2.2 闭包</h4><p>对于闭包，官方的解释是：</p><p>What is a Closure?<br>A Groovy Closure is like a “code block” or a method pointer. It is a<br>piece of code that is defined and then executed at a later point. It has some special properties like implicit variables, support for currying and support for free variables (which we’ll see later on). We’ll ignore the nitty gritty details for now (see the formal definition if you want those) and look at some simple examples.</p><p>一个最简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def clos &#x3D; &#123; println &quot;hello!&quot;&#125;</span><br><span class="line">println &quot;Executing the Closure:&quot;</span><br><span class="line">clos()</span><br></pre></td></tr></table></figure><p>更多的说明在官网文档<a href="http://groovy.codehaus.org/Closures">Closures</a>还有。</p><p>Groovy里很多的类都有专门传闭包方法，比如List：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def list &#x3D; [&#39;c&#39;, &#39;n&#39;, &#39;h&#39;, &#39;a&#39;, &#39;l&#39;, &#39;o&#39;]</span><br><span class="line">def newList &#x3D; []</span><br><span class="line"></span><br><span class="line">def clos &#x3D; &#123;</span><br><span class="line">it.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line">list.collect(newList, clos)</span><br><span class="line">println newList</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出：[C, N, H, A, L, O]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-一个具体的脚本例子"><a href="#2-3-一个具体的脚本例子" class="headerlink" title="2.3 一个具体的脚本例子"></a>2.3 一个具体的脚本例子</h4><p>脚本的功能：将octopress文章转换成hexo文章</p><p>调用方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groovy script.groovy octopress路径 输出路径</span><br></pre></td></tr></table></figure><p>以下是脚本内容：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> inputArgs = args.clone()</span><br><span class="line"><span class="keyword">if</span>(inputArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">pringHelp()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查目录是否存在 以及 不能重复</span></span><br><span class="line">inputArgs.each &#123; folderPath -&gt;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">new</span> File(folderPath).exists()) &#123;</span><br><span class="line">println folderPath + <span class="string">&quot; is not exists!&quot;</span></span><br><span class="line">System.exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inputArgs.count(folderPath) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">println <span class="string">&quot;all folders cannot be same!&quot;</span></span><br><span class="line">System.exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">println folderPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// octopress 文章目录</span></span><br><span class="line"><span class="keyword">def</span> octoFolderPath = inputArgs[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 输出路径</span></span><br><span class="line"><span class="keyword">def</span> outputFolderPath = inputArgs[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> mdList = <span class="keyword">new</span> File(octoFolderPath).listFiles(</span><br><span class="line">[<span class="attr">accept:</span>&#123;dir, fileName -&gt; fileName ==~ <span class="string">&quot;^.*\\.(markdown|md)\$&quot;</span> &#125;] <span class="keyword">as</span> FilenameFilter</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mdList.each &#123; file -&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> titleFormat = <span class="string">&quot;&quot;&quot;title: %s</span></span><br><span class="line"><span class="string">date: %s</span></span><br><span class="line"><span class="string">tags: [%s]</span></span><br><span class="line"><span class="string">---&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringBuffer ret = <span class="keyword">new</span> StringBuffer()</span><br><span class="line"><span class="keyword">def</span> newFile = <span class="keyword">new</span> File(outputFolderPath + <span class="string">&quot;/&quot;</span> + file.getName())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> titleMap = [:]</span><br><span class="line"><span class="keyword">def</span> breakCount = <span class="number">0</span></span><br><span class="line">file.withReader &#123; reader -&gt;</span><br><span class="line">reader.eachLine &#123; line -&gt;</span><br><span class="line"><span class="keyword">if</span>(breakCount == <span class="number">2</span>) &#123;</span><br><span class="line">ret.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">ret.append(line)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(breakCount &lt; <span class="number">2</span> &amp;&amp; !line.contains(<span class="string">&quot;---&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span>(line.indexOf(<span class="string">&quot;:&quot;</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">def</span> key = line.substring(<span class="number">0</span>, line.indexOf(<span class="string">&quot;:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (key.equals(<span class="string">&quot;categories&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">def</span> temp = line.substring(line.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>, line.length()).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>).trim().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">titleMap.put(key, String.join(<span class="string">&quot;,&quot;</span>, temp))</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.equals(<span class="string">&quot;title&quot;</span>)) &#123;</span><br><span class="line">titleMap.put(key, line.substring(line.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>, line.length()).replaceAll(<span class="string">&quot;\\[&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;\\]&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">titleMap.put(key, line.substring(line.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>, line.length()).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((breakCount == <span class="number">0</span> || breakCount == <span class="number">1</span>) &amp;&amp; line.equals(<span class="string">&quot;---&quot;</span>)) &#123;</span><br><span class="line">breakCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println titleMap</span><br><span class="line">newFile.write((String.format(titleFormat, titleMap[<span class="string">&quot;title&quot;</span>], titleMap[<span class="string">&quot;date&quot;</span>], titleMap[<span class="string">&quot;categories&quot;</span>])) + ret.toString(), <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> pringHelp() &#123;</span><br><span class="line">print <span class="string">&quot;usage : groovy Octo2Hexo.groovy octoFolderPath outputFolderPath&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-结语"><a href="#3-结语" class="headerlink" title="3. 结语"></a>3. 结语</h3><p>Groovy有很多很亮的特性，使得它可以成为和Java共用的语言，这也是我为什么要选择Groovy作为JVM脚本语言入门的最大的理由（最为对比，另一个是Scala），他的语法和Java很像，本来用Java实现的逻辑可以用Groovy更简短的语句实现。Groovy和Java之间的相互调用也是很方便的。</p><p>希望在自己接触的项目中可以很快用上Groovy。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Groovy </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate的load和get比较</title>
      <link href="2020/10/23/2013-05-16-hibernate-load-get-compare/"/>
      <url>2020/10/23/2013-05-16-hibernate-load-get-compare/</url>
      
        <content type="html"><![CDATA[<div><strong>get和load的实现</strong></div><div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;load event(产生) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;onLoad Event</div><div>&nbsp; &nbsp; &nbsp;&nbsp;Hibernate&nbsp;--------------------&gt;LoadEventListener---------------&gt;event<strong>①</strong>------&gt;return event-----&gt;getResult()</div><div>&nbsp; &nbsp;<strong>&nbsp;其中：①</strong>:------&gt;setResult(event.session(查找))</div></div><p><span style="background-color: #ffffff;"><strong>未使用二级缓存</strong> <strong></strong>&nbsp;</span> &nbsp;&nbsp;</p><p>load 先从缓存（一级）中查找，如果没有查询结果，就到数据库中查找，不管查询结果如何，都返回XX_$$_javassist_0对象（代理类实例）。</p><p><span id="more"></span></p><p>当在数据库中查询结果为空时，&nbsp;生成代理类实例&nbsp;的ID为load的ID（既session.load(XX.class,id)，这个id）,其他属性为空。获取load的对象的属性，会抛出异常org.hibernate.ObjectNotFoundException: No row with the given identifier exists...获取ID则会返回查询的ID。</p><p>load是延迟加载，返回持久化对象或者代理实例，首先返回的是代理实例，在真正使用到对象（比如Person.getName()）的时候才会到数据库里去查询，这样提高效率。</p><p>get 先从缓存（二级）中查找，如果没有查询结果，就到数据库中查找，返回XX对象，如果为空就返回null。 get是直接去查询对象，返回持久化对象或者null。</p><p><strong>使用二级缓存</strong></p><div>首先知道一级，二级缓存的生命周期。一级缓存存活于同一个session中，而二级缓存存活于整个应用中。&nbsp; &nbsp;</div><div>二级缓存需要手动配置的。</div><div><div>load和get都是先从一级缓存中查找，如果没有查询结果，就到二级缓存中查找。</div><div>测试时先将第一个session.close()，然后再开一个session(sessionFactory.operSession())。</div>&nbsp;<div>测试代码：</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    session.beginTransaction();</span><br><span class="line">    person = (Person) session.load(Person.class, id);</span><br><span class="line">    System.out.println(person.getName());</span><br><span class="line"></span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line">    session.close();</span><br><span class="line">    session = sessionFactory.openSession();</span><br><span class="line">    person = <span class="keyword">null</span>;</span><br><span class="line">    person = (Person) session.load(Person.class, id);</span><br><span class="line">    System.out.println(person.getName()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript执行window.print()打印内容为空白</title>
      <link href="2020/10/08/2016-10-08-js-window-print-blank/"/>
      <url>2020/10/08/2016-10-08-js-window-print-blank/</url>
      
        <content type="html"><![CDATA[<p>今天写代码的时候，需要用到打印页面的功能，按理说只要很简单的一段js代码就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.print();</span><br></pre></td></tr></table></figure><p>但是很奇怪，怎么执行，要打印的页面内容都是空白！</p><p>于是一步一步分析，终于找到了罪魁祸首的代码片段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">    <span class="selector-tag">body</span> * &#123;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 CSS 的作用就是当媒体类型为 print 的时候，body 里面所有元素都采用样式 “**visibility: hidden;<strong>”，所以解决这个问题是<br>把 “</strong>visibility: hidden;**” 去掉就可以了。</p><p>但是这里有两点可以说：</p><ol><li>写代码的时候，一个模块的功能不能影响到全局，这是谨慎也是需要第一位考虑的做法；</li><li>CSS 的 Media Type</li></ol><h3 id="Media-Type"><a href="#Media-Type" class="headerlink" title="Media Type"></a>Media Type</h3><h4 id="Media-Type-种类"><a href="#Media-Type-种类" class="headerlink" title="Media Type 种类"></a>Media Type 种类</h4><p><strong>Media Type</strong> 直译过来就是<strong>媒体类型</strong>，这是CSS2引入的属性，可以通过 <strong>@media</strong> 等方式给不同的媒体类型定义不同的CSS样式规则。上面讲到的，我在<strong>打印</strong>页面的时候，所处的媒体类型就是 <strong>print</strong>，一般我们在浏览网页的时候，媒体类型是 <strong>screen</strong>，W3C给出的媒体类型有以下十种（<strong>注意，名字是大小写敏感的</strong>）：</p><ol><li><strong>all</strong><br>适用于所有设备。</li><li><strong>braille</strong><br>用于盲文触觉反馈设备。</li><li><strong>embossed</strong><br>用于分页盲文打印机。</li><li><strong>handheld</strong><br>用于手持设备（通常是指有限带宽的小屏设备）。</li><li><strong>print</strong><br>用于分页材料和打印预览模式下在屏幕上查看的文档。</li><li><strong>projection</strong><br>用于投影机。</li><li><strong>screen</strong><br>主要用于彩色计算机屏幕。</li><li><strong>speech</strong><br>用于语音合成设备。</li><li><strong>tty</strong><br>适用于使用固定间距字符网格（如电传打字机，终端，或具有有限显示能力的便携式设备）的媒体。在“tty”类型中不应该使用像素单元。</li><li><strong>tv</strong><br>用于电视类设备（分辨率低，彩色，有限可滚动屏幕，有声音的）。</li></ol><h4 id="Media-Type-引入方式"><a href="#Media-Type-引入方式" class="headerlink" title="Media Type 引入方式"></a>Media Type 引入方式</h4><p>Media Type 有多种引入方式。</p><ol><li><p>@media方式引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print&#123;</span><br><span class="line">  <span class="selector-tag">body</span> * &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这种方式在 CSS 文件中 和 style 标签里都可以使用。</p></li><li><p>@import方式引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;css/print.css&quot;</span>) print;</span><br></pre></td></tr></table></figure><p> 和上一种一样，这种方式在 CSS 文件中 和 style 标签里都可以使用。</p></li><li><p>link方法引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/print.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>xml方式引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml-stylesheet rel=&quot;stylesheet&quot; media=&quot;screen&quot; href=&quot;css/style.css&quot; ？&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github、Travis-CI和Coding.net自动部署博客［二］</title>
      <link href="2020/10/05/2016-10-05-blog-with-github-travis-ci-and-coding-net-2/"/>
      <url>2020/10/05/2016-10-05-blog-with-github-travis-ci-and-coding-net-2/</url>
      
        <content type="html"><![CDATA[<p>接着<a href="/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/">第一篇</a>讲。</p><p>在确保注册 Travis CI 和已经安装了 <strong>Travis CI Command Line Client</strong> 之后，我们现在开始进行 Travis CI 相关的配置。</p><h3 id="添加-Travis-CI-配置文件"><a href="#添加-Travis-CI-配置文件" class="headerlink" title="添加 Travis CI 配置文件"></a>添加 Travis CI 配置文件</h3><p>在博客根目录下添加 Travis CI 所需要的配置文件 <strong>.travis.yml</strong>，配置文件内容和一些说明如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;5.11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">apt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> <span class="string">git.coding.net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="个别说明"><a href="#个别说明" class="headerlink" title="个别说明"></a>个别说明</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;5.11&quot;</span></span><br></pre></td></tr></table></figure><p>使用5.11版本的nodejs，具体在你本地控制台下使用 node -v 查看版本；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> <span class="string">git.coding.net</span></span><br></pre></td></tr></table></figure><p>我是将代码部署到 Coding.net 上，所以配 git.coding.net，如果是部署到github 上，则配置为 github.com；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br></pre></td></tr></table></figure><p>这个配置表示让 Travis CI 依次执行 hexo clean 和 hexo generate 命令</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>告诉 Travis CI 只监听 master 分支的变化，如果你的源码没有放在 master 分支，则做相应改变；</p><p>好了，其他没有说明的配置项则照抄。</p><p>写完以后，我们要使用 Travis CI Command Line 进行验证，看看配置文件有没有问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis lint .travis.yml</span><br></pre></td></tr></table></figure><p>出现以下反馈则说明没有问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hooray, .travis.yml looks valid :)</span><br></pre></td></tr></table></figure><h3 id="生成私钥加密文件"><a href="#生成私钥加密文件" class="headerlink" title="生成私钥加密文件"></a>生成私钥加密文件</h3><h4 id="什么是私钥？"><a href="#什么是私钥？" class="headerlink" title="什么是私钥？"></a>什么是私钥？</h4><p>私钥就是密钥对（密钥对指一对<strong>公钥</strong>和<strong>私钥</strong>），我们在使用 github 的时候，首先需要在 github 上配置<strong>公钥</strong>，这是最基础的。那么，存在我们本地的<strong>私钥</strong>就是你的个人身份标示，如果你的项目 git 地址配置的是 <strong><a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a>:username/projectname.git</strong>（相对的还有 <a href="https://github.com/username/projectname.git%EF%BC%89%EF%BC%8C">https://github.com/username/projectname.git），</a> 当你在对 Repository 在一些操作（比如 push 等），则需要私钥进行身份验证了（这是自动验证的，如果是使用 https 的配置，则需要提供用户名和密码）。</p><p>我们在 Travis CI 上自动部署代码，就牵扯到了 push 操作，那么就需要提供<strong>私钥</strong>了。</p><p>新手首先理所当然觉得直接讲私钥放在项目里不就可以了吗？</p><p>你们啊，乃衣服！</p><h4 id="为什么生成私钥加密文件？"><a href="#为什么生成私钥加密文件？" class="headerlink" title="为什么生成私钥加密文件？"></a>为什么生成私钥加密文件？</h4><p>将私钥直接放在项目里，那么人人都能看到。<strong>私钥</strong>的泄露将会发生一系列的问题，比如有坏人拿你的私钥直接操作你的 git 项目，你能干啥他也能干啥（原理上面讲了），这咋整？我们需要对<strong>私钥</strong>进行加密。</p><p>Travis 提供了加密文件的支持，什么意思呢？我们可以对文件（这里指私钥）在本地进行加密，然后把加密过后的文件放在项目里，那么别人就无法获取里面的真实内容。然后我们在让 Travis 执行脚本的时候，在读取加密文件之前对文件进行解密（使用的解密密码提前在 Travis 上配置好了），这样就可以达到不将文件内容暴露，并且让 Travis 获取到真实内容的目的了，大概的时序图如下：</p><p><img src="http://githubimg.wxio.club/image/jpegTravisEncFileSequenceDiagram.jpg" alt="Travis文件加密" title="Travis文件加密"></p><h4 id="Travis-文件加密"><a href="#Travis-文件加密" class="headerlink" title="Travis 文件加密"></a>Travis 文件加密</h4><p>那么现在开始进行文件的加密（主要是私钥的加密），首先看看前提（这里我直接翻译官方的说明）。</p><ul><li>你的仓库已经在 Travis CI 上建立（在<a href="/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/">前一篇</a>已经讲过，如果你照做的话）</li><li>已经安装 Travis CI Command Line Client，并且已经<strong>登陆</strong>（在<a href="/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/">前一篇</a>已经讲过）</li></ul><p>其实很简单，把私钥<strong>拷贝</strong>（不要删除原来的）到博客<strong>根目录</strong>下（之后会删除），然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt-file id_rsa</span><br></pre></td></tr></table></figure><p>id_rsa 是私钥文件，执行后博客根目录下会生成 id_rsa.enc 文件，这是加密过后的文件，会上传到 GitHub 上，使用它需要先进行解密。把这个加密后的文件放到博客根目录的 .travis 文件夹下（没有的话创建）后面用，别忘了删除 id_rsa 文件。 </p><p>之后登录 Travis CI 中 repositry 的 Settings 界面：</p><p><img src="http://githubimg.wxio.club/blog/blog-with-github-travis-ci-and-coding-net/travis-ci-key.png" alt="Settings" title="Settings"></p><p>Travis CI 会给我们自动生成两个环境变量–两个 key，这两个 key 是对私钥加密文件进行解密的用的。</p><h3 id="提交配置"><a href="#提交配置" class="headerlink" title="提交配置"></a>提交配置</h3><p>完成以上后，可以将代码提交到 GitHub 上，这样 Travis CI 就会触发任务，如果在 Travis CI 的 Job Log 里最后的 log 是以下则说明执行成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Done. Your build exited with 0.</span><br></pre></td></tr></table></figure><p>但是这还没有部署到 Coding.net （或者 github.com ）上，这需要编写 deploy 相关脚本。</p><p>好了，第二篇就差不多了，在最后一篇将讲编写部署脚本。</p><p><em>未完待续，还有第三篇。</em></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> travis </tag>
            
            <tag> coding.net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寓食记</title>
      <link href="2020/10/01/2016-10-01-yushiji/"/>
      <url>2020/10/01/2016-10-01-yushiji/</url>
      
        <content type="html"><![CDATA[<p>以前在看美食公众号的时候，总觉得是小县城餐馆的风格，进去就是菜谱，选图也颇山寨，更可怕的是这种美食公众号的内容都是千篇一律，指不定多看几个公众号的内容就能找到相同的。也可能是因为大多数人对美食媒体的认识都局限在“<strong>菜谱</strong>”这一层面的缘故吧，想突破总觉得没有理由。</p><p>直到我朋友给我推荐了－－<strong>寓食记</strong>。</p><p><img src="http://githubimg.wxio.club/image/jpg/yushiji/qrcode_for_yushiji.jpg" alt="寓食记" title="寓食记"></p><p><strong>寓食记</strong>的内容很文艺，或者说是最近的内容偏文艺，它首先会突出“故事”，再进入菜品的制作步骤，最重要的是每个故事都能使你很快融入这道菜的意境。</p><p>发现一个有内容的公众号可能越来越难了，再加上最近微信公众号的刷量工具出问题，导致很多公众号的真实阅读量被曝光，有的公众号刷的量快到100%了，可想大部分阅读一片繁荣的景象这得多假。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github、Travis-CI和Coding.net自动部署博客［一］</title>
      <link href="2020/09/20/2016-09-20-blog-with-github-travis-ci-and-coding-net-1/"/>
      <url>2020/09/20/2016-09-20-blog-with-github-travis-ci-and-coding-net-1/</url>
      
        <content type="html"><![CDATA[<p>在从前，我在本地写一篇文章后要将它不熟到服务器并且提交源码，需要这么几个步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean &amp;&amp; hexo deploy // 我的博客是用hexo构建的，其他的静态博客构件工具还有jekyll等</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;xxxx&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin <span class="built_in">source</span> // 保存博客源码</span></span><br></pre></td></tr></table></figure><p>这里主要做了两个操作，而这两个操作又是 <strong>捆绑</strong> 的，什么意思呢？就是每次写一篇文章我 <strong>都要</strong> 在本地执行进行部署，<strong>并且</strong>提交源码，这是很费劲的。</p><p>我可不可以像代码开发一样，在本地写完代码，然后提交代码，就这么结束了？当然可以了！</p><p>下面开始一步一步的讲解，过程虽然有些繁琐，但是记住这种事情只要做一次，正可谓功在当代，利在千秋啊！</p><h2 id="持续集成（CI）"><a href="#持续集成（CI）" class="headerlink" title="持续集成（CI）"></a>持续集成（CI）</h2><p>来到新公司，接触到了**<a href="http://baike.baidu.com/view/5253255.htm">持续集成（CI）</a>**的概念，提供 CI 的开源工具有 Jenkins，但是我总不能自己跑个机器来运行 Jenkins 对我的博客源码变化进行监控吧？那么，就想到了有没有开源、免费的、提供 CI 功能的在线工具服务呢？当然有，<a href="https://travis-ci.org/"><strong>Travis CI</strong></a> 是目前比较火的开源持续集成构建工具，而且它对github的集成支持非常好。</p><h2 id="怎么自动部署"><a href="#怎么自动部署" class="headerlink" title="怎么自动部署"></a>怎么自动部署</h2><p>那么，具体是怎么个自动部署法？这是时序图：</p><p><img src="http://githubimg.wxio.club/blog-with-github-travis-ci-SequenceDiagram.jpg" alt="自动部署是时序图" title="自动部署时序图"></p><ol><li>创建文章；</li><li>将代码 push 到远程仓库，这里是 Github；</li><li>Github 调用 Travis 的 webhook，关于什么是 webhook，这里不具体说明了，大体上就是一个链接，Travis 在 Github 上配置以后，Github 每发生一些事件（就比如我这里的 push）就会掉用访问这个链接以<strong>起到通知 Travis 的作用</strong>；</li><li>Travis 从 github 获取代码；</li><li>Travis build 代码；</li><li>Travis 部署博客到 Coding.net。</li></ol><p>可以看到，在本地只需要执行两步操作，剩下的我完全不用管。</p><p>最右边的 <strong><a href="https://coding.net/">Coding.net</a></strong> 是我用来部署博客的，它是类似  Github 的代码托管，并且也提供 pages 的服务，最关键的一点是它是<strong>中国本地</strong>的。最开始我部署在 Github 上，但是由于国内访问实在太慢而且不稳定，所以就选择了 **<a href="https://coding.net/">Coding.net</a>**。</p><p>下一篇将会着重讲 Travis CI 的配置和使用，在这之前先得注册 Travis CI 和安装一个 Travis 官方提供的命令行工具 <strong>Travis CI Command Line Client</strong>，它可以快捷地使用一些功能，比如生成 Travis 的加密文件等。</p><h2 id="注册-Travis-CI"><a href="#注册-Travis-CI" class="headerlink" title="注册 Travis CI"></a>注册 Travis CI</h2><p>Travis CI 不需要单独注册，直接使用 GitHub 账号登录就可以了。</p><p>上官网会发现有 Sign in with GitHub（使用GitHUb登录）和 Sign Up（注册），其实这俩做的事情都一样，就是用 GitHub 账号登录。</p><p>登录后界面会显示你的 GitHub repository，默认全部全部没有勾选（“叉号”），选择你的博客的 repository（使之变成“对号”） 后完成第一步，如图：</p><p><img src="http://githubimg.wxio.club/blog/blog-with-github-travis-ci-and-coding-net/travis-sign-in.png" alt="注册Travis CI" title="注册Travis CI"></p><p>接下来是添加配置文件 .travis.yml 和 进行第一次 push 代码触发工作，这两部再下一篇再讲。</p><h2 id="安装-Travis-CI-Command-Line-Client"><a href="#安装-Travis-CI-Command-Line-Client" class="headerlink" title="安装 Travis CI Command Line Client"></a>安装 Travis CI Command Line Client</h2><p>以下的安装教程是我直接翻译的<a href="https://github.com/travis-ci/travis.rb#installation">官方安装说明</a>。</p><p>请确保本地已经安装**<a href="http://www.ruby-lang.org/en/downloads/">Ruby</a>**，并且版本不低于1.9.3，推荐2.0.0版。</p><p>可以通过执行以下命令验证 Ruby 的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br><span class="line">ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-darwin12.3.0]</span><br></pre></td></tr></table></figure><p>然后执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install travis -v 1.8.2 --no-rdoc --no-ri</span><br></pre></td></tr></table></figure><p>最后验证一下是否安装成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ travis version</span><br><span class="line">1.8.2</span><br></pre></td></tr></table></figure><p>如上，如果出现 1.8.2 这样的版本信息，则说明 Travis CI Command Line Client 安装成功。之后进行登录，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br></pre></td></tr></table></figure><p>按照提示依次输入用户名、密码，Two-factor码（如果你有设置的话），以下是登录成功的反馈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br><span class="line">We need your GitHub login to identify you.</span><br><span class="line">This information will not be sent to Travis CI, only to api.github.com.</span><br><span class="line">The password will not be displayed.</span><br><span class="line"></span><br><span class="line">Try running with --github-token or --auto if you don&#39;t want to enter your password anyway.</span><br><span class="line"></span><br><span class="line">Username: henryhuang</span><br><span class="line">Password for henryhuang: *************</span><br><span class="line">Two-factor authentication code for henryhuang: 403317</span><br><span class="line">Successfully logged in as henryhuang!</span><br></pre></td></tr></table></figure><p>使用 <strong>gem</strong> 需要安装 <strong>ruby 环境</strong>，作为一个开发人员，不要嫌麻烦。</p><p><em>未完待续，还有第二篇。</em></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> travis </tag>
            
            <tag> coding.net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i18next</title>
      <link href="2020/08/28/2017-08-28-i18next/"/>
      <url>2020/08/28/2017-08-28-i18next/</url>
      
        <content type="html"><![CDATA[<p>I18next 是一款用JavaScript编写的国际化框架。</p><h3 id="为什么需要国际化"><a href="#为什么需要国际化" class="headerlink" title="为什么需要国际化"></a>为什么需要国际化</h3><p>一般在编写网站的时候，网页需要向用户展现一些文字，假如你的网站完全面向中国用户，那么你可以把网页里的内容写成中文。但是如果你还要面向英文用户，那么你就不能直接把内容写成中文了，你的网站需要国际化。你需要使用一些技术来让程序自动切换内容的显示，网页的总体结构是不变的，但是内容需要随着用户的改变而改变。</p><p>但是可能有人会说，各准备一个英文和一个中文的网页不就可以了吗？那么请问以后再出现法文，葡萄牙文，西班牙文的需求呢？这种需求其实很常见，比如ebay.com，它面向不同国家有不同的显示，甚至在一个国家还有多种显示（比如加拿大，分为加拿大英语区和加拿大法语区）。如果针对一种语言准备一套网站，那将是大大的代码冗余和资源的浪费。</p><h3 id="为什么使用i18next"><a href="#为什么使用i18next" class="headerlink" title="为什么使用i18next"></a>为什么使用i18next</h3><p>I18next提供了JavaScript开发中能想到的所有关于i18n的需求，它提供了一个完整的解决方案，不管是本地客户端还是服务端，移动端Web还是桌面端Web。当然，它不仅仅可以用在JavaScript平台，它还能用在其他平台，比如php，ios等。</p><p>以下是官方的一段话：</p><blockquote><p>Learn once - use everywhere. The community made integrations for frameworks like react.js, angular.js, vue.js and many more. But this is not where it ends…you can use i18next with node.js, php, ios, android and other platforms.</p></blockquote><blockquote><p>I18next reached not only the web, but also mobile and desktop development.</p></blockquote><p>翻译过来大概意思是：它的社区已经将i18next和react.js，angular.js，vue.js等热门的框架集成，而且你能在Node.js，php，ios，android等平台上使用，除了Web端，你还能在手机端桌面端的开发中使用。</p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># yarn</span><br><span class="line">$ yarn add i18next</span><br><span class="line"></span><br><span class="line"># npm</span><br><span class="line">$ npm install i18next --save</span><br><span class="line"></span><br><span class="line"># bower</span><br><span class="line">$ bower install i18next</span><br></pre></td></tr></table></figure><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>这里直接修改自官网的Hello World：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i18next = <span class="built_in">require</span>(<span class="string">&#x27;i18next&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  lng: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  resources: &#123;</span><br><span class="line">    en: &#123;</span><br><span class="line">      translation: &#123;</span><br><span class="line">        <span class="string">&quot;hello-world&quot;</span>: <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err, t</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;hello-world&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i18next.init(option, callback);</span><br></pre></td></tr></table></figure><p>执行过后会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">Hello world!</span><br><span class="line">Done in 0.18s.</span><br></pre></td></tr></table></figure><p>这里调用的是 i18next 的 init() api 进行初始化，init()需要传入两个参数option和callback函数。</p><p>在 callback 函数中, <strong>i18next.t(‘hello-world’)</strong> 就是键 ‘hello-world’ 所对应值 ‘Hello world!’。</p><p>在 option 中，lng 表示当前采用的是 en 语言所对应的资源，而 resources 就是资源配置。那么，如果想输出中文呢？很简单，只要在 resources 中加入对应语言的键值对即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i18next = <span class="built_in">require</span>(<span class="string">&#x27;i18next&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  lng: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">  resources: &#123;</span><br><span class="line">    en: &#123;</span><br><span class="line">      translation: &#123;</span><br><span class="line">        <span class="string">&quot;hello-world&quot;</span>: <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    zh_CN: &#123;</span><br><span class="line">      translation: &#123;</span><br><span class="line">        <span class="string">&quot;hello-world&quot;</span>: <span class="string">&quot;你好世界！&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err, t</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;hello-world&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i18next.init(option, callback);</span><br></pre></td></tr></table></figure><p>再将 option.lng 改为 ‘zh_CN’，这样执行后输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">你好世界！</span><br><span class="line">Done in 0.18s.</span><br></pre></td></tr></table></figure><p>最基本的国际化方案就是这么简单，实际应用中会根据用户的某些国家属性来决定使用哪套资源，举个例子，用eBay来说，假如用户直接访问 <a href="http://www.ebay.com,系统会默认显示英文,假如用户访问www.ebay.ch,看上去整个网页的结构布局和/">www.ebay.com，系统会默认显示英文，假如用户访问www.ebay.ch，看上去整个网页的结构布局和</a> <a href="http://www.ebay.com/">www.ebay.com</a> 一样，只不过语言变成了德文，这里就是根据域名的不同来选择不同的服务器，而不同的服务器实际上运行的是一套代码。</p><p>当然还可以根据用户所在国家自动显示不同的语言，在这里就不多说了。</p><p>以上代码完整的项目地址是 <a href="https://github.com/henryhuang/i18next-samples/tree/master/i18next-basic-sample">https://github.com/henryhuang/i18next-samples/tree/master/i18next-basic-sample</a> .</p><h3 id="结合-Express-使用"><a href="#结合-Express-使用" class="headerlink" title="结合 Express 使用"></a>结合 Express 使用</h3><p>主要的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 i18next</span></span><br><span class="line">i18n.use(i18nMiddleware.LanguageDetector).use(i18nFsBackend).init(&#123;</span><br><span class="line">  lng: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  preload: [</span><br><span class="line">    <span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;zh-CN&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  backend: &#123;</span><br><span class="line">    loadPath: path.resolve(__dirname, <span class="string">&#x27;./lang/&#123;&#123;lng&#125;&#125;/translation.json&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">app.use(i18nMiddleware.handle(i18n));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/lang/:lang&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.cookie(<span class="string">&#x27;i18next&#x27;</span>, req.params.lang);</span><br><span class="line">  res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整的项目代码在这里 <a href="https://github.com/henryhuang/i18next-samples/tree/master/i18next-express-sample">https://github.com/henryhuang/i18next-samples/tree/master/i18next-express-sample</a> .</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> express </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LESS学习</title>
      <link href="2020/08/10/2013-08-10-learn-less/"/>
      <url>2020/08/10/2013-08-10-learn-less/</url>
      
        <content type="html"><![CDATA[<p>今天下午没事学了一下less，发现用来写样式表真是方便。</p><h3 id="1-什么是LESS"><a href="#1-什么是LESS" class="headerlink" title="1. 什么是LESS"></a>1. 什么是LESS</h3><p>LESS是一种动态样式语言，属于CSS预处理语言的一种，它使用类似CSS的语法，为CSS的赋予了动态语言的特性，如变量、继承、运算、函数等，更方便CSS的编写和维护。</p><p>LESS可以在多种语言、环境中使用，包括浏览器端、桌面客户端、服务端。</p><p>LESS的很多特性，其实对于一个有编程思想的人来看其实很简单，在这就不列举了。</p><p>详细的LESS学习传送门：<a href="http://www.lesscss.net/article/document.html">http://www.lesscss.net/article/document.html</a></p><h3 id="2-JavaScript求值"><a href="#2-JavaScript求值" class="headerlink" title="2. JavaScript求值"></a>2. JavaScript求值</h3><p>最让我觉得兴奋的是，LESS可以支持JavaScript求值，想想以后写一个页面，需要由浏览器的大小来决定某个元素的大小，那是相当方便呀：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@divColor: black;</span><br><span class="line">@windowWidth: `document.body.clientWidth`;</span><br><span class="line">@windowHeight: `document.body.clientHeight`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: @windowWidth;</span><br><span class="line">    <span class="attribute">height</span>: @windowHeight;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> @divColor solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><p>需要注意的是，less.js的引入需要放到文档的最后，否则会报错:SyntaxError: JavaScript evaluation error: ‘TypeError: document.body is null’</p>]]></content>
      
      
      <categories>
          
          <category> 三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> it </tag>
            
            <tag> less </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA中判断日期是上午还是下午</title>
      <link href="2020/08/01/2013-08-01-java-date-am-or-pm/"/>
      <url>2020/08/01/2013-08-01-java-date-am-or-pm/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GregorianCalendar cal = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">System.out.println((cal.get(GregorianCalendar.AM_PM) == GregorianCalendar.PM)? <span class="string">&quot;下午&quot;</span> : <span class="string">&quot;上午&quot;</span>);</span><br></pre></td></tr></table></figure><p>当然，通过GregorianCalendar.get()还可以获取更多的信息。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> date </tag>
            
            <tag> it </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误排查：非ROOT用户使用密钥进行ssh登录提示输入密码</title>
      <link href="2020/07/07/2017-07-07-non-root-user-config-for-ssh-key-login/"/>
      <url>2020/07/07/2017-07-07-non-root-user-config-for-ssh-key-login/</url>
      
        <content type="html"><![CDATA[<p>由于个人的需要，需要搭建一个私有的git服务器，当然还需要有完善的操作界面，综合下来，我选择了<strong>Gogs</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问：为什么不用GitHub呢？</span><br><span class="line">答：我们不想让别人看到我们的代码。</span><br><span class="line">问：GitHub有private的呀！</span><br><span class="line">答：那要钱，我们没钱。。。</span><br></pre></td></tr></table></figure><p>很顺序按照官网的步骤一步一步搭建完成了（其实早就用过了，这是第N次的搭建），然后另一个人上传了代码（注意这是通过http的方式的），于是我去下载。</p><p>我不喜欢用http的方式，因为要输入密码，而且也不安全，所以一直保持着使用ssh的方式。首先我配置了个人的公钥，但是执行<strong>git clone</strong>以后一直都提示我输入密码！</p><p>于是我就开始了一步一步排查！</p><h3 id="客户端私钥配置"><a href="#客户端私钥配置" class="headerlink" title="客户端私钥配置"></a>客户端私钥配置</h3><p>一般情况下，ssh 会拿 <strong>~/.ssh/id_rsa</strong> 去连接，但是如果多个密钥对连接不同的域名的话，就需要在 <strong>~/.ssh/config</strong> 里进行指定域名的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">host &#123;&#123;domain&#125;&#125;</span><br><span class="line">user git</span><br><span class="line">hostname &#123;&#123;domian&#125;&#125;</span><br><span class="line">port 22</span><br><span class="line">identityfile ~&#x2F;.ssh&#x2F;id_rsa_2</span><br></pre></td></tr></table></figure><p>这里的 <strong>~/.ssh/id_rsa_2</strong> 就是我配置在 Gogs 的公钥所对应的私钥，这样我进行 <strong>git clone git@domian:username/repo.git</strong> 的时候就会去拿 <strong>~/.ssh/id_rsa_2</strong> 了。</p><h3 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h3><p>首先确认了一下，以下文件和文件夹都是属于 Gogs 的运行用户和用户组（git:git）的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;home&#x2F;git&#x2F;.ssh</span><br><span class="line">&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>我们使用 ssh 的方式 clone repository, 其实所使用的 ssh 用户 是 git，git用户相对于系统的root用户就是个非root用户了。</p><p>ssh对于非root用户的密钥限制是非常严格的，它不允许以上的文件夹和文件有太大的权限，.ssh只需要700，而authorized_keys只需要600。执行以下命令确认权限问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 /home/git/.ssh</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>可是，再运行 git clone 还是提示需要密码！</p><h3 id="sshd-config配置问题"><a href="#sshd-config配置问题" class="headerlink" title="sshd_config配置问题"></a>sshd_config配置问题</h3><p>首先打开日志进行错误跟踪：</p><blockquote><p>注意先把 <strong>/etc/ssh/sshd_config</strong> 的 <strong>LogLevel</strong> 改成 <strong>DEBUG</strong>，不然看不到debug级别的日志。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/auth.log</span><br></pre></td></tr></table></figure><p>然后在客户端执行 git clone 命令，看到了 /var/log/auth.log里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: temporarily_use_uid: 1003&#x2F;1003 (e&#x3D;0&#x2F;0)</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: trying public key file &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: Could not open authorized keys &#39;&#x2F;root&#x2F;.ssh&#x2F;authorized_keys&#39;: Permission denied</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: restore_uid: 0&#x2F;0</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: Failed publickey for git from 180.158.160.234 port 50987 ssh2: RSA ......</span><br></pre></td></tr></table></figure><p>上面的这一条引起了注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: Could not open authorized keys &#39;&#x2F;root&#x2F;.ssh&#x2F;authorized_keys&#39;: Permission denied</span><br></pre></td></tr></table></figure><p>很奇怪ssh为什么去读root用户的authorized_keys，而不是git用户的。</p><p>于是打开 <strong>/etc/ssh/sshd_config</strong>，找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthorizedKeysFile      ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>这里错了，应该是 <strong>.ssh/authorized_keys</strong>！改完以后是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthorizedKeysFile      .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>如果是 <strong>~/.ssh/authorized_keys</strong> ，那么ssh就去拿了 <strong>/root/.ssh/authorized_keys</strong>，而不是所请求的用户（git）的 <strong>~/.ssh/authorized_keys</strong> 了，为什么呢？这是我自己的理解：首先ssh在获取到了请求用户的用户名后（使用git clone的话一般是git用户），然后ssh就会设置当前目录在git用户的home目录下，如果配置 <strong>.ssh/authorized_keys</strong> ，就能拿到 git 用户所需要的 <strong>authorized_keys</strong> 了，但是如果配置 <strong>~/.ssh/authorized_keys</strong>，则去拿了ssh service的执行者root用户的home下面的 <strong>.ssh/authorized_keys</strong> 了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般出现使用 ssh 的方式进行 git 远程操作（比如 git clone），出现需要密码的情况，或者配置了密钥进行 ssh 登录，但是还是需要密码的情况，可以先从以下三点进行错误排查：</p><ul><li>客户端私钥是否指定正确</li><li>非root用户的文件权限是否有问题</li><li>sshd_config配置是否有问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
            <tag> gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse创建Maven的Web工程</title>
      <link href="2020/06/29/2013-06-29-eclipse-maven-web-project/"/>
      <url>2020/06/29/2013-06-29-eclipse-maven-web-project/</url>
      
        <content type="html"><![CDATA[<p>折腾很长时间，终于弄出可以调试的了，遇到了很多问题，但是一步一步查资料，求助，终于弄出来了。</p><p>首先，因为Eclipse更新到了4.3Kepler，所以一开始我就下的它来使用，结果里面的maven插件包括了m2e-wtp，这实在让人头疼。按照步骤也算是整出来了一个，但是，在使用Server打开的时候，却总是找不到类，找了很多解决方法也没不好解决，说是Server读的class的位置和项目的class位置不一样类似的原因，于是我想是不是因为m2e-wtp创建的项目会有所特殊，需要特别配置什么的，找资料也找不到解决的方法，于是就想着不要这个插件了，刚好有Juno版本的包，就重新安装了。</p><p>安装Juno后，是按照这个老外的方法来创建项目的，挺详细的：<br><a href="http://fruzenshtein.com/setup-of-dynamic-web-project-using-maven/">http://fruzenshtein.com/setup-of-dynamic-web-project-using-maven/</a></p><p>但是在直接右键通过Server打开的时候，遇到了包查不到，那是因为没有将Maven的依赖包放到WEB-INF/lib下，于是找到了下面这篇文章来解决：<br><a href="http://www.micmiu.com/software/build/eclipse-maven-web-lib/">http://www.micmiu.com/software/build/eclipse-maven-web-lib/</a></p><p>最后遇到个问题，在需要执行jsp的时候，报无法解析jsp的错误，思前想后，找到原因：因为pom.xml里有依赖servlet和jsp，这两个虽然写的是部署的时候不加入，但是因为我直接将Maven的依赖放入lib下，这样就导致了冲突，所以就暂时也不将这两个相关的放到pom依赖里面了，最后成功解决。</p><p>虽然解决了，但是这毕竟不是正确地开发需要的方式，这只是小程序可以搞搞，但是在大项目有很多很多测试的时候，要解决就必须按照Maven的结构来了，那我想m2e-wtp才真正有他的优势吧。还有在原来的pom里有servlet和jsp的依赖，是为了代码里能使用到他们，但是在部署的时候是不需要的，所以采用直接不放到依赖里显然不是真正解决的方法。</p><p>待日后研究研究m2e-wtp。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wicket使用Link加JS的Confirm</title>
      <link href="2020/06/21/2013-06-21-wicket-link-confirm/"/>
      <url>2020/06/21/2013-06-21-wicket-link-confirm/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Link logoutLink = <span class="keyword">new</span> Link(LOGOUT_ID) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getUbSession().setLogin(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SimpleAttributeModifier sam = <span class="keyword">new</span> SimpleAttributeModifier(</span><br><span class="line">    <span class="string">&quot;onclick&quot;</span>,<span class="string">&quot;if(!confirm(&#x27;确定退出？&#x27;)) return false;&quot;</span>);</span><br><span class="line"></span><br><span class="line">logoutLink.add(sam);</span><br><span class="line">add(logoutLink);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Wicket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用EditorConfig</title>
      <link href="2020/06/21/2017-06-21-use-editorconfig/"/>
      <url>2020/06/21/2017-06-21-use-editorconfig/</url>
      
        <content type="html"><![CDATA[<p>使用不同编辑器，比如IDE（Eclipse，Intellij IDEA），又使用不同OS（Mac，Windows等），难免会碰到编码风格不一致的情况，那怎么办？</p><p>使用 <strong>EditorConfig</strong>！</p><h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><p>当你将代码推送到GitHub时，你可以避免Mac和Windows之间的<strong>换行符冲突</strong>，以及其他多人协作开发中遇到的事情。</p><h2 id="什么是EditorConfig？"><a href="#什么是EditorConfig？" class="headerlink" title="什么是EditorConfig？"></a>什么是EditorConfig？</h2><p>这段摘自官方网站。</p><p>EditorConfig帮助开发人员在不同的编辑器和IDE之间定义和维护一致的编码风格。 EditorConfig项目包括<strong>用于定义编码样式的文件格式</strong>和<strong>文本编辑器插件</strong>，使编辑器能够读取文件格式并遵守定义的样式。 EditorConfig文件易于阅读，可以使<strong>版本控制系统</strong>（Git等）保持良好的工作环境。</p><h2 id="示例配置文件"><a href="#示例配置文件" class="headerlink" title="示例配置文件"></a>示例配置文件</h2><p>EditorConfig的配置文件名称是 **.editorconfig **，将以下内容添加到此文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*]</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后当你打开一个文件时，EditorConfig插件将使文件的**换行符换成 LF **。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>1.在你的编辑器或者IDE中添加插件</p><p><a href="http://editorconfig.org/#download">http://editorconfig.org/#download</a></p><p>以上链接的eclipse插件需要从Eclipse Marketplace进行安装。如果没有Eclipse Marketplace入口，你可以使用<strong>https：//editorconfig-eclipse.github.io/repository</strong>进行安装。</p><p>2.将.editorconfig文件添加到项目的<strong>根目录</strong>（对于Windows用户：要在Windows资源管理器中创建.editorconfig文件，你需要创建一个名为**.editorconfig.**的文件，Windows资源管理器将自动重命名为.editorconfig）</p><p>并添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更多配置参见<a href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties%E3%80%82">https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties。</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>请注意，EditorConfig不仅可以避免换行冲突，还可以避免<strong>缩进样式，缩进大小，字符集等冲突</strong>。</p><p>对于git的autocrlf配置，这个博文<a href="https://github.com/cssmagic/blog/issues/22%E5%8F%AF%E8%83%BD%E5%AF%B9%E4%BD%A0%E6%9C%89%E7%94%A8%E3%80%82">https://github.com/cssmagic/blog/issues/22可能对你有用。</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
            <tag> IDE </tag>
            
            <tag> editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便说说应用的界面</title>
      <link href="2020/06/05/2013-06-05-say-about-app-ui-design/"/>
      <url>2020/06/05/2013-06-05-say-about-app-ui-design/</url>
      
        <content type="html"><![CDATA[<p>整天拿着手机没事，当然就是安装应用来玩玩。随着应用安装多了，总能感觉到不同公司对于应用的设计理念的不同，下面就以我个人的角度，还随便说说这些感想。</p><p>总的来说，我是比较喜欢网易的应用设计，而不是很喜欢腾讯的，甚至因为这一点，现在很少去用微信和手机QQ了，而新浪在我心目中就介于两者之间了。</p><h1 id="因为Android的标准"><a href="#因为Android的标准" class="headerlink" title="因为Android的标准"></a>因为Android的标准</h1><p>我用的是魅族MX2，从一拿到手就从不后悔，不管外界对Smartbar的评价如何，我坚信这种做法是对的。我可以感受到魅族在设计的时候考虑的有多深。对于Smartbar的解释网上已经有很多文章了。</p><p>网易的应用现在基本是按照Android的设计来，虽然在刚开始，网易新闻还是出现两排按键，但是现在不断地更新，已经体验到Smartbar真的Smart的地方了。</p><h3 id="网易新闻"><a href="#网易新闻" class="headerlink" title="网易新闻"></a>网易新闻</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/163_news.jpg" alt="网易新闻" title="网易新闻"></p><span id="more"></span><h3 id="网易音乐"><a href="#网易音乐" class="headerlink" title="网易音乐"></a>网易音乐</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/163_music.jpg" alt="网易音乐" title="网易音乐"></p><h3 id="Lofter"><a href="#Lofter" class="headerlink" title="Lofter"></a>Lofter</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/lofter.jpg" alt="Lofter" title="Lofter"></p><p>对于腾讯的产品，已经很长时间了，不对的更新，但是始终还是处于两排的状态，或许可以说是因为腾讯产品的使用人群多，需要按照使用多标准去设计，但是我觉得嘛，他们就是先设计iphone的，然后安卓就不去有针对性的设计，直接搬过来了。</p><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/wechat.jpg" alt="微信" title="微信"></p><h3 id="手机QQ"><a href="#手机QQ" class="headerlink" title="手机QQ"></a>手机QQ</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/phone_qq.jpg" alt="手机QQ" title="手机QQ"></p><p>当然，最好的还是谷歌，谷歌的产品应该算是标准了。但是因为天朝这个原因么，所以也不是经常去使用，自然就对他们的东西感情不是很深。</p><h3 id="谷歌地图"><a href="#谷歌地图" class="headerlink" title="谷歌地图"></a>谷歌地图</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/googl_map.jpg" alt="谷歌地图" title="谷歌地图"></p><h3 id="GooglePlus"><a href="#GooglePlus" class="headerlink" title="GooglePlus"></a>GooglePlus</h3><p><img src="http://githubimg.wxio.club/20130605_app_imgs/googleplus.jpg" alt="GooglePlus" title="GooglePlus"></p><p>还有很多很多的应用，就不细说了。。。</p>]]></content>
      
      
      <categories>
          
          <category> ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需要一个好的计划</title>
      <link href="2020/03/18/2013-03-18-need-a-list/"/>
      <url>2020/03/18/2013-03-18-need-a-list/</url>
      
        <content type="html"><![CDATA[<p>  总是断断续续的，这样不好啊。需要一个确切的学习计划，并且每天记录下来，近期需要好好制定一下。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端优化法则</title>
      <link href="2020/02/29/2016-02-29-rules-of-front-end-optimization/"/>
      <url>2020/02/29/2016-02-29-rules-of-front-end-optimization/</url>
      
        <content type="html"><![CDATA[<p>前两天被人问到前端的优化有哪些，我支支吾吾也只能说出两三条，表示很惭愧。</p><p>说到前端优化的必修课，那就是<a href="https://developer.yahoo.com/performance/rules.html">Yahoo的前端优化性能规则</a>，里面都是别人的经验总结，有 <strong>35</strong> 条之多，这是先分类在文章最后，之后会个别阐述我针对最初的 <strong>14</strong> 条，借鉴别人的翻译成果和我自己的解读。</p><span id="more"></span><h3 id="35条分类"><a href="#35条分类" class="headerlink" title="35条分类"></a>35条分类</h3><blockquote><p>标注 ＊ 号的是最初的14条</p></blockquote><ul><li>内容<ul><li>减少HTTP请求 * </li><li>减少DNS查询 *</li><li>避免重定向 *</li><li>Ajax缓存化 *</li><li>后载入组件</li><li>预先载入组件</li><li>减少DOM元素数量</li><li>跨域分离组件</li><li>最少化iframe</li><li>避免404错误</li></ul></li><li>服务端<ul><li>使用CDN（内容分布网络） *</li><li>增加过期时间或者可控制缓存的请求头 *</li><li>使用Gzip组件 *</li><li>配置ETags（实体标签） *</li><li>提前刷新缓冲区</li><li>Ajax请求使用Get方法</li><li>避免空的图片src</li></ul></li><li>Cookie<ul><li>减少Cookie大小</li><li>为组件使用无Cookie域</li></ul></li><li>CSS<ul><li>将样式放在顶部 *</li><li>避免使用CSS表达式 *</li><li>选择<link>而不要@import</li><li>避免过滤器</li></ul></li><li>JavaScript    <ul><li>将JS放在底部 *</li><li>使用外部的JS和CSS *</li><li>压缩JS和CSS *</li><li>去掉重复的脚本 *</li><li>最小化Dom读取</li><li>开发灵活的事件处理器</li></ul></li><li>图片<ul><li>优化图片</li><li>优化CSS Sprites（CSS精灵）</li><li>在HTML中不要缩放图片</li><li>制作小的和可缓存的favicon.ico</li></ul></li><li>移动<ul><li>组件维持在25kb以下</li><li>将组件放入复合的文档中</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次来北京</title>
      <link href="2020/02/26/2013-02-26-beijing-first-time/"/>
      <url>2020/02/26/2013-02-26-beijing-first-time/</url>
      
        <content type="html"><![CDATA[<p>由于工作出差，第一次来到北京，作为一个程序猿，也来吸一吸北京著名的空气。</p><p>没错，下车的第一感觉就让我感受到了北京的便宜交通，据说全程2块，不会上涨，好爽啊。</p><p>可是，当我出地铁，我就纳闷怎么这么晚了天还是一片朦胧？果然这就像报道的那样。。。</p><p>唉，下车后马不停蹄的就赶到客户那里，发现其实就是换了个工作地点，唉。</p><p>就看这个周末去玩一玩了，和高中的朋友见个面。</p><p>可是，当我现在身在北京，什么天安门，天坛，长城。。。为什么我一点想去的期望都没有。。。</p><p>唉，不知道这几天可以见到阳光明媚的天空不。。。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails学习笔记-11.2</title>
      <link href="2020/02/12/2013-02-12-railsxue-xi-bi-ji/"/>
      <url>2020/02/12/2013-02-12-railsxue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>11.2 迭代F2:建立一个基于Ajax的购物车</p><p>开始是按照书里面写的，创建create.js.rjs，</p><p>网上查了，需要使用protype-rails gem，于是安装了，但是页面点击后ajax没有效果，需要手动刷新后才能出现。</p><p>于是在网上查了,由于默认使用jquery，所以就改成了jquery的，创建create.js.erb，内容为$(‘#cart’).html(“&lt;%= escape_javascript(render(@cart)) %&gt;”);</p><p>按照网上仁兄的做法来的：</p><p>1.\app\views\layouts\application.html.erb<br>&lt;%= javascript_include_tag :defaults %&gt; to &lt;%= javascript_include_tag “application” %&gt;<br>2.app/views/line_items/create.js.rjs 成create.js.erb，并修改内容：<br>$(‘#cart’).html(“&lt;%= escape_javascript(render(@cart)) %&gt;”);</p><p>3.修改line_items_controller中的create方法， 加入format.js</p><p>传送门:<a href="http://ruby-china.org/topics/6154" target="_blank">RubyChina</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rails </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA对象equals的技巧</title>
      <link href="2019/12/06/2013-12-06-java-object-equals/"/>
      <url>2019/12/06/2013-12-06-java-object-equals/</url>
      
        <content type="html"><![CDATA[<h2 id="1-测试"><a href="#1-测试" class="headerlink" title="1.    测试"></a>1.    测试</h2><p>又一次在写代码，突然想到这么个问题：java里的equals比较对象的顺序不同会有什么不同的效果？于是乎写了以下测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cnhalo.mrhuang.equalstest.Main</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>huangyijie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>2018年12月6日 下午9:33:33</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">TestObject a1 = <span class="keyword">null</span>;</span><br><span class="line">TestObject a2 = <span class="keyword">new</span> TestObject();</span><br><span class="line"></span><br><span class="line">test1(a1, a2);</span><br><span class="line">test2(a1, a2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(TestObject a1, TestObject a2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test1:&quot;</span> + a1.equals(a2));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(TestObject a1, TestObject a2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test2:&quot;</span> + a2.equals(a1));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.    分析"></a>2.    分析</h2><p>在test1中抛出java.lang.NullPointerException异常，而test2打印出false，对于test2的情况，查看源码的注释可以知道：</p><pre><code>For any non-null reference value x, x.equals(null) should return false.</code></pre><p>而对于空指针异常：</p><p>引发空指针异常，往往是在获取对象实例地址的时候，由于获取的对象实例并不存在，因此返回的地址为null，而又没进行判断，直接使用了该对象实例（地址）引发的。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.    总结"></a>3.    总结</h2><p>因此，这是一个技巧了，为了避免空指针异常，我们在对对象进行比较的时候，得把常量或者我们认为不会有null的值放在前面： “constant”.equals(“object”);</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> equals </tag>
            
            <tag> object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊Spring的stereotype注解</title>
      <link href="2019/10/23/2019-10-23-talk-spring-stereotype/"/>
      <url>2019/10/23/2019-10-23-talk-spring-stereotype/</url>
      
        <content type="html"><![CDATA[<p>我们在使用Spring的时候，使用最多的注解是什么？我想除了@Bean就是@Component了吧？@Component位于spring-context库（5.1.8版本，文中未特别说明的情况下默认此版本）的org.springframework.stereotype包路径下面：</p><p><img src="http://githubimg.wxio.club/spring-stereotype-1.jpg" alt="Spring Stereotype 1"></p><p>会发现还有我们熟悉的@Controller，@Service，@Repository，这不就是Spring MVC里经常用到的么？</p><h2 id="什么是-Stereotype"><a href="#什么是-Stereotype" class="headerlink" title="什么是 Stereotype"></a>什么是 Stereotype</h2><p>Stereotype是一种J2EE特性，以下来自网友：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stereotype特性最早出现在J2EE6中（忘记是哪个JSR提出的了），</span><br><span class="line">可以理解为围绕着“元数据”功能而发展出来的一种设计模式，</span><br><span class="line">虽然我很难说清楚他属于23个设计模式中的哪一个，</span><br><span class="line">但是这确实已经是一种约定俗成的做法，</span><br><span class="line">只要看到Stereotype就应该像看到“Factory——工厂模式”、“Adapter——适配器模式”、“Facade——外观模式”一样，一眼就知道他的作用。</span><br></pre></td></tr></table></figure><p><strong>简单的说Stereotype特性就是用注解来告诉框架某个类是属于系统功能中的哪一层。</strong></p><h2 id="Stereotype-特性如何被使用"><a href="#Stereotype-特性如何被使用" class="headerlink" title="Stereotype 特性如何被使用"></a>Stereotype 特性如何被使用</h2><p>在Stereotype模式下，Spring为Controller-Service-Dao的分层模型分别提供了@Controller、@Service、@Repository注解。</p><p>我们按照Stereotype的模式为对应的类标记3个注解，然后在引入MVC、ORM、JPA相关的框架之后这些注解会告诉框架对应的类扮演着什么样的功能角色，框架就能很清晰的根据注解提供相关的功能服务。</p><p>例如引入spring-webmvc库后，类如果被@Controller注解标记，框架就知道他们都是处理前端请求的，框架就会为他提供RequestMapping之类的功能。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费申请 JetBrains 全产品 License</title>
      <link href="2019/10/21/2019-10-21-JetBrains-All-Products-Pack-license/"/>
      <url>2019/10/21/2019-10-21-JetBrains-All-Products-Pack-license/</url>
      
        <content type="html"><![CDATA[<p>作为一个开发者选择的IDE，不管是Java，JS，还是Python，可能最好用的IDE就是JetBrains家的了。就比如我，作为一个喜欢倒腾新语言的人，每当想要写个程序的时候就会想JetBrains有没有这种语言的IDE，然后就会发现有针对Go的GoLand，针对Python的PyCharm，针对JS的WebStorm等等。</p><p>可是一个现实的问题摆在面前，就是License贵啊，再加上每种IDE都有License需求，那就更贵了啊！</p><p>但是现在有办法免费获取JetBrains家全系列产品的License了–<strong>使用个人或者团队的开源项目申请</strong>，虽然是一年有效期，但是他们会在快到期前提醒你，然后就可以重新申请审核再续一年了。</p><h2 id="准备个人开源项目"><a href="#准备个人开源项目" class="headerlink" title="准备个人开源项目"></a>准备个人开源项目</h2><p>首先要准备自己的开源项目，比如我使用的 <a href="https://github.com/Geisha-design%EF%BC%8CJetBrains%E5%AE%98%E6%96%B9%E4%BC%BC%E4%B9%8E%E5%AF%B9%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84">https://github.com/Geisha-design，JetBrains官方似乎对于项目的</a> star 没有强制要求，但是不排除以后有要求。</p><h2 id="添加项目-License"><a href="#添加项目-License" class="headerlink" title="添加项目 License"></a>添加项目 License</h2><p>然后需要给项目添加 License，在项目主页点击 Create new file，然后输入 LICENSE 后，输入框右边就会自动弹出 License 类型的选择，点击它选择一个尽量开放的类型，比如我选择的是 MIT。</p><h2 id="申请-JetBrains-License"><a href="#申请-JetBrains-License" class="headerlink" title="申请 JetBrains License"></a>申请 JetBrains License</h2><p>之后就可以开始填写申请信息了，去到 <a href="https://www.jetbrains.com/shop/eform/opensource">https://www.jetbrains.com/shop/eform/opensource</a> 填写内容：</p><p><img src="http://githubimg.wxio.club/www.jetbrains.com_shop_eform_opensource.png" alt="申请表"></p><p>基本上就按照输入框Place Holder里提示的填写就可以了，注意的一点就是 No. of required licenses 填写项目提交代码的人数，他们按照这个来决定所对应的License需求数量。</p><p>提交申请后，会收到邮件表明他们已经收到了申请，会在接下来的几天处理：</p><p><img src="http://githubimg.wxio.club/jetbrains1.jpg" alt="JetBrains邮件1"></p><p>大概等待1-2天后，会收到申请成功的通知：</p><p><img src="http://githubimg.wxio.club/jetbrains2.jpg" alt="JetBrains邮件2"></p><h2 id="激活-JetBrains-License"><a href="#激活-JetBrains-License" class="headerlink" title="激活 JetBrains License"></a>激活 JetBrains License</h2><p>点击申请成功的邮件中的 **Take me to my license(s)**，然后会被要求创建一个账号，之后会收到激活邮件：</p><p><img src="http://githubimg.wxio.club/jetbrains3.jpg" alt="JetBrains邮件3"></p><p>点击 <strong>Confirm your account</strong> 后进入个人中心。</p><p>点击 <strong>Active subscriptions</strong> 激活 License。之后选择 License 点击 Assign，输入创建账号的邮箱，完成后就会收到邮件表示已经授予这个账号License使用权限了：</p><p><img src="http://githubimg.wxio.club/jetbrains4.jpg" alt="JetBrains邮件4"></p><h2 id="使用-JetBrains-License"><a href="#使用-JetBrains-License" class="headerlink" title="使用 JetBrains License"></a>使用 JetBrains License</h2><p>激活 License 后，打开 Idea （其他产品也行），选择 JetBrains Account，输入注册的邮箱和密码后点击 Activate 就可以了：</p><p><img src="http://githubimg.wxio.club/jetbrains5.jpg" alt="使用License">。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> 教程 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习笔记油漆工模式</title>
      <link href="2019/08/16/2014-08-16-design-pattern-decorator/"/>
      <url>2019/08/16/2014-08-16-design-pattern-decorator/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之Decorator-油漆工"><a href="#设计模式之Decorator-油漆工" class="headerlink" title="设计模式之Decorator(油漆工)"></a>设计模式之Decorator(油漆工)</h1><p>查看 <a href="https://github.com/henryhuang/designpatterns/tree/master/src/cnhalo/twoa/designpatterns/structure/decorator">代码</a></p><p>装饰模式:Decorator常被翻译成”装饰”,我觉得翻译成”油漆工”更形象点,油漆工(decorator)是用来刷油漆的,那么被刷油漆的对象我们称decoratee.这两种实体在Decorator模式中是必须的.</p><h3 id="Decorator定义"><a href="#Decorator定义" class="headerlink" title="Decorator定义:"></a>Decorator定义:</h3><p>动态给一个对象添加一些额外的职责,就象在墙上刷油漆.使用Decorator模式相比用生成子类方式达到功能的扩充显得更为灵活.</p><span id="more"></span><h3 id="为什么使用Decorator"><a href="#为什么使用Decorator" class="headerlink" title="为什么使用Decorator?"></a>为什么使用Decorator?</h3><p>我们通常可以使用继承来实现功能的拓展,如果这些需要拓展的功能的种类很繁多,那么势必生成很多子类,增加系统的复杂性,同时,使用继承实现功能拓展,我们必须可预见这些拓展功能,这些功能是编译时就确定了,是静态的.<br>使用Decorator的理由是:这些功能需要由用户动态决定加入的方式和时机.Decorator提供了”即插即用”的方法,在运行期间决定何时增加何种功能.</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用?"></a>如何使用?</h3><p>举Adapter中的打桩示例,在Adapter中有两种类:方形桩 圆形桩,Adapter模式展示如何综合使用这两个类,在Decorator模式中,我们是要在打桩时增加一些额外功能,比如,挖坑 在桩上钉木板等,不关心如何使用两个不相关的类.</p><p>我们先建立一个接口: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @authorHuangYijie</span><br><span class="line"> * @date2014年8月6日 下午1:42:20</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface Work &#123;</span><br><span class="line"></span><br><span class="line">public void insert();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接口Work有一个具体实现:插入方形桩或圆形桩,这两个区别对Decorator是无所谓.我们以插入方形桩为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @authorHuangYijie</span><br><span class="line"> * @date2014年8月6日 下午1:42:34</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SquarePeg implements Work &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert() &#123;</span><br><span class="line">System.out.println(&quot;方形桩插入&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在有一个应用:需要在桩打入前,挖坑,在打入后,在桩上钉木板,这些额外的功能是动态,可能随意增加调整修改,比如,可能又需要在打桩之后钉架子(只是比喻).</p><p>那么我们使用Decorator模式,这里方形桩SquarePeg是decoratee(被刷油漆者),我们需要在decoratee上刷些”油漆”,这些油漆就是那些额外的功能.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @authorHuangYijie</span><br><span class="line"> * @date2014年8月6日 下午1:42:47</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Decorator implements Work&#123;</span><br><span class="line"></span><br><span class="line">private Work work;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 额外增加的功能被打包在List中</span><br><span class="line">private List&lt;String&gt; others &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在构造器中使用组合new方式，引入Work对象</span><br><span class="line">public Decorator(Work work) &#123;</span><br><span class="line">this.work &#x3D; work;</span><br><span class="line">others.add(&quot;挖坑&quot;);</span><br><span class="line">others.add(&quot;钉木板&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void insert() &#123;</span><br><span class="line">newMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在新方法中，在insert之前增加其他方法，这里次序先后由用户灵活指定</span><br><span class="line">public void newMethod() &#123;</span><br><span class="line">otherMethod();</span><br><span class="line">work.insert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void otherMethod() &#123;</span><br><span class="line">ListIterator&lt;String&gt; iterator &#x3D; others.listIterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上例中,我们把挖坑和钉木板都排在了打桩insert前面,这里只是举例说明额外功能次序可以任意安排.</p><p>好了,Decorator模式出来了,我们看如何调用: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @authorHuangYijie</span><br><span class="line"> * @date2014年8月6日 下午2:21:25</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">Work squrePeg &#x3D; new SquarePeg();</span><br><span class="line">Work decorator &#x3D; new Decorator(squrePeg);</span><br><span class="line">decorator.insert();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Decorator模式至此完成.</p><p>如果你细心,会发现,上面调用类似我们读取文件时的调用:</p><p>FileReader fr = new FileReader(filename);<br>BufferedReader br = new BufferedReader(fr);</p><p>实际上Java 的I/O API就是使用Decorator实现的,I/O变种很多,如果都采取继承方法,将会产生很多子类,显然相当繁琐.</p><h3 id="Jive中的Decorator实现"><a href="#Jive中的Decorator实现" class="headerlink" title="Jive中的Decorator实现"></a>Jive中的Decorator实现</h3><p>在论坛系统中,有些特别的字是不能出现在论坛中如”打倒XXX”,我们需要过滤这些”反动”的字体.不让他们出现或者高亮度显示.</p><p>在IBM Java专栏中专门谈Jive的文章中,有谈及Jive中ForumMessageFilter.java使用了Decorator模式,其实,该程序并没有真正使用Decorator,而是提示说:针对特别论坛可以设计额外增加的过滤功能,那么就可以重组ForumMessageFilter作为Decorator模式了.</p><p>所以,我们在分辨是否真正是Decorator模式,以及会真正使用Decorator模式,一定要把握好Decorator模式的定义,以及其中参与的角色(Decoratee 和Decorator).</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 油漆工 </tag>
            
            <tag> decorator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macvim配置</title>
      <link href="2019/08/01/2013-08-01-macvim-config/"/>
      <url>2019/08/01/2013-08-01-macvim-config/</url>
      
        <content type="html"><![CDATA[<p>虽然我还没用，但是记下总是好的吧，这种东西网站一输如就能找到，就不放到笔记里了。</p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;设置菜单语言</span></span><br><span class="line"><span class="string">setlangmenu=zh_cn</span></span><br><span class="line"><span class="string">&quot;</span> =========</span><br><span class="line"><span class="string">&quot; 功能函数</span></span><br><span class="line"><span class="string">&quot;</span> =========</span><br><span class="line"><span class="string">&quot; 获取当前目录</span></span><br><span class="line"><span class="string">func GetPWD()</span></span><br><span class="line"><span class="string">returnsubstitute(getcwd(), &quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;, &quot;</span>g<span class="string">&quot;)</span></span><br><span class="line"><span class="string">endf</span></span><br><span class="line"><span class="string">&quot;</span> =========</span><br><span class="line"><span class="string">&quot; 环境配置</span></span><br><span class="line"><span class="string">&quot;</span> =========</span><br><span class="line"><span class="string">&quot; 保留历史记录</span></span><br><span class="line"><span class="string">sethistory=400</span></span><br><span class="line"><span class="string">&quot;</span> 命令行于状态行</span><br><span class="line">setch=1</span><br><span class="line">setstl=\ [File]\ %F%m%r%h%y[%&#123;&amp;fileformat&#125;,%&#123;&amp;fileencoding&#125;]\ %w\ \ [PWD]\ %r%&#123;GetPWD()&#125;%h\ %=\ [Line]\ %l,%c\ %=\ %P</span><br><span class="line">setls=2 <span class="string">&quot; 始终显示状态行</span></span><br><span class="line"><span class="string">&quot;</span> 制表符</span><br><span class="line">settabstop=4</span><br><span class="line">setexpandtab</span><br><span class="line">setsmarttab</span><br><span class="line">setshiftwidth=4</span><br><span class="line">setsofttabstop=4</span><br><span class="line"><span class="string">&quot; 状态栏显示目前所执行的指令</span></span><br><span class="line"><span class="string">setshowcmd</span></span><br><span class="line"><span class="string">&quot;</span> 行控制</span><br><span class="line">setlinebreak</span><br><span class="line">setnocompatible</span><br><span class="line">settextwidth=80</span><br><span class="line">setwrap</span><br><span class="line"><span class="string">&quot; 行号和标尺</span></span><br><span class="line"><span class="string">setnumber</span></span><br><span class="line"><span class="string">setruler</span></span><br><span class="line"><span class="string">setrulerformat=%15(%c%V\ %p%%%)</span></span><br><span class="line"><span class="string">&quot;</span> 控制台响铃</span><br><span class="line">:setnoerrorbells</span><br><span class="line">:setnovisualbell</span><br><span class="line">:sett_vb= <span class="string">&quot;close visual bell</span></span><br><span class="line"><span class="string">&quot;</span> 插入模式下使用 、</span><br><span class="line">setbackspace=indent,eol,start</span><br><span class="line"><span class="string">&quot; 标签页</span></span><br><span class="line"><span class="string">settabpagemax=20</span></span><br><span class="line"><span class="string">setshowtabline=2</span></span><br><span class="line"><span class="string">&quot;</span> 缩进</span><br><span class="line">setautoindent</span><br><span class="line">setcindent</span><br><span class="line">setsmartindent</span><br><span class="line"><span class="string">&quot; 自动重新读入</span></span><br><span class="line"><span class="string">setautoread</span></span><br><span class="line"><span class="string">&quot;</span> 代码折叠</span><br><span class="line">setfoldmethod=manual</span><br><span class="line"><span class="string">&quot;setfoldmethod=indent</span></span><br><span class="line"><span class="string">&quot;</span> 自动切换到文件当前目录</span><br><span class="line">setautochdir</span><br><span class="line"><span class="string">&quot;在查找时忽略大小写</span></span><br><span class="line"><span class="string">setignorecase</span></span><br><span class="line"><span class="string">setincsearch</span></span><br><span class="line"><span class="string">sethlsearch</span></span><br><span class="line"><span class="string">&quot;</span>显示匹配的括号</span><br><span class="line">setshowmatch</span><br><span class="line"><span class="string">&quot;实现全能补全功能，需要打开文件类型检测</span></span><br><span class="line"><span class="string">&quot;</span>filetype plugin indent on</span><br><span class="line"><span class="string">&quot;打开vim的文件类型自动检测功能</span></span><br><span class="line"><span class="string">filetype on</span></span><br><span class="line"><span class="string">&quot;</span>在所有模式下都允许使用鼠标，还可以是n,v,i,c等</span><br><span class="line">setmouse=a</span><br><span class="line"><span class="string">&quot; 恢复上次文件打开位置</span></span><br><span class="line"><span class="string">setviminfo=&#x27;10,\&quot;100,:20,%,n~/.viminfo</span></span><br><span class="line"><span class="string">&quot;</span> =====================</span><br><span class="line"><span class="string">&quot; 多语言环境</span></span><br><span class="line"><span class="string">&quot;</span>    默认为 UTF-8 编码</span><br><span class="line"><span class="string">&quot; =====================</span></span><br><span class="line"><span class="string">ifhas(&quot;</span>multi_byte<span class="string">&quot;)</span></span><br><span class="line"><span class="string">setencoding=utf-8</span></span><br><span class="line"><span class="string">&quot;</span> English messages only</span><br><span class="line"><span class="string">&quot;language messages zh_CN.utf-8</span></span><br><span class="line"><span class="string">ifhas(&#x27;win32&#x27;)</span></span><br><span class="line"><span class="string">language english</span></span><br><span class="line"><span class="string">let&amp;termencoding=&amp;encoding</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">setfencs=ucs-bom,utf-8,gbk,cp936,latin1</span></span><br><span class="line"><span class="string">setformatoptions+=mM</span></span><br><span class="line"><span class="string">setnobomb &quot;</span> 不使用 Unicode 签名</span><br><span class="line">ifv:lang =~? <span class="string">&#x27;^\(zh\)\|\(ja\)\|\(ko\)&#x27;</span></span><br><span class="line">setambiwidth=double</span><br><span class="line">endif</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echoerr <span class="string">&quot;Sorry, this version of (g)vim was not compiled with +multi_byte&quot;</span></span><br><span class="line">endif</span><br><span class="line"><span class="string">&quot; =========</span></span><br><span class="line"><span class="string">&quot;</span> 图形界面</span><br><span class="line"><span class="string">&quot; =========</span></span><br><span class="line"><span class="string">ifhas(&#x27;gui_running&#x27;)</span></span><br><span class="line"><span class="string">&quot;</span> 只显示菜单</span><br><span class="line">setguioptions=mcr</span><br><span class="line"><span class="string">&quot; 高亮光标所在的行</span></span><br><span class="line"><span class="string">setcursorline</span></span><br><span class="line"><span class="string">&quot;</span> 编辑器配色</span><br><span class="line"><span class="string">&quot;colorscheme zenburn</span></span><br><span class="line"><span class="string">&quot;</span>colorscheme dusk</span><br><span class="line">ifhas(<span class="string">&quot;win32&quot;</span>)</span><br><span class="line"><span class="string">&quot; Windows 兼容配置</span></span><br><span class="line"><span class="string">source<span class="variable">$VIMRUNTIME</span>/mswin.vim</span></span><br><span class="line"><span class="string">&quot;</span> f11 最大化</span><br><span class="line">nmap :call libcallnr(<span class="string">&#x27;fullscreen.dll&#x27;</span>, <span class="string">&#x27;ToggleFullScreen&#x27;</span>, 0)</span><br><span class="line">nmap ff :call libcallnr(<span class="string">&#x27;fullscreen.dll&#x27;</span>, <span class="string">&#x27;ToggleFullScreen&#x27;</span>, 0)</span><br><span class="line"><span class="string">&quot; 自动最大化窗口</span></span><br><span class="line"><span class="string">au GUIEnter * simalt ~x</span></span><br><span class="line"><span class="string">&quot;</span> 给 Win32 下的 gVim 窗口设置透明度</span><br><span class="line">au GUIEnter * call libcallnr(<span class="string">&quot;vimtweak.dll&quot;</span>, <span class="string">&quot;SetAlpha&quot;</span>, 250)</span><br><span class="line"><span class="string">&quot; 字体配置</span></span><br><span class="line"><span class="string">exec&#x27;set guifont=&#x27;.iconv(&#x27;Courier_New&#x27;, &amp;enc, &#x27;gbk&#x27;).&#x27;:h11:cANSI&#x27;</span></span><br><span class="line"><span class="string">exec&#x27;set guifontwide=&#x27;.iconv(&#x27;微软雅黑&#x27;, &amp;enc, &#x27;gbk&#x27;).&#x27;:h11&#x27;</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">ifhas(&quot;</span>unix<span class="string">&quot;) &amp;&amp; !has(&#x27;gui_macvim&#x27;)</span></span><br><span class="line"><span class="string">setguifont=Courier\ 10\ Pitch\ 11</span></span><br><span class="line"><span class="string">setguifontwide=YaHei\ Consolas\ Hybrid\ 11</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">ifhas(&quot;</span>gui_macvim<span class="string">&quot;)</span></span><br><span class="line"><span class="string">&quot;</span> MacVim 下的字体配置</span><br><span class="line">setguifont=Menlo:h12</span><br><span class="line">setguifontwide=Hei:h12</span><br><span class="line"><span class="string">&quot; 半透明和窗口大小</span></span><br><span class="line"><span class="string">settransparency=2</span></span><br><span class="line"><span class="string">setlines=40 columns=110</span></span><br><span class="line"><span class="string">&quot;</span> 使用MacVim原生的全屏幕功能</span><br><span class="line">lets:lines=&amp;lines</span><br><span class="line">lets:columns=&amp;columns</span><br><span class="line">func! FullScreenEnter()</span><br><span class="line">setlines=999 columns=999</span><br><span class="line">setfu</span><br><span class="line">endf</span><br><span class="line">func! FullScreenLeave()</span><br><span class="line"><span class="built_in">let</span>&amp;lines=s:lines</span><br><span class="line"><span class="built_in">let</span>&amp;columns=s:columns</span><br><span class="line">setnofu</span><br><span class="line">endf</span><br><span class="line">func! FullScreenToggle()</span><br><span class="line"><span class="keyword">if</span>&amp;fullscreen</span><br><span class="line">call FullScreenLeave()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">call FullScreenEnter()</span><br><span class="line">endif</span><br><span class="line">endf</span><br><span class="line"><span class="string">&quot; Mac 下，按 \\ 切换全屏</span></span><br><span class="line"><span class="string">nmap   :call FullScreenToggle()</span></span><br><span class="line"><span class="string">&quot;</span> Set input method off</span><br><span class="line">setimdisable</span><br><span class="line"><span class="string">&quot; Set QuickTemplatePath</span></span><br><span class="line"><span class="string">letguickTemplatePath = <span class="variable">$HOME</span>.&#x27;/.vim/templates/&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> 如果为空文件，则自动设置当前目录为桌面</span><br><span class="line">lcd ~/Desktop/</span><br><span class="line"><span class="string">&quot; 自动切换到文件当前目录</span></span><br><span class="line"><span class="string">setautochdir</span></span><br><span class="line"><span class="string">&quot;</span> Set QuickTemplatePath</span><br><span class="line">letguickTemplatePath = <span class="variable">$HOME</span>.<span class="string">&#x27;/.vim/templates/&#x27;</span></span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line"><span class="string">&quot; =========</span></span><br><span class="line"><span class="string">&quot;</span> 插件</span><br><span class="line"><span class="string">&quot; =========</span></span><br><span class="line"><span class="string">filetype plugin indent on</span></span><br><span class="line"><span class="string">&quot;</span> =========</span><br><span class="line"><span class="string">&quot; AutoCmd</span></span><br><span class="line"><span class="string">&quot;</span> =========</span><br><span class="line">ifhas(<span class="string">&quot;autocmd&quot;</span>)</span><br><span class="line">filetype plugin indent on</span><br><span class="line"><span class="string">&quot; 括号自动补全</span></span><br><span class="line"><span class="string">func! AutoClose()</span></span><br><span class="line"><span class="string">:inoremap ( ()i</span></span><br><span class="line"><span class="string">:inoremap &quot;</span> <span class="string">&quot;&quot;</span>i</span><br><span class="line">:inoremap <span class="string">&#x27; &#x27;</span><span class="string">&#x27;i</span></span><br><span class="line"><span class="string">:inoremap &#123; &#123;&#125;i</span></span><br><span class="line"><span class="string">:inoremap [ []i</span></span><br><span class="line"><span class="string">:inoremap &#125; =ClosePair(&#x27;</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">:inoremap ] =ClosePair(&#x27;</span>]<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">:inoremap ) =ClosePair(&#x27;</span>)<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">endf</span></span><br><span class="line"><span class="string">func! ClosePair(char)</span></span><br><span class="line"><span class="string">ifgetline(&#x27;</span>.<span class="string">&#x27;)[col(&#x27;</span>.<span class="string">&#x27;) - 1] == a:char</span></span><br><span class="line"><span class="string">return&quot;\&quot;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">returna:char</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">endf</span></span><br><span class="line"><span class="string">&quot;auto close quotation marks forPHP, Javascript, etc, file</span></span><br><span class="line"><span class="string">au FileType php,c,python,javascript exe AutoClose()</span></span><br><span class="line"><span class="string">&quot; Auto Check Syntax</span></span><br><span class="line"><span class="string">&quot;au BufWritePost,FileWritePost *.js,*.php call CheckSyntax(1)</span></span><br><span class="line"><span class="string">&quot; JavaScript 语法高亮</span></span><br><span class="line"><span class="string">au FileType html,javascript letg:javascript_enable_domhtmlcss = 1</span></span><br><span class="line"><span class="string">&quot; 给 Javascript 文件添加 Dict</span></span><br><span class="line"><span class="string">ifhas(&#x27;</span>gui_macvim<span class="string">&#x27;) || has(&#x27;</span>unix<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">au FileType javascript setlocal dict+=~/.vim/dict/javascript.dict</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">au FileType javascript setlocal dict+=$VIM/vimfiles/dict/javascript.dict</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">&quot; 格式化 JavaScript 文件</span></span><br><span class="line"><span class="string">&quot;au FileType javascript map :call g:Jsbeautify()</span></span><br><span class="line"><span class="string">au FileType javascript setomnifunc=javascriptcomplete#CompleteJS</span></span><br><span class="line"><span class="string">&quot; 给 CSS 文件添加 Dict</span></span><br><span class="line"><span class="string">ifhas(&#x27;</span>gui_macvim<span class="string">&#x27;) || has(&#x27;</span>unix<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">au FileType css setlocal dict+=~/.vim/dict/css.dict</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">au FileType css setlocal dict+=$VIM/vimfiles/dict/css.dict</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">&quot; 增加 ActionScript 语法支持</span></span><br><span class="line"><span class="string">au BufNewFile,BufRead *.as setf actionscript</span></span><br><span class="line"><span class="string">&quot; CSS3 语法支持</span></span><br><span class="line"><span class="string">au BufRead,BufNewFile *.css setft=css syntax=css3</span></span><br><span class="line"><span class="string">&quot; 增加 Objective-C 语法支持</span></span><br><span class="line"><span class="string">au BufNewFile,BufRead,BufEnter,WinEnter,FileType *.m,*.h setf objc</span></span><br><span class="line"><span class="string">&quot; 将指定文件的换行符转换成 UNIX 格式</span></span><br><span class="line"><span class="string">au FileType php,javascript,html,css,python,vim,vimwiki setff=unix</span></span><br><span class="line"><span class="string">&quot; 保存编辑状态</span></span><br><span class="line"><span class="string">au BufWinLeave * ifexpand(&#x27;</span>%<span class="string">&#x27;) != &#x27;</span><span class="string">&#x27;&amp;&amp; &amp;buftype == &#x27;</span><span class="string">&#x27;| mkview | endif</span></span><br><span class="line"><span class="string">au BufRead     * ifexpand(&#x27;</span>%<span class="string">&#x27;) != &#x27;</span><span class="string">&#x27;&amp;&amp; &amp;buftype == &#x27;</span><span class="string">&#x27;| silent loadview | syntax on | endif</span></span><br><span class="line"><span class="string">&quot; 自动最大化窗口</span></span><br><span class="line"><span class="string">ifhas(&#x27;</span>gui_running<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">ifhas(&quot;win32&quot;)</span></span><br><span class="line"><span class="string">au GUIEnter * simalt ~x</span></span><br><span class="line"><span class="string">&quot;elseif has(&quot;unix&quot;)</span></span><br><span class="line"><span class="string">&quot;au GUIEnter * winpos 0 0</span></span><br><span class="line"><span class="string">&quot;setlines=999 columns=999</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">&quot;acp 自动补全插件</span></span><br><span class="line"><span class="string">letg:AutoComplPop_Behavior = &#123;</span></span><br><span class="line"><span class="string">\ &#x27;</span>c<span class="string">&#x27;: [ &#123;&#x27;</span><span class="built_in">command</span><span class="string">&#x27;: &quot;\\&quot;,</span></span><br><span class="line"><span class="string">\ &#x27;</span>pattern<span class="string">&#x27;: &quot;.&quot;,</span></span><br><span class="line"><span class="string">\ &#x27;</span>repeat<span class="string">&#x27;: 0&#125;</span></span><br><span class="line"><span class="string">\ ]</span></span><br><span class="line"><span class="string">\&#125;</span></span><br><span class="line"><span class="string">&quot; =========</span></span><br><span class="line"><span class="string">&quot; 快捷键</span></span><br><span class="line"><span class="string">&quot; =========</span></span><br><span class="line"><span class="string">map cal:Calendar</span></span><br><span class="line"><span class="string">letNERDTreeWinSize=22</span></span><br><span class="line"><span class="string">map ntree :NERDTree</span></span><br><span class="line"><span class="string">map nk :NERDTreeClose</span></span><br><span class="line"><span class="string">map n :NERDTreeToggle</span></span><br><span class="line"><span class="string">map cse :ColorSchemeExplorer</span></span><br><span class="line"><span class="string">&quot; 标签相关的快捷键 Ctrl</span></span><br><span class="line"><span class="string">map tn :tabnext</span></span><br><span class="line"><span class="string">map tp :tabprevious</span></span><br><span class="line"><span class="string">map tc :tabclose</span></span><br><span class="line"><span class="string">map :tabnew</span></span><br><span class="line"><span class="string">map :tabprevious</span></span><br><span class="line"><span class="string">map :tabnext</span></span><br><span class="line"><span class="string">map :tabclose</span></span><br><span class="line"><span class="string">map :tabnext</span></span><br><span class="line"><span class="string">&quot; 新建 XHTML 、PHP、Javascript 文件的快捷键</span></span><br><span class="line"><span class="string">nmap :NewQuickTemplateTab xhtml</span></span><br><span class="line"><span class="string">nmap :NewQuickTemplateTab php</span></span><br><span class="line"><span class="string">nmap :NewQuickTemplateTab javascript</span></span><br><span class="line"><span class="string">nmap :NewQuickTemplateTab css</span></span><br><span class="line"><span class="string">&quot; 在文件名上按gf时，在新的tab中打开</span></span><br><span class="line"><span class="string">map gf :tabnew</span></span><br><span class="line"><span class="string">&quot;jquery 配色</span></span><br><span class="line"><span class="string">au BufRead,BufNewFile *.js setsyntax=jquery</span></span><br><span class="line"><span class="string">&quot; jsLint forVim</span></span><br><span class="line"><span class="string">letg:jslint_highlight_color  = &#x27;</span><span class="comment">#996600&#x27;</span></span><br><span class="line"><span class="string">&quot; 指定 jsLint 调用路径，通常不用更改</span></span><br><span class="line"><span class="string">letg:jslint_command = <span class="variable">$HOME</span> . &#x27;\/.vim\/jsl\/jsl&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> 指定 jsLint 的启动参数，可以指定相应的配置文件</span><br><span class="line">letg:jslint_command_options = <span class="string">&#x27;-nofilelisting -nocontext -nosummary -nologo -process&#x27;</span></span><br><span class="line"><span class="string">&quot; 返回当前时间</span></span><br><span class="line"><span class="string">func! GetTimeInfo()</span></span><br><span class="line"><span class="string">&quot;</span>returnstrftime(<span class="string">&#x27;%Y-%m-%d %A %H:%M:%S&#x27;</span>)</span><br><span class="line">returnstrftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">endfunction</span><br><span class="line"><span class="string">&quot; 插入模式按 Ctrl + D(ate) 插入当前时间</span></span><br><span class="line"><span class="string">imap =GetTimeInfo()</span></span><br><span class="line"><span class="string">&quot;</span> ==================</span><br><span class="line"><span class="string">&quot; plugin list</span></span><br><span class="line"><span class="string">&quot;</span> ==================</span><br><span class="line"><span class="string">&quot;Color Scheme Explorer</span></span><br><span class="line"><span class="string">&quot;</span>jsbeauty \ff</span><br><span class="line"><span class="string">&quot;NERDTree</span></span><br><span class="line"><span class="string">&quot;</span>Calendar</span><br><span class="line"><span class="string">&quot;conquer_term</span></span><br><span class="line"><span class="string">&quot;</span>nerd_commenter</span><br><span class="line"><span class="string">&quot;setup forC and C++</span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string">setnocp</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> it </tag>
            
            <tag> macvim </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么突然下雨了</title>
      <link href="2019/07/21/2013-07-21-sudden-rain/"/>
      <url>2019/07/21/2013-07-21-sudden-rain/</url>
      
        <content type="html"><![CDATA[<p>怎么就突然下雨了？前一阵来台风还只是刮风不下雨，估计现在是高温吸水太多了，该排掉再吸了。</p><p><img src="http://img.cnhalo.com/u/78119169/images/20130721/sky.jpg" alt="来台风那阵" title="来台风那阵"></p><p>说到高温，还是有点好处的，比如最近新闻关于撞伤人的新闻基本没了，因为你想想，把人“撞倒”在地上，那地面的温度看还敢躺下不。</p><p><img src="http://img.cnhalo.com/u/78119169/images/20130721/morning.jpg" alt="早上" title="早上"></p><p>好久没写博客了，前一阵子着实很忙，经历了周末加班，还是来了个通宵，那种感觉就想我初一的时候人生的第一次网吧通宵，当晚和爸妈说不回家的电话还历历在目。</p><p>一个项目算是结束了，心里一块大石算是可以放下了，但是貌似又一个大石已经又到了心头上了？小房间搞开发还是挺安静地，不用去理会那两个电话不停地响。想想，当那丝思绪出现在脑子里的瞬间，一个电话响起那是什么感觉？</p><p>这两天在看一本书，吉莉安.罗宾逊的《我的小探险》，讲述的是她得一些旅行的故事。我一直觉得我有一颗对于旅行蠢蠢欲动的心，但是又不怎么喜欢爬山，所以比较向往平原海边的旅行。一直想去鼓浪屿什么的，但是不知道现在这种地方商业味会不会更重了。作为一个上班族，想要安心地旅行不是件容易的事情，正常情况下能出去的一年也就那么几天，但是全中国人大部分都和我一样，也就这几天，哎，人山人海啊，所以就一直没机会去。人挤人的旅行那真的是种折磨，没必要去耗这口，旅行的目的是让人心情变好。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂文 </tag>
            
            <tag> 说点啥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aloha 一个Hexo主题</title>
      <link href="2019/06/30/2019-06-30-one-hexo-theme-aloha/"/>
      <url>2019/06/30/2019-06-30-one-hexo-theme-aloha/</url>
      
        <content type="html"><![CDATA[<p>好久没写了，想抬笔但是总是不知道写啥，也没耐心完整地写完一篇，想了想用这个方式开始，介绍一下自己以前的一个<a href="https://hexo.io/">Hexo</a>主题– Aloha。</p><ul><li>项目地址 <a href="https://github.com/henryhuang/hexo-theme-aloha">https://github.com/henryhuang/hexo-theme-aloha</a></li><li>预览地址 <a href="https://huangyijie.com/hexo-theme-aloha/">https://huangyijie.com/hexo-theme-aloha/</a></li><li>使用Wiki <a href="https://github.com/henryhuang/hexo-theme-aloha/wiki">https://github.com/henryhuang/hexo-theme-aloha/wiki</a></li></ul><p>这个主题就是很正常的一个博客布局，亮点是我使用了<a href="https://semantic-ui.com/">Semantic UI</a>，喜欢Semantic UI的人可以用。</p><p>打开后很简洁：</p><p><img src="http://githubimg.wxio.club/2019-06-30-one-hexo-theme-aloha/1.jpg" alt="首页"></p><p>点击左上角的按钮后就会显示侧边栏，侧边栏集合了个人头像、个人社交链接图标以及菜单：</p><p><img src="http://githubimg.wxio.club/2019-06-30-one-hexo-theme-aloha/2.jpg" alt="侧边栏"></p><p>文章页是如下效果，右侧可以显示TOC，底部是上下篇文章的快速导航：</p><p><img src="http://githubimg.wxio.club/2019-06-30-one-hexo-theme-aloha/3.jpg" alt="文章页"></p><p>具体的使用可以查看GitHub的项目<a href="https://github.com/henryhuang/hexo-theme-aloha/wiki">Wiki</a>页。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多浏览器支持pre固定宽度</title>
      <link href="2019/05/28/2013-05-28-pre-tag-in-html-with-fixed-width/"/>
      <url>2019/05/28/2013-05-28-pre-tag-in-html-with-fixed-width/</url>
      
        <content type="html"><![CDATA[<p>之前将pre设置css属性width：xpx，一直使用的chrome来测试，还没发现有问题，放到ie下就没用了，通过以下解决：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pre &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: -moz-pre-wrap; <span class="comment">/* Mozilla, supported since 1999 */</span></span><br><span class="line">    <span class="attribute">white-space</span>: -pre-wrap; <span class="comment">/* Opera */</span></span><br><span class="line">    <span class="attribute">white-space</span>: -o-pre-wrap; <span class="comment">/* Opera */</span></span><br><span class="line">    <span class="attribute">white-space</span>: pre-wrap; <span class="comment">/* CSS3 - Text module (Candidate Recommendation) http://www.w3.org/TR/css3-text/#white-space */</span></span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word; <span class="comment">/* IE 5.5+ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在《钢铁侠3》之后</title>
      <link href="2019/05/05/2013-05-05-after-film-iron-man/"/>
      <url>2019/05/05/2013-05-05-after-film-iron-man/</url>
      
        <content type="html"><![CDATA[<p>  周末，一如既往的放松。</p><p>  中午吃完饭，和朋友以及朋友的朋友一起去梅赛德斯那的电影院看电影，还是团购的，我们的目标是最近很火的《致青春》。</p><p>  我始终有种原则，对于很火的东西，必须提前几天准备。由于这个团购是在出门前团的，所以我也就没想着可以在正常时间看上想看的电影。果不其然，到那售票员竟然说《致青春》只剩下晚上9点的了，于是乎就看了最近的《钢铁侠3》，还是3D的，这点比较值，但是时间也是在5点20了。</p><p>  无奈之下，在世博馆周围转了两个多小时，期间还坐船坐到浦西，再坐回还。在小林子里转来转去，还真别说，别有一番滋味。终于熬到电影开始的时间了。</p><p>  小罗伯特.唐尼，第一次在电影院看他的电影是看的《福尔摩斯1》，欣赏他的幽默，所以对这次的电影还是蛮期待的。</p><p>  。。。。。。（省去看电影的时间）</p><p>  这还是一部美国口味的宣传英雄主义的电影，绚丽的画面，完美的人跟机械的合体，激烈的打斗场面，无与伦比的特效，这些一起构成了我的观后感–值得一看。</p><p>  前两部我没怎么看，好像也没看过，故事情节不是很清楚，但是从这一部的台词中不停出现的“纽约什么的”，应该是发生在纽约的。</p><p>  电影我最震撼的画面，是最后所有的钢铁侠一起出现，全部停在空中，那个震撼啊，哎，值了值了。影片最后，由于是圣诞节，而男主角似乎为了给女主角一个所谓的美好的未来，决定放弃现在这些，所谓的从0开始，于是出现了高富帅钓马子的奢侈画面：所有的钢铁侠都爆炸了，形成了烟花。。。</p><p>  影片看完，不得不说的是两个人：王学圻和范冰冰。</p><p>  真是蛋疼，这难道就是所谓的中美合拍？赶脚是把中国人当傻子耍呢，一个王学圻在电影中就出现了3个画面，而且完全和电影主旋律没一点关系，范冰冰最后才搞笑，就出来一下，说了两句台词，帮王学圻一起做手术。听说国际公映版中，压根就把范冰冰完全删了，而王学圻就一个画面，就一个台词：你好！</p><p>  这部电影貌似在国内的合作商挺多的，什么联想，伊利。外日，电影放映前的一个广告才叫tm的搞笑：“&amp;!&amp;%$@#%$@。。。钢铁侠不行了，怎么办？”，“快喝伊利谷粒多！”，顿时全场笑了。。而且电影里面最后还出现了伊利谷粒多在桌子上。</p><p>  怎么非得整这些中国元素呢？</p><p>  后话：看电影过程中，画面有东西砸过来，我竟然还闪了一下。。。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远处的教堂</title>
      <link href="2019/03/30/2013-03-30-distant-church/"/>
      <url>2019/03/30/2013-03-30-distant-church/</url>
      
        <content type="html"><![CDATA[<p> 受到胡伟同学给我看的一张图的拍摄方法的启示，就用一个下午在家，拍摄了多个时段的，用的手头的MX2，可以看出，白天拍摄效果还是不错的，但是夜拍就不怎么给力了。</p><p><img src="http://githubimg.wxio.club/a_weekend/duoshiduan.jpg" alt="远处的教堂（多时段）" title="远处的教堂（多时段）"></p><p><img src="http://githubimg.wxio.club/a_weekend/2-30.jpg" alt="远处的教堂" title="远处的教堂"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周末 </tag>
            
            <tag> 图片 </tag>
            
            <tag> 风景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wicket的HelloWorld</title>
      <link href="2019/03/13/2016-03-13-Wicket-Hello-World/"/>
      <url>2019/03/13/2016-03-13-Wicket-Hello-World/</url>
      
        <content type="html"><![CDATA[<p>用了2年的Wicket了，竟然发现没有写个HelloWorld。</p><p>Wicket，全称Apache Wicket， 它是个基于组件的Web应用框架，更多的解释看<a href="https://en.wikipedia.org/wiki/Apache_Wicket">Wikipedia</a>。</p><p>官方网站：<a href="http://wicket.apache.org/">wicket.apache.org</a>。</p><p>很遗憾，由于Wicket在国内的普及程度不够，中文相关的文档很少，有的话也就是基于1.2版本的，官方最新的release版本已经是7.x，SNAPSHOT是8.x（Wicket的版本规则从1.5以后就为6.x，7.x，8.x，有点像Java的版本规则）。</p><p>这里的HelloWorld是结合Gradle，Jettty完成的，在Eclipse IDE上开发。</p><span id="more"></span><blockquote><p>什么是Gradle？</p></blockquote><p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言来声明项目设置，而不是传统的XML。</p><p>其他的自动化构建工具还有Ant和Maven等。</p><p>它有丰富的插件机制。</p><p>Eclipse上Gradle的配置请先看<a href="http://www.cnphp6.com/archives/42868">http://www.cnphp6.com/archives/42868</a>。</p><blockquote><p>什么是Jetty？</p></blockquote><p>Jetty是一个纯粹的基于Java的网页服务器和Java Servlet容器。</p><p>其他的容器还有Tomcat，JBoss等。</p><p>这里使用Jetty是使用Gradle的Jetty插件。</p><p>下面开始HelloWorld。</p><h3 id="创建Eclipse项目"><a href="#创建Eclipse项目" class="headerlink" title="创建Eclipse项目"></a>创建Eclipse项目</h3><p>以此选择File-&gt;Other，搜索 Gradle，选择 Gradle Project，输入Project name为 wicket-helloworld，Sample project选择 Java Quickstart，然后Finish。</p><h3 id="调整项目文件结构"><a href="#调整项目文件结构" class="headerlink" title="调整项目文件结构"></a>调整项目文件结构</h3><p>由于我们使用Java Quickstart的Sample project，会生成一些我们不需要的文件，所有我们需要调整文件结构（我这里都以<strong>cnhalo</strong>为包名前缀），调整后的结构为：</p><p><img src="http://77fkdd.com1.z0.glb.clouddn.com/wicket-hello-worldproject-structure2.png" alt="文件结构"></p><h3 id="加入Wicket依赖"><a href="#加入Wicket依赖" class="headerlink" title="加入Wicket依赖"></a>加入Wicket依赖</h3><p>我们向Gradle中加入Wicket依赖，在build.gradle中dependencies里加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile ‘org.apache.wicket:wicket-core:7.2.0’</span><br></pre></td></tr></table></figure><p>我写这遍文章的时候，使用最新的release版本7.2.0，更新的版本可在<a href="http://mvnrepository.com/artifact/org.apache.wicket/wicket-core">mvnrepository.com</a>查看。</p><p>加入依赖后，在项目的右键，依次点击Gradle-&gt;Refresh All，让Gradle去下载依赖的包，等待下载完成后，项目的Gradle Dependencies为：</p><p><img src="http://77fkdd.com1.z0.glb.clouddn.com/wicket-hello-worldgradle-dep.png" alt="Gradle Dependencies"></p><h3 id="配置Jetty"><a href="#配置Jetty" class="headerlink" title="配置Jetty"></a>配置Jetty</h3><p>在build.gradle最上面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;war&#39;</span><br><span class="line">apply plugin: &#39;jetty&#39;</span><br></pre></td></tr></table></figure><p>在Eclipse项目的的 src/main 下依次创建 webapp/WEB-INF/web.xml：</p><p><img src="http://77fkdd.com1.z0.glb.clouddn.com/wicket-hello-worldwebxml.png" alt="web.xml"></p><p>web.xml的内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Wicket Hello World<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>App<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.wicket.protocol.http.WicketFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>applicationClassName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>cnhalo.CHApp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>configuration<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>DEPLOYMENT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>App<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>INCLUDE<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，这里的 cnhalo.CHApp 这个类这里还未创建，org.apache.wicket.protocol.http.WicketFilter 这个过滤器是请求进入Web容器后再进入Wicket的入口。</p><h3 id="创建Wicket相关代码"><a href="#创建Wicket相关代码" class="headerlink" title="创建Wicket相关代码"></a>创建Wicket相关代码</h3><p>创建 cnhalo.CHApp 类，继承org.apache.wicket.protocol.http.WebApplication，全部代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cnhalo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.wicket.Page;</span><br><span class="line"><span class="keyword">import</span> org.apache.wicket.protocol.http.WebApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>HuangYijie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>Mar 13, 2016 9:49:43 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CHApp</span> <span class="keyword">extends</span> <span class="title">WebApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Class&lt;? extends Page&gt; getHomePage() &#123;</span><br><span class="line">    <span class="keyword">return</span> IndexPage.class;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建 cnhalo.IndexPage 类，继承 org.apache.wicket.markup.html.WebPage，全部代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cnhalo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.wicket.markup.html.WebPage;</span><br><span class="line"><span class="keyword">import</span> org.apache.wicket.markup.html.basic.Label;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>HuangYijie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>Mar 13, 2016 9:51:10 PM</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">WebPage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2856887644490684320L</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IndexPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    add(<span class="keyword">new</span> Label(“helloworld”, “Wicket Hello World”)); <span class="comment">// 在IndexPage.html中对wicket:id=“helloworld”的组件进行匹配</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 cnhalo.IndexPage 的同级目录中创建 IndexPage.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:wicket</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">“UTF-8”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Wicket Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">wicket:id</span>=<span class="string">“helloworld”</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在Eclipse项目右键，依次选择 Run As -&gt; Run with Jetty，然后浏览器访问 localhost:8080，即可看到 <strong>Wicket Hello World</strong>。</p><h3 id="在Tomcat下运行"><a href="#在Tomcat下运行" class="headerlink" title="在Tomcat下运行"></a>在Tomcat下运行</h3><p>要在Tomcat下运行，只要打成war包就可以，依次在Eclipse项目右键执行 Gradle -&gt; Task Quick Launcher，输入 war 后回车。Gradle将会打出 war 包，等 Eclipse 的 Console 显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[sts] -----------------------------------------------------</span><br><span class="line">[sts] Starting Gradle build for the following tasks: </span><br><span class="line">[sts]      war</span><br><span class="line">[sts] -----------------------------------------------------</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:war UP-TO-DATE</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 0.276 secs</span><br><span class="line">[sts] -----------------------------------------------------</span><br><span class="line">[sts] Build finished succesfully!</span><br><span class="line">[sts] Time taken: 0 min, 0 sec</span><br><span class="line">[sts] -----------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>刷新Eclipse项目的build，build/libs/wicket-helloworld-1.0.war 即可放入Tomcat的webapps下。</p><hr><p>文章中使用软件的版本：</p><p>JDK: 1.8.0_45<br>Gradle: 2.0<br>Eclipse: Luna Release (4.4.0)</p><p>项目源码地址：<a href="https://github.com/henryhuang/WicketHelloWorld">https://github.com/henryhuang/WicketHelloWorld</a>。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> wicket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个周末的随感</title>
      <link href="2019/03/10/2013-03-10-yi-ge-zhou-mo/"/>
      <url>2019/03/10/2013-03-10-yi-ge-zhou-mo/</url>
      
        <content type="html"><![CDATA[<p>  似乎现在去KTV唱歌的频率增多了，今天两个月内就唱了两次，突然发现我好喜欢唱歌。</p><p>  唱歌可以放松自己，放纵自己，使自己发泄，使自己自由的吼。</p><p>  自由？何谈容易？</p><p>  一个人从生出来，就要被某些东西束缚着。被家人，被老师，被学校，被经理，被天朝。可见，一个人要是想有自<br>由的思想是一件很困难的事，因为稍微给自己找点“随便”的理由，就会加入所谓的主流中。</p><p>  主流不就是占大多数的意思嘛？这个社会本身就是少数服从多数的社会。因为很多人总是喜欢有种“第一”的感觉，<br>比如如果我在一个人口是世界上第一大的国家，我在一个最大的企业里，这些“最”好像总是可以使人增值不少。</p><p>  但是，当一个人受教育了，就知道原来这个世界还有很多东西可以去追求，没必要随着大流，而是要去追求自己的梦<br>想。你可以说是家庭原因使你不得不怎么样，说到底就是家人对你的影响，反过来，你也可以影响你家人，使他们顺服你，说到底，只是你自己不想去追求而已。</p><p>  我始终觉得，在没有太不实际的情况，每个人都可以去完成任何自己想干的事情，说干不了的其实是自己不想干而已<br>。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 周末 </tag>
            
            <tag> 无图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手VMware网络配置</title>
      <link href="2019/02/20/2013-02-20-vmware-network-config/"/>
      <url>2019/02/20/2013-02-20-vmware-network-config/</url>
      
        <content type="html"><![CDATA[<p>这个问题以前一直没专门去想过，只是网络不通了我才去折腾，实在不行就问别人，今天总算好好的去理解了一下。这篇文章能写出来，最需要感谢的是华叔。</p><h3 id="首先，是对三种模式的理解："><a href="#首先，是对三种模式的理解：" class="headerlink" title="首先，是对三种模式的理解："></a><strong>首先，是对三种模式的理解：</strong></h3><h4 id="1-Bridged（桥接模式）"><a href="#1-Bridged（桥接模式）" class="headerlink" title="1.Bridged（桥接模式）:"></a><strong>1.Bridged（桥接模式）:</strong></h4><blockquote><p>主机&lt;–&gt;主机所在网段&lt;–&gt;虚拟机</p></blockquote><blockquote><p>比如：主机的IP为__192.168.40.230__，也就是__40网段__，那么虚拟机配__192.168.40.26__就可以和主机所在的网段通信，桥接的意思可以理解为主机的网卡直接插在虚拟机上。</p></blockquote><h4 id="2-Host-only"><a href="#2-Host-only" class="headerlink" title="2.Host-only:"></a><strong>2.Host-only:</strong></h4><blockquote><p>主机和虚拟机之间建立自己的通信，需配置成网络在同一网段,两个虚拟机之间配置成Host-only也可以互相通信。</p></blockquote><span id="more"></span><h4 id="3-NAT"><a href="#3-NAT" class="headerlink" title="3.NAT:"></a><strong>3.NAT:</strong></h4><blockquote><p>Used to share the host’Ip address，主机就像是路由器，主机和虚拟机可配置在一个网段，此网段可以不和外网一个网段，只要主机和虚拟机通信上，这样虚拟机就可以访问外网，但是外网无法访问虚拟机。</p></blockquote><h3 id="下来是VMware的Virtual-Network-Editor配置"><a href="#下来是VMware的Virtual-Network-Editor配置" class="headerlink" title="下来是VMware的Virtual Network Editor配置"></a><strong>下来是VMware的Virtual Network Editor配置</strong></h3><h4 id="1-三种类型的大概描述"><a href="#1-三种类型的大概描述" class="headerlink" title="1.三种类型的大概描述:"></a><strong>1.三种类型的大概描述:</strong></h4><p><img src="http://cnhaloimg.wxio.club/20121126/virtual_network_editor.jpg" alt="Virtual Network Editor"></p><p>其中__Bridged__和__NAT__必须有，而且只能是一个。</p><p>这三种可以理解为集线器，当虚拟机里的网卡配置成相应的模式之后，就类似于将虚拟机的网卡插在集线器上了。</p><br><h4 id="2-Bridged"><a href="#2-Bridged" class="headerlink" title="2.Bridged"></a><strong>2.Bridged</strong></h4><p>__Bridged__的__Bridged to__最好不要设置成自动:</p><p><img src="http://cnhaloimg.wxio.club/20121126/bridged_information.jpg" alt="Bridged_to"></p><br><h4 id="3-NAT和Host-only"><a href="#3-NAT和Host-only" class="headerlink" title="3.NAT和Host-only"></a><strong>3.NAT和Host-only</strong></h4><p>__NAT__模式下，需要将虚拟机里的网关设置成__NAT Setting__里的__GatewayIP__：</p><p><img src="http://cnhaloimg.wxio.club/20121126/nat_settings.jpg" alt="Nat_settings"></p><p>__NAT__和__Host-only__选择后，下面的勾选框就成可编辑状态:</p><p><img src="http://cnhaloimg.wxio.club/20121126/nat_host_only_information.jpg" alt="Nat_HostOnly"></p><p>__Subnet IP__配成某个网段后，虚拟机和主机只要在这个网段，在对应的模式下就可以通信了。</p><p>勾选__Connect a host_virtual adapter to this network__后，主机就会出来虚拟网卡:</p><p><img src="http://cnhaloimg.wxio.club/20121126/virtual_interface.jpg" alt="virtual_interface"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习笔记单例模式</title>
      <link href="2019/02/20/2013-02-20-design-patterns-singleton/"/>
      <url>2019/02/20/2013-02-20-design-patterns-singleton/</url>
      
        <content type="html"><![CDATA[<p>最近在看秦小波的__《设计模式之禅》__，虽然这东西只看是没有用的，但是在实际使用之前学习23种模式的概念，还是很重要！</p><h3 id="单例模式类图（这是饿汉式的）"><a href="#单例模式类图（这是饿汉式的）" class="headerlink" title="单例模式类图（这是饿汉式的）"></a>单例模式类图（这是饿汉式的）</h3><p><img src="http://cnhaloimg.wxio.club/designpatterns/singleton_class.jpg" alt="单例模式类图"></p><h3 id="单例模式通用代码（饿汉式）"><a href="#单例模式通用代码（饿汉式）" class="headerlink" title="单例模式通用代码（饿汉式）"></a>单例模式通用代码（饿汉式）</h3><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制产生多个对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过该方法获取实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中其他方法，尽量是static</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式通用代码（懒汉式）"><a href="#单例模式通用代码（懒汉式）" class="headerlink" title="单例模式通用代码（懒汉式）"></a>单例模式通用代码（懒汉式）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">        singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种模式的比较"><a href="#两种模式的比较" class="headerlink" title="两种模式的比较"></a>两种模式的比较</h3><p>饿汉式是线程安全的,在类创建的同时就已经创建好一个静态的对象供系统使用,以后不在改变。懒汉式如果在创建实例对象时不加上synchronized则会导致对对象的访问不是线程安全的，推荐使用第一种。</p><h3 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h3><p>1.由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建，销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就是非常明显。</p><p>2.由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决（在Java EE中采用单例模式时需要注意JVM垃圾回收机制）。</p><p>3.单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</p><p>4.单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。</p><h3 id="单例模式的缺点"><a href="#单例模式的缺点" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h3><p>1.单例模式一般没有接口，扩展和困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。单例模式为什么不能增加接口呢？因为接口对单例模式是没有任何意义的，它要求“自动实例化”,并且提供单一实例、接口或抽象类是不可能被实例化的。当然在特殊情况下，单例模式可以实现接口、被继承等，需要在系统开发中根据环境判断。</p><p>2.单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象。</p><p>3.单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习笔记工厂方法模式</title>
      <link href="2019/02/20/2013-02-20-design-patterns-factory/"/>
      <url>2019/02/20/2013-02-20-design-patterns-factory/</url>
      
        <content type="html"><![CDATA[<p>首先，看一下比较实用的工厂模式的通用源码。</p><h3 id="工厂方法模式通用类图"><a href="#工厂方法模式通用类图" class="headerlink" title="工厂方法模式通用类图"></a>工厂方法模式通用类图</h3><p><img src="http://cnhaloimg.wxio.club/designpatterns/factory_class.jpg" alt="工厂模式类图"></p><h3 id="抽象产品类"><a href="#抽象产品类" class="headerlink" title="抽象产品类"></a>抽象产品类</h3><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="comment">// 产品类的公共方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体产品类"><a href="#具体产品类" class="headerlink" title="具体产品类"></a>具体产品类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂类"><a href="#抽象工厂类" class="headerlink" title="抽象工厂类"></a>抽象工厂类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个产品对象，其输入参数类型可以自行设置</span></span><br><span class="line"><span class="comment"> * 通过为String、Enum、Class等，当然也可以为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体工厂类"><a href="#具体工厂类" class="headerlink" title="具体工厂类"></a>具体工厂类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">Product product = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">product = (Product) Class.forName(c.getName()).newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (T) product;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景类"><a href="#场景类" class="headerlink" title="场景类"></a>场景类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Creator creator = <span class="keyword">new</span> ConcreteCreator();</span><br><span class="line">Product product1 = creator.createProduct(ConcreteProduct1.class);</span><br><span class="line">Product product2 = creator.createProduct(ConcreteProduct2.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 继续业务处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说点关于《追风筝的人》</title>
      <link href="2019/02/19/2015-02-19-runner-of-kite/"/>
      <url>2019/02/19/2015-02-19-runner-of-kite/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在节前（春节）开始看《追风筝的人》，是在kindle手机app上看的，都是在忙里偷闲的情况下看的。</p><p>过节了，终于狠下心给自己买了kindle paper white 2，于是一口气看完了这本书。</p><span id="more"></span><h2 id="《追风筝的人》小说版"><a href="#《追风筝的人》小说版" class="headerlink" title="《追风筝的人》小说版"></a>《追风筝的人》小说版</h2><p>故事的的发展基本办照以下顺序进行：</p><p>友情 - 亲情 - 爱情 - 亲情，阿米尔和哈桑的友情 - 阿米尔和父亲的亲情 - 阿米尔和索拉雅的爱情 - 阿米尔和索拉博的亲情。</p><blockquote><h3 id="阿米尔和哈桑的友情"><a href="#阿米尔和哈桑的友情" class="headerlink" title="阿米尔和哈桑的友情"></a>阿米尔和哈桑的友情</h3></blockquote><p>阿米尔和哈桑是从小一起长大的，喝同一奶水长大的，只是他们之间阿米尔是主人，哈桑是仆人。</p><p>哈桑为了阿米尔可以承担一切惩罚，这一点或许是因为主仆的关系，在那么小的年纪，应该还不具备很深的友谊关系，可能是主仆思想从小就在哈桑的脑海中了，为了主人可上刀山下火海。</p><p>有这么个情节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">哈桑：“阿米尔少爷，我为了你什么都愿意干。”</span><br><span class="line"></span><br><span class="line">阿米尔：“是吗？那你能为了我吃泥土吗？”</span><br><span class="line"></span><br><span class="line">“阿米尔少爷让我吃我一定吃，可是阿米尔少爷不会让我吃的，对吗？”</span><br></pre></td></tr></table></figure><p>哈桑对阿米尔是绝对信任的，但阿米尔却有很多小心机。</p><p>哈桑是个追风筝高手，他总能在其他人之前追到掉下来的风筝，也正是因为这点，使得故事第一个转折点的发生：哈桑被人强暴。也从这里开始，阿米尔和哈桑之间就产生了缝隙，两人之间互相躲避。</p><p>阿米尔的父亲对哈桑很好，甚至像对自己的孩子那样，这让阿米尔心里很不舒服。一句“我们可否换个仆人”使得阿米尔被父亲痛骂一顿。</p><p>阿米尔父亲在他的生日时送给他一只手表，他将这只表藏在哈桑枕头底下，试图冤枉他。他的尝试成功了。阿里决定离开这里，尽管阿米尔的父亲做了挽留，甚至是痛哭流涕，可还是无法打消阿里离开的决心。</p><p>阿米尔和哈桑的角色是绝对的互补，阿米尔懂知识、胆小、心胸狭窄，哈桑不识字、勇敢、无私。两个角色的情节就像是盾与矛的较量，阿米尔用石榴砸哈桑，试图激起他的反抗，但还是没有。</p><p>苏联的入侵，使得两人再也没有相见。</p><blockquote><h3 id="阿米尔和父亲的亲情"><a href="#阿米尔和父亲的亲情" class="headerlink" title="阿米尔和父亲的亲情"></a>阿米尔和父亲的亲情</h3></blockquote><p>阿米尔从小认为父亲不爱自己，认为是因为自己夺走了他父亲的老婆的生命，所以处处想博得父亲对自己的关注，以自己为荣。小说中关于他和父亲的情节描述其实很多，甚至可以说贯穿整篇小学。</p><p>风筝大赛的夺冠，让父亲引以为傲，阿米尔迫切想获得那只战利品–蓝色风筝，哈桑奋力去追，导致了那一幕。</p><p>因为和哈桑的关系变化，再加上父亲对哈桑的“过分”关怀，使得阿米尔想让父亲解雇哈桑他们父子，这让父亲非常愤怒，怒斥阿米尔的无知。在这里，父亲想的和阿米尔想的是完全不一样的，阿米尔想的或许是因为父亲和阿里的兄弟情，而父亲想的却是和哈桑的亲情。</p><p>国内局势的变化，父亲和他从巴基斯坦转移到了美国，之后故事情节才来到父子的“二人世界”。父亲为他的毕业请全酒吧的人喝酒，给他买车，给他提亲，为他安排一切。</p><p>父亲在他面前是非常正面的，修孤儿院，广交朋友，援助别人，在逃至巴基斯坦的路上为妇女反抗俄国人的不轨意图挺身而出（阿米尔甚至以为这是他和父亲的最后一面了）。</p><p>父亲几乎把能给的都给了阿米尔，而相对的，作为私生子的哈桑，却只有在解雇前得到父亲的“基于阿里的兄弟情”的恩惠，这点还让阿米尔非常吃醋，这个对比很鲜明，也是给后面“赎罪”情节做了铺垫。</p><p>写到这，觉得父亲这个角色是起到小说情节里承上启下的作用的。</p><blockquote><h3 id="阿米尔和索拉雅的爱情"><a href="#阿米尔和索拉雅的爱情" class="headerlink" title="阿米尔和索拉雅的爱情"></a>阿米尔和索拉雅的爱情</h3></blockquote><p>(2015年4月2日补充)</p><p>阿米尔和索拉雅在跳蚤市场上认识，同为为了躲避家乡的战乱而到美国的人，她的父亲是一名时刻等待祖国召唤的军人。</p><p>阿米尔对索拉雅是一见钟情的，可以说双方对对方都有好感。或许是基于阿富汗人民对女性的保守看法问题，索拉雅不敢在周围那么多同胞面前表达出对阿米尔的些许好感，而阿米尔一直在创造条件接近她。</p><p>接触的突破点还是阿米尔的写作，阿米尔把自己的作品给索拉雅看，就这么开始了。</p><p>故事发展着，阿米尔让父亲帮忙提亲，阿米尔和索拉雅结婚，但是之后一直为生孩子的问题犯愁，直到确认索拉雅无法生小孩，这促进了第四段情节–阿米尔和索拉博的亲情–的发展。</p><blockquote><h3 id="阿米尔和索拉博的亲情"><a href="#阿米尔和索拉博的亲情" class="headerlink" title="阿米尔和索拉博的亲情"></a>阿米尔和索拉博的亲情</h3></blockquote><h2 id="《追风筝的人》电影版"><a href="#《追风筝的人》电影版" class="headerlink" title="《追风筝的人》电影版"></a>《追风筝的人》电影版</h2><p>看完电影后，感觉像是有点小说情节流水帐，但对比了一下，至少有以下区别：</p><ul><li>兔唇手术的情节没有了，而是随便挑礼物；</li><li>没有他父亲开车送阿里和哈桑离开的情节；</li><li>没有战争在夜晚的第一声枪响，直接是苏联入侵，哗啦啦的士兵坦克大军；</li><li>我党的因素被翻译者去掉了，这或许就是翻译者所谓的符合国情，但不影响小说整体的删减；</li><li>少去了进去油罐车之前的情节“车坏了没有零件”，而换成了“不够钱贿赂军官”，直接换成油罐车；</li><li>索拉博的故事没有在酒店打电话说，而是在路边打打电话告诉他老婆一个故事；</li><li>没有阿米尔在医院住的情节；</li><li>没有费萨尔清真寺的情节，还等着看清真寺的雄伟呢；</li><li>没有索拉博割手腕的情节</li></ul><p>据说这是在新疆拍摄的，或许没有巴基斯坦的费萨尔清真寺也是跟这个有关吧。</p><p>电影最后的胡赛尼出镜还是没逃过我的火眼金睛！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAList不能使用remove()</title>
      <link href="2018/12/07/2013-05-16-list-cannot-remove/"/>
      <url>2018/12/07/2013-05-16-list-cannot-remove/</url>
      
        <content type="html"><![CDATA[<p><strong>List是不能使用remove()的，</strong></p><p>看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String [] a = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(a);</span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>这是会报错的：</p><span id="more"></span><blockquote><p><font color="red">Exception in thread “main” </font>java.lang.UnsupportedOperationException</p></blockquote><blockquote><p><font color="red">at java.util.AbstractList.remove(AbstractList.java:172)</font></p></blockquote><blockquote><p><font color="red">at com.nevol.list.ListTest.main(ListTest.java:27)</font></p></blockquote><p><strong>很明显是不支持的操作！</strong></p><p>查看源码（AbstractList.java:172）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有逻辑，直接抛出__UnsupportedOperationException__</p><p>解决方法，只要将List转成ArrayList就可以了，具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String [] a = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(a);</span><br><span class="line">list = <span class="keyword">new</span> ArrayList&lt;String&gt;(list);</span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL主从同步错误解决</title>
      <link href="2018/11/15/2013-05-16-mysql-slave-1/"/>
      <url>2018/11/15/2013-05-16-mysql-slave-1/</url>
      
        <content type="html"><![CDATA[<p>首先，如果遇到主键冲突：<br><code>Last_SQL_Error: Error &#39;Duplicate entry &#39;1001-164761-0&#39; for key &#39;PRIMARY&#39;&#39; on query. Default database: &#39;bug&#39;. Query: &#39;insert into misdata (uid,mid,pid,state,mtime) values (164761,1001,0,-1,1262623560)&#39;</code> </p><p><strong>A.可以先将冲突的记录删除，然后再进行一下方法：</strong></p><p>进入主库锁表，</p><p>FLUSH TABLES WITH READ LOCK;</p><span id="more"></span><p>mysql&gt;show master status;</p><p>+——————-+———–+————–+——————+</p><p>| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |</p><p>+——————-+———–+————–+——————+</p><p>| ufo.000063 | 159164526 | | |</p><br>+——————-+———–+————–+——————+<p></p><p>1 row in set (0.00 sec)</p><br>进入从库<p></p><p>mysql&gt;slave stop;</p><p>mysql&gt;change master to master_log_file=’ufo.000063’, master_log_pos=159164526;</p><p>完成上面这些后</p><p>mysql&gt;slave start;</p><p>回到主库</p><p>unlock tables; 解锁</p><p>回到从库查看</p><p>show slave status \G;</p><p><strong>B.另外，可以在热备时跳过冲突的记录：</strong></p><p>slave stop;</p><p>set global sql_slave_skip_counter=10;  //跳过10个错误</p><p>slave start;</p><p>show slave status \G;</p><p><strong>C.修改从库的/etc/my.cnf文件</strong></p><p>在[mysqld]下面加入slave-skip-errors = 1062 (忽略所有的1062错误)</p><p>重启下从库的mysql</p><p><strong>D.修改binlog_format的格式为mixed</strong></p><p>进入从库查看show global variables like ‘binlog_format’，如果是statement，修改从库的 my.cfg，在[mysqld]下面添加binlog_format=mixed，然后重启数据库</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> MYSQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Octopress转到Hexo</title>
      <link href="2018/11/01/2014-11-01-octopress-to-hexo/"/>
      <url>2018/11/01/2014-11-01-octopress-to-hexo/</url>
      
        <content type="html"><![CDATA[<p>以前一直使用的Octopress来构建博客，部署在<a href="http://pages.github.com/">github</a>上。最近发现，github访问起来太不稳定了，又慢，所以就准备换个地方来写。</p><p>以前就关注过<a href="http://pages.gitcafe.com/">GitCafe</a>和<a href="http://hexo.io/">Hexo</a>，GitCafe是中国的，来提github对于天朝程序猿来说有先天优势。而使用Hexo来代替Octopress来说，则是因为想尝试一下，他是台湾人写的，算是支持一下华人了，另外他的主题我挺喜欢。</p><span id="more"></span><p>做这件事件，主要有以下步骤：</p><blockquote><ol><li><p>   在GitCafe上创建Page Repository，部署Hexo</p></li><li><p>将Octopress转换成Hexo所支持的内容格式</p></li><li><p>   主题的开发</p></li></ol></blockquote><!-- more --><h2 id="1-创建GitCafe-Pages服务，部署Hexo"><a href="#1-创建GitCafe-Pages服务，部署Hexo" class="headerlink" title="1.    创建GitCafe Pages服务，部署Hexo"></a>1.    创建GitCafe Pages服务，部署Hexo</h2><p>创建GitCafe Pages可以查看官方的<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki">帮助</a>，很详细。</p><p>当然，前提是需要安装git，并且将本地公钥配置到gitcafe上</p><blockquote><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3></blockquote><ul><li>Linux上的安装</li></ul><p>Debain或者Ubuntu</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></code></pre><p>其他版本的Linux则从<a href="http://git-scm.com/download/">官网</a>下载源码，然后通过执行以下三步安装</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;config</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><ul><li>Mac上的安装</li></ul><p>推荐安装<a href="http://brew.sh/">homebrew</a>，然后通过homebrew来安装git</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure></code></pre><ul><li>Windows上的安装</li></ul><p>直接从<a href="http://git-scm.com/download/">官网</a>上下载Windows安装工具，全部默认选项安装完毕</p><blockquote><h3 id="设置git"><a href="#设置git" class="headerlink" title="设置git"></a>设置git</h3></blockquote><p>git安装完毕后，需要通过以下命令进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个名字和email起到了标识作用，但是并不会用来验证真实身份，随便设置都可以，建议还是不要使坏</p><blockquote><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3></blockquote><p>以下是Mac和Linux下的方式，windows的方式待补充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>根据要求输入，一般默认回车就可以了。</p><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><p>复制内容，添加到gitcafe的账户ssh秘钥里。</p><blockquote><h3 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h3></blockquote><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>使用nvm安装Node.js</p><p>安装nvm，可以使用cUrl或者Wget：</p><p>cURL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><h4 id="安装Node-js-1"><a href="#安装Node-js-1" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>可以使用以下命令查看所有版本的Node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><p>然后指定版本进行安装，比如0.11.14：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install 0.11.14</span><br></pre></td></tr></table></figure><p>另外可以使用官网的<a href="http://nodejs.org/">安装工具</a>直接安装。</p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><blockquote><h3 id="将Hexo部署到GitCafe上"><a href="#将Hexo部署到GitCafe上" class="headerlink" title="将Hexo部署到GitCafe上"></a>将Hexo部署到GitCafe上</h3></blockquote><p>// TODO</p><h2 id="2-文章内容转换"><a href="#2-文章内容转换" class="headerlink" title="2.    文章内容转换"></a>2.    文章内容转换</h2><p>Hexo和Octopress生成的markdown配置注释部分（暂且我是这么叫，还不知道专业名词叫什么）有点不太一样</p><p>用Octopress新建一篇文章的配置注释部分是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: &quot;文章标题&quot;</span><br><span class="line">date: 2014-10-28 19:54</span><br><span class="line">comments: true</span><br><span class="line">categories: 分类1 分类2</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而Hexo这部分则为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">title: 文章标题</span><br><span class="line">date: 2014-11-01 19:34:18</span><br><span class="line">tags: 标签1 标签2</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要的区别是：</p><blockquote><p>第一行：Hexo少了—</p><p>comments：Hexo没有这个配置</p><p>categories：Hexo默认没有categories，而是用了tags</p></blockquote><p>我写了一段groovy脚本，来将指定文件夹下的所有octopress文章转成hexo的</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> inputArgs = args.clone()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(inputArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">pringHelp()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查目录是否存在 以及 不能重复</span></span><br><span class="line">inputArgs.each &#123; folderPath -&gt;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">new</span> File(folderPath).exists()) &#123;</span><br><span class="line">println folderPath + <span class="string">&quot; is not exists!&quot;</span></span><br><span class="line">System.exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inputArgs.count(folderPath) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">println <span class="string">&quot;all folders cannot be same!&quot;</span></span><br><span class="line">System.exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">println folderPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// octopress 文章目录</span></span><br><span class="line"><span class="keyword">def</span> octoFolderPath = inputArgs[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 输出路径</span></span><br><span class="line"><span class="keyword">def</span> outputFolderPath = inputArgs[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> mdList = <span class="keyword">new</span> File(octoFolderPath).listFiles(</span><br><span class="line">[<span class="attr">accept:</span>&#123;dir, fileName -&gt; fileName ==~ <span class="string">&quot;^.*\\.(markdown|md)\$&quot;</span> &#125;] <span class="keyword">as</span> FilenameFilter</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mdList.each &#123; file -&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> titleFormat = <span class="string">&quot;&quot;&quot;title: %s</span></span><br><span class="line"><span class="string">date: %s</span></span><br><span class="line"><span class="string">tags: [%s]</span></span><br><span class="line"><span class="string">---&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringBuffer ret = <span class="keyword">new</span> StringBuffer()</span><br><span class="line"><span class="keyword">def</span> newFile = <span class="keyword">new</span> File(outputFolderPath + <span class="string">&quot;/&quot;</span> + file.getName())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> titleMap = [:]</span><br><span class="line"><span class="keyword">def</span> breakCount = <span class="number">0</span></span><br><span class="line">file.withReader &#123; reader -&gt;</span><br><span class="line">reader.eachLine &#123; line -&gt;</span><br><span class="line"><span class="keyword">if</span>(breakCount == <span class="number">2</span>) &#123;</span><br><span class="line">ret.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">ret.append(line)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(breakCount &lt; <span class="number">2</span> &amp;&amp; !line.contains(<span class="string">&quot;---&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span>(line.indexOf(<span class="string">&quot;:&quot;</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">def</span> key = line.substring(<span class="number">0</span>, line.indexOf(<span class="string">&quot;:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (key.equals(<span class="string">&quot;categories&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">def</span> temp = line.substring(line.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>, line.length()).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>).trim().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">titleMap.put(key, String.join(<span class="string">&quot;,&quot;</span>, temp))</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.equals(<span class="string">&quot;title&quot;</span>)) &#123;</span><br><span class="line">titleMap.put(key, line.substring(line.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>, line.length()).replaceAll(<span class="string">&quot;\\[&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;\\]&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">titleMap.put(key, line.substring(line.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>, line.length()).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((breakCount == <span class="number">0</span> || breakCount == <span class="number">1</span>) &amp;&amp; line.equals(<span class="string">&quot;---&quot;</span>)) &#123;</span><br><span class="line">breakCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println titleMap</span><br><span class="line">newFile.write((String.format(titleFormat, titleMap[<span class="string">&quot;title&quot;</span>], titleMap[<span class="string">&quot;date&quot;</span>], titleMap[<span class="string">&quot;categories&quot;</span>])) + ret.toString(), <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> pringHelp() &#123;</span><br><span class="line">print <span class="string">&quot;usage : groovy Octo2Hexo.groovy octoFolderPath outputFolderPath&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就轻松地解决的这个问题。</p><h2 id="3-主题开发"><a href="#3-主题开发" class="headerlink" title="3.    主题开发"></a>3.    主题开发</h2><p>主题我是借鉴了landscape-plus主题和Writing主题，在默认主题下进行修改下，主要加入Jquery的ScrollUp插件，可以回到顶部，加入了一些动画，以及一些细节修改，直到达到符合我的口味：简约而不简单 。。。</p><p>主题总体是白色的，扁平化，响应式。</p><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/henryhuang/oishi.git themes/oishi</span><br></pre></td></tr></table></figure><p><strong>Oishi 需要 Hexo 2.7 及以上版本.</strong></p><ul><li>启用</li></ul><p>修改主题的设置文件<code>_config.yml</code>，把<code>theme</code>的值设置为<code>oshi</code></p><blockquote><p>为什么取名Oishi？因为当时在想名字的时候，旁边有一包上好佳。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跑出第一步</title>
      <link href="2018/05/21/2013-05-21-running/"/>
      <url>2018/05/21/2013-05-21-running/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://www.xiami.com/widget/player-single?uid=0&sid=71131&mode=js"></script><p>生命在于运动。</p><p>夏天到了，是时候运动了，不然穿着也不好看是吧？</p><p>今天和室友们在住处附近的公园跑步。一直想跑步，但是总没时间，或者就没有一起跑的人，或许这就是不跑的理由。跑步是一件考验人的事情，跑一次，两次，这很简单，但是想坚持真不是件容易的事情，所以，找一些人一起跑，这很重要。</p><p>今天迈出第一步，跑完后流汗的感觉很享受，更享受跑完后回到家，吹着阳台的风的感觉。</p><p>上个周六，大学同学来上海玩，算是娱乐了一天，先唱歌，再看电影，那个享受。</p><p>最近看电影很频繁，这次看的是《中国合伙人》，没看前就一直想看看新东方的创业是什么样。这算是个励志电影吧，或许这就是中国以后的励志电影类型，看多了美国的励志电影，换换口味也是不错的。毕竟发生得离我们比较近的故事，我们可以产生共鸣。没错，电影中很多画面让我感慨，让我怀念校园生活。电影里让我最感触的是当beyound的《海阔天空》响起的时候，真的觉得人生就得拼一拼。</p><p>很巧合，看电影的时候，周杰伦正在椅子底下开演唱会。。。</p><p><img src="http://githubimg.wxio.club/20130518mercedes/total.jpg" alt="梅赛德斯奔驰中心" title="梅赛德斯奔驰中心"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 杂事 </tag>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下Eclipse快捷键</title>
      <link href="2018/04/05/2014-04-05-shortcuts-of-eclipse-on-mac/"/>
      <url>2018/04/05/2014-04-05-shortcuts-of-eclipse-on-mac/</url>
      
        <content type="html"><![CDATA[<p>实在是记不住，虽然windows下的和mac下的差不多，但是还是有那么点区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Command + O：显示大纲</span><br><span class="line">Command + 1：快速修复</span><br><span class="line">Command + D：删除当前行</span><br><span class="line">Command + Option + ↓：复制当前行到下一行</span><br><span class="line">Command + Option + ↑：复制当前行到上一行</span><br><span class="line">Option + ↓：当前行和下面一行交互位置</span><br><span class="line">Option + ↑：当前行和上面一行交互位置</span><br><span class="line">Option + ←：前一个编辑的页面</span><br><span class="line">Option + →：下一个编辑的页面</span><br><span class="line">Option + Return：显示当前选择资源的属性</span><br><span class="line">Shift + Return：在当前行的下一行插入空行</span><br><span class="line">Shift + Control + Return：在当前行插入空行</span><br><span class="line">Control + Q：定位到最后编辑的地方</span><br><span class="line">Control + M：最大化当前的Edit或View（再按则最小化）</span><br><span class="line">Control + &#x2F;：注释当前行，再按则取消注释</span><br><span class="line">Command + T：快速显示当前类的继承结构</span><br><span class="line">Command + W：关闭当前Editer</span><br><span class="line">Command + K：参照当前选中的Word快速定位到下一个</span><br><span class="line">Command + E：快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）</span><br><span class="line">Option + &#x2F;：代码助手完成一些代码的插入（俗称“智能提示”）</span><br><span class="line">Command + Shift + E：显示管理当前打开的所有的View的管理器</span><br><span class="line">Command + J：正向增量查找（按下Command + J后，你所输入的每个字母编辑器都提供快速匹配定位到某个单词，如果没有，则在Stutes Line中显示没有找到了）</span><br><span class="line">Command + Shift + J：反向增量查找</span><br><span class="line">Command + Shift + W：关闭所有打开的Editer</span><br><span class="line">Command + Shift + X：把当前选中的文本全部变为大写</span><br><span class="line">Command + Shift + Y：把当前选中的文本全部变为小写</span><br><span class="line">Command + Shift + F：格式化当前代码</span><br><span class="line">Command + Shift + P：定位到对于的匹配符（譬如&#123;&#125;）（从前面定位后面时，光标要在匹配符里面，后面到前面，则反之）</span><br><span class="line">Option + Command + R：重命名（尤其是变量和类的Rename效果比较明显）</span><br><span class="line">Option + Shift + M：抽取方法（这是重构里面最常用的方法之一了，尤其是对一大堆泥团代码有用）</span><br><span class="line">Option + Command + C：修改函数结构（有N个函数调用了这个方法，修改一次就搞定）</span><br><span class="line">Option + Command + L：抽取本地变量（可以直接把一些魔法数字和字符串抽取成一个变量，尤其是多处调用的时候）</span><br><span class="line">Option + Shift + F：把Class中的Local变量变为Field变量（比较实用的功能）</span><br><span class="line">Option + Command + Z：重构的后悔药（Undo）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebJars介绍</title>
      <link href="2018/04/04/2016-04-04-webjars-introduction/"/>
      <url>2018/04/04/2016-04-04-webjars-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是WebJars"><a href="#什么是WebJars" class="headerlink" title="什么是WebJars"></a>什么是WebJars</h2><p>什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><h2 id="为什么使用WebJars"><a href="#为什么使用WebJars" class="headerlink" title="为什么使用WebJars"></a>为什么使用WebJars</h2><p>我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。</p><h2 id="三种风格的WebJars"><a href="#三种风格的WebJars" class="headerlink" title="三种风格的WebJars"></a>三种风格的WebJars</h2><p>官方提供三种风格的WebJars，NPM，Bower，和Classic。</p><h3 id="NPM-WebJars"><a href="#NPM-WebJars" class="headerlink" title="NPM WebJars"></a>NPM WebJars</h3><ul><li>根据镜像即时创建和部署</li><li>任何人都可以请求发布资源包</li><li>使用<a href="https://www.npmjs.com/">NPM</a>的镜像资源，NPM是javascript（主要是nodejs，iojs）的包管理工具</li></ul><h3 id="Bower-WebJars"><a href="#Bower-WebJars" class="headerlink" title="Bower WebJars"></a>Bower WebJars</h3><ul><li>根据镜像即时创建和部署</li><li>任何人都可以请求发布资源包</li><li>使用<a href="http://www.bower.io/">Bower</a>的镜像资源，Bower是前端资源的管理工具</li></ul><h3 id="Classic-WebJars"><a href="#Classic-WebJars" class="headerlink" title="Classic WebJars"></a>Classic WebJars</h3><ul><li>手工打包并且部署</li><li>只由WebJars官方团队发布</li><li>人工创建RequireJS配置文件（RequireJS是一个使浏览器使用javascript模块化的库）</li></ul><p>前两种主要是使用很成熟的前端资源管理工具的仓库资源来创建jar包并且部署，但是任何人都可以发布包，这就造成了有些包的内容不严谨，说不定给你弄点恶意代码你都不知道，而第三种是由官方团队进行发布。</p><p>前两种根据镜像即时发布，可以使资源版本维持在最新状态，而第三种是手工打包的，难免会有延迟。</p><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p><a href="http://www.webjars.org/">http://www.webjars.org/</a></p><p>关于WebJars的使用，可看我这篇<a href="/2016/04/07/webjars-usage-sample/">WebJars使用示例</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
            <tag> webjars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven打jar包内容出错</title>
      <link href="2018/03/29/2016-03-29-maven-build-jar-no-class-file/"/>
      <url>2018/03/29/2016-03-29-maven-build-jar-no-class-file/</url>
      
        <content type="html"><![CDATA[<p>今天在使用maven打包时，发现打的jar包有问题。</p><h2 id="第1种情况－无class文件"><a href="#第1种情况－无class文件" class="headerlink" title="第1种情况－无class文件"></a>第1种情况－无class文件</h2><p>打的jar包没有内容（准确地说是没有class）,猜想应该是maven打包的时候没有compile java源文件到class，从网上找原因，原来maven默认是compile <strong>src/main/java</strong> 下的java文件，而我们目录结构中的源码目录是 <strong>src/<strong>，需要在</strong>pom.xml</strong>里指定源码位置。</p><p>在pom.xml文件的 build &gt; resources 前加入 <sourceDirectory>${basedir}/src</sourceDirectory> ，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打出的jar包内就有class了。</p><h2 id="第2种情况－无资源文件"><a href="#第2种情况－无资源文件" class="headerlink" title="第2种情况－无资源文件"></a>第2种情况－无资源文件</h2><p>启动系统后，界面报错，提示找不到 html 资源文件。</p><p>由于使用的是<a href="http://wicket.apache.org/">Wicket</a>，需要打入Component对应的html文件（这是Wicket的特点），界面提示找不到html文件，查找这个jar包的内容，发现没有html，再次回到 pom.xml 文件查看：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，resources &gt; resource &gt; directory 的内容是 src/main/java，改成 src 后再打的jar包就好了。</p><p>具体原因和第一个问题类似，这里的配置是将 resource （除了class等其他资源）打入jar包，而配置是只将 src/main/java 内的所有资源（除了java文件的文件）打入jar包，实际上我们所希望的是将 src/ 下的打入，改完后如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>pom.xml的上级配置（默认配置）：<a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Super_POM">https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Super_POM</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> wicket </tag>
            
            <tag> jar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebJars使用示例</title>
      <link href="2016/04/07/2016-04-07-webjars-usage-sample/"/>
      <url>2016/04/07/2016-04-07-webjars-usage-sample/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里只介绍Servlet3如何使用WebJars（Classic风格），文章中示例源码地址在<a href="http://https//github.com/henryhuang/webjars-example">https://github.com/henryhuang/webjars-example</a>。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="Servlet类"><a href="#Servlet类" class="headerlink" title="Servlet类"></a>Servlet类</h3><p>首先配置一个Servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletSample</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5041101055869552308L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doPost(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(PrintWriter printWriter = resp.getWriter()) &#123;</span><br><span class="line">printHTML(printWriter, <span class="string">&quot;&lt;script type=&#x27;javascript&#x27; src=&#x27;webjars/jquery/3.0.0-alpha1/jquery.js&#x27;&gt;&lt;/script&gt;&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">printWriter.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printHTML</span><span class="params">(PrintWriter printWriter, String headContent, String bodyContent)</span> </span>&#123;</span><br><span class="line">printWriter.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">printWriter.print(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">printWriter.print(headContent);</span><br><span class="line">printWriter.print(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">printWriter.print(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">printWriter.print(bodyContent);</span><br><span class="line">printWriter.print(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">printWriter.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意 <strong>cnhalo.ServletSample#doPost</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">printHTML(printWriter, <span class="string">&quot;&lt;script type=&#x27;javascript&#x27; src=&#x27;webjars/jquery/3.0.0-alpha1/jquery.js&#x27;&gt;&lt;/script&gt;&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>“webjars/jquery/3.0.0-alpha1/jquery.js”</strong> 是根据jquery的WebJars包里<strong>META-INF/resources</strong>下的路径写的：</p><p><img src="http://77fkdd.com1.z0.glb.clouddn.com/image%2Fpng%2Fwebjars-lib-tree.png" alt="文件结构"></p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>web.xml 里的内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webjars<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cnhalo.ServletSample<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webjars<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webjars<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="自己打包"><a href="#自己打包" class="headerlink" title="自己打包"></a>自己打包</h3><p>示例项目使用Gradle进行构建，需要配置Gradle的环境，然后依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://https://github.com/henryhuang/webjars-example</span><br><span class="line"><span class="built_in">cd</span> webjars-example</span><br><span class="line">gradle war // 生成war包</span><br></pre></td></tr></table></figure><p>gradle会打出war包，进入项目的 build/libs/ 下面，看到 <strong>webjars-1.0.war</strong> 即是，将war包放入tomcat下运行即可。</p><p><strong>注意，代码使用了jdk8。</strong></p><h3 id="使用发布包"><a href="#使用发布包" class="headerlink" title="使用发布包"></a>使用发布包</h3><p>如果不想使用gradle打包，可以使用我已经打好的包<a href="https://github.com/henryhuang/webjars-example/releases/download/1.0/webjars-1.0.war">webjars-1.0.war</a>。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>启动tomcat，访问 <strong><a href="http://localhost:8080/webjars-1.0/webjars">http://localhost:8080/webjars-1.0/webjars</a></strong>，界面显示 <strong>OK</strong>，查看页面源码（使用FireFox，鼠标右键，查看页面源代码，其它浏览器类似）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;webjars/jquery/3.0.0-alpha1/jquery.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    OK</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击 <em>webjars/jquery/3.0.0-alpha1/jquery.js</em> ，可显示 jquery的源码信息，则使用成功！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
            <tag> webjars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式Mediator</title>
      <link href="2015/04/10/2015-04-10-design-patterns-mediator/"/>
      <url>2015/04/10/2015-04-10-design-patterns-mediator/</url>
      
        <content type="html"><![CDATA[<h3 id="Mediator中介者模式定义"><a href="#Mediator中介者模式定义" class="headerlink" title="Mediator中介者模式定义"></a>Mediator中介者模式定义</h3><p>用一个中介对象来封装一系列关于对象交互行为。</p><span id="more"></span><h3 id="为何使用Mediator"><a href="#为何使用Mediator" class="headerlink" title="为何使用Mediator"></a>为何使用Mediator</h3><p>各个对象之间的交互操作非常多;每个对象的行为操作都依赖彼此对方，修改一个对象的行为，同时会涉及到修改很多其他对象的行为，如果使用Mediator模式，可以使各个对象间的耦合松散，只需关心和 Mediator的关系，使多对多的关系变成了一对多的关系，可以降低系统的复杂性，提高可修改扩展性。</p><p>如何使用?</p><p>首先，有一个接口，用来定义成员对象之间的交互联系方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Mediator &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Meiator具体实现，真正实现交互操作的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class ConcreteMediator implements Mediator &#123;</span><br><span class="line"></span><br><span class="line">　　 &#x2F;&#x2F;假设当前有两个成员.</span><br><span class="line">　　 private ConcreteColleague1 colleague1 &#x3D; new ConcreteColleague1(); </span><br><span class="line">　　 private ConcreteColleague2 colleague2 &#x3D; new ConcreteColleague2();</span><br><span class="line"></span><br><span class="line">　　 ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再看看另外一个参与者:成员，因为是交互行为，都需要双方提供一些共同接口，这种要求在Visitor Observer等模式中都是相同的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Colleague &#123;</span><br><span class="line">　　 private Mediator mediator;</span><br><span class="line">　　 public Mediator getMediator() &#123; </span><br><span class="line">　　 　　 return mediator;</span><br><span class="line">　　 &#125;</span><br><span class="line"></span><br><span class="line">　　 public void setMediator( Mediator mediator ) &#123; </span><br><span class="line">　　 　　 this.mediator &#x3D; mediator; </span><br><span class="line">　　 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ConcreteColleague1 &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ConcreteColleague2 &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个成员都必须知道Mediator，并且和 Mediator联系，而不是和其他成员联系。</p><p>至此，Mediator模式框架完成，可以发现Mediator模式规定不是很多，大体框架也比较简单，但实际使用起来就非常灵活。</p><p>Mediator模式在事件驱动类应用中比较多，例如界面设计GUI.;聊天，消息传递等，在聊天应用中，需要有一个MessageMediator，专门负责request/reponse之间任务的调节。</p><p>MVC是J2EE的一个基本模式，View Controller是一种Mediator，它是Jsp和服务器上应用程序间的Mediator。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 中介者 </tag>
            
            <tag> mediator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python配置ini，大小写敏感</title>
      <link href="2013/06/21/2013-06-21-python-ini/"/>
      <url>2013/06/21/2013-06-21-python-ini/</url>
      
        <content type="html"><![CDATA[<pre><code class="python">import ConfigParser, stringclass CaseSensConfigParser(ConfigParser.ConfigParser):    &#39;&#39;&#39;    override    config option&#39;s key case sensitive    &#39;&#39;&#39;    def optionxform(self, optionstr):        return optionstrif __name__ == &#39;__main__&#39;:    kubini = CaseSensConfigParser()    kubini.read(&#39;cfg.ini&#39;)    kubini.set(&#39;SessionName&#39;, &#39;KeyName&#39;, &#39;KeyValue&#39;)    kubini.write(open(&#39;cfg.ini&#39;, &quot;w&quot;)) </code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> ini </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
